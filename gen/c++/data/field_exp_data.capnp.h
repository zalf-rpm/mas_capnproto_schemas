// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: field_exp_data.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <climate.capnp.h>
#include <date.capnp.h>
#include <soil.capnp.h>

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(bfa2d703516408b8);
CAPNP_DECLARE_SCHEMA(86836f1366e5f73f);
CAPNP_DECLARE_SCHEMA(c158bd732092cde5);
CAPNP_DECLARE_SCHEMA(9d795a72a27f67d7);
CAPNP_DECLARE_SCHEMA(ff1381363c7abd06);
CAPNP_DECLARE_SCHEMA(ab7ea2bfa7965af8);
CAPNP_DECLARE_SCHEMA(a7a2210fb1e289f2);
CAPNP_DECLARE_SCHEMA(d1c0bc9f5b332a6e);
CAPNP_DECLARE_SCHEMA(f6b17c769768d8ff);
CAPNP_DECLARE_SCHEMA(97eb30dbcf87911a);
CAPNP_DECLARE_SCHEMA(cf2547b626594655);
CAPNP_DECLARE_SCHEMA(a5df81bae928e6da);
CAPNP_DECLARE_SCHEMA(e82432f4ef15a586);
CAPNP_DECLARE_SCHEMA(b52867725b843050);

}  // namespace schemas
}  // namespace capnp

namespace mas {
namespace schema {
namespace data {

struct WeatherStation {
  WeatherStation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bfa2d703516408b8, 9, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SoilMetadata {
  SoilMetadata() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86836f1366e5f73f, 9, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Field {
  Field() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c158bd732092cde5, 5, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ExperimentDescription {
  ExperimentDescription() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d795a72a27f67d7, 1, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Treatment {
  Treatment() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff1381363c7abd06, 1, 20)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Cultivar {
  Cultivar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab7ea2bfa7965af8, 1, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Plot {
  Plot() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a7a2210fb1e289f2, 1, 9)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct InitialConditionsLayer {
  InitialConditionsLayer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1c0bc9f5b332a6e, 7, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlantingEvent {
  PlantingEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f6b17c769768d8ff, 3, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HarvestEvent {
  HarvestEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(97eb30dbcf87911a, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct IrrigationEvent {
  IrrigationEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf2547b626594655, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerEvent {
  FertilizerEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5df81bae928e6da, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Residue {
  Residue() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e82432f4ef15a586, 5, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EnvironmentModification {
  EnvironmentModification() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b52867725b843050, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class WeatherStation::Reader {
public:
  typedef WeatherStation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasInstituteName() const;
  inline  ::capnp::Text::Reader getInstituteName() const;

  inline bool hasSite() const;
  inline  ::capnp::Text::Reader getSite() const;

  inline bool hasCountry() const;
  inline  ::capnp::Text::Reader getCountry() const;

  inline bool hasLocation2ndLevel() const;
  inline  ::capnp::Text::Reader getLocation2ndLevel() const;

  inline bool hasLocation3rdLevel() const;
  inline  ::capnp::Text::Reader getLocation3rdLevel() const;

  inline double getLatitudeInDecDeg() const;

  inline double getLongitudeInDecDeg() const;

  inline double getElevationM() const;

  inline double getYearlyAvgTempInDegC() const;

  inline double getAmplitudeOfMonthlyAvgTempsInDegC() const;

  inline double getTempSensorHeightInM() const;

  inline double getRefHeightWeatherMeasurementInM() const;

  inline double getRefHeightWindspeedMeasurementInM() const;

  inline double getAnnualCO2ConcentrationInPPM() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WeatherStation::Builder {
public:
  typedef WeatherStation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasInstituteName();
  inline  ::capnp::Text::Builder getInstituteName();
  inline void setInstituteName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initInstituteName(unsigned int size);
  inline void adoptInstituteName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownInstituteName();

  inline bool hasSite();
  inline  ::capnp::Text::Builder getSite();
  inline void setSite( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSite(unsigned int size);
  inline void adoptSite(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSite();

  inline bool hasCountry();
  inline  ::capnp::Text::Builder getCountry();
  inline void setCountry( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCountry(unsigned int size);
  inline void adoptCountry(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCountry();

  inline bool hasLocation2ndLevel();
  inline  ::capnp::Text::Builder getLocation2ndLevel();
  inline void setLocation2ndLevel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLocation2ndLevel(unsigned int size);
  inline void adoptLocation2ndLevel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLocation2ndLevel();

  inline bool hasLocation3rdLevel();
  inline  ::capnp::Text::Builder getLocation3rdLevel();
  inline void setLocation3rdLevel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLocation3rdLevel(unsigned int size);
  inline void adoptLocation3rdLevel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLocation3rdLevel();

  inline double getLatitudeInDecDeg();
  inline void setLatitudeInDecDeg(double value);

  inline double getLongitudeInDecDeg();
  inline void setLongitudeInDecDeg(double value);

  inline double getElevationM();
  inline void setElevationM(double value);

  inline double getYearlyAvgTempInDegC();
  inline void setYearlyAvgTempInDegC(double value);

  inline double getAmplitudeOfMonthlyAvgTempsInDegC();
  inline void setAmplitudeOfMonthlyAvgTempsInDegC(double value);

  inline double getTempSensorHeightInM();
  inline void setTempSensorHeightInM(double value);

  inline double getRefHeightWeatherMeasurementInM();
  inline void setRefHeightWeatherMeasurementInM(double value);

  inline double getRefHeightWindspeedMeasurementInM();
  inline void setRefHeightWindspeedMeasurementInM(double value);

  inline double getAnnualCO2ConcentrationInPPM();
  inline void setAnnualCO2ConcentrationInPPM(double value);

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WeatherStation::Pipeline {
public:
  typedef WeatherStation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SoilMetadata::Reader {
public:
  typedef SoilMetadata Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasSource() const;
  inline  ::capnp::Text::Reader getSource() const;

  inline  ::int16_t getDepthInCM() const;

  inline  ::int16_t getObstableDepthInCM() const;

  inline  ::int16_t getDepthOfTopsoilInCM() const;

  inline double getDrainageRatePerDay() const;

  inline double getRunoffCureNoSCS() const;

  inline double getSoilAvailableWaterContentInCM() const;

  inline double getSurfaceStoneCoverAsFraction() const;

  inline double getSoilAlbedo() const;

  inline double getSoilEvaporationLimitInMM() const;

  inline double getMineralizationFactor() const;

  inline double getSoilFertilityOnFoto() const;

  inline bool hasSoilClassificationSystem() const;
  inline  ::capnp::Text::Reader getSoilClassificationSystem() const;

  inline bool hasSoilTexture() const;
  inline  ::capnp::Text::Reader getSoilTexture() const;

  inline bool hasClassification() const;
  inline  ::capnp::Text::Reader getClassification() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

  inline bool hasProfile() const;
#if !CAPNP_LITE
  inline  ::mas::schema::soil::Profile::Client getProfile() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SoilMetadata::Builder {
public:
  typedef SoilMetadata Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasSource();
  inline  ::capnp::Text::Builder getSource();
  inline void setSource( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSource(unsigned int size);
  inline void adoptSource(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSource();

  inline  ::int16_t getDepthInCM();
  inline void setDepthInCM( ::int16_t value);

  inline  ::int16_t getObstableDepthInCM();
  inline void setObstableDepthInCM( ::int16_t value);

  inline  ::int16_t getDepthOfTopsoilInCM();
  inline void setDepthOfTopsoilInCM( ::int16_t value);

  inline double getDrainageRatePerDay();
  inline void setDrainageRatePerDay(double value);

  inline double getRunoffCureNoSCS();
  inline void setRunoffCureNoSCS(double value);

  inline double getSoilAvailableWaterContentInCM();
  inline void setSoilAvailableWaterContentInCM(double value);

  inline double getSurfaceStoneCoverAsFraction();
  inline void setSurfaceStoneCoverAsFraction(double value);

  inline double getSoilAlbedo();
  inline void setSoilAlbedo(double value);

  inline double getSoilEvaporationLimitInMM();
  inline void setSoilEvaporationLimitInMM(double value);

  inline double getMineralizationFactor();
  inline void setMineralizationFactor(double value);

  inline double getSoilFertilityOnFoto();
  inline void setSoilFertilityOnFoto(double value);

  inline bool hasSoilClassificationSystem();
  inline  ::capnp::Text::Builder getSoilClassificationSystem();
  inline void setSoilClassificationSystem( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSoilClassificationSystem(unsigned int size);
  inline void adoptSoilClassificationSystem(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSoilClassificationSystem();

  inline bool hasSoilTexture();
  inline  ::capnp::Text::Builder getSoilTexture();
  inline void setSoilTexture( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSoilTexture(unsigned int size);
  inline void adoptSoilTexture(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSoilTexture();

  inline bool hasClassification();
  inline  ::capnp::Text::Builder getClassification();
  inline void setClassification( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initClassification(unsigned int size);
  inline void adoptClassification(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownClassification();

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

  inline bool hasProfile();
#if !CAPNP_LITE
  inline  ::mas::schema::soil::Profile::Client getProfile();
  inline void setProfile( ::mas::schema::soil::Profile::Client&& value);
  inline void setProfile( ::mas::schema::soil::Profile::Client& value);
  inline void adoptProfile(::capnp::Orphan< ::mas::schema::soil::Profile>&& value);
  inline ::capnp::Orphan< ::mas::schema::soil::Profile> disownProfile();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SoilMetadata::Pipeline {
public:
  typedef SoilMetadata Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::soil::Profile::Client getProfile();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Field::Reader {
public:
  typedef Field Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline double getLatitudeInDecDeg() const;

  inline double getLongitudeInDecDeg() const;

  inline double getElevationInM() const;

  inline double getSlopeDegreeInDeg() const;

  inline bool hasDrainageType() const;
  inline  ::capnp::Text::Reader getDrainageType() const;

  inline double getDistanceToWeatherStationInKM() const;

  inline bool hasCountry() const;
  inline  ::capnp::Text::Reader getCountry() const;

  inline bool hasSubCountry() const;
  inline  ::capnp::Text::Reader getSubCountry() const;

  inline bool hasSubSubCountry() const;
  inline  ::capnp::Text::Reader getSubSubCountry() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Field::Builder {
public:
  typedef Field Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline double getLatitudeInDecDeg();
  inline void setLatitudeInDecDeg(double value);

  inline double getLongitudeInDecDeg();
  inline void setLongitudeInDecDeg(double value);

  inline double getElevationInM();
  inline void setElevationInM(double value);

  inline double getSlopeDegreeInDeg();
  inline void setSlopeDegreeInDeg(double value);

  inline bool hasDrainageType();
  inline  ::capnp::Text::Builder getDrainageType();
  inline void setDrainageType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDrainageType(unsigned int size);
  inline void adoptDrainageType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDrainageType();

  inline double getDistanceToWeatherStationInKM();
  inline void setDistanceToWeatherStationInKM(double value);

  inline bool hasCountry();
  inline  ::capnp::Text::Builder getCountry();
  inline void setCountry( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCountry(unsigned int size);
  inline void adoptCountry(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCountry();

  inline bool hasSubCountry();
  inline  ::capnp::Text::Builder getSubCountry();
  inline void setSubCountry( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSubCountry(unsigned int size);
  inline void adoptSubCountry(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSubCountry();

  inline bool hasSubSubCountry();
  inline  ::capnp::Text::Builder getSubSubCountry();
  inline void setSubSubCountry( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSubSubCountry(unsigned int size);
  inline void adoptSubSubCountry(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSubSubCountry();

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Field::Pipeline {
public:
  typedef Field Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ExperimentDescription::Reader {
public:
  typedef ExperimentDescription Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasSuiteId() const;
  inline  ::capnp::Text::Reader getSuiteId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasResearchInfrastructureName() const;
  inline  ::capnp::Text::Reader getResearchInfrastructureName() const;

  inline bool hasInstituteName() const;
  inline  ::capnp::Text::Reader getInstituteName() const;

  inline bool hasResearchUnitName() const;
  inline  ::capnp::Text::Reader getResearchUnitName() const;

  inline bool hasExperimentalFacilityName() const;
  inline  ::capnp::Text::Reader getExperimentalFacilityName() const;

  inline bool hasSiteName() const;
  inline  ::capnp::Text::Reader getSiteName() const;

  inline bool hasSiteType() const;
  inline  ::capnp::Text::Reader getSiteType() const;

  inline bool hasMainExperimentFactor() const;
  inline  ::capnp::Text::Reader getMainExperimentFactor() const;

  inline bool hasExperimentalFactorCombinations() const;
  inline  ::capnp::Text::Reader getExperimentalFactorCombinations() const;

  inline bool hasExperimentType() const;
  inline  ::capnp::Text::Reader getExperimentType() const;

  inline bool hasManagementType() const;
  inline  ::capnp::Text::Reader getManagementType() const;

  inline bool hasCroppingSystem() const;
  inline  ::capnp::Text::Reader getCroppingSystem() const;

  inline  ::int16_t getPlantingYear() const;

  inline  ::int16_t getHarvestOperationYear() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

  inline bool hasTreatments() const;
  inline  ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>::Reader getTreatments() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ExperimentDescription::Builder {
public:
  typedef ExperimentDescription Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasSuiteId();
  inline  ::capnp::Text::Builder getSuiteId();
  inline void setSuiteId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSuiteId(unsigned int size);
  inline void adoptSuiteId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSuiteId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasResearchInfrastructureName();
  inline  ::capnp::Text::Builder getResearchInfrastructureName();
  inline void setResearchInfrastructureName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initResearchInfrastructureName(unsigned int size);
  inline void adoptResearchInfrastructureName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownResearchInfrastructureName();

  inline bool hasInstituteName();
  inline  ::capnp::Text::Builder getInstituteName();
  inline void setInstituteName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initInstituteName(unsigned int size);
  inline void adoptInstituteName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownInstituteName();

  inline bool hasResearchUnitName();
  inline  ::capnp::Text::Builder getResearchUnitName();
  inline void setResearchUnitName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initResearchUnitName(unsigned int size);
  inline void adoptResearchUnitName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownResearchUnitName();

  inline bool hasExperimentalFacilityName();
  inline  ::capnp::Text::Builder getExperimentalFacilityName();
  inline void setExperimentalFacilityName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentalFacilityName(unsigned int size);
  inline void adoptExperimentalFacilityName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentalFacilityName();

  inline bool hasSiteName();
  inline  ::capnp::Text::Builder getSiteName();
  inline void setSiteName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSiteName(unsigned int size);
  inline void adoptSiteName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSiteName();

  inline bool hasSiteType();
  inline  ::capnp::Text::Builder getSiteType();
  inline void setSiteType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSiteType(unsigned int size);
  inline void adoptSiteType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSiteType();

  inline bool hasMainExperimentFactor();
  inline  ::capnp::Text::Builder getMainExperimentFactor();
  inline void setMainExperimentFactor( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMainExperimentFactor(unsigned int size);
  inline void adoptMainExperimentFactor(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMainExperimentFactor();

  inline bool hasExperimentalFactorCombinations();
  inline  ::capnp::Text::Builder getExperimentalFactorCombinations();
  inline void setExperimentalFactorCombinations( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentalFactorCombinations(unsigned int size);
  inline void adoptExperimentalFactorCombinations(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentalFactorCombinations();

  inline bool hasExperimentType();
  inline  ::capnp::Text::Builder getExperimentType();
  inline void setExperimentType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentType(unsigned int size);
  inline void adoptExperimentType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentType();

  inline bool hasManagementType();
  inline  ::capnp::Text::Builder getManagementType();
  inline void setManagementType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initManagementType(unsigned int size);
  inline void adoptManagementType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownManagementType();

  inline bool hasCroppingSystem();
  inline  ::capnp::Text::Builder getCroppingSystem();
  inline void setCroppingSystem( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCroppingSystem(unsigned int size);
  inline void adoptCroppingSystem(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCroppingSystem();

  inline  ::int16_t getPlantingYear();
  inline void setPlantingYear( ::int16_t value);

  inline  ::int16_t getHarvestOperationYear();
  inline void setHarvestOperationYear( ::int16_t value);

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

  inline bool hasTreatments();
  inline  ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>::Builder getTreatments();
  inline void setTreatments( ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>::Builder initTreatments(unsigned int size);
  inline void adoptTreatments(::capnp::Orphan< ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>> disownTreatments();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ExperimentDescription::Pipeline {
public:
  typedef ExperimentDescription Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Treatment::Reader {
public:
  typedef Treatment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasField() const;
  inline  ::mas::schema::data::Field::Reader getField() const;

  inline bool hasWeatherStation() const;
  inline  ::mas::schema::data::WeatherStation::Reader getWeatherStation() const;

  inline bool hasWeatherStationTimeseries() const;
#if !CAPNP_LITE
  inline  ::mas::schema::climate::TimeSeries::Client getWeatherStationTimeseries() const;
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasSimulationStartDate() const;
  inline  ::mas::schema::common::Date::Reader getSimulationStartDate() const;

  inline bool hasSimulationEndDate() const;
  inline  ::mas::schema::common::Date::Reader getSimulationEndDate() const;

  inline bool getIrrigationApplied() const;

  inline bool getFertilizerApplied() const;

  inline  ::int8_t getIrrigationLevel() const;

  inline  ::int8_t getFertilizerLevel() const;

  inline  ::int8_t getPlantingDateLevel() const;

  inline  ::int8_t getEnvironmentalModificationsLevel() const;

  inline  ::int8_t getInitialConditionsLevel() const;

  inline  ::int8_t getPlantingDensityLevel() const;

  inline  ::int8_t getNumberOfBlocksOrReplicates() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

  inline bool hasPlots() const;
  inline  ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>::Reader getPlots() const;

  inline bool hasResidue() const;
  inline  ::mas::schema::data::Residue::Reader getResidue() const;

  inline bool hasInitialConditionsLayers() const;
  inline  ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>::Reader getInitialConditionsLayers() const;

  inline bool hasPlantingEvents() const;
  inline  ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>::Reader getPlantingEvents() const;

  inline bool hasHarvestEvents() const;
  inline  ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>::Reader getHarvestEvents() const;

  inline bool hasIrrigationEvents() const;
  inline  ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>::Reader getIrrigationEvents() const;

  inline bool hasFertilizerEvents() const;
  inline  ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>::Reader getFertilizerEvents() const;

  inline bool hasEnvironmentModifications() const;
  inline  ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>::Reader getEnvironmentModifications() const;

  inline bool hasExperimentId() const;
  inline  ::capnp::Text::Reader getExperimentId() const;

  inline bool hasFieldId() const;
  inline  ::capnp::Text::Reader getFieldId() const;

  inline bool hasWeatherStationId() const;
  inline  ::capnp::Text::Reader getWeatherStationId() const;

  inline bool hasWeatherStationDataset() const;
  inline  ::capnp::Text::Reader getWeatherStationDataset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Treatment::Builder {
public:
  typedef Treatment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasField();
  inline  ::mas::schema::data::Field::Builder getField();
  inline void setField( ::mas::schema::data::Field::Reader value);
  inline  ::mas::schema::data::Field::Builder initField();
  inline void adoptField(::capnp::Orphan< ::mas::schema::data::Field>&& value);
  inline ::capnp::Orphan< ::mas::schema::data::Field> disownField();

  inline bool hasWeatherStation();
  inline  ::mas::schema::data::WeatherStation::Builder getWeatherStation();
  inline void setWeatherStation( ::mas::schema::data::WeatherStation::Reader value);
  inline  ::mas::schema::data::WeatherStation::Builder initWeatherStation();
  inline void adoptWeatherStation(::capnp::Orphan< ::mas::schema::data::WeatherStation>&& value);
  inline ::capnp::Orphan< ::mas::schema::data::WeatherStation> disownWeatherStation();

  inline bool hasWeatherStationTimeseries();
#if !CAPNP_LITE
  inline  ::mas::schema::climate::TimeSeries::Client getWeatherStationTimeseries();
  inline void setWeatherStationTimeseries( ::mas::schema::climate::TimeSeries::Client&& value);
  inline void setWeatherStationTimeseries( ::mas::schema::climate::TimeSeries::Client& value);
  inline void adoptWeatherStationTimeseries(::capnp::Orphan< ::mas::schema::climate::TimeSeries>&& value);
  inline ::capnp::Orphan< ::mas::schema::climate::TimeSeries> disownWeatherStationTimeseries();
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasSimulationStartDate();
  inline  ::mas::schema::common::Date::Builder getSimulationStartDate();
  inline void setSimulationStartDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initSimulationStartDate();
  inline void adoptSimulationStartDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownSimulationStartDate();

  inline bool hasSimulationEndDate();
  inline  ::mas::schema::common::Date::Builder getSimulationEndDate();
  inline void setSimulationEndDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initSimulationEndDate();
  inline void adoptSimulationEndDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownSimulationEndDate();

  inline bool getIrrigationApplied();
  inline void setIrrigationApplied(bool value);

  inline bool getFertilizerApplied();
  inline void setFertilizerApplied(bool value);

  inline  ::int8_t getIrrigationLevel();
  inline void setIrrigationLevel( ::int8_t value);

  inline  ::int8_t getFertilizerLevel();
  inline void setFertilizerLevel( ::int8_t value);

  inline  ::int8_t getPlantingDateLevel();
  inline void setPlantingDateLevel( ::int8_t value);

  inline  ::int8_t getEnvironmentalModificationsLevel();
  inline void setEnvironmentalModificationsLevel( ::int8_t value);

  inline  ::int8_t getInitialConditionsLevel();
  inline void setInitialConditionsLevel( ::int8_t value);

  inline  ::int8_t getPlantingDensityLevel();
  inline void setPlantingDensityLevel( ::int8_t value);

  inline  ::int8_t getNumberOfBlocksOrReplicates();
  inline void setNumberOfBlocksOrReplicates( ::int8_t value);

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

  inline bool hasPlots();
  inline  ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>::Builder getPlots();
  inline void setPlots( ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>::Builder initPlots(unsigned int size);
  inline void adoptPlots(::capnp::Orphan< ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>> disownPlots();

  inline bool hasResidue();
  inline  ::mas::schema::data::Residue::Builder getResidue();
  inline void setResidue( ::mas::schema::data::Residue::Reader value);
  inline  ::mas::schema::data::Residue::Builder initResidue();
  inline void adoptResidue(::capnp::Orphan< ::mas::schema::data::Residue>&& value);
  inline ::capnp::Orphan< ::mas::schema::data::Residue> disownResidue();

  inline bool hasInitialConditionsLayers();
  inline  ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>::Builder getInitialConditionsLayers();
  inline void setInitialConditionsLayers( ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>::Builder initInitialConditionsLayers(unsigned int size);
  inline void adoptInitialConditionsLayers(::capnp::Orphan< ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>> disownInitialConditionsLayers();

  inline bool hasPlantingEvents();
  inline  ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>::Builder getPlantingEvents();
  inline void setPlantingEvents( ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>::Builder initPlantingEvents(unsigned int size);
  inline void adoptPlantingEvents(::capnp::Orphan< ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>> disownPlantingEvents();

  inline bool hasHarvestEvents();
  inline  ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>::Builder getHarvestEvents();
  inline void setHarvestEvents( ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>::Builder initHarvestEvents(unsigned int size);
  inline void adoptHarvestEvents(::capnp::Orphan< ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>> disownHarvestEvents();

  inline bool hasIrrigationEvents();
  inline  ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>::Builder getIrrigationEvents();
  inline void setIrrigationEvents( ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>::Builder initIrrigationEvents(unsigned int size);
  inline void adoptIrrigationEvents(::capnp::Orphan< ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>> disownIrrigationEvents();

  inline bool hasFertilizerEvents();
  inline  ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>::Builder getFertilizerEvents();
  inline void setFertilizerEvents( ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>::Builder initFertilizerEvents(unsigned int size);
  inline void adoptFertilizerEvents(::capnp::Orphan< ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>> disownFertilizerEvents();

  inline bool hasEnvironmentModifications();
  inline  ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>::Builder getEnvironmentModifications();
  inline void setEnvironmentModifications( ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>::Builder initEnvironmentModifications(unsigned int size);
  inline void adoptEnvironmentModifications(::capnp::Orphan< ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>> disownEnvironmentModifications();

  inline bool hasExperimentId();
  inline  ::capnp::Text::Builder getExperimentId();
  inline void setExperimentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentId(unsigned int size);
  inline void adoptExperimentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentId();

  inline bool hasFieldId();
  inline  ::capnp::Text::Builder getFieldId();
  inline void setFieldId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFieldId(unsigned int size);
  inline void adoptFieldId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFieldId();

  inline bool hasWeatherStationId();
  inline  ::capnp::Text::Builder getWeatherStationId();
  inline void setWeatherStationId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initWeatherStationId(unsigned int size);
  inline void adoptWeatherStationId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownWeatherStationId();

  inline bool hasWeatherStationDataset();
  inline  ::capnp::Text::Builder getWeatherStationDataset();
  inline void setWeatherStationDataset( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initWeatherStationDataset(unsigned int size);
  inline void adoptWeatherStationDataset(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownWeatherStationDataset();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Treatment::Pipeline {
public:
  typedef Treatment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::data::Field::Pipeline getField();
  inline  ::mas::schema::data::WeatherStation::Pipeline getWeatherStation();
  inline  ::mas::schema::climate::TimeSeries::Client getWeatherStationTimeseries();
  inline  ::mas::schema::common::Date::Pipeline getSimulationStartDate();
  inline  ::mas::schema::common::Date::Pipeline getSimulationEndDate();
  inline  ::mas::schema::data::Residue::Pipeline getResidue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Cultivar::Reader {
public:
  typedef Cultivar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasAccessionId() const;
  inline  ::capnp::Text::Reader getAccessionId() const;

  inline bool hasAccessionLocation() const;
  inline  ::capnp::Text::Reader getAccessionLocation() const;

  inline bool hasCropIdentifierICASA() const;
  inline  ::capnp::Text::Reader getCropIdentifierICASA() const;

  inline bool hasSeedLot() const;
  inline  ::capnp::Text::Reader getSeedLot() const;

  inline bool hasBreedingProgram() const;
  inline  ::capnp::Text::Reader getBreedingProgram() const;

  inline bool hasOriginalName() const;
  inline  ::capnp::Text::Reader getOriginalName() const;

  inline  ::int16_t getReleaseYear() const;

  inline bool hasSynonym() const;
  inline  ::capnp::Text::Reader getSynonym() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Cultivar::Builder {
public:
  typedef Cultivar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasAccessionId();
  inline  ::capnp::Text::Builder getAccessionId();
  inline void setAccessionId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAccessionId(unsigned int size);
  inline void adoptAccessionId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAccessionId();

  inline bool hasAccessionLocation();
  inline  ::capnp::Text::Builder getAccessionLocation();
  inline void setAccessionLocation( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAccessionLocation(unsigned int size);
  inline void adoptAccessionLocation(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAccessionLocation();

  inline bool hasCropIdentifierICASA();
  inline  ::capnp::Text::Builder getCropIdentifierICASA();
  inline void setCropIdentifierICASA( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCropIdentifierICASA(unsigned int size);
  inline void adoptCropIdentifierICASA(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCropIdentifierICASA();

  inline bool hasSeedLot();
  inline  ::capnp::Text::Builder getSeedLot();
  inline void setSeedLot( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSeedLot(unsigned int size);
  inline void adoptSeedLot(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSeedLot();

  inline bool hasBreedingProgram();
  inline  ::capnp::Text::Builder getBreedingProgram();
  inline void setBreedingProgram( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBreedingProgram(unsigned int size);
  inline void adoptBreedingProgram(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBreedingProgram();

  inline bool hasOriginalName();
  inline  ::capnp::Text::Builder getOriginalName();
  inline void setOriginalName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOriginalName(unsigned int size);
  inline void adoptOriginalName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOriginalName();

  inline  ::int16_t getReleaseYear();
  inline void setReleaseYear( ::int16_t value);

  inline bool hasSynonym();
  inline  ::capnp::Text::Builder getSynonym();
  inline void setSynonym( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSynonym(unsigned int size);
  inline void adoptSynonym(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSynonym();

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Cultivar::Pipeline {
public:
  typedef Cultivar Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Plot::Reader {
public:
  typedef Plot Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasCultivar() const;
  inline  ::mas::schema::data::Cultivar::Reader getCultivar() const;

  inline bool hasSoil() const;
  inline  ::mas::schema::data::SoilMetadata::Reader getSoil() const;

  inline  ::int8_t getBlockNumber() const;

  inline  ::int8_t getPlotNumber() const;

  inline  ::int8_t getReplicateNumber() const;

  inline  ::int8_t getRowNumber() const;

  inline  ::int8_t getColumnNumber() const;

  inline bool hasHarvestMethod() const;
  inline  ::capnp::Text::Reader getHarvestMethod() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

  inline bool hasExperimentId() const;
  inline  ::capnp::Text::Reader getExperimentId() const;

  inline bool hasTreatmentId() const;
  inline  ::capnp::Text::Reader getTreatmentId() const;

  inline bool hasCultivarId() const;
  inline  ::capnp::Text::Reader getCultivarId() const;

  inline bool hasSoilId() const;
  inline  ::capnp::Text::Reader getSoilId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Plot::Builder {
public:
  typedef Plot Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasCultivar();
  inline  ::mas::schema::data::Cultivar::Builder getCultivar();
  inline void setCultivar( ::mas::schema::data::Cultivar::Reader value);
  inline  ::mas::schema::data::Cultivar::Builder initCultivar();
  inline void adoptCultivar(::capnp::Orphan< ::mas::schema::data::Cultivar>&& value);
  inline ::capnp::Orphan< ::mas::schema::data::Cultivar> disownCultivar();

  inline bool hasSoil();
  inline  ::mas::schema::data::SoilMetadata::Builder getSoil();
  inline void setSoil( ::mas::schema::data::SoilMetadata::Reader value);
  inline  ::mas::schema::data::SoilMetadata::Builder initSoil();
  inline void adoptSoil(::capnp::Orphan< ::mas::schema::data::SoilMetadata>&& value);
  inline ::capnp::Orphan< ::mas::schema::data::SoilMetadata> disownSoil();

  inline  ::int8_t getBlockNumber();
  inline void setBlockNumber( ::int8_t value);

  inline  ::int8_t getPlotNumber();
  inline void setPlotNumber( ::int8_t value);

  inline  ::int8_t getReplicateNumber();
  inline void setReplicateNumber( ::int8_t value);

  inline  ::int8_t getRowNumber();
  inline void setRowNumber( ::int8_t value);

  inline  ::int8_t getColumnNumber();
  inline void setColumnNumber( ::int8_t value);

  inline bool hasHarvestMethod();
  inline  ::capnp::Text::Builder getHarvestMethod();
  inline void setHarvestMethod( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHarvestMethod(unsigned int size);
  inline void adoptHarvestMethod(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHarvestMethod();

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

  inline bool hasExperimentId();
  inline  ::capnp::Text::Builder getExperimentId();
  inline void setExperimentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentId(unsigned int size);
  inline void adoptExperimentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentId();

  inline bool hasTreatmentId();
  inline  ::capnp::Text::Builder getTreatmentId();
  inline void setTreatmentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTreatmentId(unsigned int size);
  inline void adoptTreatmentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTreatmentId();

  inline bool hasCultivarId();
  inline  ::capnp::Text::Builder getCultivarId();
  inline void setCultivarId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCultivarId(unsigned int size);
  inline void adoptCultivarId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCultivarId();

  inline bool hasSoilId();
  inline  ::capnp::Text::Builder getSoilId();
  inline void setSoilId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSoilId(unsigned int size);
  inline void adoptSoilId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSoilId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Plot::Pipeline {
public:
  typedef Plot Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::data::Cultivar::Pipeline getCultivar();
  inline  ::mas::schema::data::SoilMetadata::Pipeline getSoil();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class InitialConditionsLayer::Reader {
public:
  typedef InitialConditionsLayer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDate() const;
  inline  ::mas::schema::common::Date::Reader getDate() const;

  inline  ::int16_t getSoilLayerTopDepthInCM() const;

  inline  ::int16_t getSoilLayerBaseDepthInCM() const;

  inline double getWaterConcentration() const;

  inline double getTotalNInKGperHA() const;

  inline double getMassNH4InKGperHA() const;

  inline double getMassNO3InKGperHA() const;

  inline double getConcNH4InPPM() const;

  inline double getConcNO3InPPM() const;

  inline bool hasExperimentId() const;
  inline  ::capnp::Text::Reader getExperimentId() const;

  inline bool hasTreatmentId() const;
  inline  ::capnp::Text::Reader getTreatmentId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class InitialConditionsLayer::Builder {
public:
  typedef InitialConditionsLayer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDate();
  inline  ::mas::schema::common::Date::Builder getDate();
  inline void setDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initDate();
  inline void adoptDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownDate();

  inline  ::int16_t getSoilLayerTopDepthInCM();
  inline void setSoilLayerTopDepthInCM( ::int16_t value);

  inline  ::int16_t getSoilLayerBaseDepthInCM();
  inline void setSoilLayerBaseDepthInCM( ::int16_t value);

  inline double getWaterConcentration();
  inline void setWaterConcentration(double value);

  inline double getTotalNInKGperHA();
  inline void setTotalNInKGperHA(double value);

  inline double getMassNH4InKGperHA();
  inline void setMassNH4InKGperHA(double value);

  inline double getMassNO3InKGperHA();
  inline void setMassNO3InKGperHA(double value);

  inline double getConcNH4InPPM();
  inline void setConcNH4InPPM(double value);

  inline double getConcNO3InPPM();
  inline void setConcNO3InPPM(double value);

  inline bool hasExperimentId();
  inline  ::capnp::Text::Builder getExperimentId();
  inline void setExperimentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentId(unsigned int size);
  inline void adoptExperimentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentId();

  inline bool hasTreatmentId();
  inline  ::capnp::Text::Builder getTreatmentId();
  inline void setTreatmentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTreatmentId(unsigned int size);
  inline void adoptTreatmentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTreatmentId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class InitialConditionsLayer::Pipeline {
public:
  typedef InitialConditionsLayer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getDate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlantingEvent::Reader {
public:
  typedef PlantingEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPlantingDistribution() const;
  inline  ::capnp::Text::Reader getPlantingDistribution() const;

  inline double getRowSpacingInCM() const;

  inline double getRowDirectionInArcDeg() const;

  inline  ::int16_t getPlantingDepthInMM() const;

  inline bool hasPlotLayout() const;
  inline  ::capnp::Text::Reader getPlotLayout() const;

  inline bool hasPlantingDate() const;
  inline  ::mas::schema::common::Date::Reader getPlantingDate() const;

  inline  ::int16_t getPlantPopulationAtPlantingInNoPerM2() const;

  inline bool hasAverageEmergenceDate() const;
  inline  ::mas::schema::common::Date::Reader getAverageEmergenceDate() const;

  inline  ::int16_t getAveragePlantPopulationAtEmergenceInNoPerM2() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

  inline bool hasExperimentId() const;
  inline  ::capnp::Text::Reader getExperimentId() const;

  inline bool hasTreatmentId() const;
  inline  ::capnp::Text::Reader getTreatmentId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlantingEvent::Builder {
public:
  typedef PlantingEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPlantingDistribution();
  inline  ::capnp::Text::Builder getPlantingDistribution();
  inline void setPlantingDistribution( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlantingDistribution(unsigned int size);
  inline void adoptPlantingDistribution(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlantingDistribution();

  inline double getRowSpacingInCM();
  inline void setRowSpacingInCM(double value);

  inline double getRowDirectionInArcDeg();
  inline void setRowDirectionInArcDeg(double value);

  inline  ::int16_t getPlantingDepthInMM();
  inline void setPlantingDepthInMM( ::int16_t value);

  inline bool hasPlotLayout();
  inline  ::capnp::Text::Builder getPlotLayout();
  inline void setPlotLayout( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlotLayout(unsigned int size);
  inline void adoptPlotLayout(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlotLayout();

  inline bool hasPlantingDate();
  inline  ::mas::schema::common::Date::Builder getPlantingDate();
  inline void setPlantingDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initPlantingDate();
  inline void adoptPlantingDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownPlantingDate();

  inline  ::int16_t getPlantPopulationAtPlantingInNoPerM2();
  inline void setPlantPopulationAtPlantingInNoPerM2( ::int16_t value);

  inline bool hasAverageEmergenceDate();
  inline  ::mas::schema::common::Date::Builder getAverageEmergenceDate();
  inline void setAverageEmergenceDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initAverageEmergenceDate();
  inline void adoptAverageEmergenceDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownAverageEmergenceDate();

  inline  ::int16_t getAveragePlantPopulationAtEmergenceInNoPerM2();
  inline void setAveragePlantPopulationAtEmergenceInNoPerM2( ::int16_t value);

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

  inline bool hasExperimentId();
  inline  ::capnp::Text::Builder getExperimentId();
  inline void setExperimentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentId(unsigned int size);
  inline void adoptExperimentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentId();

  inline bool hasTreatmentId();
  inline  ::capnp::Text::Builder getTreatmentId();
  inline void setTreatmentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTreatmentId(unsigned int size);
  inline void adoptTreatmentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTreatmentId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlantingEvent::Pipeline {
public:
  typedef PlantingEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getPlantingDate();
  inline  ::mas::schema::common::Date::Pipeline getAverageEmergenceDate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HarvestEvent::Reader {
public:
  typedef HarvestEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDate() const;
  inline  ::mas::schema::common::Date::Reader getDate() const;

  inline bool hasHarvestMethod() const;
  inline  ::capnp::Text::Reader getHarvestMethod() const;

  inline double getHarvestArea() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

  inline bool hasComments() const;
  inline  ::capnp::Text::Reader getComments() const;

  inline bool hasExperimentId() const;
  inline  ::capnp::Text::Reader getExperimentId() const;

  inline bool hasTreatmentId() const;
  inline  ::capnp::Text::Reader getTreatmentId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HarvestEvent::Builder {
public:
  typedef HarvestEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDate();
  inline  ::mas::schema::common::Date::Builder getDate();
  inline void setDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initDate();
  inline void adoptDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownDate();

  inline bool hasHarvestMethod();
  inline  ::capnp::Text::Builder getHarvestMethod();
  inline void setHarvestMethod( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHarvestMethod(unsigned int size);
  inline void adoptHarvestMethod(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHarvestMethod();

  inline double getHarvestArea();
  inline void setHarvestArea(double value);

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

  inline bool hasComments();
  inline  ::capnp::Text::Builder getComments();
  inline void setComments( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initComments(unsigned int size);
  inline void adoptComments(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownComments();

  inline bool hasExperimentId();
  inline  ::capnp::Text::Builder getExperimentId();
  inline void setExperimentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentId(unsigned int size);
  inline void adoptExperimentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentId();

  inline bool hasTreatmentId();
  inline  ::capnp::Text::Builder getTreatmentId();
  inline void setTreatmentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTreatmentId(unsigned int size);
  inline void adoptTreatmentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTreatmentId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HarvestEvent::Pipeline {
public:
  typedef HarvestEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getDate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class IrrigationEvent::Reader {
public:
  typedef IrrigationEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDate() const;
  inline  ::mas::schema::common::Date::Reader getDate() const;

  inline bool hasOperation() const;
  inline  ::capnp::Text::Reader getOperation() const;

  inline  ::int16_t getApplicationDepth() const;

  inline  ::int16_t getAmount() const;

  inline double getWaterNConcentrationInPerc() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

  inline bool hasExperimentId() const;
  inline  ::capnp::Text::Reader getExperimentId() const;

  inline bool hasTreatmentId() const;
  inline  ::capnp::Text::Reader getTreatmentId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class IrrigationEvent::Builder {
public:
  typedef IrrigationEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDate();
  inline  ::mas::schema::common::Date::Builder getDate();
  inline void setDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initDate();
  inline void adoptDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownDate();

  inline bool hasOperation();
  inline  ::capnp::Text::Builder getOperation();
  inline void setOperation( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOperation(unsigned int size);
  inline void adoptOperation(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOperation();

  inline  ::int16_t getApplicationDepth();
  inline void setApplicationDepth( ::int16_t value);

  inline  ::int16_t getAmount();
  inline void setAmount( ::int16_t value);

  inline double getWaterNConcentrationInPerc();
  inline void setWaterNConcentrationInPerc(double value);

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

  inline bool hasExperimentId();
  inline  ::capnp::Text::Builder getExperimentId();
  inline void setExperimentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentId(unsigned int size);
  inline void adoptExperimentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentId();

  inline bool hasTreatmentId();
  inline  ::capnp::Text::Builder getTreatmentId();
  inline void setTreatmentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTreatmentId(unsigned int size);
  inline void adoptTreatmentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTreatmentId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class IrrigationEvent::Pipeline {
public:
  typedef IrrigationEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getDate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerEvent::Reader {
public:
  typedef FertilizerEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDate() const;
  inline  ::mas::schema::common::Date::Reader getDate() const;

  inline bool hasApplicationMethod() const;
  inline  ::capnp::Text::Reader getApplicationMethod() const;

  inline  ::int16_t getApplicationDepthInCM() const;

  inline bool hasMaterial() const;
  inline  ::capnp::Text::Reader getMaterial() const;

  inline  ::int16_t getAppliedNInKGNPerHA() const;

  inline  ::int16_t getAppliedNO3InKGNperHA() const;

  inline  ::int16_t getAppliedNH4InKGNperHA() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

  inline bool hasExperimentId() const;
  inline  ::capnp::Text::Reader getExperimentId() const;

  inline bool hasTreatmentId() const;
  inline  ::capnp::Text::Reader getTreatmentId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerEvent::Builder {
public:
  typedef FertilizerEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDate();
  inline  ::mas::schema::common::Date::Builder getDate();
  inline void setDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initDate();
  inline void adoptDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownDate();

  inline bool hasApplicationMethod();
  inline  ::capnp::Text::Builder getApplicationMethod();
  inline void setApplicationMethod( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initApplicationMethod(unsigned int size);
  inline void adoptApplicationMethod(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownApplicationMethod();

  inline  ::int16_t getApplicationDepthInCM();
  inline void setApplicationDepthInCM( ::int16_t value);

  inline bool hasMaterial();
  inline  ::capnp::Text::Builder getMaterial();
  inline void setMaterial( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMaterial(unsigned int size);
  inline void adoptMaterial(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMaterial();

  inline  ::int16_t getAppliedNInKGNPerHA();
  inline void setAppliedNInKGNPerHA( ::int16_t value);

  inline  ::int16_t getAppliedNO3InKGNperHA();
  inline void setAppliedNO3InKGNperHA( ::int16_t value);

  inline  ::int16_t getAppliedNH4InKGNperHA();
  inline void setAppliedNH4InKGNperHA( ::int16_t value);

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

  inline bool hasExperimentId();
  inline  ::capnp::Text::Builder getExperimentId();
  inline void setExperimentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentId(unsigned int size);
  inline void adoptExperimentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentId();

  inline bool hasTreatmentId();
  inline  ::capnp::Text::Builder getTreatmentId();
  inline void setTreatmentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTreatmentId(unsigned int size);
  inline void adoptTreatmentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTreatmentId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerEvent::Pipeline {
public:
  typedef FertilizerEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getDate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Residue::Reader {
public:
  typedef Residue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasInitialMeasureDate() const;
  inline  ::mas::schema::common::Date::Reader getInitialMeasureDate() const;

  inline  ::int16_t getIncorporationDepth() const;

  inline double getPercentIncorporated() const;

  inline bool hasPrevCropCode() const;
  inline  ::capnp::Text::Reader getPrevCropCode() const;

  inline double getAboveGroundWeight() const;

  inline double getAboveGroundNConcentrationInPerc() const;

  inline double getRootWeightPreviousCrop() const;

  inline bool hasExperimentId() const;
  inline  ::capnp::Text::Reader getExperimentId() const;

  inline bool hasTreatmentId() const;
  inline  ::capnp::Text::Reader getTreatmentId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Residue::Builder {
public:
  typedef Residue Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasInitialMeasureDate();
  inline  ::mas::schema::common::Date::Builder getInitialMeasureDate();
  inline void setInitialMeasureDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initInitialMeasureDate();
  inline void adoptInitialMeasureDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownInitialMeasureDate();

  inline  ::int16_t getIncorporationDepth();
  inline void setIncorporationDepth( ::int16_t value);

  inline double getPercentIncorporated();
  inline void setPercentIncorporated(double value);

  inline bool hasPrevCropCode();
  inline  ::capnp::Text::Builder getPrevCropCode();
  inline void setPrevCropCode( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPrevCropCode(unsigned int size);
  inline void adoptPrevCropCode(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPrevCropCode();

  inline double getAboveGroundWeight();
  inline void setAboveGroundWeight(double value);

  inline double getAboveGroundNConcentrationInPerc();
  inline void setAboveGroundNConcentrationInPerc(double value);

  inline double getRootWeightPreviousCrop();
  inline void setRootWeightPreviousCrop(double value);

  inline bool hasExperimentId();
  inline  ::capnp::Text::Builder getExperimentId();
  inline void setExperimentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentId(unsigned int size);
  inline void adoptExperimentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentId();

  inline bool hasTreatmentId();
  inline  ::capnp::Text::Builder getTreatmentId();
  inline void setTreatmentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTreatmentId(unsigned int size);
  inline void adoptTreatmentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTreatmentId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Residue::Pipeline {
public:
  typedef Residue Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getInitialMeasureDate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EnvironmentModification::Reader {
public:
  typedef EnvironmentModification Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDate() const;
  inline  ::mas::schema::common::Date::Reader getDate() const;

  inline bool hasCodeCO2() const;
  inline  ::capnp::Text::Reader getCodeCO2() const;

  inline  ::int16_t getValueCO2() const;

  inline bool hasNotes() const;
  inline  ::capnp::Text::Reader getNotes() const;

  inline bool hasExperimentId() const;
  inline  ::capnp::Text::Reader getExperimentId() const;

  inline bool hasTreatmentId() const;
  inline  ::capnp::Text::Reader getTreatmentId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EnvironmentModification::Builder {
public:
  typedef EnvironmentModification Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDate();
  inline  ::mas::schema::common::Date::Builder getDate();
  inline void setDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initDate();
  inline void adoptDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownDate();

  inline bool hasCodeCO2();
  inline  ::capnp::Text::Builder getCodeCO2();
  inline void setCodeCO2( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCodeCO2(unsigned int size);
  inline void adoptCodeCO2(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCodeCO2();

  inline  ::int16_t getValueCO2();
  inline void setValueCO2( ::int16_t value);

  inline bool hasNotes();
  inline  ::capnp::Text::Builder getNotes();
  inline void setNotes( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNotes(unsigned int size);
  inline void adoptNotes(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNotes();

  inline bool hasExperimentId();
  inline  ::capnp::Text::Builder getExperimentId();
  inline void setExperimentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initExperimentId(unsigned int size);
  inline void adoptExperimentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownExperimentId();

  inline bool hasTreatmentId();
  inline  ::capnp::Text::Builder getTreatmentId();
  inline void setTreatmentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTreatmentId(unsigned int size);
  inline void adoptTreatmentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTreatmentId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EnvironmentModification::Pipeline {
public:
  typedef EnvironmentModification Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getDate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool WeatherStation::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WeatherStation::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WeatherStation::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WeatherStation::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void WeatherStation::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WeatherStation::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void WeatherStation::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WeatherStation::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool WeatherStation::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool WeatherStation::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WeatherStation::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WeatherStation::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void WeatherStation::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WeatherStation::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void WeatherStation::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WeatherStation::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool WeatherStation::Reader::hasInstituteName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool WeatherStation::Builder::hasInstituteName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WeatherStation::Reader::getInstituteName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WeatherStation::Builder::getInstituteName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void WeatherStation::Builder::setInstituteName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WeatherStation::Builder::initInstituteName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void WeatherStation::Builder::adoptInstituteName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WeatherStation::Builder::disownInstituteName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool WeatherStation::Reader::hasSite() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool WeatherStation::Builder::hasSite() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WeatherStation::Reader::getSite() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WeatherStation::Builder::getSite() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void WeatherStation::Builder::setSite( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WeatherStation::Builder::initSite(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void WeatherStation::Builder::adoptSite(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WeatherStation::Builder::disownSite() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool WeatherStation::Reader::hasCountry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool WeatherStation::Builder::hasCountry() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WeatherStation::Reader::getCountry() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WeatherStation::Builder::getCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void WeatherStation::Builder::setCountry( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WeatherStation::Builder::initCountry(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void WeatherStation::Builder::adoptCountry(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WeatherStation::Builder::disownCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool WeatherStation::Reader::hasLocation2ndLevel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool WeatherStation::Builder::hasLocation2ndLevel() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WeatherStation::Reader::getLocation2ndLevel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WeatherStation::Builder::getLocation2ndLevel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void WeatherStation::Builder::setLocation2ndLevel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WeatherStation::Builder::initLocation2ndLevel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void WeatherStation::Builder::adoptLocation2ndLevel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WeatherStation::Builder::disownLocation2ndLevel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool WeatherStation::Reader::hasLocation3rdLevel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool WeatherStation::Builder::hasLocation3rdLevel() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WeatherStation::Reader::getLocation3rdLevel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WeatherStation::Builder::getLocation3rdLevel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void WeatherStation::Builder::setLocation3rdLevel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WeatherStation::Builder::initLocation3rdLevel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void WeatherStation::Builder::adoptLocation3rdLevel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WeatherStation::Builder::disownLocation3rdLevel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline double WeatherStation::Reader::getLatitudeInDecDeg() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}

inline double WeatherStation::Builder::getLatitudeInDecDeg() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}
inline void WeatherStation::Builder::setLatitudeInDecDeg(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 13890094659566305280ull);
}

inline double WeatherStation::Reader::getLongitudeInDecDeg() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}

inline double WeatherStation::Builder::getLongitudeInDecDeg() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}
inline void WeatherStation::Builder::setLongitudeInDecDeg(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 13890094659566305280ull);
}

inline double WeatherStation::Reader::getElevationM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}

inline double WeatherStation::Builder::getElevationM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}
inline void WeatherStation::Builder::setElevationM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 13890094659566305280ull);
}

inline double WeatherStation::Reader::getYearlyAvgTempInDegC() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}

inline double WeatherStation::Builder::getYearlyAvgTempInDegC() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}
inline void WeatherStation::Builder::setYearlyAvgTempInDegC(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 13890094659566305280ull);
}

inline double WeatherStation::Reader::getAmplitudeOfMonthlyAvgTempsInDegC() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}

inline double WeatherStation::Builder::getAmplitudeOfMonthlyAvgTempsInDegC() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}
inline void WeatherStation::Builder::setAmplitudeOfMonthlyAvgTempsInDegC(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 13890094659566305280ull);
}

inline double WeatherStation::Reader::getTempSensorHeightInM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double WeatherStation::Builder::getTempSensorHeightInM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void WeatherStation::Builder::setTempSensorHeightInM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double WeatherStation::Reader::getRefHeightWeatherMeasurementInM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double WeatherStation::Builder::getRefHeightWeatherMeasurementInM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void WeatherStation::Builder::setRefHeightWeatherMeasurementInM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double WeatherStation::Reader::getRefHeightWindspeedMeasurementInM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double WeatherStation::Builder::getRefHeightWindspeedMeasurementInM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void WeatherStation::Builder::setRefHeightWindspeedMeasurementInM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double WeatherStation::Reader::getAnnualCO2ConcentrationInPPM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double WeatherStation::Builder::getAnnualCO2ConcentrationInPPM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void WeatherStation::Builder::setAnnualCO2ConcentrationInPPM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool WeatherStation::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool WeatherStation::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WeatherStation::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WeatherStation::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void WeatherStation::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WeatherStation::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void WeatherStation::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WeatherStation::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool SoilMetadata::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SoilMetadata::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SoilMetadata::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SoilMetadata::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SoilMetadata::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SoilMetadata::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SoilMetadata::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SoilMetadata::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SoilMetadata::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SoilMetadata::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SoilMetadata::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SoilMetadata::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SoilMetadata::Reader::hasSource() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SoilMetadata::Builder::hasSource() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SoilMetadata::Reader::getSource() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::getSource() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SoilMetadata::Builder::setSource( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::initSource(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void SoilMetadata::Builder::adoptSource(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SoilMetadata::Builder::disownSource() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int16_t SoilMetadata::Reader::getDepthInCM() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t SoilMetadata::Builder::getDepthInCM() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}
inline void SoilMetadata::Builder::setDepthInCM( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int16_t SoilMetadata::Reader::getObstableDepthInCM() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t SoilMetadata::Builder::getObstableDepthInCM() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}
inline void SoilMetadata::Builder::setObstableDepthInCM( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int16_t SoilMetadata::Reader::getDepthOfTopsoilInCM() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t SoilMetadata::Builder::getDepthOfTopsoilInCM() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, -1);
}
inline void SoilMetadata::Builder::setDepthOfTopsoilInCM( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, -1);
}

inline double SoilMetadata::Reader::getDrainageRatePerDay() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilMetadata::Builder::getDrainageRatePerDay() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilMetadata::Builder::setDrainageRatePerDay(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilMetadata::Reader::getRunoffCureNoSCS() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilMetadata::Builder::getRunoffCureNoSCS() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilMetadata::Builder::setRunoffCureNoSCS(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilMetadata::Reader::getSoilAvailableWaterContentInCM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilMetadata::Builder::getSoilAvailableWaterContentInCM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilMetadata::Builder::setSoilAvailableWaterContentInCM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilMetadata::Reader::getSurfaceStoneCoverAsFraction() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilMetadata::Builder::getSurfaceStoneCoverAsFraction() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilMetadata::Builder::setSurfaceStoneCoverAsFraction(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilMetadata::Reader::getSoilAlbedo() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilMetadata::Builder::getSoilAlbedo() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilMetadata::Builder::setSoilAlbedo(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilMetadata::Reader::getSoilEvaporationLimitInMM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilMetadata::Builder::getSoilEvaporationLimitInMM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilMetadata::Builder::setSoilEvaporationLimitInMM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilMetadata::Reader::getMineralizationFactor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilMetadata::Builder::getMineralizationFactor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilMetadata::Builder::setMineralizationFactor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilMetadata::Reader::getSoilFertilityOnFoto() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilMetadata::Builder::getSoilFertilityOnFoto() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilMetadata::Builder::setSoilFertilityOnFoto(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool SoilMetadata::Reader::hasSoilClassificationSystem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SoilMetadata::Builder::hasSoilClassificationSystem() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SoilMetadata::Reader::getSoilClassificationSystem() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::getSoilClassificationSystem() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SoilMetadata::Builder::setSoilClassificationSystem( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::initSoilClassificationSystem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void SoilMetadata::Builder::adoptSoilClassificationSystem(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SoilMetadata::Builder::disownSoilClassificationSystem() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SoilMetadata::Reader::hasSoilTexture() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool SoilMetadata::Builder::hasSoilTexture() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SoilMetadata::Reader::getSoilTexture() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::getSoilTexture() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SoilMetadata::Builder::setSoilTexture( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::initSoilTexture(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void SoilMetadata::Builder::adoptSoilTexture(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SoilMetadata::Builder::disownSoilTexture() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool SoilMetadata::Reader::hasClassification() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool SoilMetadata::Builder::hasClassification() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SoilMetadata::Reader::getClassification() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::getClassification() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void SoilMetadata::Builder::setClassification( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::initClassification(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void SoilMetadata::Builder::adoptClassification(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SoilMetadata::Builder::disownClassification() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool SoilMetadata::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool SoilMetadata::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SoilMetadata::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void SoilMetadata::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SoilMetadata::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void SoilMetadata::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SoilMetadata::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool SoilMetadata::Reader::hasProfile() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool SoilMetadata::Builder::hasProfile() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::mas::schema::soil::Profile::Client SoilMetadata::Reader::getProfile() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::soil::Profile>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::mas::schema::soil::Profile::Client SoilMetadata::Builder::getProfile() {
  return ::capnp::_::PointerHelpers< ::mas::schema::soil::Profile>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::mas::schema::soil::Profile::Client SoilMetadata::Pipeline::getProfile() {
  return  ::mas::schema::soil::Profile::Client(_typeless.getPointerField(7).asCap());
}
inline void SoilMetadata::Builder::setProfile( ::mas::schema::soil::Profile::Client&& cap) {
  ::capnp::_::PointerHelpers< ::mas::schema::soil::Profile>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void SoilMetadata::Builder::setProfile( ::mas::schema::soil::Profile::Client& cap) {
  ::capnp::_::PointerHelpers< ::mas::schema::soil::Profile>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), cap);
}
inline void SoilMetadata::Builder::adoptProfile(
    ::capnp::Orphan< ::mas::schema::soil::Profile>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::soil::Profile>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::soil::Profile> SoilMetadata::Builder::disownProfile() {
  return ::capnp::_::PointerHelpers< ::mas::schema::soil::Profile>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Field::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Field::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Field::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Field::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Field::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Field::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Field::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Field::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Field::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Field::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Field::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Field::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Field::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Field::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Field::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Field::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double Field::Reader::getLatitudeInDecDeg() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}

inline double Field::Builder::getLatitudeInDecDeg() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}
inline void Field::Builder::setLatitudeInDecDeg(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 13890094659566305280ull);
}

inline double Field::Reader::getLongitudeInDecDeg() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}

inline double Field::Builder::getLongitudeInDecDeg() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}
inline void Field::Builder::setLongitudeInDecDeg(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 13890094659566305280ull);
}

inline double Field::Reader::getElevationInM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}

inline double Field::Builder::getElevationInM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}
inline void Field::Builder::setElevationInM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 13890094659566305280ull);
}

inline double Field::Reader::getSlopeDegreeInDeg() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double Field::Builder::getSlopeDegreeInDeg() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void Field::Builder::setSlopeDegreeInDeg(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool Field::Reader::hasDrainageType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Field::Builder::hasDrainageType() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Field::Reader::getDrainageType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Field::Builder::getDrainageType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Field::Builder::setDrainageType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Field::Builder::initDrainageType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Field::Builder::adoptDrainageType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Field::Builder::disownDrainageType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double Field::Reader::getDistanceToWeatherStationInKM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double Field::Builder::getDistanceToWeatherStationInKM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void Field::Builder::setDistanceToWeatherStationInKM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool Field::Reader::hasCountry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Field::Builder::hasCountry() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Field::Reader::getCountry() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Field::Builder::getCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Field::Builder::setCountry( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Field::Builder::initCountry(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Field::Builder::adoptCountry(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Field::Builder::disownCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Field::Reader::hasSubCountry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Field::Builder::hasSubCountry() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Field::Reader::getSubCountry() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Field::Builder::getSubCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Field::Builder::setSubCountry( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Field::Builder::initSubCountry(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Field::Builder::adoptSubCountry(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Field::Builder::disownSubCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Field::Reader::hasSubSubCountry() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Field::Builder::hasSubSubCountry() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Field::Reader::getSubSubCountry() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Field::Builder::getSubSubCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Field::Builder::setSubSubCountry( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Field::Builder::initSubSubCountry(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Field::Builder::adoptSubSubCountry(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Field::Builder::disownSubSubCountry() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Field::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Field::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Field::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Field::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Field::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Field::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Field::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Field::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasSuiteId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasSuiteId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getSuiteId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getSuiteId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setSuiteId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initSuiteId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptSuiteId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownSuiteId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasResearchInfrastructureName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasResearchInfrastructureName() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getResearchInfrastructureName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getResearchInfrastructureName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setResearchInfrastructureName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initResearchInfrastructureName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptResearchInfrastructureName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownResearchInfrastructureName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasInstituteName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasInstituteName() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getInstituteName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getInstituteName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setInstituteName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initInstituteName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptInstituteName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownInstituteName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasResearchUnitName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasResearchUnitName() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getResearchUnitName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getResearchUnitName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setResearchUnitName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initResearchUnitName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptResearchUnitName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownResearchUnitName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasExperimentalFacilityName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasExperimentalFacilityName() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getExperimentalFacilityName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getExperimentalFacilityName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setExperimentalFacilityName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initExperimentalFacilityName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptExperimentalFacilityName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownExperimentalFacilityName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasSiteName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasSiteName() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getSiteName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getSiteName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setSiteName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initSiteName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptSiteName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownSiteName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasSiteType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasSiteType() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getSiteType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getSiteType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setSiteType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initSiteType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptSiteType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownSiteType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasMainExperimentFactor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasMainExperimentFactor() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getMainExperimentFactor() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getMainExperimentFactor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setMainExperimentFactor( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initMainExperimentFactor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptMainExperimentFactor(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownMainExperimentFactor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasExperimentalFactorCombinations() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasExperimentalFactorCombinations() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getExperimentalFactorCombinations() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getExperimentalFactorCombinations() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setExperimentalFactorCombinations( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initExperimentalFactorCombinations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptExperimentalFactorCombinations(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownExperimentalFactorCombinations() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasExperimentType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasExperimentType() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getExperimentType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getExperimentType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setExperimentType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initExperimentType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptExperimentType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownExperimentType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasManagementType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasManagementType() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getManagementType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getManagementType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setManagementType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initManagementType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptManagementType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownManagementType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasCroppingSystem() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasCroppingSystem() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getCroppingSystem() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getCroppingSystem() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setCroppingSystem( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initCroppingSystem(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptCroppingSystem(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownCroppingSystem() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline  ::int16_t ExperimentDescription::Reader::getPlantingYear() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t ExperimentDescription::Builder::getPlantingYear() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}
inline void ExperimentDescription::Builder::setPlantingYear( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int16_t ExperimentDescription::Reader::getHarvestOperationYear() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t ExperimentDescription::Builder::getHarvestOperationYear() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}
inline void ExperimentDescription::Builder::setHarvestOperationYear( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, -1);
}

inline bool ExperimentDescription::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ExperimentDescription::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ExperimentDescription::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ExperimentDescription::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool ExperimentDescription::Reader::hasTreatments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool ExperimentDescription::Builder::hasTreatments() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>::Reader ExperimentDescription::Reader::getTreatments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>::Builder ExperimentDescription::Builder::getTreatments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void ExperimentDescription::Builder::setTreatments( ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>::Builder ExperimentDescription::Builder::initTreatments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void ExperimentDescription::Builder::adoptTreatments(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>> ExperimentDescription::Builder::disownTreatments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Treatment,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Treatment::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Treatment::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Treatment::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Treatment::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::data::Field::Reader Treatment::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Field>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::data::Field::Builder Treatment::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Field>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::data::Field::Pipeline Treatment::Pipeline::getField() {
  return  ::mas::schema::data::Field::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Treatment::Builder::setField( ::mas::schema::data::Field::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::data::Field>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::data::Field::Builder Treatment::Builder::initField() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Field>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::adoptField(
    ::capnp::Orphan< ::mas::schema::data::Field>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::data::Field>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::data::Field> Treatment::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Field>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasWeatherStation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasWeatherStation() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::data::WeatherStation::Reader Treatment::Reader::getWeatherStation() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::WeatherStation>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::mas::schema::data::WeatherStation::Builder Treatment::Builder::getWeatherStation() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::WeatherStation>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::data::WeatherStation::Pipeline Treatment::Pipeline::getWeatherStation() {
  return  ::mas::schema::data::WeatherStation::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Treatment::Builder::setWeatherStation( ::mas::schema::data::WeatherStation::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::data::WeatherStation>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::data::WeatherStation::Builder Treatment::Builder::initWeatherStation() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::WeatherStation>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::adoptWeatherStation(
    ::capnp::Orphan< ::mas::schema::data::WeatherStation>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::data::WeatherStation>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::data::WeatherStation> Treatment::Builder::disownWeatherStation() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::WeatherStation>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasWeatherStationTimeseries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasWeatherStationTimeseries() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::mas::schema::climate::TimeSeries::Client Treatment::Reader::getWeatherStationTimeseries() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::climate::TimeSeries>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::mas::schema::climate::TimeSeries::Client Treatment::Builder::getWeatherStationTimeseries() {
  return ::capnp::_::PointerHelpers< ::mas::schema::climate::TimeSeries>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::mas::schema::climate::TimeSeries::Client Treatment::Pipeline::getWeatherStationTimeseries() {
  return  ::mas::schema::climate::TimeSeries::Client(_typeless.getPointerField(3).asCap());
}
inline void Treatment::Builder::setWeatherStationTimeseries( ::mas::schema::climate::TimeSeries::Client&& cap) {
  ::capnp::_::PointerHelpers< ::mas::schema::climate::TimeSeries>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void Treatment::Builder::setWeatherStationTimeseries( ::mas::schema::climate::TimeSeries::Client& cap) {
  ::capnp::_::PointerHelpers< ::mas::schema::climate::TimeSeries>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), cap);
}
inline void Treatment::Builder::adoptWeatherStationTimeseries(
    ::capnp::Orphan< ::mas::schema::climate::TimeSeries>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::climate::TimeSeries>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::climate::TimeSeries> Treatment::Builder::disownWeatherStationTimeseries() {
  return ::capnp::_::PointerHelpers< ::mas::schema::climate::TimeSeries>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Treatment::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Treatment::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Treatment::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Treatment::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Treatment::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasSimulationStartDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasSimulationStartDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader Treatment::Reader::getSimulationStartDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder Treatment::Builder::getSimulationStartDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline Treatment::Pipeline::getSimulationStartDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Treatment::Builder::setSimulationStartDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder Treatment::Builder::initSimulationStartDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::adoptSimulationStartDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> Treatment::Builder::disownSimulationStartDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasSimulationEndDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasSimulationEndDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader Treatment::Reader::getSimulationEndDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder Treatment::Builder::getSimulationEndDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline Treatment::Pipeline::getSimulationEndDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Treatment::Builder::setSimulationEndDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder Treatment::Builder::initSimulationEndDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::adoptSimulationEndDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> Treatment::Builder::disownSimulationEndDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::getIrrigationApplied() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Treatment::Builder::getIrrigationApplied() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Treatment::Builder::setIrrigationApplied(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Treatment::Reader::getFertilizerApplied() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Treatment::Builder::getFertilizerApplied() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Treatment::Builder::setFertilizerApplied(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Treatment::Reader::getIrrigationLevel() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Treatment::Builder::getIrrigationLevel() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}
inline void Treatment::Builder::setIrrigationLevel( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int8_t Treatment::Reader::getFertilizerLevel() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Treatment::Builder::getFertilizerLevel() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, -1);
}
inline void Treatment::Builder::setFertilizerLevel( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int8_t Treatment::Reader::getPlantingDateLevel() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Treatment::Builder::getPlantingDateLevel() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, -1);
}
inline void Treatment::Builder::setPlantingDateLevel( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int8_t Treatment::Reader::getEnvironmentalModificationsLevel() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Treatment::Builder::getEnvironmentalModificationsLevel() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, -1);
}
inline void Treatment::Builder::setEnvironmentalModificationsLevel( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int8_t Treatment::Reader::getInitialConditionsLevel() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Treatment::Builder::getInitialConditionsLevel() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, -1);
}
inline void Treatment::Builder::setInitialConditionsLevel( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int8_t Treatment::Reader::getPlantingDensityLevel() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Treatment::Builder::getPlantingDensityLevel() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, -1);
}
inline void Treatment::Builder::setPlantingDensityLevel( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int8_t Treatment::Reader::getNumberOfBlocksOrReplicates() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Treatment::Builder::getNumberOfBlocksOrReplicates() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, -1);
}
inline void Treatment::Builder::setNumberOfBlocksOrReplicates( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, -1);
}

inline bool Treatment::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Treatment::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Treatment::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Treatment::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Treatment::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasPlots() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasPlots() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>::Reader Treatment::Reader::getPlots() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::getPlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setPlots( ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::initPlots(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptPlots(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>> Treatment::Builder::disownPlots() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::Plot,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasResidue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasResidue() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::data::Residue::Reader Treatment::Reader::getResidue() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Residue>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::mas::schema::data::Residue::Builder Treatment::Builder::getResidue() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Residue>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::data::Residue::Pipeline Treatment::Pipeline::getResidue() {
  return  ::mas::schema::data::Residue::Pipeline(_typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Treatment::Builder::setResidue( ::mas::schema::data::Residue::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::data::Residue>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::data::Residue::Builder Treatment::Builder::initResidue() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Residue>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::adoptResidue(
    ::capnp::Orphan< ::mas::schema::data::Residue>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::data::Residue>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::data::Residue> Treatment::Builder::disownResidue() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Residue>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasInitialConditionsLayers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasInitialConditionsLayers() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>::Reader Treatment::Reader::getInitialConditionsLayers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::getInitialConditionsLayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setInitialConditionsLayers( ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::initInitialConditionsLayers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptInitialConditionsLayers(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>> Treatment::Builder::disownInitialConditionsLayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::InitialConditionsLayer,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasPlantingEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasPlantingEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>::Reader Treatment::Reader::getPlantingEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::getPlantingEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setPlantingEvents( ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::initPlantingEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptPlantingEvents(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>> Treatment::Builder::disownPlantingEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::PlantingEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasHarvestEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasHarvestEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>::Reader Treatment::Reader::getHarvestEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::getHarvestEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setHarvestEvents( ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::initHarvestEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptHarvestEvents(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>> Treatment::Builder::disownHarvestEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::HarvestEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasIrrigationEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasIrrigationEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>::Reader Treatment::Reader::getIrrigationEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::getIrrigationEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setIrrigationEvents( ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::initIrrigationEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptIrrigationEvents(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>> Treatment::Builder::disownIrrigationEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::IrrigationEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasFertilizerEvents() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasFertilizerEvents() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>::Reader Treatment::Reader::getFertilizerEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::getFertilizerEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setFertilizerEvents( ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::initFertilizerEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptFertilizerEvents(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>> Treatment::Builder::disownFertilizerEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::FertilizerEvent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasEnvironmentModifications() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasEnvironmentModifications() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>::Reader Treatment::Reader::getEnvironmentModifications() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::getEnvironmentModifications() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setEnvironmentModifications( ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>::Builder Treatment::Builder::initEnvironmentModifications(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptEnvironmentModifications(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>> Treatment::Builder::disownEnvironmentModifications() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::data::EnvironmentModification,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasExperimentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasExperimentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Treatment::Reader::getExperimentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Treatment::Builder::getExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setExperimentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Treatment::Builder::initExperimentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptExperimentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Treatment::Builder::disownExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasFieldId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasFieldId() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Treatment::Reader::getFieldId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Treatment::Builder::getFieldId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setFieldId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Treatment::Builder::initFieldId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptFieldId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Treatment::Builder::disownFieldId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasWeatherStationId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasWeatherStationId() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Treatment::Reader::getWeatherStationId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Treatment::Builder::getWeatherStationId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setWeatherStationId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Treatment::Builder::initWeatherStationId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptWeatherStationId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Treatment::Builder::disownWeatherStationId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline bool Treatment::Reader::hasWeatherStationDataset() const {
  return !_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline bool Treatment::Builder::hasWeatherStationDataset() {
  return !_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Treatment::Reader::getWeatherStationDataset() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Treatment::Builder::getWeatherStationDataset() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void Treatment::Builder::setWeatherStationDataset( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Treatment::Builder::initWeatherStationDataset(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), size);
}
inline void Treatment::Builder::adoptWeatherStationDataset(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Treatment::Builder::disownWeatherStationDataset() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool Cultivar::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Cultivar::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Cultivar::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Cultivar::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Cultivar::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Cultivar::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Cultivar::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Cultivar::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Cultivar::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Cultivar::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Cultivar::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Cultivar::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Cultivar::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Cultivar::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Cultivar::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Cultivar::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Cultivar::Reader::hasAccessionId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Cultivar::Builder::hasAccessionId() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Cultivar::Reader::getAccessionId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Cultivar::Builder::getAccessionId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Cultivar::Builder::setAccessionId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Cultivar::Builder::initAccessionId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Cultivar::Builder::adoptAccessionId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Cultivar::Builder::disownAccessionId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Cultivar::Reader::hasAccessionLocation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Cultivar::Builder::hasAccessionLocation() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Cultivar::Reader::getAccessionLocation() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Cultivar::Builder::getAccessionLocation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Cultivar::Builder::setAccessionLocation( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Cultivar::Builder::initAccessionLocation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Cultivar::Builder::adoptAccessionLocation(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Cultivar::Builder::disownAccessionLocation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Cultivar::Reader::hasCropIdentifierICASA() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Cultivar::Builder::hasCropIdentifierICASA() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Cultivar::Reader::getCropIdentifierICASA() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Cultivar::Builder::getCropIdentifierICASA() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Cultivar::Builder::setCropIdentifierICASA( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Cultivar::Builder::initCropIdentifierICASA(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Cultivar::Builder::adoptCropIdentifierICASA(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Cultivar::Builder::disownCropIdentifierICASA() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Cultivar::Reader::hasSeedLot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Cultivar::Builder::hasSeedLot() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Cultivar::Reader::getSeedLot() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Cultivar::Builder::getSeedLot() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Cultivar::Builder::setSeedLot( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Cultivar::Builder::initSeedLot(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Cultivar::Builder::adoptSeedLot(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Cultivar::Builder::disownSeedLot() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Cultivar::Reader::hasBreedingProgram() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Cultivar::Builder::hasBreedingProgram() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Cultivar::Reader::getBreedingProgram() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Cultivar::Builder::getBreedingProgram() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Cultivar::Builder::setBreedingProgram( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Cultivar::Builder::initBreedingProgram(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Cultivar::Builder::adoptBreedingProgram(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Cultivar::Builder::disownBreedingProgram() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Cultivar::Reader::hasOriginalName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Cultivar::Builder::hasOriginalName() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Cultivar::Reader::getOriginalName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Cultivar::Builder::getOriginalName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Cultivar::Builder::setOriginalName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Cultivar::Builder::initOriginalName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Cultivar::Builder::adoptOriginalName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Cultivar::Builder::disownOriginalName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::int16_t Cultivar::Reader::getReleaseYear() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t Cultivar::Builder::getReleaseYear() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}
inline void Cultivar::Builder::setReleaseYear( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1);
}

inline bool Cultivar::Reader::hasSynonym() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Cultivar::Builder::hasSynonym() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Cultivar::Reader::getSynonym() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Cultivar::Builder::getSynonym() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Cultivar::Builder::setSynonym( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Cultivar::Builder::initSynonym(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Cultivar::Builder::adoptSynonym(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Cultivar::Builder::disownSynonym() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Cultivar::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Cultivar::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Cultivar::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Cultivar::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Cultivar::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Cultivar::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Cultivar::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Cultivar::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Plot::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Plot::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Plot::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Plot::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Plot::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Plot::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Plot::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Plot::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Plot::Reader::hasCultivar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Plot::Builder::hasCultivar() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::data::Cultivar::Reader Plot::Reader::getCultivar() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Cultivar>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::data::Cultivar::Builder Plot::Builder::getCultivar() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Cultivar>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::data::Cultivar::Pipeline Plot::Pipeline::getCultivar() {
  return  ::mas::schema::data::Cultivar::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Plot::Builder::setCultivar( ::mas::schema::data::Cultivar::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::data::Cultivar>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::data::Cultivar::Builder Plot::Builder::initCultivar() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Cultivar>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Plot::Builder::adoptCultivar(
    ::capnp::Orphan< ::mas::schema::data::Cultivar>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::data::Cultivar>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::data::Cultivar> Plot::Builder::disownCultivar() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::Cultivar>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Plot::Reader::hasSoil() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Plot::Builder::hasSoil() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::data::SoilMetadata::Reader Plot::Reader::getSoil() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::SoilMetadata>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::mas::schema::data::SoilMetadata::Builder Plot::Builder::getSoil() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::SoilMetadata>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::data::SoilMetadata::Pipeline Plot::Pipeline::getSoil() {
  return  ::mas::schema::data::SoilMetadata::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Plot::Builder::setSoil( ::mas::schema::data::SoilMetadata::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::data::SoilMetadata>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::data::SoilMetadata::Builder Plot::Builder::initSoil() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::SoilMetadata>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Plot::Builder::adoptSoil(
    ::capnp::Orphan< ::mas::schema::data::SoilMetadata>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::data::SoilMetadata>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::data::SoilMetadata> Plot::Builder::disownSoil() {
  return ::capnp::_::PointerHelpers< ::mas::schema::data::SoilMetadata>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int8_t Plot::Reader::getBlockNumber() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Plot::Builder::getBlockNumber() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}
inline void Plot::Builder::setBlockNumber( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int8_t Plot::Reader::getPlotNumber() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Plot::Builder::getPlotNumber() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}
inline void Plot::Builder::setPlotNumber( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int8_t Plot::Reader::getReplicateNumber() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Plot::Builder::getReplicateNumber() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, -1);
}
inline void Plot::Builder::setReplicateNumber( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int8_t Plot::Reader::getRowNumber() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Plot::Builder::getRowNumber() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, -1);
}
inline void Plot::Builder::setRowNumber( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int8_t Plot::Reader::getColumnNumber() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t Plot::Builder::getColumnNumber() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, -1);
}
inline void Plot::Builder::setColumnNumber( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, -1);
}

inline bool Plot::Reader::hasHarvestMethod() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Plot::Builder::hasHarvestMethod() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Plot::Reader::getHarvestMethod() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Plot::Builder::getHarvestMethod() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Plot::Builder::setHarvestMethod( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Plot::Builder::initHarvestMethod(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Plot::Builder::adoptHarvestMethod(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Plot::Builder::disownHarvestMethod() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Plot::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Plot::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Plot::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Plot::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Plot::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Plot::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Plot::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Plot::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Plot::Reader::hasExperimentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Plot::Builder::hasExperimentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Plot::Reader::getExperimentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Plot::Builder::getExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Plot::Builder::setExperimentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Plot::Builder::initExperimentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Plot::Builder::adoptExperimentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Plot::Builder::disownExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Plot::Reader::hasTreatmentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Plot::Builder::hasTreatmentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Plot::Reader::getTreatmentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Plot::Builder::getTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Plot::Builder::setTreatmentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Plot::Builder::initTreatmentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Plot::Builder::adoptTreatmentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Plot::Builder::disownTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Plot::Reader::hasCultivarId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Plot::Builder::hasCultivarId() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Plot::Reader::getCultivarId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Plot::Builder::getCultivarId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Plot::Builder::setCultivarId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Plot::Builder::initCultivarId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void Plot::Builder::adoptCultivarId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Plot::Builder::disownCultivarId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Plot::Reader::hasSoilId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Plot::Builder::hasSoilId() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Plot::Reader::getSoilId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Plot::Builder::getSoilId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Plot::Builder::setSoilId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Plot::Builder::initSoilId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Plot::Builder::adoptSoilId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Plot::Builder::disownSoilId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool InitialConditionsLayer::Reader::hasDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool InitialConditionsLayer::Builder::hasDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader InitialConditionsLayer::Reader::getDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder InitialConditionsLayer::Builder::getDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline InitialConditionsLayer::Pipeline::getDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void InitialConditionsLayer::Builder::setDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder InitialConditionsLayer::Builder::initDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void InitialConditionsLayer::Builder::adoptDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> InitialConditionsLayer::Builder::disownDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t InitialConditionsLayer::Reader::getSoilLayerTopDepthInCM() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t InitialConditionsLayer::Builder::getSoilLayerTopDepthInCM() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}
inline void InitialConditionsLayer::Builder::setSoilLayerTopDepthInCM( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int16_t InitialConditionsLayer::Reader::getSoilLayerBaseDepthInCM() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t InitialConditionsLayer::Builder::getSoilLayerBaseDepthInCM() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}
inline void InitialConditionsLayer::Builder::setSoilLayerBaseDepthInCM( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, -1);
}

inline double InitialConditionsLayer::Reader::getWaterConcentration() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Builder::getWaterConcentration() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void InitialConditionsLayer::Builder::setWaterConcentration(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Reader::getTotalNInKGperHA() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Builder::getTotalNInKGperHA() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void InitialConditionsLayer::Builder::setTotalNInKGperHA(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Reader::getMassNH4InKGperHA() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Builder::getMassNH4InKGperHA() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void InitialConditionsLayer::Builder::setMassNH4InKGperHA(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Reader::getMassNO3InKGperHA() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Builder::getMassNO3InKGperHA() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void InitialConditionsLayer::Builder::setMassNO3InKGperHA(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Reader::getConcNH4InPPM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Builder::getConcNH4InPPM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void InitialConditionsLayer::Builder::setConcNH4InPPM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Reader::getConcNO3InPPM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double InitialConditionsLayer::Builder::getConcNO3InPPM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void InitialConditionsLayer::Builder::setConcNO3InPPM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool InitialConditionsLayer::Reader::hasExperimentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool InitialConditionsLayer::Builder::hasExperimentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitialConditionsLayer::Reader::getExperimentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitialConditionsLayer::Builder::getExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void InitialConditionsLayer::Builder::setExperimentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitialConditionsLayer::Builder::initExperimentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void InitialConditionsLayer::Builder::adoptExperimentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitialConditionsLayer::Builder::disownExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool InitialConditionsLayer::Reader::hasTreatmentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool InitialConditionsLayer::Builder::hasTreatmentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader InitialConditionsLayer::Reader::getTreatmentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder InitialConditionsLayer::Builder::getTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void InitialConditionsLayer::Builder::setTreatmentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder InitialConditionsLayer::Builder::initTreatmentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void InitialConditionsLayer::Builder::adoptTreatmentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> InitialConditionsLayer::Builder::disownTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PlantingEvent::Reader::hasPlantingDistribution() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlantingEvent::Builder::hasPlantingDistribution() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlantingEvent::Reader::getPlantingDistribution() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlantingEvent::Builder::getPlantingDistribution() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlantingEvent::Builder::setPlantingDistribution( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlantingEvent::Builder::initPlantingDistribution(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PlantingEvent::Builder::adoptPlantingDistribution(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlantingEvent::Builder::disownPlantingDistribution() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double PlantingEvent::Reader::getRowSpacingInCM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double PlantingEvent::Builder::getRowSpacingInCM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void PlantingEvent::Builder::setRowSpacingInCM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double PlantingEvent::Reader::getRowDirectionInArcDeg() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}

inline double PlantingEvent::Builder::getRowDirectionInArcDeg() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13890094659566305280ull);
}
inline void PlantingEvent::Builder::setRowDirectionInArcDeg(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 13890094659566305280ull);
}

inline  ::int16_t PlantingEvent::Reader::getPlantingDepthInMM() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t PlantingEvent::Builder::getPlantingDepthInMM() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, -1);
}
inline void PlantingEvent::Builder::setPlantingDepthInMM( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value, -1);
}

inline bool PlantingEvent::Reader::hasPlotLayout() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlantingEvent::Builder::hasPlotLayout() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlantingEvent::Reader::getPlotLayout() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlantingEvent::Builder::getPlotLayout() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlantingEvent::Builder::setPlotLayout( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlantingEvent::Builder::initPlotLayout(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PlantingEvent::Builder::adoptPlotLayout(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlantingEvent::Builder::disownPlotLayout() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlantingEvent::Reader::hasPlantingDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlantingEvent::Builder::hasPlantingDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader PlantingEvent::Reader::getPlantingDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder PlantingEvent::Builder::getPlantingDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline PlantingEvent::Pipeline::getPlantingDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PlantingEvent::Builder::setPlantingDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder PlantingEvent::Builder::initPlantingDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlantingEvent::Builder::adoptPlantingDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> PlantingEvent::Builder::disownPlantingDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int16_t PlantingEvent::Reader::getPlantPopulationAtPlantingInNoPerM2() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t PlantingEvent::Builder::getPlantPopulationAtPlantingInNoPerM2() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, -1);
}
inline void PlantingEvent::Builder::setPlantPopulationAtPlantingInNoPerM2( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value, -1);
}

inline bool PlantingEvent::Reader::hasAverageEmergenceDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PlantingEvent::Builder::hasAverageEmergenceDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader PlantingEvent::Reader::getAverageEmergenceDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder PlantingEvent::Builder::getAverageEmergenceDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline PlantingEvent::Pipeline::getAverageEmergenceDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void PlantingEvent::Builder::setAverageEmergenceDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder PlantingEvent::Builder::initAverageEmergenceDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PlantingEvent::Builder::adoptAverageEmergenceDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> PlantingEvent::Builder::disownAverageEmergenceDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::int16_t PlantingEvent::Reader::getAveragePlantPopulationAtEmergenceInNoPerM2() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t PlantingEvent::Builder::getAveragePlantPopulationAtEmergenceInNoPerM2() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, -1);
}
inline void PlantingEvent::Builder::setAveragePlantPopulationAtEmergenceInNoPerM2( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value, -1);
}

inline bool PlantingEvent::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool PlantingEvent::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlantingEvent::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlantingEvent::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void PlantingEvent::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlantingEvent::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void PlantingEvent::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlantingEvent::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool PlantingEvent::Reader::hasExperimentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool PlantingEvent::Builder::hasExperimentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlantingEvent::Reader::getExperimentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlantingEvent::Builder::getExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void PlantingEvent::Builder::setExperimentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlantingEvent::Builder::initExperimentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void PlantingEvent::Builder::adoptExperimentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlantingEvent::Builder::disownExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool PlantingEvent::Reader::hasTreatmentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool PlantingEvent::Builder::hasTreatmentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlantingEvent::Reader::getTreatmentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlantingEvent::Builder::getTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void PlantingEvent::Builder::setTreatmentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlantingEvent::Builder::initTreatmentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void PlantingEvent::Builder::adoptTreatmentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlantingEvent::Builder::disownTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool HarvestEvent::Reader::hasDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HarvestEvent::Builder::hasDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader HarvestEvent::Reader::getDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder HarvestEvent::Builder::getDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline HarvestEvent::Pipeline::getDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void HarvestEvent::Builder::setDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder HarvestEvent::Builder::initDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HarvestEvent::Builder::adoptDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> HarvestEvent::Builder::disownDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HarvestEvent::Reader::hasHarvestMethod() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HarvestEvent::Builder::hasHarvestMethod() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HarvestEvent::Reader::getHarvestMethod() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HarvestEvent::Builder::getHarvestMethod() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void HarvestEvent::Builder::setHarvestMethod( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HarvestEvent::Builder::initHarvestMethod(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void HarvestEvent::Builder::adoptHarvestMethod(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HarvestEvent::Builder::disownHarvestMethod() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double HarvestEvent::Reader::getHarvestArea() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double HarvestEvent::Builder::getHarvestArea() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void HarvestEvent::Builder::setHarvestArea(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool HarvestEvent::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool HarvestEvent::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HarvestEvent::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HarvestEvent::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void HarvestEvent::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HarvestEvent::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void HarvestEvent::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HarvestEvent::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool HarvestEvent::Reader::hasComments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool HarvestEvent::Builder::hasComments() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HarvestEvent::Reader::getComments() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HarvestEvent::Builder::getComments() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void HarvestEvent::Builder::setComments( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HarvestEvent::Builder::initComments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void HarvestEvent::Builder::adoptComments(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HarvestEvent::Builder::disownComments() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool HarvestEvent::Reader::hasExperimentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool HarvestEvent::Builder::hasExperimentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HarvestEvent::Reader::getExperimentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HarvestEvent::Builder::getExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void HarvestEvent::Builder::setExperimentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HarvestEvent::Builder::initExperimentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void HarvestEvent::Builder::adoptExperimentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HarvestEvent::Builder::disownExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool HarvestEvent::Reader::hasTreatmentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool HarvestEvent::Builder::hasTreatmentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HarvestEvent::Reader::getTreatmentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HarvestEvent::Builder::getTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void HarvestEvent::Builder::setTreatmentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HarvestEvent::Builder::initTreatmentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void HarvestEvent::Builder::adoptTreatmentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HarvestEvent::Builder::disownTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool IrrigationEvent::Reader::hasDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool IrrigationEvent::Builder::hasDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader IrrigationEvent::Reader::getDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder IrrigationEvent::Builder::getDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline IrrigationEvent::Pipeline::getDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void IrrigationEvent::Builder::setDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder IrrigationEvent::Builder::initDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void IrrigationEvent::Builder::adoptDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> IrrigationEvent::Builder::disownDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool IrrigationEvent::Reader::hasOperation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool IrrigationEvent::Builder::hasOperation() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader IrrigationEvent::Reader::getOperation() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder IrrigationEvent::Builder::getOperation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void IrrigationEvent::Builder::setOperation( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder IrrigationEvent::Builder::initOperation(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void IrrigationEvent::Builder::adoptOperation(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> IrrigationEvent::Builder::disownOperation() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t IrrigationEvent::Reader::getApplicationDepth() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -9999);
}

inline  ::int16_t IrrigationEvent::Builder::getApplicationDepth() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -9999);
}
inline void IrrigationEvent::Builder::setApplicationDepth( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -9999);
}

inline  ::int16_t IrrigationEvent::Reader::getAmount() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t IrrigationEvent::Builder::getAmount() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}
inline void IrrigationEvent::Builder::setAmount( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, -1);
}

inline double IrrigationEvent::Reader::getWaterNConcentrationInPerc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double IrrigationEvent::Builder::getWaterNConcentrationInPerc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void IrrigationEvent::Builder::setWaterNConcentrationInPerc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool IrrigationEvent::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool IrrigationEvent::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader IrrigationEvent::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder IrrigationEvent::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void IrrigationEvent::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder IrrigationEvent::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void IrrigationEvent::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> IrrigationEvent::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool IrrigationEvent::Reader::hasExperimentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool IrrigationEvent::Builder::hasExperimentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader IrrigationEvent::Reader::getExperimentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder IrrigationEvent::Builder::getExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void IrrigationEvent::Builder::setExperimentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder IrrigationEvent::Builder::initExperimentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void IrrigationEvent::Builder::adoptExperimentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> IrrigationEvent::Builder::disownExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool IrrigationEvent::Reader::hasTreatmentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool IrrigationEvent::Builder::hasTreatmentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader IrrigationEvent::Reader::getTreatmentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder IrrigationEvent::Builder::getTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void IrrigationEvent::Builder::setTreatmentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder IrrigationEvent::Builder::initTreatmentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void IrrigationEvent::Builder::adoptTreatmentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> IrrigationEvent::Builder::disownTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool FertilizerEvent::Reader::hasDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerEvent::Builder::hasDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader FertilizerEvent::Reader::getDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder FertilizerEvent::Builder::getDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline FertilizerEvent::Pipeline::getDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FertilizerEvent::Builder::setDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder FertilizerEvent::Builder::initDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FertilizerEvent::Builder::adoptDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> FertilizerEvent::Builder::disownDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FertilizerEvent::Reader::hasApplicationMethod() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerEvent::Builder::hasApplicationMethod() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FertilizerEvent::Reader::getApplicationMethod() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FertilizerEvent::Builder::getApplicationMethod() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FertilizerEvent::Builder::setApplicationMethod( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FertilizerEvent::Builder::initApplicationMethod(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FertilizerEvent::Builder::adoptApplicationMethod(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FertilizerEvent::Builder::disownApplicationMethod() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t FertilizerEvent::Reader::getApplicationDepthInCM() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t FertilizerEvent::Builder::getApplicationDepthInCM() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}
inline void FertilizerEvent::Builder::setApplicationDepthInCM( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1);
}

inline bool FertilizerEvent::Reader::hasMaterial() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerEvent::Builder::hasMaterial() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FertilizerEvent::Reader::getMaterial() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FertilizerEvent::Builder::getMaterial() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FertilizerEvent::Builder::setMaterial( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FertilizerEvent::Builder::initMaterial(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void FertilizerEvent::Builder::adoptMaterial(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FertilizerEvent::Builder::disownMaterial() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int16_t FertilizerEvent::Reader::getAppliedNInKGNPerHA() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t FertilizerEvent::Builder::getAppliedNInKGNPerHA() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}
inline void FertilizerEvent::Builder::setAppliedNInKGNPerHA( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int16_t FertilizerEvent::Reader::getAppliedNO3InKGNperHA() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t FertilizerEvent::Builder::getAppliedNO3InKGNperHA() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, -1);
}
inline void FertilizerEvent::Builder::setAppliedNO3InKGNperHA( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, -1);
}

inline  ::int16_t FertilizerEvent::Reader::getAppliedNH4InKGNperHA() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t FertilizerEvent::Builder::getAppliedNH4InKGNperHA() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, -1);
}
inline void FertilizerEvent::Builder::setAppliedNH4InKGNperHA( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, -1);
}

inline bool FertilizerEvent::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerEvent::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FertilizerEvent::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FertilizerEvent::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FertilizerEvent::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FertilizerEvent::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void FertilizerEvent::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FertilizerEvent::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FertilizerEvent::Reader::hasExperimentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerEvent::Builder::hasExperimentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FertilizerEvent::Reader::getExperimentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FertilizerEvent::Builder::getExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void FertilizerEvent::Builder::setExperimentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FertilizerEvent::Builder::initExperimentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void FertilizerEvent::Builder::adoptExperimentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FertilizerEvent::Builder::disownExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool FertilizerEvent::Reader::hasTreatmentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerEvent::Builder::hasTreatmentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FertilizerEvent::Reader::getTreatmentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FertilizerEvent::Builder::getTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void FertilizerEvent::Builder::setTreatmentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FertilizerEvent::Builder::initTreatmentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void FertilizerEvent::Builder::adoptTreatmentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FertilizerEvent::Builder::disownTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Residue::Reader::hasInitialMeasureDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Residue::Builder::hasInitialMeasureDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader Residue::Reader::getInitialMeasureDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder Residue::Builder::getInitialMeasureDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline Residue::Pipeline::getInitialMeasureDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Residue::Builder::setInitialMeasureDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder Residue::Builder::initInitialMeasureDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Residue::Builder::adoptInitialMeasureDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> Residue::Builder::disownInitialMeasureDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t Residue::Reader::getIncorporationDepth() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t Residue::Builder::getIncorporationDepth() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}
inline void Residue::Builder::setIncorporationDepth( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1);
}

inline double Residue::Reader::getPercentIncorporated() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double Residue::Builder::getPercentIncorporated() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void Residue::Builder::setPercentIncorporated(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool Residue::Reader::hasPrevCropCode() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Residue::Builder::hasPrevCropCode() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Residue::Reader::getPrevCropCode() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Residue::Builder::getPrevCropCode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Residue::Builder::setPrevCropCode( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Residue::Builder::initPrevCropCode(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Residue::Builder::adoptPrevCropCode(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Residue::Builder::disownPrevCropCode() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double Residue::Reader::getAboveGroundWeight() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double Residue::Builder::getAboveGroundWeight() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void Residue::Builder::setAboveGroundWeight(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double Residue::Reader::getAboveGroundNConcentrationInPerc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double Residue::Builder::getAboveGroundNConcentrationInPerc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void Residue::Builder::setAboveGroundNConcentrationInPerc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double Residue::Reader::getRootWeightPreviousCrop() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double Residue::Builder::getRootWeightPreviousCrop() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void Residue::Builder::setRootWeightPreviousCrop(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool Residue::Reader::hasExperimentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Residue::Builder::hasExperimentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Residue::Reader::getExperimentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Residue::Builder::getExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Residue::Builder::setExperimentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Residue::Builder::initExperimentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Residue::Builder::adoptExperimentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Residue::Builder::disownExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Residue::Reader::hasTreatmentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Residue::Builder::hasTreatmentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Residue::Reader::getTreatmentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Residue::Builder::getTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Residue::Builder::setTreatmentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Residue::Builder::initTreatmentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Residue::Builder::adoptTreatmentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Residue::Builder::disownTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool EnvironmentModification::Reader::hasDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EnvironmentModification::Builder::hasDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader EnvironmentModification::Reader::getDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder EnvironmentModification::Builder::getDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline EnvironmentModification::Pipeline::getDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EnvironmentModification::Builder::setDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder EnvironmentModification::Builder::initDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EnvironmentModification::Builder::adoptDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> EnvironmentModification::Builder::disownDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool EnvironmentModification::Reader::hasCodeCO2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool EnvironmentModification::Builder::hasCodeCO2() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EnvironmentModification::Reader::getCodeCO2() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EnvironmentModification::Builder::getCodeCO2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void EnvironmentModification::Builder::setCodeCO2( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EnvironmentModification::Builder::initCodeCO2(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void EnvironmentModification::Builder::adoptCodeCO2(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EnvironmentModification::Builder::disownCodeCO2() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t EnvironmentModification::Reader::getValueCO2() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t EnvironmentModification::Builder::getValueCO2() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1);
}
inline void EnvironmentModification::Builder::setValueCO2( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1);
}

inline bool EnvironmentModification::Reader::hasNotes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool EnvironmentModification::Builder::hasNotes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EnvironmentModification::Reader::getNotes() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EnvironmentModification::Builder::getNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void EnvironmentModification::Builder::setNotes( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EnvironmentModification::Builder::initNotes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void EnvironmentModification::Builder::adoptNotes(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EnvironmentModification::Builder::disownNotes() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool EnvironmentModification::Reader::hasExperimentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool EnvironmentModification::Builder::hasExperimentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EnvironmentModification::Reader::getExperimentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EnvironmentModification::Builder::getExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void EnvironmentModification::Builder::setExperimentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EnvironmentModification::Builder::initExperimentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void EnvironmentModification::Builder::adoptExperimentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EnvironmentModification::Builder::disownExperimentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool EnvironmentModification::Reader::hasTreatmentId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool EnvironmentModification::Builder::hasTreatmentId() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader EnvironmentModification::Reader::getTreatmentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder EnvironmentModification::Builder::getTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void EnvironmentModification::Builder::setTreatmentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder EnvironmentModification::Builder::initTreatmentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void EnvironmentModification::Builder::adoptTreatmentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> EnvironmentModification::Builder::disownTreatmentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

