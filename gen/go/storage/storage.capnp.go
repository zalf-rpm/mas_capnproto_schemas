// Code generated by capnpc-go. DO NOT EDIT.

package storage

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type Store capnp.Client

// Store_TypeID is the unique identifier for the type Store.
const Store_TypeID = 0xe69f958aa2386f06

func (c Store) NewContainer(ctx context.Context, params func(Store_newContainer_Params) error) (Store_newContainer_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe69f958aa2386f06,
			MethodID:      0,
			InterfaceName: "storage.capnp:Store",
			MethodName:    "newContainer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_newContainer_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_newContainer_Results_Future{Future: ans.Future()}, release

}

func (c Store) ContainerWithId(ctx context.Context, params func(Store_containerWithId_Params) error) (Store_containerWithId_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe69f958aa2386f06,
			MethodID:      1,
			InterfaceName: "storage.capnp:Store",
			MethodName:    "containerWithId",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_containerWithId_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_containerWithId_Results_Future{Future: ans.Future()}, release

}

func (c Store) ListContainers(ctx context.Context, params func(Store_listContainers_Params) error) (Store_listContainers_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe69f958aa2386f06,
			MethodID:      2,
			InterfaceName: "storage.capnp:Store",
			MethodName:    "listContainers",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_listContainers_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_listContainers_Results_Future{Future: ans.Future()}, release

}

func (c Store) RemoveContainer(ctx context.Context, params func(Store_removeContainer_Params) error) (Store_removeContainer_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe69f958aa2386f06,
			MethodID:      3,
			InterfaceName: "storage.capnp:Store",
			MethodName:    "removeContainer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_removeContainer_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_removeContainer_Results_Future{Future: ans.Future()}, release

}

func (c Store) ImportContainer(ctx context.Context, params func(Store_importContainer_Params) error) (Store_importContainer_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe69f958aa2386f06,
			MethodID:      4,
			InterfaceName: "storage.capnp:Store",
			MethodName:    "importContainer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_importContainer_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_importContainer_Results_Future{Future: ans.Future()}, release

}

func (c Store) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Store) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Store) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Store) String() string {
	return "Store(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Store) AddRef() Store {
	return Store(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Store) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Store) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Store) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Store) DecodeFromPtr(p capnp.Ptr) Store {
	return Store(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Store) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Store) IsSame(other Store) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Store) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Store) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Store_Server is a Store with a local implementation.
type Store_Server interface {
	NewContainer(context.Context, Store_newContainer) error

	ContainerWithId(context.Context, Store_containerWithId) error

	ListContainers(context.Context, Store_listContainers) error

	RemoveContainer(context.Context, Store_removeContainer) error

	ImportContainer(context.Context, Store_importContainer) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Store_NewServer creates a new Server from an implementation of Store_Server.
func Store_NewServer(s Store_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Store_Methods(nil, s), s, c)
}

// Store_ServerToClient creates a new Client from an implementation of Store_Server.
// The caller is responsible for calling Release on the returned Client.
func Store_ServerToClient(s Store_Server) Store {
	return Store(capnp.NewClient(Store_NewServer(s)))
}

// Store_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Store_Methods(methods []server.Method, s Store_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe69f958aa2386f06,
			MethodID:      0,
			InterfaceName: "storage.capnp:Store",
			MethodName:    "newContainer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewContainer(ctx, Store_newContainer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe69f958aa2386f06,
			MethodID:      1,
			InterfaceName: "storage.capnp:Store",
			MethodName:    "containerWithId",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ContainerWithId(ctx, Store_containerWithId{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe69f958aa2386f06,
			MethodID:      2,
			InterfaceName: "storage.capnp:Store",
			MethodName:    "listContainers",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListContainers(ctx, Store_listContainers{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe69f958aa2386f06,
			MethodID:      3,
			InterfaceName: "storage.capnp:Store",
			MethodName:    "removeContainer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveContainer(ctx, Store_removeContainer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe69f958aa2386f06,
			MethodID:      4,
			InterfaceName: "storage.capnp:Store",
			MethodName:    "importContainer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ImportContainer(ctx, Store_importContainer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Store_newContainer holds the state for a server call to Store.newContainer.
// See server.Call for documentation.
type Store_newContainer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_newContainer) Args() Store_newContainer_Params {
	return Store_newContainer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_newContainer) AllocResults() (Store_newContainer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_newContainer_Results(r), err
}

// Store_containerWithId holds the state for a server call to Store.containerWithId.
// See server.Call for documentation.
type Store_containerWithId struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_containerWithId) Args() Store_containerWithId_Params {
	return Store_containerWithId_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_containerWithId) AllocResults() (Store_containerWithId_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_containerWithId_Results(r), err
}

// Store_listContainers holds the state for a server call to Store.listContainers.
// See server.Call for documentation.
type Store_listContainers struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_listContainers) Args() Store_listContainers_Params {
	return Store_listContainers_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_listContainers) AllocResults() (Store_listContainers_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_listContainers_Results(r), err
}

// Store_removeContainer holds the state for a server call to Store.removeContainer.
// See server.Call for documentation.
type Store_removeContainer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_removeContainer) Args() Store_removeContainer_Params {
	return Store_removeContainer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_removeContainer) AllocResults() (Store_removeContainer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_removeContainer_Results(r), err
}

// Store_importContainer holds the state for a server call to Store.importContainer.
// See server.Call for documentation.
type Store_importContainer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_importContainer) Args() Store_importContainer_Params {
	return Store_importContainer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_importContainer) AllocResults() (Store_importContainer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_importContainer_Results(r), err
}

// Store_List is a list of Store.
type Store_List = capnp.CapList[Store]

// NewStore_List creates a new list of Store.
func NewStore_List(s *capnp.Segment, sz int32) (Store_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Store](l), err
}

type Store_Container capnp.Client

// Store_Container_TypeID is the unique identifier for the type Store_Container.
const Store_Container_TypeID = 0x878131f45567ae62

func (c Store_Container) Export(ctx context.Context, params func(Store_Container_export_Params) error) (Store_Container_export_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      0,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "export",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_Container_export_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_Container_export_Results_Future{Future: ans.Future()}, release

}

func (c Store_Container) DownloadEntries(ctx context.Context, params func(Store_Container_downloadEntries_Params) error) (Store_Container_downloadEntries_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      1,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "downloadEntries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_Container_downloadEntries_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_Container_downloadEntries_Results_Future{Future: ans.Future()}, release

}

func (c Store_Container) ListEntries(ctx context.Context, params func(Store_Container_listEntries_Params) error) (Store_Container_listEntries_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      2,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "listEntries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_Container_listEntries_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_Container_listEntries_Results_Future{Future: ans.Future()}, release

}

func (c Store_Container) GetEntry(ctx context.Context, params func(Store_Container_getEntry_Params) error) (Store_Container_getEntry_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      3,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "getEntry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_Container_getEntry_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_Container_getEntry_Results_Future{Future: ans.Future()}, release

}

func (c Store_Container) RemoveEntry(ctx context.Context, params func(Store_Container_removeEntry_Params) error) (Store_Container_removeEntry_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      4,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "removeEntry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_Container_removeEntry_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_Container_removeEntry_Results_Future{Future: ans.Future()}, release

}

func (c Store_Container) Clear(ctx context.Context, params func(Store_Container_clear_Params) error) (Store_Container_clear_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      5,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "clear",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_Container_clear_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_Container_clear_Results_Future{Future: ans.Future()}, release

}

func (c Store_Container) AddEntry(ctx context.Context, params func(Store_Container_addEntry_Params) error) (Store_Container_addEntry_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      6,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "addEntry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_Container_addEntry_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_Container_addEntry_Results_Future{Future: ans.Future()}, release

}

func (c Store_Container) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Store_Container) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Store_Container) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Store_Container) String() string {
	return "Store_Container(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Store_Container) AddRef() Store_Container {
	return Store_Container(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Store_Container) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Store_Container) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Store_Container) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Store_Container) DecodeFromPtr(p capnp.Ptr) Store_Container {
	return Store_Container(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Store_Container) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Store_Container) IsSame(other Store_Container) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Store_Container) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Store_Container) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Store_Container_Server is a Store_Container with a local implementation.
type Store_Container_Server interface {
	Export(context.Context, Store_Container_export) error

	DownloadEntries(context.Context, Store_Container_downloadEntries) error

	ListEntries(context.Context, Store_Container_listEntries) error

	GetEntry(context.Context, Store_Container_getEntry) error

	RemoveEntry(context.Context, Store_Container_removeEntry) error

	Clear(context.Context, Store_Container_clear) error

	AddEntry(context.Context, Store_Container_addEntry) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Store_Container_NewServer creates a new Server from an implementation of Store_Container_Server.
func Store_Container_NewServer(s Store_Container_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Store_Container_Methods(nil, s), s, c)
}

// Store_Container_ServerToClient creates a new Client from an implementation of Store_Container_Server.
// The caller is responsible for calling Release on the returned Client.
func Store_Container_ServerToClient(s Store_Container_Server) Store_Container {
	return Store_Container(capnp.NewClient(Store_Container_NewServer(s)))
}

// Store_Container_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Store_Container_Methods(methods []server.Method, s Store_Container_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      0,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "export",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Export(ctx, Store_Container_export{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      1,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "downloadEntries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DownloadEntries(ctx, Store_Container_downloadEntries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      2,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "listEntries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListEntries(ctx, Store_Container_listEntries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      3,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "getEntry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetEntry(ctx, Store_Container_getEntry{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      4,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "removeEntry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveEntry(ctx, Store_Container_removeEntry{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      5,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "clear",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Clear(ctx, Store_Container_clear{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x878131f45567ae62,
			MethodID:      6,
			InterfaceName: "storage.capnp:Store.Container",
			MethodName:    "addEntry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddEntry(ctx, Store_Container_addEntry{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Store_Container_export holds the state for a server call to Store_Container.export.
// See server.Call for documentation.
type Store_Container_export struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_Container_export) Args() Store_Container_export_Params {
	return Store_Container_export_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_Container_export) AllocResults() (Store_Container_export_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_export_Results(r), err
}

// Store_Container_downloadEntries holds the state for a server call to Store_Container.downloadEntries.
// See server.Call for documentation.
type Store_Container_downloadEntries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_Container_downloadEntries) Args() Store_Container_downloadEntries_Params {
	return Store_Container_downloadEntries_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_Container_downloadEntries) AllocResults() (Store_Container_downloadEntries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_downloadEntries_Results(r), err
}

// Store_Container_listEntries holds the state for a server call to Store_Container.listEntries.
// See server.Call for documentation.
type Store_Container_listEntries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_Container_listEntries) Args() Store_Container_listEntries_Params {
	return Store_Container_listEntries_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_Container_listEntries) AllocResults() (Store_Container_listEntries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_listEntries_Results(r), err
}

// Store_Container_getEntry holds the state for a server call to Store_Container.getEntry.
// See server.Call for documentation.
type Store_Container_getEntry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_Container_getEntry) Args() Store_Container_getEntry_Params {
	return Store_Container_getEntry_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_Container_getEntry) AllocResults() (Store_Container_getEntry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_getEntry_Results(r), err
}

// Store_Container_removeEntry holds the state for a server call to Store_Container.removeEntry.
// See server.Call for documentation.
type Store_Container_removeEntry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_Container_removeEntry) Args() Store_Container_removeEntry_Params {
	return Store_Container_removeEntry_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_Container_removeEntry) AllocResults() (Store_Container_removeEntry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_Container_removeEntry_Results(r), err
}

// Store_Container_clear holds the state for a server call to Store_Container.clear.
// See server.Call for documentation.
type Store_Container_clear struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_Container_clear) Args() Store_Container_clear_Params {
	return Store_Container_clear_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_Container_clear) AllocResults() (Store_Container_clear_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_Container_clear_Results(r), err
}

// Store_Container_addEntry holds the state for a server call to Store_Container.addEntry.
// See server.Call for documentation.
type Store_Container_addEntry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_Container_addEntry) Args() Store_Container_addEntry_Params {
	return Store_Container_addEntry_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_Container_addEntry) AllocResults() (Store_Container_addEntry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Store_Container_addEntry_Results(r), err
}

// Store_Container_List is a list of Store_Container.
type Store_Container_List = capnp.CapList[Store_Container]

// NewStore_Container_List creates a new list of Store_Container.
func NewStore_Container_List(s *capnp.Segment, sz int32) (Store_Container_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Store_Container](l), err
}

type Store_Container_Entry capnp.Client

// Store_Container_Entry_TypeID is the unique identifier for the type Store_Container_Entry.
const Store_Container_Entry_TypeID = 0xfa1a243e7bf478c0

func (c Store_Container_Entry) GetKey(ctx context.Context, params func(Store_Container_Entry_getKey_Params) error) (Store_Container_Entry_getKey_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfa1a243e7bf478c0,
			MethodID:      0,
			InterfaceName: "storage.capnp:Store.Container.Entry",
			MethodName:    "getKey",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_Container_Entry_getKey_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_Container_Entry_getKey_Results_Future{Future: ans.Future()}, release

}

func (c Store_Container_Entry) GetValue(ctx context.Context, params func(Store_Container_Entry_getValue_Params) error) (Store_Container_Entry_getValue_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfa1a243e7bf478c0,
			MethodID:      1,
			InterfaceName: "storage.capnp:Store.Container.Entry",
			MethodName:    "getValue",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_Container_Entry_getValue_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_Container_Entry_getValue_Results_Future{Future: ans.Future()}, release

}

func (c Store_Container_Entry) SetValue(ctx context.Context, params func(Store_Container_Entry_setValue_Params) error) (Store_Container_Entry_setValue_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfa1a243e7bf478c0,
			MethodID:      2,
			InterfaceName: "storage.capnp:Store.Container.Entry",
			MethodName:    "setValue",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Store_Container_Entry_setValue_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Store_Container_Entry_setValue_Results_Future{Future: ans.Future()}, release

}

func (c Store_Container_Entry) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Store_Container_Entry) String() string {
	return "Store_Container_Entry(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Store_Container_Entry) AddRef() Store_Container_Entry {
	return Store_Container_Entry(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Store_Container_Entry) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Store_Container_Entry) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Store_Container_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Store_Container_Entry) DecodeFromPtr(p capnp.Ptr) Store_Container_Entry {
	return Store_Container_Entry(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Store_Container_Entry) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Store_Container_Entry) IsSame(other Store_Container_Entry) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Store_Container_Entry) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Store_Container_Entry) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Store_Container_Entry_Server is a Store_Container_Entry with a local implementation.
type Store_Container_Entry_Server interface {
	GetKey(context.Context, Store_Container_Entry_getKey) error

	GetValue(context.Context, Store_Container_Entry_getValue) error

	SetValue(context.Context, Store_Container_Entry_setValue) error
}

// Store_Container_Entry_NewServer creates a new Server from an implementation of Store_Container_Entry_Server.
func Store_Container_Entry_NewServer(s Store_Container_Entry_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Store_Container_Entry_Methods(nil, s), s, c)
}

// Store_Container_Entry_ServerToClient creates a new Client from an implementation of Store_Container_Entry_Server.
// The caller is responsible for calling Release on the returned Client.
func Store_Container_Entry_ServerToClient(s Store_Container_Entry_Server) Store_Container_Entry {
	return Store_Container_Entry(capnp.NewClient(Store_Container_Entry_NewServer(s)))
}

// Store_Container_Entry_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Store_Container_Entry_Methods(methods []server.Method, s Store_Container_Entry_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfa1a243e7bf478c0,
			MethodID:      0,
			InterfaceName: "storage.capnp:Store.Container.Entry",
			MethodName:    "getKey",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetKey(ctx, Store_Container_Entry_getKey{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfa1a243e7bf478c0,
			MethodID:      1,
			InterfaceName: "storage.capnp:Store.Container.Entry",
			MethodName:    "getValue",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetValue(ctx, Store_Container_Entry_getValue{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfa1a243e7bf478c0,
			MethodID:      2,
			InterfaceName: "storage.capnp:Store.Container.Entry",
			MethodName:    "setValue",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetValue(ctx, Store_Container_Entry_setValue{call})
		},
	})

	return methods
}

// Store_Container_Entry_getKey holds the state for a server call to Store_Container_Entry.getKey.
// See server.Call for documentation.
type Store_Container_Entry_getKey struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_Container_Entry_getKey) Args() Store_Container_Entry_getKey_Params {
	return Store_Container_Entry_getKey_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_Container_Entry_getKey) AllocResults() (Store_Container_Entry_getKey_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_Entry_getKey_Results(r), err
}

// Store_Container_Entry_getValue holds the state for a server call to Store_Container_Entry.getValue.
// See server.Call for documentation.
type Store_Container_Entry_getValue struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_Container_Entry_getValue) Args() Store_Container_Entry_getValue_Params {
	return Store_Container_Entry_getValue_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_Container_Entry_getValue) AllocResults() (Store_Container_Entry_getValue_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Store_Container_Entry_getValue_Results(r), err
}

// Store_Container_Entry_setValue holds the state for a server call to Store_Container_Entry.setValue.
// See server.Call for documentation.
type Store_Container_Entry_setValue struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Store_Container_Entry_setValue) Args() Store_Container_Entry_setValue_Params {
	return Store_Container_Entry_setValue_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Store_Container_Entry_setValue) AllocResults() (Store_Container_Entry_setValue_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_Container_Entry_setValue_Results(r), err
}

// Store_Container_Entry_List is a list of Store_Container_Entry.
type Store_Container_Entry_List = capnp.CapList[Store_Container_Entry]

// NewStore_Container_Entry_List creates a new list of Store_Container_Entry.
func NewStore_Container_Entry_List(s *capnp.Segment, sz int32) (Store_Container_Entry_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Store_Container_Entry](l), err
}

type Store_Container_Entry_Value capnp.Struct
type Store_Container_Entry_Value_Which uint16

const (
	Store_Container_Entry_Value_Which_boolValue        Store_Container_Entry_Value_Which = 0
	Store_Container_Entry_Value_Which_boolListValue    Store_Container_Entry_Value_Which = 1
	Store_Container_Entry_Value_Which_int8Value        Store_Container_Entry_Value_Which = 2
	Store_Container_Entry_Value_Which_int8ListValue    Store_Container_Entry_Value_Which = 3
	Store_Container_Entry_Value_Which_int16Value       Store_Container_Entry_Value_Which = 4
	Store_Container_Entry_Value_Which_int16ListValue   Store_Container_Entry_Value_Which = 5
	Store_Container_Entry_Value_Which_int32Value       Store_Container_Entry_Value_Which = 6
	Store_Container_Entry_Value_Which_int32ListValue   Store_Container_Entry_Value_Which = 7
	Store_Container_Entry_Value_Which_int64Value       Store_Container_Entry_Value_Which = 8
	Store_Container_Entry_Value_Which_int64ListValue   Store_Container_Entry_Value_Which = 9
	Store_Container_Entry_Value_Which_uint8Value       Store_Container_Entry_Value_Which = 10
	Store_Container_Entry_Value_Which_uint8ListValue   Store_Container_Entry_Value_Which = 11
	Store_Container_Entry_Value_Which_uint16Value      Store_Container_Entry_Value_Which = 12
	Store_Container_Entry_Value_Which_uint16ListValue  Store_Container_Entry_Value_Which = 13
	Store_Container_Entry_Value_Which_uint32Value      Store_Container_Entry_Value_Which = 14
	Store_Container_Entry_Value_Which_uint32ListValue  Store_Container_Entry_Value_Which = 15
	Store_Container_Entry_Value_Which_uint64Value      Store_Container_Entry_Value_Which = 16
	Store_Container_Entry_Value_Which_uint64ListValue  Store_Container_Entry_Value_Which = 17
	Store_Container_Entry_Value_Which_float32Value     Store_Container_Entry_Value_Which = 18
	Store_Container_Entry_Value_Which_float32ListValue Store_Container_Entry_Value_Which = 19
	Store_Container_Entry_Value_Which_float64Value     Store_Container_Entry_Value_Which = 20
	Store_Container_Entry_Value_Which_float64ListValue Store_Container_Entry_Value_Which = 21
	Store_Container_Entry_Value_Which_textValue        Store_Container_Entry_Value_Which = 22
	Store_Container_Entry_Value_Which_textListValue    Store_Container_Entry_Value_Which = 23
	Store_Container_Entry_Value_Which_dataValue        Store_Container_Entry_Value_Which = 24
	Store_Container_Entry_Value_Which_dataListValue    Store_Container_Entry_Value_Which = 25
	Store_Container_Entry_Value_Which_anyValue         Store_Container_Entry_Value_Which = 26
)

func (w Store_Container_Entry_Value_Which) String() string {
	const s = "boolValueboolListValueint8Valueint8ListValueint16Valueint16ListValueint32Valueint32ListValueint64Valueint64ListValueuint8Valueuint8ListValueuint16Valueuint16ListValueuint32Valueuint32ListValueuint64Valueuint64ListValuefloat32Valuefloat32ListValuefloat64Valuefloat64ListValuetextValuetextListValuedataValuedataListValueanyValue"
	switch w {
	case Store_Container_Entry_Value_Which_boolValue:
		return s[0:9]
	case Store_Container_Entry_Value_Which_boolListValue:
		return s[9:22]
	case Store_Container_Entry_Value_Which_int8Value:
		return s[22:31]
	case Store_Container_Entry_Value_Which_int8ListValue:
		return s[31:44]
	case Store_Container_Entry_Value_Which_int16Value:
		return s[44:54]
	case Store_Container_Entry_Value_Which_int16ListValue:
		return s[54:68]
	case Store_Container_Entry_Value_Which_int32Value:
		return s[68:78]
	case Store_Container_Entry_Value_Which_int32ListValue:
		return s[78:92]
	case Store_Container_Entry_Value_Which_int64Value:
		return s[92:102]
	case Store_Container_Entry_Value_Which_int64ListValue:
		return s[102:116]
	case Store_Container_Entry_Value_Which_uint8Value:
		return s[116:126]
	case Store_Container_Entry_Value_Which_uint8ListValue:
		return s[126:140]
	case Store_Container_Entry_Value_Which_uint16Value:
		return s[140:151]
	case Store_Container_Entry_Value_Which_uint16ListValue:
		return s[151:166]
	case Store_Container_Entry_Value_Which_uint32Value:
		return s[166:177]
	case Store_Container_Entry_Value_Which_uint32ListValue:
		return s[177:192]
	case Store_Container_Entry_Value_Which_uint64Value:
		return s[192:203]
	case Store_Container_Entry_Value_Which_uint64ListValue:
		return s[203:218]
	case Store_Container_Entry_Value_Which_float32Value:
		return s[218:230]
	case Store_Container_Entry_Value_Which_float32ListValue:
		return s[230:246]
	case Store_Container_Entry_Value_Which_float64Value:
		return s[246:258]
	case Store_Container_Entry_Value_Which_float64ListValue:
		return s[258:274]
	case Store_Container_Entry_Value_Which_textValue:
		return s[274:283]
	case Store_Container_Entry_Value_Which_textListValue:
		return s[283:296]
	case Store_Container_Entry_Value_Which_dataValue:
		return s[296:305]
	case Store_Container_Entry_Value_Which_dataListValue:
		return s[305:318]
	case Store_Container_Entry_Value_Which_anyValue:
		return s[318:326]

	}
	return "Store_Container_Entry_Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Store_Container_Entry_Value_TypeID is the unique identifier for the type Store_Container_Entry_Value.
const Store_Container_Entry_Value_TypeID = 0xe2185cc449928f5c

func NewStore_Container_Entry_Value(s *capnp.Segment) (Store_Container_Entry_Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Store_Container_Entry_Value(st), err
}

func NewRootStore_Container_Entry_Value(s *capnp.Segment) (Store_Container_Entry_Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Store_Container_Entry_Value(st), err
}

func ReadRootStore_Container_Entry_Value(msg *capnp.Message) (Store_Container_Entry_Value, error) {
	root, err := msg.Root()
	return Store_Container_Entry_Value(root.Struct()), err
}

func (s Store_Container_Entry_Value) String() string {
	str, _ := text.Marshal(0xe2185cc449928f5c, capnp.Struct(s))
	return str
}

func (s Store_Container_Entry_Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_Entry_Value) DecodeFromPtr(p capnp.Ptr) Store_Container_Entry_Value {
	return Store_Container_Entry_Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_Entry_Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Store_Container_Entry_Value) Which() Store_Container_Entry_Value_Which {
	return Store_Container_Entry_Value_Which(capnp.Struct(s).Uint16(2))
}
func (s Store_Container_Entry_Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_Entry_Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_Entry_Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_Entry_Value) BoolValue() bool {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != boolValue")
	}
	return capnp.Struct(s).Bit(0)
}

func (s Store_Container_Entry_Value) SetBoolValue(v bool) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetBit(0, v)
}

func (s Store_Container_Entry_Value) BoolListValue() (capnp.BitList, error) {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != boolListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.BitList(p.List()), err
}

func (s Store_Container_Entry_Value) HasBoolListValue() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetBoolListValue(v capnp.BitList) error {
	capnp.Struct(s).SetUint16(2, 1)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewBoolListValue sets the boolListValue field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewBoolListValue(n int32) (capnp.BitList, error) {
	capnp.Struct(s).SetUint16(2, 1)
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) Int8Value() int8 {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != int8Value")
	}
	return int8(capnp.Struct(s).Uint8(0))
}

func (s Store_Container_Entry_Value) SetInt8Value(v int8) {
	capnp.Struct(s).SetUint16(2, 2)
	capnp.Struct(s).SetUint8(0, uint8(v))
}

func (s Store_Container_Entry_Value) Int8ListValue() (capnp.Int8List, error) {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != int8ListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int8List(p.List()), err
}

func (s Store_Container_Entry_Value) HasInt8ListValue() bool {
	if capnp.Struct(s).Uint16(2) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetInt8ListValue(v capnp.Int8List) error {
	capnp.Struct(s).SetUint16(2, 3)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInt8ListValue sets the int8ListValue field to a newly
// allocated capnp.Int8List, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewInt8ListValue(n int32) (capnp.Int8List, error) {
	capnp.Struct(s).SetUint16(2, 3)
	l, err := capnp.NewInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int8List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) Int16Value() int16 {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != int16Value")
	}
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Store_Container_Entry_Value) SetInt16Value(v int16) {
	capnp.Struct(s).SetUint16(2, 4)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Store_Container_Entry_Value) Int16ListValue() (capnp.Int16List, error) {
	if capnp.Struct(s).Uint16(2) != 5 {
		panic("Which() != int16ListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int16List(p.List()), err
}

func (s Store_Container_Entry_Value) HasInt16ListValue() bool {
	if capnp.Struct(s).Uint16(2) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetInt16ListValue(v capnp.Int16List) error {
	capnp.Struct(s).SetUint16(2, 5)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInt16ListValue sets the int16ListValue field to a newly
// allocated capnp.Int16List, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewInt16ListValue(n int32) (capnp.Int16List, error) {
	capnp.Struct(s).SetUint16(2, 5)
	l, err := capnp.NewInt16List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int16List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) Int32Value() int32 {
	if capnp.Struct(s).Uint16(2) != 6 {
		panic("Which() != int32Value")
	}
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Store_Container_Entry_Value) SetInt32Value(v int32) {
	capnp.Struct(s).SetUint16(2, 6)
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Store_Container_Entry_Value) Int32ListValue() (capnp.Int32List, error) {
	if capnp.Struct(s).Uint16(2) != 7 {
		panic("Which() != int32ListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Store_Container_Entry_Value) HasInt32ListValue() bool {
	if capnp.Struct(s).Uint16(2) != 7 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetInt32ListValue(v capnp.Int32List) error {
	capnp.Struct(s).SetUint16(2, 7)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInt32ListValue sets the int32ListValue field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewInt32ListValue(n int32) (capnp.Int32List, error) {
	capnp.Struct(s).SetUint16(2, 7)
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) Int64Value() int64 {
	if capnp.Struct(s).Uint16(2) != 8 {
		panic("Which() != int64Value")
	}
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Store_Container_Entry_Value) SetInt64Value(v int64) {
	capnp.Struct(s).SetUint16(2, 8)
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Store_Container_Entry_Value) Int64ListValue() (capnp.Int64List, error) {
	if capnp.Struct(s).Uint16(2) != 9 {
		panic("Which() != int64ListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int64List(p.List()), err
}

func (s Store_Container_Entry_Value) HasInt64ListValue() bool {
	if capnp.Struct(s).Uint16(2) != 9 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetInt64ListValue(v capnp.Int64List) error {
	capnp.Struct(s).SetUint16(2, 9)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInt64ListValue sets the int64ListValue field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewInt64ListValue(n int32) (capnp.Int64List, error) {
	capnp.Struct(s).SetUint16(2, 9)
	l, err := capnp.NewInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) Uint8Value() uint8 {
	if capnp.Struct(s).Uint16(2) != 10 {
		panic("Which() != uint8Value")
	}
	return capnp.Struct(s).Uint8(0)
}

func (s Store_Container_Entry_Value) SetUint8Value(v uint8) {
	capnp.Struct(s).SetUint16(2, 10)
	capnp.Struct(s).SetUint8(0, v)
}

func (s Store_Container_Entry_Value) Uint8ListValue() (capnp.UInt8List, error) {
	if capnp.Struct(s).Uint16(2) != 11 {
		panic("Which() != uint8ListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt8List(p.List()), err
}

func (s Store_Container_Entry_Value) HasUint8ListValue() bool {
	if capnp.Struct(s).Uint16(2) != 11 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetUint8ListValue(v capnp.UInt8List) error {
	capnp.Struct(s).SetUint16(2, 11)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUint8ListValue sets the uint8ListValue field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewUint8ListValue(n int32) (capnp.UInt8List, error) {
	capnp.Struct(s).SetUint16(2, 11)
	l, err := capnp.NewUInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) Uint16Value() uint16 {
	if capnp.Struct(s).Uint16(2) != 12 {
		panic("Which() != uint16Value")
	}
	return capnp.Struct(s).Uint16(0)
}

func (s Store_Container_Entry_Value) SetUint16Value(v uint16) {
	capnp.Struct(s).SetUint16(2, 12)
	capnp.Struct(s).SetUint16(0, v)
}

func (s Store_Container_Entry_Value) Uint16ListValue() (capnp.UInt16List, error) {
	if capnp.Struct(s).Uint16(2) != 13 {
		panic("Which() != uint16ListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt16List(p.List()), err
}

func (s Store_Container_Entry_Value) HasUint16ListValue() bool {
	if capnp.Struct(s).Uint16(2) != 13 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetUint16ListValue(v capnp.UInt16List) error {
	capnp.Struct(s).SetUint16(2, 13)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUint16ListValue sets the uint16ListValue field to a newly
// allocated capnp.UInt16List, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewUint16ListValue(n int32) (capnp.UInt16List, error) {
	capnp.Struct(s).SetUint16(2, 13)
	l, err := capnp.NewUInt16List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt16List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) Uint32Value() uint32 {
	if capnp.Struct(s).Uint16(2) != 14 {
		panic("Which() != uint32Value")
	}
	return capnp.Struct(s).Uint32(4)
}

func (s Store_Container_Entry_Value) SetUint32Value(v uint32) {
	capnp.Struct(s).SetUint16(2, 14)
	capnp.Struct(s).SetUint32(4, v)
}

func (s Store_Container_Entry_Value) Uint32ListValue() (capnp.UInt32List, error) {
	if capnp.Struct(s).Uint16(2) != 15 {
		panic("Which() != uint32ListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt32List(p.List()), err
}

func (s Store_Container_Entry_Value) HasUint32ListValue() bool {
	if capnp.Struct(s).Uint16(2) != 15 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetUint32ListValue(v capnp.UInt32List) error {
	capnp.Struct(s).SetUint16(2, 15)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUint32ListValue sets the uint32ListValue field to a newly
// allocated capnp.UInt32List, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewUint32ListValue(n int32) (capnp.UInt32List, error) {
	capnp.Struct(s).SetUint16(2, 15)
	l, err := capnp.NewUInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) Uint64Value() uint64 {
	if capnp.Struct(s).Uint16(2) != 16 {
		panic("Which() != uint64Value")
	}
	return capnp.Struct(s).Uint64(8)
}

func (s Store_Container_Entry_Value) SetUint64Value(v uint64) {
	capnp.Struct(s).SetUint16(2, 16)
	capnp.Struct(s).SetUint64(8, v)
}

func (s Store_Container_Entry_Value) Uint64ListValue() (capnp.UInt64List, error) {
	if capnp.Struct(s).Uint16(2) != 17 {
		panic("Which() != uint64ListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt64List(p.List()), err
}

func (s Store_Container_Entry_Value) HasUint64ListValue() bool {
	if capnp.Struct(s).Uint16(2) != 17 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetUint64ListValue(v capnp.UInt64List) error {
	capnp.Struct(s).SetUint16(2, 17)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUint64ListValue sets the uint64ListValue field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewUint64ListValue(n int32) (capnp.UInt64List, error) {
	capnp.Struct(s).SetUint16(2, 17)
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) Float32Value() float32 {
	if capnp.Struct(s).Uint16(2) != 18 {
		panic("Which() != float32Value")
	}
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Store_Container_Entry_Value) SetFloat32Value(v float32) {
	capnp.Struct(s).SetUint16(2, 18)
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Store_Container_Entry_Value) Float32ListValue() (capnp.Float32List, error) {
	if capnp.Struct(s).Uint16(2) != 19 {
		panic("Which() != float32ListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s Store_Container_Entry_Value) HasFloat32ListValue() bool {
	if capnp.Struct(s).Uint16(2) != 19 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetFloat32ListValue(v capnp.Float32List) error {
	capnp.Struct(s).SetUint16(2, 19)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFloat32ListValue sets the float32ListValue field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewFloat32ListValue(n int32) (capnp.Float32List, error) {
	capnp.Struct(s).SetUint16(2, 19)
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) Float64Value() float64 {
	if capnp.Struct(s).Uint16(2) != 20 {
		panic("Which() != float64Value")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Store_Container_Entry_Value) SetFloat64Value(v float64) {
	capnp.Struct(s).SetUint16(2, 20)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Store_Container_Entry_Value) Float64ListValue() (capnp.Float64List, error) {
	if capnp.Struct(s).Uint16(2) != 21 {
		panic("Which() != float64ListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s Store_Container_Entry_Value) HasFloat64ListValue() bool {
	if capnp.Struct(s).Uint16(2) != 21 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetFloat64ListValue(v capnp.Float64List) error {
	capnp.Struct(s).SetUint16(2, 21)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFloat64ListValue sets the float64ListValue field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewFloat64ListValue(n int32) (capnp.Float64List, error) {
	capnp.Struct(s).SetUint16(2, 21)
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) TextValue() (string, error) {
	if capnp.Struct(s).Uint16(2) != 22 {
		panic("Which() != textValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_Container_Entry_Value) HasTextValue() bool {
	if capnp.Struct(s).Uint16(2) != 22 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) TextValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_Container_Entry_Value) SetTextValue(v string) error {
	capnp.Struct(s).SetUint16(2, 22)
	return capnp.Struct(s).SetText(0, v)
}

func (s Store_Container_Entry_Value) TextListValue() (capnp.TextList, error) {
	if capnp.Struct(s).Uint16(2) != 23 {
		panic("Which() != textListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Store_Container_Entry_Value) HasTextListValue() bool {
	if capnp.Struct(s).Uint16(2) != 23 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetTextListValue(v capnp.TextList) error {
	capnp.Struct(s).SetUint16(2, 23)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTextListValue sets the textListValue field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewTextListValue(n int32) (capnp.TextList, error) {
	capnp.Struct(s).SetUint16(2, 23)
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) DataValue() ([]byte, error) {
	if capnp.Struct(s).Uint16(2) != 24 {
		panic("Which() != dataValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Store_Container_Entry_Value) HasDataValue() bool {
	if capnp.Struct(s).Uint16(2) != 24 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetDataValue(v []byte) error {
	capnp.Struct(s).SetUint16(2, 24)
	return capnp.Struct(s).SetData(0, v)
}

func (s Store_Container_Entry_Value) DataListValue() (capnp.DataList, error) {
	if capnp.Struct(s).Uint16(2) != 25 {
		panic("Which() != dataListValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.DataList(p.List()), err
}

func (s Store_Container_Entry_Value) HasDataListValue() bool {
	if capnp.Struct(s).Uint16(2) != 25 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetDataListValue(v capnp.DataList) error {
	capnp.Struct(s).SetUint16(2, 25)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDataListValue sets the dataListValue field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Store_Container_Entry_Value) NewDataListValue(n int32) (capnp.DataList, error) {
	capnp.Struct(s).SetUint16(2, 25)
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Store_Container_Entry_Value) AnyValue() (capnp.Struct, error) {
	if capnp.Struct(s).Uint16(2) != 26 {
		panic("Which() != anyValue")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Struct(), err
}

func (s Store_Container_Entry_Value) HasAnyValue() bool {
	if capnp.Struct(s).Uint16(2) != 26 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_Value) SetAnyValue(v capnp.Struct) error {
	capnp.Struct(s).SetUint16(2, 26)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// Store_Container_Entry_Value_List is a list of Store_Container_Entry_Value.
type Store_Container_Entry_Value_List = capnp.StructList[Store_Container_Entry_Value]

// NewStore_Container_Entry_Value creates a new list of Store_Container_Entry_Value.
func NewStore_Container_Entry_Value_List(s *capnp.Segment, sz int32) (Store_Container_Entry_Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_Entry_Value](l), err
}

// Store_Container_Entry_Value_Future is a wrapper for a Store_Container_Entry_Value promised by a client call.
type Store_Container_Entry_Value_Future struct{ *capnp.Future }

func (f Store_Container_Entry_Value_Future) Struct() (Store_Container_Entry_Value, error) {
	p, err := f.Future.Ptr()
	return Store_Container_Entry_Value(p.Struct()), err
}
func (p Store_Container_Entry_Value_Future) AnyValue() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Store_Container_Entry_getKey_Params capnp.Struct

// Store_Container_Entry_getKey_Params_TypeID is the unique identifier for the type Store_Container_Entry_getKey_Params.
const Store_Container_Entry_getKey_Params_TypeID = 0xe0647ffea942d00a

func NewStore_Container_Entry_getKey_Params(s *capnp.Segment) (Store_Container_Entry_getKey_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_Entry_getKey_Params(st), err
}

func NewRootStore_Container_Entry_getKey_Params(s *capnp.Segment) (Store_Container_Entry_getKey_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_Entry_getKey_Params(st), err
}

func ReadRootStore_Container_Entry_getKey_Params(msg *capnp.Message) (Store_Container_Entry_getKey_Params, error) {
	root, err := msg.Root()
	return Store_Container_Entry_getKey_Params(root.Struct()), err
}

func (s Store_Container_Entry_getKey_Params) String() string {
	str, _ := text.Marshal(0xe0647ffea942d00a, capnp.Struct(s))
	return str
}

func (s Store_Container_Entry_getKey_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_Entry_getKey_Params) DecodeFromPtr(p capnp.Ptr) Store_Container_Entry_getKey_Params {
	return Store_Container_Entry_getKey_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_Entry_getKey_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_Entry_getKey_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_Entry_getKey_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_Entry_getKey_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Store_Container_Entry_getKey_Params_List is a list of Store_Container_Entry_getKey_Params.
type Store_Container_Entry_getKey_Params_List = capnp.StructList[Store_Container_Entry_getKey_Params]

// NewStore_Container_Entry_getKey_Params creates a new list of Store_Container_Entry_getKey_Params.
func NewStore_Container_Entry_getKey_Params_List(s *capnp.Segment, sz int32) (Store_Container_Entry_getKey_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Store_Container_Entry_getKey_Params](l), err
}

// Store_Container_Entry_getKey_Params_Future is a wrapper for a Store_Container_Entry_getKey_Params promised by a client call.
type Store_Container_Entry_getKey_Params_Future struct{ *capnp.Future }

func (f Store_Container_Entry_getKey_Params_Future) Struct() (Store_Container_Entry_getKey_Params, error) {
	p, err := f.Future.Ptr()
	return Store_Container_Entry_getKey_Params(p.Struct()), err
}

type Store_Container_Entry_getKey_Results capnp.Struct

// Store_Container_Entry_getKey_Results_TypeID is the unique identifier for the type Store_Container_Entry_getKey_Results.
const Store_Container_Entry_getKey_Results_TypeID = 0xdbfb7e9990643f87

func NewStore_Container_Entry_getKey_Results(s *capnp.Segment) (Store_Container_Entry_getKey_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_Entry_getKey_Results(st), err
}

func NewRootStore_Container_Entry_getKey_Results(s *capnp.Segment) (Store_Container_Entry_getKey_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_Entry_getKey_Results(st), err
}

func ReadRootStore_Container_Entry_getKey_Results(msg *capnp.Message) (Store_Container_Entry_getKey_Results, error) {
	root, err := msg.Root()
	return Store_Container_Entry_getKey_Results(root.Struct()), err
}

func (s Store_Container_Entry_getKey_Results) String() string {
	str, _ := text.Marshal(0xdbfb7e9990643f87, capnp.Struct(s))
	return str
}

func (s Store_Container_Entry_getKey_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_Entry_getKey_Results) DecodeFromPtr(p capnp.Ptr) Store_Container_Entry_getKey_Results {
	return Store_Container_Entry_getKey_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_Entry_getKey_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_Entry_getKey_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_Entry_getKey_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_Entry_getKey_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_Entry_getKey_Results) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_Container_Entry_getKey_Results) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_getKey_Results) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_Container_Entry_getKey_Results) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Store_Container_Entry_getKey_Results_List is a list of Store_Container_Entry_getKey_Results.
type Store_Container_Entry_getKey_Results_List = capnp.StructList[Store_Container_Entry_getKey_Results]

// NewStore_Container_Entry_getKey_Results creates a new list of Store_Container_Entry_getKey_Results.
func NewStore_Container_Entry_getKey_Results_List(s *capnp.Segment, sz int32) (Store_Container_Entry_getKey_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_Entry_getKey_Results](l), err
}

// Store_Container_Entry_getKey_Results_Future is a wrapper for a Store_Container_Entry_getKey_Results promised by a client call.
type Store_Container_Entry_getKey_Results_Future struct{ *capnp.Future }

func (f Store_Container_Entry_getKey_Results_Future) Struct() (Store_Container_Entry_getKey_Results, error) {
	p, err := f.Future.Ptr()
	return Store_Container_Entry_getKey_Results(p.Struct()), err
}

type Store_Container_Entry_getValue_Params capnp.Struct

// Store_Container_Entry_getValue_Params_TypeID is the unique identifier for the type Store_Container_Entry_getValue_Params.
const Store_Container_Entry_getValue_Params_TypeID = 0x923c06d58238b290

func NewStore_Container_Entry_getValue_Params(s *capnp.Segment) (Store_Container_Entry_getValue_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_Entry_getValue_Params(st), err
}

func NewRootStore_Container_Entry_getValue_Params(s *capnp.Segment) (Store_Container_Entry_getValue_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_Entry_getValue_Params(st), err
}

func ReadRootStore_Container_Entry_getValue_Params(msg *capnp.Message) (Store_Container_Entry_getValue_Params, error) {
	root, err := msg.Root()
	return Store_Container_Entry_getValue_Params(root.Struct()), err
}

func (s Store_Container_Entry_getValue_Params) String() string {
	str, _ := text.Marshal(0x923c06d58238b290, capnp.Struct(s))
	return str
}

func (s Store_Container_Entry_getValue_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_Entry_getValue_Params) DecodeFromPtr(p capnp.Ptr) Store_Container_Entry_getValue_Params {
	return Store_Container_Entry_getValue_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_Entry_getValue_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_Entry_getValue_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_Entry_getValue_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_Entry_getValue_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Store_Container_Entry_getValue_Params_List is a list of Store_Container_Entry_getValue_Params.
type Store_Container_Entry_getValue_Params_List = capnp.StructList[Store_Container_Entry_getValue_Params]

// NewStore_Container_Entry_getValue_Params creates a new list of Store_Container_Entry_getValue_Params.
func NewStore_Container_Entry_getValue_Params_List(s *capnp.Segment, sz int32) (Store_Container_Entry_getValue_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Store_Container_Entry_getValue_Params](l), err
}

// Store_Container_Entry_getValue_Params_Future is a wrapper for a Store_Container_Entry_getValue_Params promised by a client call.
type Store_Container_Entry_getValue_Params_Future struct{ *capnp.Future }

func (f Store_Container_Entry_getValue_Params_Future) Struct() (Store_Container_Entry_getValue_Params, error) {
	p, err := f.Future.Ptr()
	return Store_Container_Entry_getValue_Params(p.Struct()), err
}

type Store_Container_Entry_getValue_Results capnp.Struct

// Store_Container_Entry_getValue_Results_TypeID is the unique identifier for the type Store_Container_Entry_getValue_Results.
const Store_Container_Entry_getValue_Results_TypeID = 0xc5e6024b9f05560e

func NewStore_Container_Entry_getValue_Results(s *capnp.Segment) (Store_Container_Entry_getValue_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Store_Container_Entry_getValue_Results(st), err
}

func NewRootStore_Container_Entry_getValue_Results(s *capnp.Segment) (Store_Container_Entry_getValue_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Store_Container_Entry_getValue_Results(st), err
}

func ReadRootStore_Container_Entry_getValue_Results(msg *capnp.Message) (Store_Container_Entry_getValue_Results, error) {
	root, err := msg.Root()
	return Store_Container_Entry_getValue_Results(root.Struct()), err
}

func (s Store_Container_Entry_getValue_Results) String() string {
	str, _ := text.Marshal(0xc5e6024b9f05560e, capnp.Struct(s))
	return str
}

func (s Store_Container_Entry_getValue_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_Entry_getValue_Results) DecodeFromPtr(p capnp.Ptr) Store_Container_Entry_getValue_Results {
	return Store_Container_Entry_getValue_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_Entry_getValue_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_Entry_getValue_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_Entry_getValue_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_Entry_getValue_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_Entry_getValue_Results) Value() (Store_Container_Entry_Value, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Store_Container_Entry_Value(p.Struct()), err
}

func (s Store_Container_Entry_getValue_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_getValue_Results) SetValue(v Store_Container_Entry_Value) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Store_Container_Entry_Value struct, preferring placement in s's segment.
func (s Store_Container_Entry_getValue_Results) NewValue() (Store_Container_Entry_Value, error) {
	ss, err := NewStore_Container_Entry_Value(capnp.Struct(s).Segment())
	if err != nil {
		return Store_Container_Entry_Value{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Store_Container_Entry_getValue_Results) IsUnset() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Store_Container_Entry_getValue_Results) SetIsUnset(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Store_Container_Entry_getValue_Results_List is a list of Store_Container_Entry_getValue_Results.
type Store_Container_Entry_getValue_Results_List = capnp.StructList[Store_Container_Entry_getValue_Results]

// NewStore_Container_Entry_getValue_Results creates a new list of Store_Container_Entry_getValue_Results.
func NewStore_Container_Entry_getValue_Results_List(s *capnp.Segment, sz int32) (Store_Container_Entry_getValue_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_Entry_getValue_Results](l), err
}

// Store_Container_Entry_getValue_Results_Future is a wrapper for a Store_Container_Entry_getValue_Results promised by a client call.
type Store_Container_Entry_getValue_Results_Future struct{ *capnp.Future }

func (f Store_Container_Entry_getValue_Results_Future) Struct() (Store_Container_Entry_getValue_Results, error) {
	p, err := f.Future.Ptr()
	return Store_Container_Entry_getValue_Results(p.Struct()), err
}
func (p Store_Container_Entry_getValue_Results_Future) Value() Store_Container_Entry_Value_Future {
	return Store_Container_Entry_Value_Future{Future: p.Future.Field(0, nil)}
}

type Store_Container_Entry_setValue_Params capnp.Struct

// Store_Container_Entry_setValue_Params_TypeID is the unique identifier for the type Store_Container_Entry_setValue_Params.
const Store_Container_Entry_setValue_Params_TypeID = 0xa4ff24aa7f0debaf

func NewStore_Container_Entry_setValue_Params(s *capnp.Segment) (Store_Container_Entry_setValue_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_Entry_setValue_Params(st), err
}

func NewRootStore_Container_Entry_setValue_Params(s *capnp.Segment) (Store_Container_Entry_setValue_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_Entry_setValue_Params(st), err
}

func ReadRootStore_Container_Entry_setValue_Params(msg *capnp.Message) (Store_Container_Entry_setValue_Params, error) {
	root, err := msg.Root()
	return Store_Container_Entry_setValue_Params(root.Struct()), err
}

func (s Store_Container_Entry_setValue_Params) String() string {
	str, _ := text.Marshal(0xa4ff24aa7f0debaf, capnp.Struct(s))
	return str
}

func (s Store_Container_Entry_setValue_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_Entry_setValue_Params) DecodeFromPtr(p capnp.Ptr) Store_Container_Entry_setValue_Params {
	return Store_Container_Entry_setValue_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_Entry_setValue_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_Entry_setValue_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_Entry_setValue_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_Entry_setValue_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_Entry_setValue_Params) Value() (Store_Container_Entry_Value, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Store_Container_Entry_Value(p.Struct()), err
}

func (s Store_Container_Entry_setValue_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_Entry_setValue_Params) SetValue(v Store_Container_Entry_Value) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Store_Container_Entry_Value struct, preferring placement in s's segment.
func (s Store_Container_Entry_setValue_Params) NewValue() (Store_Container_Entry_Value, error) {
	ss, err := NewStore_Container_Entry_Value(capnp.Struct(s).Segment())
	if err != nil {
		return Store_Container_Entry_Value{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Store_Container_Entry_setValue_Params_List is a list of Store_Container_Entry_setValue_Params.
type Store_Container_Entry_setValue_Params_List = capnp.StructList[Store_Container_Entry_setValue_Params]

// NewStore_Container_Entry_setValue_Params creates a new list of Store_Container_Entry_setValue_Params.
func NewStore_Container_Entry_setValue_Params_List(s *capnp.Segment, sz int32) (Store_Container_Entry_setValue_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_Entry_setValue_Params](l), err
}

// Store_Container_Entry_setValue_Params_Future is a wrapper for a Store_Container_Entry_setValue_Params promised by a client call.
type Store_Container_Entry_setValue_Params_Future struct{ *capnp.Future }

func (f Store_Container_Entry_setValue_Params_Future) Struct() (Store_Container_Entry_setValue_Params, error) {
	p, err := f.Future.Ptr()
	return Store_Container_Entry_setValue_Params(p.Struct()), err
}
func (p Store_Container_Entry_setValue_Params_Future) Value() Store_Container_Entry_Value_Future {
	return Store_Container_Entry_Value_Future{Future: p.Future.Field(0, nil)}
}

type Store_Container_Entry_setValue_Results capnp.Struct

// Store_Container_Entry_setValue_Results_TypeID is the unique identifier for the type Store_Container_Entry_setValue_Results.
const Store_Container_Entry_setValue_Results_TypeID = 0xd667b97e089bae01

func NewStore_Container_Entry_setValue_Results(s *capnp.Segment) (Store_Container_Entry_setValue_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_Container_Entry_setValue_Results(st), err
}

func NewRootStore_Container_Entry_setValue_Results(s *capnp.Segment) (Store_Container_Entry_setValue_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_Container_Entry_setValue_Results(st), err
}

func ReadRootStore_Container_Entry_setValue_Results(msg *capnp.Message) (Store_Container_Entry_setValue_Results, error) {
	root, err := msg.Root()
	return Store_Container_Entry_setValue_Results(root.Struct()), err
}

func (s Store_Container_Entry_setValue_Results) String() string {
	str, _ := text.Marshal(0xd667b97e089bae01, capnp.Struct(s))
	return str
}

func (s Store_Container_Entry_setValue_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_Entry_setValue_Results) DecodeFromPtr(p capnp.Ptr) Store_Container_Entry_setValue_Results {
	return Store_Container_Entry_setValue_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_Entry_setValue_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_Entry_setValue_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_Entry_setValue_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_Entry_setValue_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_Entry_setValue_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Store_Container_Entry_setValue_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Store_Container_Entry_setValue_Results_List is a list of Store_Container_Entry_setValue_Results.
type Store_Container_Entry_setValue_Results_List = capnp.StructList[Store_Container_Entry_setValue_Results]

// NewStore_Container_Entry_setValue_Results creates a new list of Store_Container_Entry_setValue_Results.
func NewStore_Container_Entry_setValue_Results_List(s *capnp.Segment, sz int32) (Store_Container_Entry_setValue_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Store_Container_Entry_setValue_Results](l), err
}

// Store_Container_Entry_setValue_Results_Future is a wrapper for a Store_Container_Entry_setValue_Results promised by a client call.
type Store_Container_Entry_setValue_Results_Future struct{ *capnp.Future }

func (f Store_Container_Entry_setValue_Results_Future) Struct() (Store_Container_Entry_setValue_Results, error) {
	p, err := f.Future.Ptr()
	return Store_Container_Entry_setValue_Results(p.Struct()), err
}

type Store_Container_KeyAndEntry capnp.Struct

// Store_Container_KeyAndEntry_TypeID is the unique identifier for the type Store_Container_KeyAndEntry.
const Store_Container_KeyAndEntry_TypeID = 0xefe759a6f2ffc230

func NewStore_Container_KeyAndEntry(s *capnp.Segment) (Store_Container_KeyAndEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Store_Container_KeyAndEntry(st), err
}

func NewRootStore_Container_KeyAndEntry(s *capnp.Segment) (Store_Container_KeyAndEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Store_Container_KeyAndEntry(st), err
}

func ReadRootStore_Container_KeyAndEntry(msg *capnp.Message) (Store_Container_KeyAndEntry, error) {
	root, err := msg.Root()
	return Store_Container_KeyAndEntry(root.Struct()), err
}

func (s Store_Container_KeyAndEntry) String() string {
	str, _ := text.Marshal(0xefe759a6f2ffc230, capnp.Struct(s))
	return str
}

func (s Store_Container_KeyAndEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_KeyAndEntry) DecodeFromPtr(p capnp.Ptr) Store_Container_KeyAndEntry {
	return Store_Container_KeyAndEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_KeyAndEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_KeyAndEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_KeyAndEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_KeyAndEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_KeyAndEntry) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_Container_KeyAndEntry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_KeyAndEntry) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_Container_KeyAndEntry) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Store_Container_KeyAndEntry) Entry() Store_Container_Entry {
	p, _ := capnp.Struct(s).Ptr(1)
	return Store_Container_Entry(p.Interface().Client())
}

func (s Store_Container_KeyAndEntry) HasEntry() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Store_Container_KeyAndEntry) SetEntry(v Store_Container_Entry) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Store_Container_KeyAndEntry_List is a list of Store_Container_KeyAndEntry.
type Store_Container_KeyAndEntry_List = capnp.StructList[Store_Container_KeyAndEntry]

// NewStore_Container_KeyAndEntry creates a new list of Store_Container_KeyAndEntry.
func NewStore_Container_KeyAndEntry_List(s *capnp.Segment, sz int32) (Store_Container_KeyAndEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Store_Container_KeyAndEntry](l), err
}

// Store_Container_KeyAndEntry_Future is a wrapper for a Store_Container_KeyAndEntry promised by a client call.
type Store_Container_KeyAndEntry_Future struct{ *capnp.Future }

func (f Store_Container_KeyAndEntry_Future) Struct() (Store_Container_KeyAndEntry, error) {
	p, err := f.Future.Ptr()
	return Store_Container_KeyAndEntry(p.Struct()), err
}
func (p Store_Container_KeyAndEntry_Future) Entry() Store_Container_Entry {
	return Store_Container_Entry(p.Future.Field(1, nil).Client())
}

type Store_Container_export_Params capnp.Struct

// Store_Container_export_Params_TypeID is the unique identifier for the type Store_Container_export_Params.
const Store_Container_export_Params_TypeID = 0x9e138889be22cc5e

func NewStore_Container_export_Params(s *capnp.Segment) (Store_Container_export_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_export_Params(st), err
}

func NewRootStore_Container_export_Params(s *capnp.Segment) (Store_Container_export_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_export_Params(st), err
}

func ReadRootStore_Container_export_Params(msg *capnp.Message) (Store_Container_export_Params, error) {
	root, err := msg.Root()
	return Store_Container_export_Params(root.Struct()), err
}

func (s Store_Container_export_Params) String() string {
	str, _ := text.Marshal(0x9e138889be22cc5e, capnp.Struct(s))
	return str
}

func (s Store_Container_export_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_export_Params) DecodeFromPtr(p capnp.Ptr) Store_Container_export_Params {
	return Store_Container_export_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_export_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_export_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_export_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_export_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Store_Container_export_Params_List is a list of Store_Container_export_Params.
type Store_Container_export_Params_List = capnp.StructList[Store_Container_export_Params]

// NewStore_Container_export_Params creates a new list of Store_Container_export_Params.
func NewStore_Container_export_Params_List(s *capnp.Segment, sz int32) (Store_Container_export_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Store_Container_export_Params](l), err
}

// Store_Container_export_Params_Future is a wrapper for a Store_Container_export_Params promised by a client call.
type Store_Container_export_Params_Future struct{ *capnp.Future }

func (f Store_Container_export_Params_Future) Struct() (Store_Container_export_Params, error) {
	p, err := f.Future.Ptr()
	return Store_Container_export_Params(p.Struct()), err
}

type Store_Container_export_Results capnp.Struct

// Store_Container_export_Results_TypeID is the unique identifier for the type Store_Container_export_Results.
const Store_Container_export_Results_TypeID = 0xa914844d7351c9ee

func NewStore_Container_export_Results(s *capnp.Segment) (Store_Container_export_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_export_Results(st), err
}

func NewRootStore_Container_export_Results(s *capnp.Segment) (Store_Container_export_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_export_Results(st), err
}

func ReadRootStore_Container_export_Results(msg *capnp.Message) (Store_Container_export_Results, error) {
	root, err := msg.Root()
	return Store_Container_export_Results(root.Struct()), err
}

func (s Store_Container_export_Results) String() string {
	str, _ := text.Marshal(0xa914844d7351c9ee, capnp.Struct(s))
	return str
}

func (s Store_Container_export_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_export_Results) DecodeFromPtr(p capnp.Ptr) Store_Container_export_Results {
	return Store_Container_export_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_export_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_export_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_export_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_export_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_export_Results) Json() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_Container_export_Results) HasJson() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_export_Results) JsonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_Container_export_Results) SetJson(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Store_Container_export_Results_List is a list of Store_Container_export_Results.
type Store_Container_export_Results_List = capnp.StructList[Store_Container_export_Results]

// NewStore_Container_export_Results creates a new list of Store_Container_export_Results.
func NewStore_Container_export_Results_List(s *capnp.Segment, sz int32) (Store_Container_export_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_export_Results](l), err
}

// Store_Container_export_Results_Future is a wrapper for a Store_Container_export_Results promised by a client call.
type Store_Container_export_Results_Future struct{ *capnp.Future }

func (f Store_Container_export_Results_Future) Struct() (Store_Container_export_Results, error) {
	p, err := f.Future.Ptr()
	return Store_Container_export_Results(p.Struct()), err
}

type Store_Container_downloadEntries_Params capnp.Struct

// Store_Container_downloadEntries_Params_TypeID is the unique identifier for the type Store_Container_downloadEntries_Params.
const Store_Container_downloadEntries_Params_TypeID = 0x93fc14178e630994

func NewStore_Container_downloadEntries_Params(s *capnp.Segment) (Store_Container_downloadEntries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_downloadEntries_Params(st), err
}

func NewRootStore_Container_downloadEntries_Params(s *capnp.Segment) (Store_Container_downloadEntries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_downloadEntries_Params(st), err
}

func ReadRootStore_Container_downloadEntries_Params(msg *capnp.Message) (Store_Container_downloadEntries_Params, error) {
	root, err := msg.Root()
	return Store_Container_downloadEntries_Params(root.Struct()), err
}

func (s Store_Container_downloadEntries_Params) String() string {
	str, _ := text.Marshal(0x93fc14178e630994, capnp.Struct(s))
	return str
}

func (s Store_Container_downloadEntries_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_downloadEntries_Params) DecodeFromPtr(p capnp.Ptr) Store_Container_downloadEntries_Params {
	return Store_Container_downloadEntries_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_downloadEntries_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_downloadEntries_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_downloadEntries_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_downloadEntries_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Store_Container_downloadEntries_Params_List is a list of Store_Container_downloadEntries_Params.
type Store_Container_downloadEntries_Params_List = capnp.StructList[Store_Container_downloadEntries_Params]

// NewStore_Container_downloadEntries_Params creates a new list of Store_Container_downloadEntries_Params.
func NewStore_Container_downloadEntries_Params_List(s *capnp.Segment, sz int32) (Store_Container_downloadEntries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Store_Container_downloadEntries_Params](l), err
}

// Store_Container_downloadEntries_Params_Future is a wrapper for a Store_Container_downloadEntries_Params promised by a client call.
type Store_Container_downloadEntries_Params_Future struct{ *capnp.Future }

func (f Store_Container_downloadEntries_Params_Future) Struct() (Store_Container_downloadEntries_Params, error) {
	p, err := f.Future.Ptr()
	return Store_Container_downloadEntries_Params(p.Struct()), err
}

type Store_Container_downloadEntries_Results capnp.Struct

// Store_Container_downloadEntries_Results_TypeID is the unique identifier for the type Store_Container_downloadEntries_Results.
const Store_Container_downloadEntries_Results_TypeID = 0xffe4319ac401d166

func NewStore_Container_downloadEntries_Results(s *capnp.Segment) (Store_Container_downloadEntries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_downloadEntries_Results(st), err
}

func NewRootStore_Container_downloadEntries_Results(s *capnp.Segment) (Store_Container_downloadEntries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_downloadEntries_Results(st), err
}

func ReadRootStore_Container_downloadEntries_Results(msg *capnp.Message) (Store_Container_downloadEntries_Results, error) {
	root, err := msg.Root()
	return Store_Container_downloadEntries_Results(root.Struct()), err
}

func (s Store_Container_downloadEntries_Results) String() string {
	str, _ := text.Marshal(0xffe4319ac401d166, capnp.Struct(s))
	return str
}

func (s Store_Container_downloadEntries_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_downloadEntries_Results) DecodeFromPtr(p capnp.Ptr) Store_Container_downloadEntries_Results {
	return Store_Container_downloadEntries_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_downloadEntries_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_downloadEntries_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_downloadEntries_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_downloadEntries_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_downloadEntries_Results) Entries() (common.Pair_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Pair_List(p.List()), err
}

func (s Store_Container_downloadEntries_Results) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_downloadEntries_Results) SetEntries(v common.Pair_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s Store_Container_downloadEntries_Results) NewEntries(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Store_Container_downloadEntries_Results_List is a list of Store_Container_downloadEntries_Results.
type Store_Container_downloadEntries_Results_List = capnp.StructList[Store_Container_downloadEntries_Results]

// NewStore_Container_downloadEntries_Results creates a new list of Store_Container_downloadEntries_Results.
func NewStore_Container_downloadEntries_Results_List(s *capnp.Segment, sz int32) (Store_Container_downloadEntries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_downloadEntries_Results](l), err
}

// Store_Container_downloadEntries_Results_Future is a wrapper for a Store_Container_downloadEntries_Results promised by a client call.
type Store_Container_downloadEntries_Results_Future struct{ *capnp.Future }

func (f Store_Container_downloadEntries_Results_Future) Struct() (Store_Container_downloadEntries_Results, error) {
	p, err := f.Future.Ptr()
	return Store_Container_downloadEntries_Results(p.Struct()), err
}

type Store_Container_listEntries_Params capnp.Struct

// Store_Container_listEntries_Params_TypeID is the unique identifier for the type Store_Container_listEntries_Params.
const Store_Container_listEntries_Params_TypeID = 0xdbf70a288c6933b1

func NewStore_Container_listEntries_Params(s *capnp.Segment) (Store_Container_listEntries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_listEntries_Params(st), err
}

func NewRootStore_Container_listEntries_Params(s *capnp.Segment) (Store_Container_listEntries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_listEntries_Params(st), err
}

func ReadRootStore_Container_listEntries_Params(msg *capnp.Message) (Store_Container_listEntries_Params, error) {
	root, err := msg.Root()
	return Store_Container_listEntries_Params(root.Struct()), err
}

func (s Store_Container_listEntries_Params) String() string {
	str, _ := text.Marshal(0xdbf70a288c6933b1, capnp.Struct(s))
	return str
}

func (s Store_Container_listEntries_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_listEntries_Params) DecodeFromPtr(p capnp.Ptr) Store_Container_listEntries_Params {
	return Store_Container_listEntries_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_listEntries_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_listEntries_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_listEntries_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_listEntries_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Store_Container_listEntries_Params_List is a list of Store_Container_listEntries_Params.
type Store_Container_listEntries_Params_List = capnp.StructList[Store_Container_listEntries_Params]

// NewStore_Container_listEntries_Params creates a new list of Store_Container_listEntries_Params.
func NewStore_Container_listEntries_Params_List(s *capnp.Segment, sz int32) (Store_Container_listEntries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Store_Container_listEntries_Params](l), err
}

// Store_Container_listEntries_Params_Future is a wrapper for a Store_Container_listEntries_Params promised by a client call.
type Store_Container_listEntries_Params_Future struct{ *capnp.Future }

func (f Store_Container_listEntries_Params_Future) Struct() (Store_Container_listEntries_Params, error) {
	p, err := f.Future.Ptr()
	return Store_Container_listEntries_Params(p.Struct()), err
}

type Store_Container_listEntries_Results capnp.Struct

// Store_Container_listEntries_Results_TypeID is the unique identifier for the type Store_Container_listEntries_Results.
const Store_Container_listEntries_Results_TypeID = 0xa028d3ba03083872

func NewStore_Container_listEntries_Results(s *capnp.Segment) (Store_Container_listEntries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_listEntries_Results(st), err
}

func NewRootStore_Container_listEntries_Results(s *capnp.Segment) (Store_Container_listEntries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_listEntries_Results(st), err
}

func ReadRootStore_Container_listEntries_Results(msg *capnp.Message) (Store_Container_listEntries_Results, error) {
	root, err := msg.Root()
	return Store_Container_listEntries_Results(root.Struct()), err
}

func (s Store_Container_listEntries_Results) String() string {
	str, _ := text.Marshal(0xa028d3ba03083872, capnp.Struct(s))
	return str
}

func (s Store_Container_listEntries_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_listEntries_Results) DecodeFromPtr(p capnp.Ptr) Store_Container_listEntries_Results {
	return Store_Container_listEntries_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_listEntries_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_listEntries_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_listEntries_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_listEntries_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_listEntries_Results) Entries() (Store_Container_KeyAndEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Store_Container_KeyAndEntry_List(p.List()), err
}

func (s Store_Container_listEntries_Results) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_listEntries_Results) SetEntries(v Store_Container_KeyAndEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Store_Container_KeyAndEntry_List, preferring placement in s's segment.
func (s Store_Container_listEntries_Results) NewEntries(n int32) (Store_Container_KeyAndEntry_List, error) {
	l, err := NewStore_Container_KeyAndEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Store_Container_KeyAndEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Store_Container_listEntries_Results_List is a list of Store_Container_listEntries_Results.
type Store_Container_listEntries_Results_List = capnp.StructList[Store_Container_listEntries_Results]

// NewStore_Container_listEntries_Results creates a new list of Store_Container_listEntries_Results.
func NewStore_Container_listEntries_Results_List(s *capnp.Segment, sz int32) (Store_Container_listEntries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_listEntries_Results](l), err
}

// Store_Container_listEntries_Results_Future is a wrapper for a Store_Container_listEntries_Results promised by a client call.
type Store_Container_listEntries_Results_Future struct{ *capnp.Future }

func (f Store_Container_listEntries_Results_Future) Struct() (Store_Container_listEntries_Results, error) {
	p, err := f.Future.Ptr()
	return Store_Container_listEntries_Results(p.Struct()), err
}

type Store_Container_getEntry_Params capnp.Struct

// Store_Container_getEntry_Params_TypeID is the unique identifier for the type Store_Container_getEntry_Params.
const Store_Container_getEntry_Params_TypeID = 0xc4161d5db43ad669

func NewStore_Container_getEntry_Params(s *capnp.Segment) (Store_Container_getEntry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_getEntry_Params(st), err
}

func NewRootStore_Container_getEntry_Params(s *capnp.Segment) (Store_Container_getEntry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_getEntry_Params(st), err
}

func ReadRootStore_Container_getEntry_Params(msg *capnp.Message) (Store_Container_getEntry_Params, error) {
	root, err := msg.Root()
	return Store_Container_getEntry_Params(root.Struct()), err
}

func (s Store_Container_getEntry_Params) String() string {
	str, _ := text.Marshal(0xc4161d5db43ad669, capnp.Struct(s))
	return str
}

func (s Store_Container_getEntry_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_getEntry_Params) DecodeFromPtr(p capnp.Ptr) Store_Container_getEntry_Params {
	return Store_Container_getEntry_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_getEntry_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_getEntry_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_getEntry_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_getEntry_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_getEntry_Params) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_Container_getEntry_Params) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_getEntry_Params) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_Container_getEntry_Params) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Store_Container_getEntry_Params_List is a list of Store_Container_getEntry_Params.
type Store_Container_getEntry_Params_List = capnp.StructList[Store_Container_getEntry_Params]

// NewStore_Container_getEntry_Params creates a new list of Store_Container_getEntry_Params.
func NewStore_Container_getEntry_Params_List(s *capnp.Segment, sz int32) (Store_Container_getEntry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_getEntry_Params](l), err
}

// Store_Container_getEntry_Params_Future is a wrapper for a Store_Container_getEntry_Params promised by a client call.
type Store_Container_getEntry_Params_Future struct{ *capnp.Future }

func (f Store_Container_getEntry_Params_Future) Struct() (Store_Container_getEntry_Params, error) {
	p, err := f.Future.Ptr()
	return Store_Container_getEntry_Params(p.Struct()), err
}

type Store_Container_getEntry_Results capnp.Struct

// Store_Container_getEntry_Results_TypeID is the unique identifier for the type Store_Container_getEntry_Results.
const Store_Container_getEntry_Results_TypeID = 0x9bc1d764a970b846

func NewStore_Container_getEntry_Results(s *capnp.Segment) (Store_Container_getEntry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_getEntry_Results(st), err
}

func NewRootStore_Container_getEntry_Results(s *capnp.Segment) (Store_Container_getEntry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_getEntry_Results(st), err
}

func ReadRootStore_Container_getEntry_Results(msg *capnp.Message) (Store_Container_getEntry_Results, error) {
	root, err := msg.Root()
	return Store_Container_getEntry_Results(root.Struct()), err
}

func (s Store_Container_getEntry_Results) String() string {
	str, _ := text.Marshal(0x9bc1d764a970b846, capnp.Struct(s))
	return str
}

func (s Store_Container_getEntry_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_getEntry_Results) DecodeFromPtr(p capnp.Ptr) Store_Container_getEntry_Results {
	return Store_Container_getEntry_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_getEntry_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_getEntry_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_getEntry_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_getEntry_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_getEntry_Results) Entry() Store_Container_Entry {
	p, _ := capnp.Struct(s).Ptr(0)
	return Store_Container_Entry(p.Interface().Client())
}

func (s Store_Container_getEntry_Results) HasEntry() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_getEntry_Results) SetEntry(v Store_Container_Entry) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Store_Container_getEntry_Results_List is a list of Store_Container_getEntry_Results.
type Store_Container_getEntry_Results_List = capnp.StructList[Store_Container_getEntry_Results]

// NewStore_Container_getEntry_Results creates a new list of Store_Container_getEntry_Results.
func NewStore_Container_getEntry_Results_List(s *capnp.Segment, sz int32) (Store_Container_getEntry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_getEntry_Results](l), err
}

// Store_Container_getEntry_Results_Future is a wrapper for a Store_Container_getEntry_Results promised by a client call.
type Store_Container_getEntry_Results_Future struct{ *capnp.Future }

func (f Store_Container_getEntry_Results_Future) Struct() (Store_Container_getEntry_Results, error) {
	p, err := f.Future.Ptr()
	return Store_Container_getEntry_Results(p.Struct()), err
}
func (p Store_Container_getEntry_Results_Future) Entry() Store_Container_Entry {
	return Store_Container_Entry(p.Future.Field(0, nil).Client())
}

type Store_Container_removeEntry_Params capnp.Struct

// Store_Container_removeEntry_Params_TypeID is the unique identifier for the type Store_Container_removeEntry_Params.
const Store_Container_removeEntry_Params_TypeID = 0xfde99170b27ac5ce

func NewStore_Container_removeEntry_Params(s *capnp.Segment) (Store_Container_removeEntry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_removeEntry_Params(st), err
}

func NewRootStore_Container_removeEntry_Params(s *capnp.Segment) (Store_Container_removeEntry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_Container_removeEntry_Params(st), err
}

func ReadRootStore_Container_removeEntry_Params(msg *capnp.Message) (Store_Container_removeEntry_Params, error) {
	root, err := msg.Root()
	return Store_Container_removeEntry_Params(root.Struct()), err
}

func (s Store_Container_removeEntry_Params) String() string {
	str, _ := text.Marshal(0xfde99170b27ac5ce, capnp.Struct(s))
	return str
}

func (s Store_Container_removeEntry_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_removeEntry_Params) DecodeFromPtr(p capnp.Ptr) Store_Container_removeEntry_Params {
	return Store_Container_removeEntry_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_removeEntry_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_removeEntry_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_removeEntry_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_removeEntry_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_removeEntry_Params) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_Container_removeEntry_Params) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_removeEntry_Params) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_Container_removeEntry_Params) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Store_Container_removeEntry_Params_List is a list of Store_Container_removeEntry_Params.
type Store_Container_removeEntry_Params_List = capnp.StructList[Store_Container_removeEntry_Params]

// NewStore_Container_removeEntry_Params creates a new list of Store_Container_removeEntry_Params.
func NewStore_Container_removeEntry_Params_List(s *capnp.Segment, sz int32) (Store_Container_removeEntry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_removeEntry_Params](l), err
}

// Store_Container_removeEntry_Params_Future is a wrapper for a Store_Container_removeEntry_Params promised by a client call.
type Store_Container_removeEntry_Params_Future struct{ *capnp.Future }

func (f Store_Container_removeEntry_Params_Future) Struct() (Store_Container_removeEntry_Params, error) {
	p, err := f.Future.Ptr()
	return Store_Container_removeEntry_Params(p.Struct()), err
}

type Store_Container_removeEntry_Results capnp.Struct

// Store_Container_removeEntry_Results_TypeID is the unique identifier for the type Store_Container_removeEntry_Results.
const Store_Container_removeEntry_Results_TypeID = 0xfbd938c95f64b7bf

func NewStore_Container_removeEntry_Results(s *capnp.Segment) (Store_Container_removeEntry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_Container_removeEntry_Results(st), err
}

func NewRootStore_Container_removeEntry_Results(s *capnp.Segment) (Store_Container_removeEntry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_Container_removeEntry_Results(st), err
}

func ReadRootStore_Container_removeEntry_Results(msg *capnp.Message) (Store_Container_removeEntry_Results, error) {
	root, err := msg.Root()
	return Store_Container_removeEntry_Results(root.Struct()), err
}

func (s Store_Container_removeEntry_Results) String() string {
	str, _ := text.Marshal(0xfbd938c95f64b7bf, capnp.Struct(s))
	return str
}

func (s Store_Container_removeEntry_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_removeEntry_Results) DecodeFromPtr(p capnp.Ptr) Store_Container_removeEntry_Results {
	return Store_Container_removeEntry_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_removeEntry_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_removeEntry_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_removeEntry_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_removeEntry_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_removeEntry_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Store_Container_removeEntry_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Store_Container_removeEntry_Results_List is a list of Store_Container_removeEntry_Results.
type Store_Container_removeEntry_Results_List = capnp.StructList[Store_Container_removeEntry_Results]

// NewStore_Container_removeEntry_Results creates a new list of Store_Container_removeEntry_Results.
func NewStore_Container_removeEntry_Results_List(s *capnp.Segment, sz int32) (Store_Container_removeEntry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Store_Container_removeEntry_Results](l), err
}

// Store_Container_removeEntry_Results_Future is a wrapper for a Store_Container_removeEntry_Results promised by a client call.
type Store_Container_removeEntry_Results_Future struct{ *capnp.Future }

func (f Store_Container_removeEntry_Results_Future) Struct() (Store_Container_removeEntry_Results, error) {
	p, err := f.Future.Ptr()
	return Store_Container_removeEntry_Results(p.Struct()), err
}

type Store_Container_clear_Params capnp.Struct

// Store_Container_clear_Params_TypeID is the unique identifier for the type Store_Container_clear_Params.
const Store_Container_clear_Params_TypeID = 0xc31c71f8d67b827b

func NewStore_Container_clear_Params(s *capnp.Segment) (Store_Container_clear_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_clear_Params(st), err
}

func NewRootStore_Container_clear_Params(s *capnp.Segment) (Store_Container_clear_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_Container_clear_Params(st), err
}

func ReadRootStore_Container_clear_Params(msg *capnp.Message) (Store_Container_clear_Params, error) {
	root, err := msg.Root()
	return Store_Container_clear_Params(root.Struct()), err
}

func (s Store_Container_clear_Params) String() string {
	str, _ := text.Marshal(0xc31c71f8d67b827b, capnp.Struct(s))
	return str
}

func (s Store_Container_clear_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_clear_Params) DecodeFromPtr(p capnp.Ptr) Store_Container_clear_Params {
	return Store_Container_clear_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_clear_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_clear_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_clear_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_clear_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Store_Container_clear_Params_List is a list of Store_Container_clear_Params.
type Store_Container_clear_Params_List = capnp.StructList[Store_Container_clear_Params]

// NewStore_Container_clear_Params creates a new list of Store_Container_clear_Params.
func NewStore_Container_clear_Params_List(s *capnp.Segment, sz int32) (Store_Container_clear_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Store_Container_clear_Params](l), err
}

// Store_Container_clear_Params_Future is a wrapper for a Store_Container_clear_Params promised by a client call.
type Store_Container_clear_Params_Future struct{ *capnp.Future }

func (f Store_Container_clear_Params_Future) Struct() (Store_Container_clear_Params, error) {
	p, err := f.Future.Ptr()
	return Store_Container_clear_Params(p.Struct()), err
}

type Store_Container_clear_Results capnp.Struct

// Store_Container_clear_Results_TypeID is the unique identifier for the type Store_Container_clear_Results.
const Store_Container_clear_Results_TypeID = 0xeb6f27dfc29bffad

func NewStore_Container_clear_Results(s *capnp.Segment) (Store_Container_clear_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_Container_clear_Results(st), err
}

func NewRootStore_Container_clear_Results(s *capnp.Segment) (Store_Container_clear_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_Container_clear_Results(st), err
}

func ReadRootStore_Container_clear_Results(msg *capnp.Message) (Store_Container_clear_Results, error) {
	root, err := msg.Root()
	return Store_Container_clear_Results(root.Struct()), err
}

func (s Store_Container_clear_Results) String() string {
	str, _ := text.Marshal(0xeb6f27dfc29bffad, capnp.Struct(s))
	return str
}

func (s Store_Container_clear_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_clear_Results) DecodeFromPtr(p capnp.Ptr) Store_Container_clear_Results {
	return Store_Container_clear_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_clear_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_clear_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_clear_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_clear_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_clear_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Store_Container_clear_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Store_Container_clear_Results_List is a list of Store_Container_clear_Results.
type Store_Container_clear_Results_List = capnp.StructList[Store_Container_clear_Results]

// NewStore_Container_clear_Results creates a new list of Store_Container_clear_Results.
func NewStore_Container_clear_Results_List(s *capnp.Segment, sz int32) (Store_Container_clear_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Store_Container_clear_Results](l), err
}

// Store_Container_clear_Results_Future is a wrapper for a Store_Container_clear_Results promised by a client call.
type Store_Container_clear_Results_Future struct{ *capnp.Future }

func (f Store_Container_clear_Results_Future) Struct() (Store_Container_clear_Results, error) {
	p, err := f.Future.Ptr()
	return Store_Container_clear_Results(p.Struct()), err
}

type Store_Container_addEntry_Params capnp.Struct

// Store_Container_addEntry_Params_TypeID is the unique identifier for the type Store_Container_addEntry_Params.
const Store_Container_addEntry_Params_TypeID = 0xfbef00fded9c8312

func NewStore_Container_addEntry_Params(s *capnp.Segment) (Store_Container_addEntry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Store_Container_addEntry_Params(st), err
}

func NewRootStore_Container_addEntry_Params(s *capnp.Segment) (Store_Container_addEntry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Store_Container_addEntry_Params(st), err
}

func ReadRootStore_Container_addEntry_Params(msg *capnp.Message) (Store_Container_addEntry_Params, error) {
	root, err := msg.Root()
	return Store_Container_addEntry_Params(root.Struct()), err
}

func (s Store_Container_addEntry_Params) String() string {
	str, _ := text.Marshal(0xfbef00fded9c8312, capnp.Struct(s))
	return str
}

func (s Store_Container_addEntry_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_addEntry_Params) DecodeFromPtr(p capnp.Ptr) Store_Container_addEntry_Params {
	return Store_Container_addEntry_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_addEntry_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_addEntry_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_addEntry_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_addEntry_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_addEntry_Params) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_Container_addEntry_Params) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_addEntry_Params) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_Container_addEntry_Params) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Store_Container_addEntry_Params) Value() (Store_Container_Entry_Value, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Store_Container_Entry_Value(p.Struct()), err
}

func (s Store_Container_addEntry_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Store_Container_addEntry_Params) SetValue(v Store_Container_Entry_Value) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Store_Container_Entry_Value struct, preferring placement in s's segment.
func (s Store_Container_addEntry_Params) NewValue() (Store_Container_Entry_Value, error) {
	ss, err := NewStore_Container_Entry_Value(capnp.Struct(s).Segment())
	if err != nil {
		return Store_Container_Entry_Value{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Store_Container_addEntry_Params) ReplaceExisting() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Store_Container_addEntry_Params) SetReplaceExisting(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Store_Container_addEntry_Params_List is a list of Store_Container_addEntry_Params.
type Store_Container_addEntry_Params_List = capnp.StructList[Store_Container_addEntry_Params]

// NewStore_Container_addEntry_Params creates a new list of Store_Container_addEntry_Params.
func NewStore_Container_addEntry_Params_List(s *capnp.Segment, sz int32) (Store_Container_addEntry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Store_Container_addEntry_Params](l), err
}

// Store_Container_addEntry_Params_Future is a wrapper for a Store_Container_addEntry_Params promised by a client call.
type Store_Container_addEntry_Params_Future struct{ *capnp.Future }

func (f Store_Container_addEntry_Params_Future) Struct() (Store_Container_addEntry_Params, error) {
	p, err := f.Future.Ptr()
	return Store_Container_addEntry_Params(p.Struct()), err
}
func (p Store_Container_addEntry_Params_Future) Value() Store_Container_Entry_Value_Future {
	return Store_Container_Entry_Value_Future{Future: p.Future.Field(1, nil)}
}

type Store_Container_addEntry_Results capnp.Struct

// Store_Container_addEntry_Results_TypeID is the unique identifier for the type Store_Container_addEntry_Results.
const Store_Container_addEntry_Results_TypeID = 0x883b57737fba9e54

func NewStore_Container_addEntry_Results(s *capnp.Segment) (Store_Container_addEntry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Store_Container_addEntry_Results(st), err
}

func NewRootStore_Container_addEntry_Results(s *capnp.Segment) (Store_Container_addEntry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Store_Container_addEntry_Results(st), err
}

func ReadRootStore_Container_addEntry_Results(msg *capnp.Message) (Store_Container_addEntry_Results, error) {
	root, err := msg.Root()
	return Store_Container_addEntry_Results(root.Struct()), err
}

func (s Store_Container_addEntry_Results) String() string {
	str, _ := text.Marshal(0x883b57737fba9e54, capnp.Struct(s))
	return str
}

func (s Store_Container_addEntry_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_Container_addEntry_Results) DecodeFromPtr(p capnp.Ptr) Store_Container_addEntry_Results {
	return Store_Container_addEntry_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_Container_addEntry_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_Container_addEntry_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_Container_addEntry_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_Container_addEntry_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_Container_addEntry_Results) Entry() Store_Container_Entry {
	p, _ := capnp.Struct(s).Ptr(0)
	return Store_Container_Entry(p.Interface().Client())
}

func (s Store_Container_addEntry_Results) HasEntry() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_Container_addEntry_Results) SetEntry(v Store_Container_Entry) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Store_Container_addEntry_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Store_Container_addEntry_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Store_Container_addEntry_Results_List is a list of Store_Container_addEntry_Results.
type Store_Container_addEntry_Results_List = capnp.StructList[Store_Container_addEntry_Results]

// NewStore_Container_addEntry_Results creates a new list of Store_Container_addEntry_Results.
func NewStore_Container_addEntry_Results_List(s *capnp.Segment, sz int32) (Store_Container_addEntry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Store_Container_addEntry_Results](l), err
}

// Store_Container_addEntry_Results_Future is a wrapper for a Store_Container_addEntry_Results promised by a client call.
type Store_Container_addEntry_Results_Future struct{ *capnp.Future }

func (f Store_Container_addEntry_Results_Future) Struct() (Store_Container_addEntry_Results, error) {
	p, err := f.Future.Ptr()
	return Store_Container_addEntry_Results(p.Struct()), err
}
func (p Store_Container_addEntry_Results_Future) Entry() Store_Container_Entry {
	return Store_Container_Entry(p.Future.Field(0, nil).Client())
}

type Store_InfoAndContainer capnp.Struct

// Store_InfoAndContainer_TypeID is the unique identifier for the type Store_InfoAndContainer.
const Store_InfoAndContainer_TypeID = 0xeaec227ef03ec200

func NewStore_InfoAndContainer(s *capnp.Segment) (Store_InfoAndContainer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Store_InfoAndContainer(st), err
}

func NewRootStore_InfoAndContainer(s *capnp.Segment) (Store_InfoAndContainer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Store_InfoAndContainer(st), err
}

func ReadRootStore_InfoAndContainer(msg *capnp.Message) (Store_InfoAndContainer, error) {
	root, err := msg.Root()
	return Store_InfoAndContainer(root.Struct()), err
}

func (s Store_InfoAndContainer) String() string {
	str, _ := text.Marshal(0xeaec227ef03ec200, capnp.Struct(s))
	return str
}

func (s Store_InfoAndContainer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_InfoAndContainer) DecodeFromPtr(p capnp.Ptr) Store_InfoAndContainer {
	return Store_InfoAndContainer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_InfoAndContainer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_InfoAndContainer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_InfoAndContainer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_InfoAndContainer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_InfoAndContainer) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_InfoAndContainer) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_InfoAndContainer) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_InfoAndContainer) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Store_InfoAndContainer) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Store_InfoAndContainer) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Store_InfoAndContainer) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Store_InfoAndContainer) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Store_InfoAndContainer) Container() Store_Container {
	p, _ := capnp.Struct(s).Ptr(2)
	return Store_Container(p.Interface().Client())
}

func (s Store_InfoAndContainer) HasContainer() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Store_InfoAndContainer) SetContainer(v Store_Container) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

// Store_InfoAndContainer_List is a list of Store_InfoAndContainer.
type Store_InfoAndContainer_List = capnp.StructList[Store_InfoAndContainer]

// NewStore_InfoAndContainer creates a new list of Store_InfoAndContainer.
func NewStore_InfoAndContainer_List(s *capnp.Segment, sz int32) (Store_InfoAndContainer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Store_InfoAndContainer](l), err
}

// Store_InfoAndContainer_Future is a wrapper for a Store_InfoAndContainer promised by a client call.
type Store_InfoAndContainer_Future struct{ *capnp.Future }

func (f Store_InfoAndContainer_Future) Struct() (Store_InfoAndContainer, error) {
	p, err := f.Future.Ptr()
	return Store_InfoAndContainer(p.Struct()), err
}
func (p Store_InfoAndContainer_Future) Container() Store_Container {
	return Store_Container(p.Future.Field(2, nil).Client())
}

type Store_ImportExportData capnp.Struct

// Store_ImportExportData_TypeID is the unique identifier for the type Store_ImportExportData.
const Store_ImportExportData_TypeID = 0x847d262cefd2f142

func NewStore_ImportExportData(s *capnp.Segment) (Store_ImportExportData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Store_ImportExportData(st), err
}

func NewRootStore_ImportExportData(s *capnp.Segment) (Store_ImportExportData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Store_ImportExportData(st), err
}

func ReadRootStore_ImportExportData(msg *capnp.Message) (Store_ImportExportData, error) {
	root, err := msg.Root()
	return Store_ImportExportData(root.Struct()), err
}

func (s Store_ImportExportData) String() string {
	str, _ := text.Marshal(0x847d262cefd2f142, capnp.Struct(s))
	return str
}

func (s Store_ImportExportData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_ImportExportData) DecodeFromPtr(p capnp.Ptr) Store_ImportExportData {
	return Store_ImportExportData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_ImportExportData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_ImportExportData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_ImportExportData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_ImportExportData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_ImportExportData) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Store_ImportExportData) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_ImportExportData) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Store_ImportExportData) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Store_ImportExportData) Entries() (common.Pair_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Pair_List(p.List()), err
}

func (s Store_ImportExportData) HasEntries() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Store_ImportExportData) SetEntries(v common.Pair_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s Store_ImportExportData) NewEntries(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Store_ImportExportData) IsAnyValue() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.BitList(p.List()), err
}

func (s Store_ImportExportData) HasIsAnyValue() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Store_ImportExportData) SetIsAnyValue(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewIsAnyValue sets the isAnyValue field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s Store_ImportExportData) NewIsAnyValue(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Store_ImportExportData_List is a list of Store_ImportExportData.
type Store_ImportExportData_List = capnp.StructList[Store_ImportExportData]

// NewStore_ImportExportData creates a new list of Store_ImportExportData.
func NewStore_ImportExportData_List(s *capnp.Segment, sz int32) (Store_ImportExportData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Store_ImportExportData](l), err
}

// Store_ImportExportData_Future is a wrapper for a Store_ImportExportData promised by a client call.
type Store_ImportExportData_Future struct{ *capnp.Future }

func (f Store_ImportExportData_Future) Struct() (Store_ImportExportData, error) {
	p, err := f.Future.Ptr()
	return Store_ImportExportData(p.Struct()), err
}
func (p Store_ImportExportData_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Store_newContainer_Params capnp.Struct

// Store_newContainer_Params_TypeID is the unique identifier for the type Store_newContainer_Params.
const Store_newContainer_Params_TypeID = 0xbc4cb84d672b9bf6

func NewStore_newContainer_Params(s *capnp.Segment) (Store_newContainer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Store_newContainer_Params(st), err
}

func NewRootStore_newContainer_Params(s *capnp.Segment) (Store_newContainer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Store_newContainer_Params(st), err
}

func ReadRootStore_newContainer_Params(msg *capnp.Message) (Store_newContainer_Params, error) {
	root, err := msg.Root()
	return Store_newContainer_Params(root.Struct()), err
}

func (s Store_newContainer_Params) String() string {
	str, _ := text.Marshal(0xbc4cb84d672b9bf6, capnp.Struct(s))
	return str
}

func (s Store_newContainer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_newContainer_Params) DecodeFromPtr(p capnp.Ptr) Store_newContainer_Params {
	return Store_newContainer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_newContainer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_newContainer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_newContainer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_newContainer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_newContainer_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_newContainer_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_newContainer_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_newContainer_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Store_newContainer_Params) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Store_newContainer_Params) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Store_newContainer_Params) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Store_newContainer_Params) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Store_newContainer_Params_List is a list of Store_newContainer_Params.
type Store_newContainer_Params_List = capnp.StructList[Store_newContainer_Params]

// NewStore_newContainer_Params creates a new list of Store_newContainer_Params.
func NewStore_newContainer_Params_List(s *capnp.Segment, sz int32) (Store_newContainer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Store_newContainer_Params](l), err
}

// Store_newContainer_Params_Future is a wrapper for a Store_newContainer_Params promised by a client call.
type Store_newContainer_Params_Future struct{ *capnp.Future }

func (f Store_newContainer_Params_Future) Struct() (Store_newContainer_Params, error) {
	p, err := f.Future.Ptr()
	return Store_newContainer_Params(p.Struct()), err
}

type Store_newContainer_Results capnp.Struct

// Store_newContainer_Results_TypeID is the unique identifier for the type Store_newContainer_Results.
const Store_newContainer_Results_TypeID = 0xf32349bf3a9997ac

func NewStore_newContainer_Results(s *capnp.Segment) (Store_newContainer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_newContainer_Results(st), err
}

func NewRootStore_newContainer_Results(s *capnp.Segment) (Store_newContainer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_newContainer_Results(st), err
}

func ReadRootStore_newContainer_Results(msg *capnp.Message) (Store_newContainer_Results, error) {
	root, err := msg.Root()
	return Store_newContainer_Results(root.Struct()), err
}

func (s Store_newContainer_Results) String() string {
	str, _ := text.Marshal(0xf32349bf3a9997ac, capnp.Struct(s))
	return str
}

func (s Store_newContainer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_newContainer_Results) DecodeFromPtr(p capnp.Ptr) Store_newContainer_Results {
	return Store_newContainer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_newContainer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_newContainer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_newContainer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_newContainer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_newContainer_Results) Container() Store_Container {
	p, _ := capnp.Struct(s).Ptr(0)
	return Store_Container(p.Interface().Client())
}

func (s Store_newContainer_Results) HasContainer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_newContainer_Results) SetContainer(v Store_Container) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Store_newContainer_Results_List is a list of Store_newContainer_Results.
type Store_newContainer_Results_List = capnp.StructList[Store_newContainer_Results]

// NewStore_newContainer_Results creates a new list of Store_newContainer_Results.
func NewStore_newContainer_Results_List(s *capnp.Segment, sz int32) (Store_newContainer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_newContainer_Results](l), err
}

// Store_newContainer_Results_Future is a wrapper for a Store_newContainer_Results promised by a client call.
type Store_newContainer_Results_Future struct{ *capnp.Future }

func (f Store_newContainer_Results_Future) Struct() (Store_newContainer_Results, error) {
	p, err := f.Future.Ptr()
	return Store_newContainer_Results(p.Struct()), err
}
func (p Store_newContainer_Results_Future) Container() Store_Container {
	return Store_Container(p.Future.Field(0, nil).Client())
}

type Store_containerWithId_Params capnp.Struct

// Store_containerWithId_Params_TypeID is the unique identifier for the type Store_containerWithId_Params.
const Store_containerWithId_Params_TypeID = 0xf517bec79f8d2744

func NewStore_containerWithId_Params(s *capnp.Segment) (Store_containerWithId_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_containerWithId_Params(st), err
}

func NewRootStore_containerWithId_Params(s *capnp.Segment) (Store_containerWithId_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_containerWithId_Params(st), err
}

func ReadRootStore_containerWithId_Params(msg *capnp.Message) (Store_containerWithId_Params, error) {
	root, err := msg.Root()
	return Store_containerWithId_Params(root.Struct()), err
}

func (s Store_containerWithId_Params) String() string {
	str, _ := text.Marshal(0xf517bec79f8d2744, capnp.Struct(s))
	return str
}

func (s Store_containerWithId_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_containerWithId_Params) DecodeFromPtr(p capnp.Ptr) Store_containerWithId_Params {
	return Store_containerWithId_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_containerWithId_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_containerWithId_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_containerWithId_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_containerWithId_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_containerWithId_Params) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_containerWithId_Params) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_containerWithId_Params) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_containerWithId_Params) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Store_containerWithId_Params_List is a list of Store_containerWithId_Params.
type Store_containerWithId_Params_List = capnp.StructList[Store_containerWithId_Params]

// NewStore_containerWithId_Params creates a new list of Store_containerWithId_Params.
func NewStore_containerWithId_Params_List(s *capnp.Segment, sz int32) (Store_containerWithId_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_containerWithId_Params](l), err
}

// Store_containerWithId_Params_Future is a wrapper for a Store_containerWithId_Params promised by a client call.
type Store_containerWithId_Params_Future struct{ *capnp.Future }

func (f Store_containerWithId_Params_Future) Struct() (Store_containerWithId_Params, error) {
	p, err := f.Future.Ptr()
	return Store_containerWithId_Params(p.Struct()), err
}

type Store_containerWithId_Results capnp.Struct

// Store_containerWithId_Results_TypeID is the unique identifier for the type Store_containerWithId_Results.
const Store_containerWithId_Results_TypeID = 0xb2af26aeda5445e5

func NewStore_containerWithId_Results(s *capnp.Segment) (Store_containerWithId_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_containerWithId_Results(st), err
}

func NewRootStore_containerWithId_Results(s *capnp.Segment) (Store_containerWithId_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_containerWithId_Results(st), err
}

func ReadRootStore_containerWithId_Results(msg *capnp.Message) (Store_containerWithId_Results, error) {
	root, err := msg.Root()
	return Store_containerWithId_Results(root.Struct()), err
}

func (s Store_containerWithId_Results) String() string {
	str, _ := text.Marshal(0xb2af26aeda5445e5, capnp.Struct(s))
	return str
}

func (s Store_containerWithId_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_containerWithId_Results) DecodeFromPtr(p capnp.Ptr) Store_containerWithId_Results {
	return Store_containerWithId_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_containerWithId_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_containerWithId_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_containerWithId_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_containerWithId_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_containerWithId_Results) Container() Store_Container {
	p, _ := capnp.Struct(s).Ptr(0)
	return Store_Container(p.Interface().Client())
}

func (s Store_containerWithId_Results) HasContainer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_containerWithId_Results) SetContainer(v Store_Container) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Store_containerWithId_Results_List is a list of Store_containerWithId_Results.
type Store_containerWithId_Results_List = capnp.StructList[Store_containerWithId_Results]

// NewStore_containerWithId_Results creates a new list of Store_containerWithId_Results.
func NewStore_containerWithId_Results_List(s *capnp.Segment, sz int32) (Store_containerWithId_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_containerWithId_Results](l), err
}

// Store_containerWithId_Results_Future is a wrapper for a Store_containerWithId_Results promised by a client call.
type Store_containerWithId_Results_Future struct{ *capnp.Future }

func (f Store_containerWithId_Results_Future) Struct() (Store_containerWithId_Results, error) {
	p, err := f.Future.Ptr()
	return Store_containerWithId_Results(p.Struct()), err
}
func (p Store_containerWithId_Results_Future) Container() Store_Container {
	return Store_Container(p.Future.Field(0, nil).Client())
}

type Store_listContainers_Params capnp.Struct

// Store_listContainers_Params_TypeID is the unique identifier for the type Store_listContainers_Params.
const Store_listContainers_Params_TypeID = 0xa466e92166fcce6e

func NewStore_listContainers_Params(s *capnp.Segment) (Store_listContainers_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_listContainers_Params(st), err
}

func NewRootStore_listContainers_Params(s *capnp.Segment) (Store_listContainers_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Store_listContainers_Params(st), err
}

func ReadRootStore_listContainers_Params(msg *capnp.Message) (Store_listContainers_Params, error) {
	root, err := msg.Root()
	return Store_listContainers_Params(root.Struct()), err
}

func (s Store_listContainers_Params) String() string {
	str, _ := text.Marshal(0xa466e92166fcce6e, capnp.Struct(s))
	return str
}

func (s Store_listContainers_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_listContainers_Params) DecodeFromPtr(p capnp.Ptr) Store_listContainers_Params {
	return Store_listContainers_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_listContainers_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_listContainers_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_listContainers_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_listContainers_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Store_listContainers_Params_List is a list of Store_listContainers_Params.
type Store_listContainers_Params_List = capnp.StructList[Store_listContainers_Params]

// NewStore_listContainers_Params creates a new list of Store_listContainers_Params.
func NewStore_listContainers_Params_List(s *capnp.Segment, sz int32) (Store_listContainers_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Store_listContainers_Params](l), err
}

// Store_listContainers_Params_Future is a wrapper for a Store_listContainers_Params promised by a client call.
type Store_listContainers_Params_Future struct{ *capnp.Future }

func (f Store_listContainers_Params_Future) Struct() (Store_listContainers_Params, error) {
	p, err := f.Future.Ptr()
	return Store_listContainers_Params(p.Struct()), err
}

type Store_listContainers_Results capnp.Struct

// Store_listContainers_Results_TypeID is the unique identifier for the type Store_listContainers_Results.
const Store_listContainers_Results_TypeID = 0xf82426685da256f9

func NewStore_listContainers_Results(s *capnp.Segment) (Store_listContainers_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_listContainers_Results(st), err
}

func NewRootStore_listContainers_Results(s *capnp.Segment) (Store_listContainers_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_listContainers_Results(st), err
}

func ReadRootStore_listContainers_Results(msg *capnp.Message) (Store_listContainers_Results, error) {
	root, err := msg.Root()
	return Store_listContainers_Results(root.Struct()), err
}

func (s Store_listContainers_Results) String() string {
	str, _ := text.Marshal(0xf82426685da256f9, capnp.Struct(s))
	return str
}

func (s Store_listContainers_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_listContainers_Results) DecodeFromPtr(p capnp.Ptr) Store_listContainers_Results {
	return Store_listContainers_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_listContainers_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_listContainers_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_listContainers_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_listContainers_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_listContainers_Results) Containers() (Store_InfoAndContainer_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Store_InfoAndContainer_List(p.List()), err
}

func (s Store_listContainers_Results) HasContainers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_listContainers_Results) SetContainers(v Store_InfoAndContainer_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewContainers sets the containers field to a newly
// allocated Store_InfoAndContainer_List, preferring placement in s's segment.
func (s Store_listContainers_Results) NewContainers(n int32) (Store_InfoAndContainer_List, error) {
	l, err := NewStore_InfoAndContainer_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Store_InfoAndContainer_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Store_listContainers_Results_List is a list of Store_listContainers_Results.
type Store_listContainers_Results_List = capnp.StructList[Store_listContainers_Results]

// NewStore_listContainers_Results creates a new list of Store_listContainers_Results.
func NewStore_listContainers_Results_List(s *capnp.Segment, sz int32) (Store_listContainers_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_listContainers_Results](l), err
}

// Store_listContainers_Results_Future is a wrapper for a Store_listContainers_Results promised by a client call.
type Store_listContainers_Results_Future struct{ *capnp.Future }

func (f Store_listContainers_Results_Future) Struct() (Store_listContainers_Results, error) {
	p, err := f.Future.Ptr()
	return Store_listContainers_Results(p.Struct()), err
}

type Store_removeContainer_Params capnp.Struct

// Store_removeContainer_Params_TypeID is the unique identifier for the type Store_removeContainer_Params.
const Store_removeContainer_Params_TypeID = 0xbfbe4f9e7fb62452

func NewStore_removeContainer_Params(s *capnp.Segment) (Store_removeContainer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_removeContainer_Params(st), err
}

func NewRootStore_removeContainer_Params(s *capnp.Segment) (Store_removeContainer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_removeContainer_Params(st), err
}

func ReadRootStore_removeContainer_Params(msg *capnp.Message) (Store_removeContainer_Params, error) {
	root, err := msg.Root()
	return Store_removeContainer_Params(root.Struct()), err
}

func (s Store_removeContainer_Params) String() string {
	str, _ := text.Marshal(0xbfbe4f9e7fb62452, capnp.Struct(s))
	return str
}

func (s Store_removeContainer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_removeContainer_Params) DecodeFromPtr(p capnp.Ptr) Store_removeContainer_Params {
	return Store_removeContainer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_removeContainer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_removeContainer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_removeContainer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_removeContainer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_removeContainer_Params) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_removeContainer_Params) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_removeContainer_Params) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_removeContainer_Params) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Store_removeContainer_Params_List is a list of Store_removeContainer_Params.
type Store_removeContainer_Params_List = capnp.StructList[Store_removeContainer_Params]

// NewStore_removeContainer_Params creates a new list of Store_removeContainer_Params.
func NewStore_removeContainer_Params_List(s *capnp.Segment, sz int32) (Store_removeContainer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_removeContainer_Params](l), err
}

// Store_removeContainer_Params_Future is a wrapper for a Store_removeContainer_Params promised by a client call.
type Store_removeContainer_Params_Future struct{ *capnp.Future }

func (f Store_removeContainer_Params_Future) Struct() (Store_removeContainer_Params, error) {
	p, err := f.Future.Ptr()
	return Store_removeContainer_Params(p.Struct()), err
}

type Store_removeContainer_Results capnp.Struct

// Store_removeContainer_Results_TypeID is the unique identifier for the type Store_removeContainer_Results.
const Store_removeContainer_Results_TypeID = 0xaa0460382685000e

func NewStore_removeContainer_Results(s *capnp.Segment) (Store_removeContainer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_removeContainer_Results(st), err
}

func NewRootStore_removeContainer_Results(s *capnp.Segment) (Store_removeContainer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Store_removeContainer_Results(st), err
}

func ReadRootStore_removeContainer_Results(msg *capnp.Message) (Store_removeContainer_Results, error) {
	root, err := msg.Root()
	return Store_removeContainer_Results(root.Struct()), err
}

func (s Store_removeContainer_Results) String() string {
	str, _ := text.Marshal(0xaa0460382685000e, capnp.Struct(s))
	return str
}

func (s Store_removeContainer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_removeContainer_Results) DecodeFromPtr(p capnp.Ptr) Store_removeContainer_Results {
	return Store_removeContainer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_removeContainer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_removeContainer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_removeContainer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_removeContainer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_removeContainer_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Store_removeContainer_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Store_removeContainer_Results_List is a list of Store_removeContainer_Results.
type Store_removeContainer_Results_List = capnp.StructList[Store_removeContainer_Results]

// NewStore_removeContainer_Results creates a new list of Store_removeContainer_Results.
func NewStore_removeContainer_Results_List(s *capnp.Segment, sz int32) (Store_removeContainer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Store_removeContainer_Results](l), err
}

// Store_removeContainer_Results_Future is a wrapper for a Store_removeContainer_Results promised by a client call.
type Store_removeContainer_Results_Future struct{ *capnp.Future }

func (f Store_removeContainer_Results_Future) Struct() (Store_removeContainer_Results, error) {
	p, err := f.Future.Ptr()
	return Store_removeContainer_Results(p.Struct()), err
}

type Store_importContainer_Params capnp.Struct

// Store_importContainer_Params_TypeID is the unique identifier for the type Store_importContainer_Params.
const Store_importContainer_Params_TypeID = 0xba3e5ec40217ab32

func NewStore_importContainer_Params(s *capnp.Segment) (Store_importContainer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_importContainer_Params(st), err
}

func NewRootStore_importContainer_Params(s *capnp.Segment) (Store_importContainer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_importContainer_Params(st), err
}

func ReadRootStore_importContainer_Params(msg *capnp.Message) (Store_importContainer_Params, error) {
	root, err := msg.Root()
	return Store_importContainer_Params(root.Struct()), err
}

func (s Store_importContainer_Params) String() string {
	str, _ := text.Marshal(0xba3e5ec40217ab32, capnp.Struct(s))
	return str
}

func (s Store_importContainer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_importContainer_Params) DecodeFromPtr(p capnp.Ptr) Store_importContainer_Params {
	return Store_importContainer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_importContainer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_importContainer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_importContainer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_importContainer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_importContainer_Params) Json() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Store_importContainer_Params) HasJson() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_importContainer_Params) JsonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Store_importContainer_Params) SetJson(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Store_importContainer_Params_List is a list of Store_importContainer_Params.
type Store_importContainer_Params_List = capnp.StructList[Store_importContainer_Params]

// NewStore_importContainer_Params creates a new list of Store_importContainer_Params.
func NewStore_importContainer_Params_List(s *capnp.Segment, sz int32) (Store_importContainer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_importContainer_Params](l), err
}

// Store_importContainer_Params_Future is a wrapper for a Store_importContainer_Params promised by a client call.
type Store_importContainer_Params_Future struct{ *capnp.Future }

func (f Store_importContainer_Params_Future) Struct() (Store_importContainer_Params, error) {
	p, err := f.Future.Ptr()
	return Store_importContainer_Params(p.Struct()), err
}

type Store_importContainer_Results capnp.Struct

// Store_importContainer_Results_TypeID is the unique identifier for the type Store_importContainer_Results.
const Store_importContainer_Results_TypeID = 0x898f1a2675ac89cf

func NewStore_importContainer_Results(s *capnp.Segment) (Store_importContainer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_importContainer_Results(st), err
}

func NewRootStore_importContainer_Results(s *capnp.Segment) (Store_importContainer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Store_importContainer_Results(st), err
}

func ReadRootStore_importContainer_Results(msg *capnp.Message) (Store_importContainer_Results, error) {
	root, err := msg.Root()
	return Store_importContainer_Results(root.Struct()), err
}

func (s Store_importContainer_Results) String() string {
	str, _ := text.Marshal(0x898f1a2675ac89cf, capnp.Struct(s))
	return str
}

func (s Store_importContainer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Store_importContainer_Results) DecodeFromPtr(p capnp.Ptr) Store_importContainer_Results {
	return Store_importContainer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Store_importContainer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Store_importContainer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Store_importContainer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Store_importContainer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Store_importContainer_Results) Container() Store_Container {
	p, _ := capnp.Struct(s).Ptr(0)
	return Store_Container(p.Interface().Client())
}

func (s Store_importContainer_Results) HasContainer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Store_importContainer_Results) SetContainer(v Store_Container) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Store_importContainer_Results_List is a list of Store_importContainer_Results.
type Store_importContainer_Results_List = capnp.StructList[Store_importContainer_Results]

// NewStore_importContainer_Results creates a new list of Store_importContainer_Results.
func NewStore_importContainer_Results_List(s *capnp.Segment, sz int32) (Store_importContainer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Store_importContainer_Results](l), err
}

// Store_importContainer_Results_Future is a wrapper for a Store_importContainer_Results promised by a client call.
type Store_importContainer_Results_Future struct{ *capnp.Future }

func (f Store_importContainer_Results_Future) Struct() (Store_importContainer_Results, error) {
	p, err := f.Future.Ptr()
	return Store_importContainer_Results(p.Struct()), err
}
func (p Store_importContainer_Results_Future) Container() Store_Container {
	return Store_Container(p.Future.Field(0, nil).Client())
}

const schema_9755d0b34b9db39d = "x\xda\xb4Y{pT\xf5\xf5?\xe7{\xef\xe6n\x92" +
	"\xddl.\xf7J\x1e\x88\x19\xf9\x85\x87\xfc\x80!\x09\xa5" +
	"\x91V\x13\x1e\xa9\x06\x9217\x11TFl7\xd9K" +
	"\\\x9a\xec\xc6\xbd\x1b%8\x90)\x95*\x8cV\xa0u" +
	"\xac\xe2\x93\xc1V\xa8J\xc5>\xd4\xe9\xf8*\x8cuP" +
	"\xab\xf5\xd1Q\xeb\xd8vDEA\xf0\xfd@\xf8v\xce" +
	"\xf7\xee\xf7\xde\x9b\xb8\xc1\xa8\xf4\x9f\x85\xfd\x9e\xf39\xdf" +
	"\xefy\xee9'3o\x0a7\xaa5\xd1sL`\xd6" +
	"\x81P\x01\x9f\xf7\xde\xdf\x0fM\x9b\xb4\xfa\x0a\xd0M\xe4" +
	"\x05\xe9\xfa\xad\x1b\xae\xbb\xf5\x0d\x08)\x1a@]\xb4h" +
	"*\x1a\xe3\x8b4\x00\xa3\xa2h' \xef\xbc\xa7{\xf1" +
	"\x875?\xb9\x12tS\xf1\x99\x01\x8d\xf1\xc5\xef\x1b\xa7" +
	"\x15O\x06\xa8\x9b[\xfc8\x1a\xbd\x91\xc9\x00\xfc\xdc[" +
	"\x1e\x1ct\xce\xfb\xdeU`\x9d\x82\x08\x10B\x92iG" +
	"V!\xa0qI\xe42@\xfe\xb7\xf5w\xf5O\xaa\xbc" +
	"v=].\x19\x9e\x8at\x12\xc3K\x91\x06@\xbeq" +
	"W\xfd\xda\x17\x0a\xbe\xbf\x19\xf4j\x04P\x89~4\xb2" +
	"\x15A\xe5\xbf,\xec\xfay\x99\xf9\xc5/@?ER" +
	"\x0eFv\x10\xe5\x07\xf7\xf7mO\xfc\xe3\xd1-.\xc5" +
	"\x15\xfa\xaa{\xeb~!\xf4\xa2''<\xb4\xfe*\xe3" +
	"\x96\x00\xb40\xdaI\xd0L}Xy\xf0\xb9)\xb7\x05" +
	"\xa1\x1fE6\x134\x14%h\xea\xe9/\x96\x9f\xba\x7f" +
	"\xf96\xf7\xc1\x02\xfa\x9dh;Aw\xbe\x13\x1d\xdcQ" +
	"\xcd\xb7\xb9/u\xa1\xa7F\xb7\x12\xb4F@\xdf}\xc2" +
	"rZ\xaf0\xb7\x07e[\xd1\x15\xc4\xb0\x8c\x18\x8e\x96" +
	"\xac\x9bT\xff#u\x87e\xa2\x14\xbd:*L\xb1^" +
	"\xe0\xf75\x9d\xfb\xf2=\x93v\xee\x0a\xdaj\xbb\xcb\xf0" +
	"\x07\xc1P\xfb\xdb2\xb6\xfb\xa23\x1f\x0c2\xbc\x14]" +
	"J\x0c\xfb\x04\xc3\xc7[\xfe\xbf\xbb\xf5\xfe\x96?\xe7\x18" +
	"\x181\x84J\xe6\x11C\xb4\x84\xdc\xd1^\xfd\xc7\xc1[" +
	"\xcey\xe8\xe1\xa0\x84\xde\x12!a\xa0\x84$\\\xbe\xf6" +
	"\xf2\x17?\xbd\xe4\xe4\xbf\x04,w\x03\xd1U\x9e|q" +
	"\xce\xef\x97\x8d\x1f\xbb;\xa8\xdd\xba\x92\x0cA7\x09h" +
	"\xc9\x92\xd0\xad\x8b\xd8\x1b{\xc0\xaa\xf6\x83\xe1\xde\x92\x1d" +
	"\xc4\xf1\xa8\xb8\x1d\xef\xd9\x12^\xf3@\xf7\x8b9\x0e!" +
	"}|L0L\x8f\x91\x88{\xeb\x92WO)\xfa\xe4" +
	"\x95\xc0\xed\xad\xb1\x0dt\xfb\x95\x0d\x89\x8d7\xac9\xf2" +
	"J\xd0\xf8g\xc4n$h\xab\x80\x16=3o\xfb\xb1" +
	"\xc1\xc4\xbf\x02q\xd4\x1b\xdbL\xd0\x0b\xaf\xdd\xdc\xbc\xfb" +
	"\xc2\xf2\xff\xd0\xad\x8c?\xb2\xf2\xc3\xcb\xcf\xac\xae\xfc\x1c" +
	"\x9aP\x1b\x87X\xb7,\xd6\x8e\xc6%1\x97\xffP\x08" +
	"\x02)\xa2\x97(\xfc\xe6\xfbn^t\xdf3\x8b\xaf\xa7" +
	"\x14\xd8?v\xab\xf1\xde\xd8\xef\x02\xd4M,;\x0b\x0d" +
	",\x9f\x0cp\xec\xb13\x0f\xaf\x99p\xe0\xed<\xb9\xf5" +
	"Y\xd9T4\x0a\xcb)\xb7B\xe5\x94[w\xf3-\x8f" +
	"\xbd69\xfdN.[\xc4\x1bo/\x17\xfe\xbd\xbb\x9c" +
	"t\x98\xf9\x18\x7f\xff\xd7\x17\xbcy\x88\xd4\xf73\xd1u" +
	"\xe3S\xe5\xedh\xfc[H{\xb5\x9c\x8cy\xd7\xf57" +
	"\xccy\xb8\xf9\xff>\x08\xba\xf2\xf4\x8a\x85$\xad\xa9\x82" +
	"\xa4-\x98|\xcd\xad\x8f?T\xf6Q\x90!Y!|" +
	"\xdd/\x18>[\xb2u\xd9\xc5\x93\xaa?\x0d2\\\xe7" +
	"2\xdc.\x18<[\xe9\xa7(\xfe{\x00\xeb^\xa8\x98" +
	"\x80\xc6\xbe\x8a2\x00\xe3`\xc5\xe3Fo\xa5\x06\xc0\x1f" +
	"\xfeS\xe2\x87O\xd4\xbft$\xa8\xde\xe2J\x91Zv" +
	"e\x03\xe0kc~z\xd3\xc1\xa3\x87\x8e\xe4j\x85\xd0" +
	"j]\xa5\x1b@\x95d\x9f\xa7\xf7\xac\xda\xd5\xb7i\xff" +
	"\xd1`\x84M\x1f\xb7\x81\x18\xce\x18G\xefY\xfe,\xee" +
	"\xbe\xb1\xe6u\x1edX6n\x171\xf4\x8ek\x80\x0f" +
	"\xb8\x93Mg\xe2\xdd\xf6\x0c\xa5+\xde\x97\xea\x9b\xd3\x91" +
	"Mg\xec\x19\xcd\xbd}\xe9L\xb6i%}\xc6\x16\xc4" +
	"\xb3\xf16D+\xa2\xa8\x00*\x02\xe8MS\x01\xacF" +
	"\x05\xad\x16\x86:\xa2\xc8M\xbdy\x1e\x80\xb5@A\xeb" +
	"N\x86:c&2\x00\xfd\x8e\xa5\x00\xd66\x05\xadG" +
	"\x18\xc6\x92\xa9\xe5i,\xe5\xcf\xbd\xac\x1c\xdb\xbbf\xef" +
	"\xf3\x00\x88\xa5\x80\x83v*\x9bI\xda\x0e\x96\x00\xb6)" +
	"\x88\xa5\xbc\xee\xac\xb2\x89g\xfd\xec\xf9\x07\x00\xa0\x11u" +
	"\xac\xb2T\x86\xc1C\x1d'[aDD+\xac\xd0g" +
	"\xa9\x82\x18\x01\x86\xa5~\xdc\x02\x928\x9et\xe6\xa6\x06" +
	"\x96\xc4{@\xe9\xb7\xa5|\x04&hRq\x16T|" +
	"~:\x95\xad\x8a'Sv\x86n\x08x\xb3\xb06\x10" +
	"j\xa1\xce\xaa\xa6T63\xc0\x17\xd9\x03sS\x89\xa6" +
	"\x14h\xd9\xcc\x80u\xb2\x12\x02\xf0\x0a)\xca\xda\xa6?" +
	";\x07\x98\xbeGC\xf4\xea3J\xb7\xe8\x0f\xac\x05\xa6" +
	"\xdf\xab!\xf3\x12\x19e\xbd\xd5\xef\xe8\x04\xa6\xdf\xac\xa1" +
	"\xe2\x15\x12\x94e\\\xdf\xb4\x10\x98\xbe^\xc3\x90\x17\x02" +
	"(\x83I_M\xb8~\x0d\x0b\xbc\xd2\x842\x8f\xf4d" +
	"-0}\x99\x86\xaa\x0c-\xff\x07I\xb7Hf\xb3\xd6" +
	"`\x0b\xbf7\"O\xa4/K\xf5\xa4\xe3\x09lr]" +
	"\x04\x8d\xc8{\x92N\x96\xbe\x82\x96\xb4\x9dF\xe4\xdd\xb6" +
	"\xf8: \x9c\xc53vo\xfaR;g\x90F\xac\xea" +
	"\xea\xb1\xe3\x99F\xe4\xf1D\xc2\xe7\x12\xa6}\xe1\xec\x9b" +
	".\xd8\xfb\xec\xce]\x00\xc0\xed\xbd\xb3\xffy\xdb\xcb\xbf" +
	"y\x94\xfe/\xdd\xa2\x0ew\x8b\xf0\xca\x0c)\xa8\xba\xbd" +
	"\xc1v\xfa{\xb2\x8e\x15\xf6\xc2\xf2\xb4Z\x00\xabZA" +
	"k&C\x19\x95\xd3)*\xa7(h\xcdbXE\x91" +
	"6\x80\xba\xefV@\xd4\x01\x07\x9d\xfe\xae.\xdbqD" +
	"h` 4\x86\xbc!)r\xc2{Iu\xbb\xed\xf4" +
	"k\xf4\x00\xd5{@\xb4\x1d\xc0\x8a(h\x953\xe4]" +
	"9N\xc0\x0c\xea\xc1R@WzW\x84\xf2\xab)t" +
	"\x9c\xd1mg\x97\xc4{\xfa\xed\xea\xb6xF\x8b\xf7:" +
	"_\x85\x92\xfe\xca\xb9\xab\xba-\x1e\xcb\x04a#\xd8T" +
	"\xba\xd0\xb7i@%\xb2iXA\xcb\x1c\xd9~_%" +
	"\xdf\x8d\xa7\xd1*!\x03\x8c\x14h\x17\xef\xc1!\x0f\x9a" +
	"\x97{P5\xcbS:\xbc\x1c\xcd\x15\x80\xbc/\xa3\x1b" +
	"\xbc\xfb\xc8J\x99x/:\xa3s\x893\xcc%#\x99" +
	"\xeaRb\x1aV\x91JGm\xaav\xdb\x89\x0dw\xc4" +
	"T_zl\x85\x93N\x89\x92\x17\x19I\xa4\x9b\x88\xc7" +
	"\x8f\xd6y\xbe\xc4\xd1\xa5\x80\x0c\xe9\xccy\xc9\xec\xc5\xcd" +
	"\x89\x13\x94\x02\xc7\xcd2r\x8e\xd2\xfb-\x0c\x91\xb2/" +
	"\x1b*\xad\xd7\x81`\xcd\x98\xea\xd7\x0c\xef\xa7lz'" +
	"\x805MA\xab\x9ea,\x15\xef\xb5\xbd+\x12\xb6\xd3" +
	"\x95I\xf6eAK~]\x0f\xe4\xd1\xa4\xd2\xd7DI" +
	"&\x8e/\xce\x8f\x11QS\xa5\xb8Q\xe7v[\x95\xd0" +
	"=x\xfd\x04\xffz\xed\xc7\xf6\xc0\x97\xee\x1f]m\xf2" +
	"b\xf5k\x14\xe2\x11\xb2c0\xe9,N9v\xf6K" +
	"Q8\xba\x94\xcc\x975\xa3\x89\xf1Q\x14\xa2\\\xe0\xc0" +
	"\xa8m\xb3\xc8\x1ep\xab\x97\x92=\xa16'\xb9\xc3\x0b" +
	"\x96z<\x0c\x99\x06m\xea\xdfz\x145\xc29=\xc3" +
	"\xd8\xc7\xda\x01:^g\x0av\x1cf\x0c\xa3x\x8c\x0b" +
	"/\x19\x07Y\x06\xa0\xe3\x00\x11\xc2\x0a\xc3(;\xcaE" +
	"#g\x84\x14B\xa8\x8a\x82\x1d\xa5DP\xbe\xe0&*" +
	"\x00FT!D\x84\x08S\x88\xa0\x1e\xe1&\xaa\x00\xc6" +
	"De)@G5\x11f\x12!\xf4971\x04`" +
	"LWV\x01tL#\xc2\xd9\x0a\xc3\xf1\x05\x9fq4" +
	"\xb1\x00\xc0h\x12\x90\x05Di#\x88\xf6)7\xa9c" +
	"5Z\x05\xa4\x85\x08\x17\x13$\xfc\x09A\xc2\x00\x86-" +
	" \x09\xa2\xf4\x11\xa4\xf0cnb!\x80\xd1+ =" +
	"D\xb8\x8a\x08E\x1fq\x13\x8b\x00\x8cu\x02q\x05\x11" +
	"6\x12\xa1\xf8Cnb1\x80q\x8d@\\M\x84;" +
	"\x89\x10\xf9\x80\x9b\x18\x010\xeeP:\x01:\xb6\x11\xe1" +
	"wD\x88\xbe\xcfM\x8c\x02\x18w+k\x01:\xee\"" +
	"\xc2_\xe9Y%\xef\xd1\xb3J\x00\x8c=\x02\xb2\x9b(" +
	"\xcf\x10$v\x98\x9b\x18\x030\x9e\x12\x90'\x89\xf0\x16" +
	"AJ\x0f\x11\xa4\x94|\" \xaf\x13\xe50A\xf4w" +
	"\xb9\x89:\xf9D@\x0e\x10!\xac2\x1c?\xe6 A" +
	"\xc6\x90S\xd4\x15\xe4\x14\x95\x9c\xa22\x8c\x1a\x07\xb8\x89" +
	"\x069E\xdd\x00\xd0QJ\x84i\x041\xdf!\x88\x09" +
	"`\x9c& S\x882\x8b '\xbd\xcdM<\x09\xc0" +
	"\xa8\x11\x90YDh#\xc2\xd8\xfd\xdc\xc4\xb1d{\x95" +
	"<\xdfB\x84\xf3\x89P\xf6\x167\x91\xc6\x98\xc5*y" +
	"\xfe\\\"\xf4\x11\xa1\xfcMnb9\x99^ z\x88" +
	"\xb0\x92\x08\x15op\x13+\x00\x8c~\x81\xc8\x12a#" +
	"\x11*\xf7q\x13+\xc9\xf4\xeaB2=\x11~E\xcd" +
	"~g:\xddC\x81\x0bh{\xd9Jg-I'\x0b" +
	"U\"\xdb\x87\xb7\xf3\xc9T\xb6^B\x180d\xb9\xb3" +
	"<\x10\xe6Cjf\xcb\xe9@\x01\x86\x8a<lI:" +
	"\xd0\x90\x1d\x02R|P]\xad\x04\xa9\xc0P\x95\x87y" +
	"@\xaa\x0f\x9a=K\x82B\xc00$\x0f\xf3\x80B9" +
	"P\x7fN%\x01*\x00\x86\x05\xf20\x0f\xa8 \x00\"" +
	"\xa5@#\xa2\x06\x0c5\xef\xb4%\x89\x8e\x8b\x02\x09\xd3" +
	"\x020R\xcb\x85\x85\x81a\xd8;\xcd\x03\x0b\x07`\xa4" +
	"\x98\x0b+\x04\x86\x85\xdei\x1eXa\x0e\xb6\xbc'\x1d" +
	"\xa7\xeb &T(\x02\x86E\xfeq\x0b&%\xd0C" +
	"\x16\x05\x91\xb3gId10,\xf6\x8f\xf3!\x8bs" +
	"\xc8\xac\xbd2+\xe3C\x16]:\xcb\x13\x1f\x91\x1c$" +
	"\x11\xcf\xc6%$\x0a\x0c\xa3\xb9\xb3<\x90h\x0e\x12\x17" +
	"\xe3&\xdd\x0f8FE@\x1c\x13(\xee(\x0b\xb5\x96" +
	"\xce\xd8V\x04\x83\xbbC\xbd\xdd\xdb\x8b\xe8\x1b\x02\x0b\xc8" +
	"\x936\xf0\xf9~\x1b\xc5\x9bS\xcb\xd3sS\x89\xf9(" +
	"\xcb<\x00\x97\xd3:\xd2?4\xad\x03X\xa6\x98E\xe5" +
	"r\x0b\xe5\xe6C\xdf\xb4\xc2\x9d\x1b\xfd]\x07\xca\x1d\x9a" +
	"\xbez\xad;72o\xa3\x87r\xdf\xa1'W\x01\xd3" +
	"\xe34\x8b\xca}\x18\x96\x80\xbb\x9b\xd3\x17\x13\xaeUC" +
	"\xd5\xdb\xb6\xa1\xdca\xeas\x89v\xba\xc6e\x1b\x061" +
	"zt\xa3\xdf\x1bb\xae\x99\x94\xb3%qA\x83\xdb\x9a" +
	"{\x03\xe5\xfc4Ju\x1b\x91\xcb\x1e1p6\xaa\x91" +
	"r\xe8\x8a#gHz\x86x\xd3\xb0\x15Ge\xbe\x15" +
	"\xc7\xd4\xdc\x8a\xa3-\xb0\xe2h\xa5\x8e\xb7EA\xeb\xfc" +
	"!]\xdc\xd0\xbe\xf1\x1bt\xc2\xc3\x1b\xbe\x13\xd2\xc1\xfb" +
	"B\xe5\xea\"\x9b\xc1\x816\xb1J\xf1\xba\xb7\x09\xf9Z" +
	"\xe2Z\xbf}\x0b6._o&\x1c\xd2\x8c\xbb\xc3\x9d" +
	"\x03p\x02\xc7\x87\xe1\x13\xca\xb7l\xba\x87M\x8a\xf9\x1a" +
	"\xba\xa5\xb9\x07O\x09>X\xc9\xf83\xa9L\xeba\x13" +
	"\xa92R\xd3&VI*\xa2\xdf\x1c\xebX\xebV\x1b" +
	"+\"\xb2Z\xeemQnxuk\x0e0\xbd\x89\xb2" +
	"Z\xfem\x00\xe5jY?}!0\xbd\x86\xb2Zn" +
	"\xe3Q.\x95\xf5\x89D\x1b\xaf5\xb8\x8d\xa5\xbb\xcd\x91" +
	"\xf5\xab\x11\xb9\x13\xfc\xd6\x86_\xd9\xa5\xca\xed\x8f\xd8%" +
	"\x1cgt\xff\x06\xe1\xea\xed}\xe4\x1c\x13H\xd5\x09\xf9" +
	"R\xb5\xd6OU\xa4LE\xd4[\xd7\xfa\x99:$\x86" +
	"G\x1a\xd63v_O\xbc\xcbn\xc2\x95I'\x9bL" +
	"u\xc3hG\x87\xa0!\xe4\xe8p\x02\xa6\x80\xe1\xfb\x9d" +
	"v\xbb\xca\x19i\xe0\xe9a\xff\xcb\xcd\xea\x7f\x03\x00\x00" +
	"\xff\xff>-\\\x08"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9755d0b34b9db39d,
		Nodes: []uint64{
			0x847d262cefd2f142,
			0x878131f45567ae62,
			0x883b57737fba9e54,
			0x898f1a2675ac89cf,
			0x923c06d58238b290,
			0x93fc14178e630994,
			0x9bc1d764a970b846,
			0x9e138889be22cc5e,
			0xa028d3ba03083872,
			0xa466e92166fcce6e,
			0xa4ff24aa7f0debaf,
			0xa914844d7351c9ee,
			0xaa0460382685000e,
			0xb2af26aeda5445e5,
			0xba3e5ec40217ab32,
			0xbc4cb84d672b9bf6,
			0xbfbe4f9e7fb62452,
			0xc31c71f8d67b827b,
			0xc4161d5db43ad669,
			0xc5e6024b9f05560e,
			0xd667b97e089bae01,
			0xdbf70a288c6933b1,
			0xdbfb7e9990643f87,
			0xe0647ffea942d00a,
			0xe2185cc449928f5c,
			0xe69f958aa2386f06,
			0xeaec227ef03ec200,
			0xeb6f27dfc29bffad,
			0xefe759a6f2ffc230,
			0xf32349bf3a9997ac,
			0xf517bec79f8d2744,
			0xf82426685da256f9,
			0xfa1a243e7bf478c0,
			0xfbd938c95f64b7bf,
			0xfbef00fded9c8312,
			0xfde99170b27ac5ce,
			0xffe4319ac401d166,
		},
		Compressed: true,
	})
}
