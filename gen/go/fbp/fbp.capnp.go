// Code generated by capnpc-go. DO NOT EDIT.

package fbp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	strconv "strconv"
)

type IP capnp.Struct

// IP_TypeID is the unique identifier for the type IP.
const IP_TypeID = 0xaf0a1dc4709a5ccf

func NewIP(s *capnp.Segment) (IP, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return IP(st), err
}

func NewRootIP(s *capnp.Segment) (IP, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return IP(st), err
}

func ReadRootIP(msg *capnp.Message) (IP, error) {
	root, err := msg.Root()
	return IP(root.Struct()), err
}

func (s IP) String() string {
	str, _ := text.Marshal(0xaf0a1dc4709a5ccf, capnp.Struct(s))
	return str
}

func (s IP) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IP) DecodeFromPtr(p capnp.Ptr) IP {
	return IP(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IP) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IP) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IP) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IP) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IP) Attributes() (IP_KV_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return IP_KV_List(p.List()), err
}

func (s IP) HasAttributes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IP) SetAttributes(v IP_KV_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAttributes sets the attributes field to a newly
// allocated IP_KV_List, preferring placement in s's segment.
func (s IP) NewAttributes(n int32) (IP_KV_List, error) {
	l, err := NewIP_KV_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return IP_KV_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s IP) Type() IP_Type {
	return IP_Type(capnp.Struct(s).Uint16(0))
}

func (s IP) SetType(v IP_Type) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s IP) Content() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s IP) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s IP) SetContent(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// IP_List is a list of IP.
type IP_List = capnp.StructList[IP]

// NewIP creates a new list of IP.
func NewIP_List(s *capnp.Segment, sz int32) (IP_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[IP](l), err
}

// IP_Future is a wrapper for a IP promised by a client call.
type IP_Future struct{ *capnp.Future }

func (f IP_Future) Struct() (IP, error) {
	p, err := f.Future.Ptr()
	return IP(p.Struct()), err
}
func (p IP_Future) Content() *capnp.Future {
	return p.Future.Field(1, nil)
}

type IP_KV capnp.Struct

// IP_KV_TypeID is the unique identifier for the type IP_KV.
const IP_KV_TypeID = 0x9e9e5391e0c499e6

func NewIP_KV(s *capnp.Segment) (IP_KV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IP_KV(st), err
}

func NewRootIP_KV(s *capnp.Segment) (IP_KV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IP_KV(st), err
}

func ReadRootIP_KV(msg *capnp.Message) (IP_KV, error) {
	root, err := msg.Root()
	return IP_KV(root.Struct()), err
}

func (s IP_KV) String() string {
	str, _ := text.Marshal(0x9e9e5391e0c499e6, capnp.Struct(s))
	return str
}

func (s IP_KV) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IP_KV) DecodeFromPtr(p capnp.Ptr) IP_KV {
	return IP_KV(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IP_KV) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IP_KV) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IP_KV) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IP_KV) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IP_KV) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IP_KV) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IP_KV) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IP_KV) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s IP_KV) Desc() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s IP_KV) HasDesc() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s IP_KV) DescBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s IP_KV) SetDesc(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s IP_KV) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(2)
}

func (s IP_KV) HasValue() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s IP_KV) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(2, v)
}

// IP_KV_List is a list of IP_KV.
type IP_KV_List = capnp.StructList[IP_KV]

// NewIP_KV creates a new list of IP_KV.
func NewIP_KV_List(s *capnp.Segment, sz int32) (IP_KV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[IP_KV](l), err
}

// IP_KV_Future is a wrapper for a IP_KV promised by a client call.
type IP_KV_Future struct{ *capnp.Future }

func (f IP_KV_Future) Struct() (IP_KV, error) {
	p, err := f.Future.Ptr()
	return IP_KV(p.Struct()), err
}
func (p IP_KV_Future) Value() *capnp.Future {
	return p.Future.Field(2, nil)
}

type IP_Type uint16

// IP_Type_TypeID is the unique identifier for the type IP_Type.
const IP_Type_TypeID = 0xf684cae29bdc484e

// Values of IP_Type.
const (
	IP_Type_standard     IP_Type = 0
	IP_Type_openBracket  IP_Type = 1
	IP_Type_closeBracket IP_Type = 2
)

// String returns the enum's constant name.
func (c IP_Type) String() string {
	switch c {
	case IP_Type_standard:
		return "standard"
	case IP_Type_openBracket:
		return "openBracket"
	case IP_Type_closeBracket:
		return "closeBracket"

	default:
		return ""
	}
}

// IP_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func IP_TypeFromString(c string) IP_Type {
	switch c {
	case "standard":
		return IP_Type_standard
	case "openBracket":
		return IP_Type_openBracket
	case "closeBracket":
		return IP_Type_closeBracket

	default:
		return 0
	}
}

type IP_Type_List = capnp.EnumList[IP_Type]

func NewIP_Type_List(s *capnp.Segment, sz int32) (IP_Type_List, error) {
	return capnp.NewEnumList[IP_Type](s, sz)
}

type IIP capnp.Struct

// IIP_TypeID is the unique identifier for the type IIP.
const IIP_TypeID = 0xf3705fb36d44a21f

func NewIIP(s *capnp.Segment) (IIP, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IIP(st), err
}

func NewRootIIP(s *capnp.Segment) (IIP, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IIP(st), err
}

func ReadRootIIP(msg *capnp.Message) (IIP, error) {
	root, err := msg.Root()
	return IIP(root.Struct()), err
}

func (s IIP) String() string {
	str, _ := text.Marshal(0xf3705fb36d44a21f, capnp.Struct(s))
	return str
}

func (s IIP) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IIP) DecodeFromPtr(p capnp.Ptr) IIP {
	return IIP(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IIP) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IIP) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IIP) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IIP) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IIP) Content() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s IIP) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IIP) SetContent(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// IIP_List is a list of IIP.
type IIP_List = capnp.StructList[IIP]

// NewIIP creates a new list of IIP.
func NewIIP_List(s *capnp.Segment, sz int32) (IIP_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[IIP](l), err
}

// IIP_Future is a wrapper for a IIP promised by a client call.
type IIP_Future struct{ *capnp.Future }

func (f IIP_Future) Struct() (IIP, error) {
	p, err := f.Future.Ptr()
	return IIP(p.Struct()), err
}
func (p IIP_Future) Content() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Channel capnp.Client

// Channel_TypeID is the unique identifier for the type Channel.
const Channel_TypeID = 0x9c62c32b2ff2b1e8

func (c Channel) SetBufferSize(ctx context.Context, params func(Channel_setBufferSize_Params) error) (Channel_setBufferSize_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "setBufferSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_setBufferSize_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Channel_setBufferSize_Results_Future{Future: ans.Future()}, release

}

func (c Channel) Reader(ctx context.Context, params func(Channel_reader_Params) error) (Channel_reader_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "reader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_reader_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Channel_reader_Results_Future{Future: ans.Future()}, release

}

func (c Channel) Writer(ctx context.Context, params func(Channel_writer_Params) error) (Channel_writer_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      2,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "writer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_writer_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Channel_writer_Results_Future{Future: ans.Future()}, release

}

func (c Channel) Endpoints(ctx context.Context, params func(Channel_endpoints_Params) error) (Channel_endpoints_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      3,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "endpoints",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_endpoints_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Channel_endpoints_Results_Future{Future: ans.Future()}, release

}

func (c Channel) SetAutoCloseSemantics(ctx context.Context, params func(Channel_setAutoCloseSemantics_Params) error) (Channel_setAutoCloseSemantics_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      4,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "setAutoCloseSemantics",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_setAutoCloseSemantics_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Channel_setAutoCloseSemantics_Results_Future{Future: ans.Future()}, release

}

func (c Channel) Close(ctx context.Context, params func(Channel_close_Params) error) (Channel_close_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      5,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_close_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Channel_close_Results_Future{Future: ans.Future()}, release

}

func (c Channel) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Channel) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Channel) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Channel) String() string {
	return "Channel(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Channel) AddRef() Channel {
	return Channel(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Channel) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Channel) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Channel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Channel) DecodeFromPtr(p capnp.Ptr) Channel {
	return Channel(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Channel) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Channel) IsSame(other Channel) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Channel) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Channel) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Channel_Server is a Channel with a local implementation.
type Channel_Server interface {
	SetBufferSize(context.Context, Channel_setBufferSize) error

	Reader(context.Context, Channel_reader) error

	Writer(context.Context, Channel_writer) error

	Endpoints(context.Context, Channel_endpoints) error

	SetAutoCloseSemantics(context.Context, Channel_setAutoCloseSemantics) error

	Close(context.Context, Channel_close) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Channel_NewServer creates a new Server from an implementation of Channel_Server.
func Channel_NewServer(s Channel_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Methods(nil, s), s, c)
}

// Channel_ServerToClient creates a new Client from an implementation of Channel_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_ServerToClient(s Channel_Server) Channel {
	return Channel(capnp.NewClient(Channel_NewServer(s)))
}

// Channel_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Methods(methods []server.Method, s Channel_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "setBufferSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetBufferSize(ctx, Channel_setBufferSize{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "reader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reader(ctx, Channel_reader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      2,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "writer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Writer(ctx, Channel_writer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      3,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "endpoints",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Endpoints(ctx, Channel_endpoints{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      4,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "setAutoCloseSemantics",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetAutoCloseSemantics(ctx, Channel_setAutoCloseSemantics{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      5,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_close{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Channel_setBufferSize holds the state for a server call to Channel.setBufferSize.
// See server.Call for documentation.
type Channel_setBufferSize struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_setBufferSize) Args() Channel_setBufferSize_Params {
	return Channel_setBufferSize_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Channel_setBufferSize) AllocResults() (Channel_setBufferSize_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results(r), err
}

// Channel_reader holds the state for a server call to Channel.reader.
// See server.Call for documentation.
type Channel_reader struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_reader) Args() Channel_reader_Params {
	return Channel_reader_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Channel_reader) AllocResults() (Channel_reader_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results(r), err
}

// Channel_writer holds the state for a server call to Channel.writer.
// See server.Call for documentation.
type Channel_writer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_writer) Args() Channel_writer_Params {
	return Channel_writer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Channel_writer) AllocResults() (Channel_writer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results(r), err
}

// Channel_endpoints holds the state for a server call to Channel.endpoints.
// See server.Call for documentation.
type Channel_endpoints struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_endpoints) Args() Channel_endpoints_Params {
	return Channel_endpoints_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Channel_endpoints) AllocResults() (Channel_endpoints_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results(r), err
}

// Channel_setAutoCloseSemantics holds the state for a server call to Channel.setAutoCloseSemantics.
// See server.Call for documentation.
type Channel_setAutoCloseSemantics struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_setAutoCloseSemantics) Args() Channel_setAutoCloseSemantics_Params {
	return Channel_setAutoCloseSemantics_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Channel_setAutoCloseSemantics) AllocResults() (Channel_setAutoCloseSemantics_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results(r), err
}

// Channel_close holds the state for a server call to Channel.close.
// See server.Call for documentation.
type Channel_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_close) Args() Channel_close_Params {
	return Channel_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Channel_close) AllocResults() (Channel_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results(r), err
}

// Channel_List is a list of Channel.
type Channel_List = capnp.CapList[Channel]

// NewChannel_List creates a new list of Channel.
func NewChannel_List(s *capnp.Segment, sz int32) (Channel_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Channel](l), err
}

type Channel_CloseSemantics uint16

// Channel_CloseSemantics_TypeID is the unique identifier for the type Channel_CloseSemantics.
const Channel_CloseSemantics_TypeID = 0xa8d787cae7e0b243

// Values of Channel_CloseSemantics.
const (
	Channel_CloseSemantics_fbp Channel_CloseSemantics = 0
	Channel_CloseSemantics_no  Channel_CloseSemantics = 1
)

// String returns the enum's constant name.
func (c Channel_CloseSemantics) String() string {
	switch c {
	case Channel_CloseSemantics_fbp:
		return "fbp"
	case Channel_CloseSemantics_no:
		return "no"

	default:
		return ""
	}
}

// Channel_CloseSemanticsFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Channel_CloseSemanticsFromString(c string) Channel_CloseSemantics {
	switch c {
	case "fbp":
		return Channel_CloseSemantics_fbp
	case "no":
		return Channel_CloseSemantics_no

	default:
		return 0
	}
}

type Channel_CloseSemantics_List = capnp.EnumList[Channel_CloseSemantics]

func NewChannel_CloseSemantics_List(s *capnp.Segment, sz int32) (Channel_CloseSemantics_List, error) {
	return capnp.NewEnumList[Channel_CloseSemantics](s, sz)
}

type Channel_Msg capnp.Struct
type Channel_Msg_Which uint16

const (
	Channel_Msg_Which_value Channel_Msg_Which = 0
	Channel_Msg_Which_done  Channel_Msg_Which = 1
)

func (w Channel_Msg_Which) String() string {
	const s = "valuedone"
	switch w {
	case Channel_Msg_Which_value:
		return s[0:5]
	case Channel_Msg_Which_done:
		return s[5:9]

	}
	return "Channel_Msg_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Channel_Msg_TypeID is the unique identifier for the type Channel_Msg.
const Channel_Msg_TypeID = 0xd5b512f4bcd0aa2e

func NewChannel_Msg(s *capnp.Segment) (Channel_Msg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg(st), err
}

func NewRootChannel_Msg(s *capnp.Segment) (Channel_Msg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg(st), err
}

func ReadRootChannel_Msg(msg *capnp.Message) (Channel_Msg, error) {
	root, err := msg.Root()
	return Channel_Msg(root.Struct()), err
}

func (s Channel_Msg) String() string {
	str, _ := text.Marshal(0xd5b512f4bcd0aa2e, capnp.Struct(s))
	return str
}

func (s Channel_Msg) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_Msg) DecodeFromPtr(p capnp.Ptr) Channel_Msg {
	return Channel_Msg(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_Msg) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Channel_Msg) Which() Channel_Msg_Which {
	return Channel_Msg_Which(capnp.Struct(s).Uint16(0))
}
func (s Channel_Msg) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_Msg) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_Msg) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Channel_Msg) Value() (capnp.Ptr, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != value")
	}
	return capnp.Struct(s).Ptr(0)
}

func (s Channel_Msg) HasValue() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Channel_Msg) SetValue(v capnp.Ptr) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Channel_Msg) SetDone() {
	capnp.Struct(s).SetUint16(0, 1)

}

// Channel_Msg_List is a list of Channel_Msg.
type Channel_Msg_List = capnp.StructList[Channel_Msg]

// NewChannel_Msg creates a new list of Channel_Msg.
func NewChannel_Msg_List(s *capnp.Segment, sz int32) (Channel_Msg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Channel_Msg](l), err
}

// Channel_Msg_Future is a wrapper for a Channel_Msg promised by a client call.
type Channel_Msg_Future struct{ *capnp.Future }

func (f Channel_Msg_Future) Struct() (Channel_Msg, error) {
	p, err := f.Future.Ptr()
	return Channel_Msg(p.Struct()), err
}
func (p Channel_Msg_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Channel_StartupInfo capnp.Struct

// Channel_StartupInfo_TypeID is the unique identifier for the type Channel_StartupInfo.
const Channel_StartupInfo_TypeID = 0xe3d7a3237f175028

func NewChannel_StartupInfo(s *capnp.Segment) (Channel_StartupInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Channel_StartupInfo(st), err
}

func NewRootChannel_StartupInfo(s *capnp.Segment) (Channel_StartupInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Channel_StartupInfo(st), err
}

func ReadRootChannel_StartupInfo(msg *capnp.Message) (Channel_StartupInfo, error) {
	root, err := msg.Root()
	return Channel_StartupInfo(root.Struct()), err
}

func (s Channel_StartupInfo) String() string {
	str, _ := text.Marshal(0xe3d7a3237f175028, capnp.Struct(s))
	return str
}

func (s Channel_StartupInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_StartupInfo) DecodeFromPtr(p capnp.Ptr) Channel_StartupInfo {
	return Channel_StartupInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_StartupInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_StartupInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_StartupInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_StartupInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Channel_StartupInfo) BufferSize() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Channel_StartupInfo) SetBufferSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Channel_StartupInfo) CloseSemantics() Channel_CloseSemantics {
	return Channel_CloseSemantics(capnp.Struct(s).Uint16(8))
}

func (s Channel_StartupInfo) SetCloseSemantics(v Channel_CloseSemantics) {
	capnp.Struct(s).SetUint16(8, uint16(v))
}

func (s Channel_StartupInfo) ChannelSR() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Channel_StartupInfo) HasChannelSR() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Channel_StartupInfo) ChannelSRBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Channel_StartupInfo) SetChannelSR(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Channel_StartupInfo) ReaderSRs() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Channel_StartupInfo) HasReaderSRs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Channel_StartupInfo) SetReaderSRs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewReaderSRs sets the readerSRs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Channel_StartupInfo) NewReaderSRs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Channel_StartupInfo) WriterSRs() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Channel_StartupInfo) HasWriterSRs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Channel_StartupInfo) SetWriterSRs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewWriterSRs sets the writerSRs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Channel_StartupInfo) NewWriterSRs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Channel_StartupInfo_List is a list of Channel_StartupInfo.
type Channel_StartupInfo_List = capnp.StructList[Channel_StartupInfo]

// NewChannel_StartupInfo creates a new list of Channel_StartupInfo.
func NewChannel_StartupInfo_List(s *capnp.Segment, sz int32) (Channel_StartupInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[Channel_StartupInfo](l), err
}

// Channel_StartupInfo_Future is a wrapper for a Channel_StartupInfo promised by a client call.
type Channel_StartupInfo_Future struct{ *capnp.Future }

func (f Channel_StartupInfo_Future) Struct() (Channel_StartupInfo, error) {
	p, err := f.Future.Ptr()
	return Channel_StartupInfo(p.Struct()), err
}

type Channel_Reader capnp.Client

// Channel_Reader_TypeID is the unique identifier for the type Channel_Reader.
const Channel_Reader_TypeID = 0x8bc69192f3bc97cc

func (c Channel_Reader) Read(ctx context.Context, params func(Channel_Reader_read_Params) error) (Channel_Msg_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8bc69192f3bc97cc,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel.Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Reader_read_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Channel_Msg_Future{Future: ans.Future()}, release

}

func (c Channel_Reader) Close(ctx context.Context, params func(Channel_Reader_close_Params) error) (Channel_Reader_close_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8bc69192f3bc97cc,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel.Reader",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Reader_close_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Channel_Reader_close_Results_Future{Future: ans.Future()}, release

}

func (c Channel_Reader) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Channel_Reader) String() string {
	return "Channel_Reader(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Channel_Reader) AddRef() Channel_Reader {
	return Channel_Reader(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Channel_Reader) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Channel_Reader) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Channel_Reader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Channel_Reader) DecodeFromPtr(p capnp.Ptr) Channel_Reader {
	return Channel_Reader(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Channel_Reader) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Channel_Reader) IsSame(other Channel_Reader) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Channel_Reader) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Channel_Reader) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Channel_Reader_Server is a Channel_Reader with a local implementation.
type Channel_Reader_Server interface {
	Read(context.Context, Channel_Reader_read) error

	Close(context.Context, Channel_Reader_close) error
}

// Channel_Reader_NewServer creates a new Server from an implementation of Channel_Reader_Server.
func Channel_Reader_NewServer(s Channel_Reader_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Reader_Methods(nil, s), s, c)
}

// Channel_Reader_ServerToClient creates a new Client from an implementation of Channel_Reader_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_Reader_ServerToClient(s Channel_Reader_Server) Channel_Reader {
	return Channel_Reader(capnp.NewClient(Channel_Reader_NewServer(s)))
}

// Channel_Reader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Reader_Methods(methods []server.Method, s Channel_Reader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8bc69192f3bc97cc,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel.Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Channel_Reader_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8bc69192f3bc97cc,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel.Reader",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_Reader_close{call})
		},
	})

	return methods
}

// Channel_Reader_read holds the state for a server call to Channel_Reader.read.
// See server.Call for documentation.
type Channel_Reader_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Reader_read) Args() Channel_Reader_read_Params {
	return Channel_Reader_read_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Channel_Reader_read) AllocResults() (Channel_Msg, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg(r), err
}

// Channel_Reader_close holds the state for a server call to Channel_Reader.close.
// See server.Call for documentation.
type Channel_Reader_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Reader_close) Args() Channel_Reader_close_Params {
	return Channel_Reader_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Channel_Reader_close) AllocResults() (Channel_Reader_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results(r), err
}

// Channel_Reader_List is a list of Channel_Reader.
type Channel_Reader_List = capnp.CapList[Channel_Reader]

// NewChannel_Reader_List creates a new list of Channel_Reader.
func NewChannel_Reader_List(s *capnp.Segment, sz int32) (Channel_Reader_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Channel_Reader](l), err
}

type Channel_Reader_read_Params capnp.Struct

// Channel_Reader_read_Params_TypeID is the unique identifier for the type Channel_Reader_read_Params.
const Channel_Reader_read_Params_TypeID = 0xc0335d99db8b2ba5

func NewChannel_Reader_read_Params(s *capnp.Segment) (Channel_Reader_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_read_Params(st), err
}

func NewRootChannel_Reader_read_Params(s *capnp.Segment) (Channel_Reader_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_read_Params(st), err
}

func ReadRootChannel_Reader_read_Params(msg *capnp.Message) (Channel_Reader_read_Params, error) {
	root, err := msg.Root()
	return Channel_Reader_read_Params(root.Struct()), err
}

func (s Channel_Reader_read_Params) String() string {
	str, _ := text.Marshal(0xc0335d99db8b2ba5, capnp.Struct(s))
	return str
}

func (s Channel_Reader_read_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_Reader_read_Params) DecodeFromPtr(p capnp.Ptr) Channel_Reader_read_Params {
	return Channel_Reader_read_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_Reader_read_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_Reader_read_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_Reader_read_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_Reader_read_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_Reader_read_Params_List is a list of Channel_Reader_read_Params.
type Channel_Reader_read_Params_List = capnp.StructList[Channel_Reader_read_Params]

// NewChannel_Reader_read_Params creates a new list of Channel_Reader_read_Params.
func NewChannel_Reader_read_Params_List(s *capnp.Segment, sz int32) (Channel_Reader_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_Reader_read_Params](l), err
}

// Channel_Reader_read_Params_Future is a wrapper for a Channel_Reader_read_Params promised by a client call.
type Channel_Reader_read_Params_Future struct{ *capnp.Future }

func (f Channel_Reader_read_Params_Future) Struct() (Channel_Reader_read_Params, error) {
	p, err := f.Future.Ptr()
	return Channel_Reader_read_Params(p.Struct()), err
}

type Channel_Reader_close_Params capnp.Struct

// Channel_Reader_close_Params_TypeID is the unique identifier for the type Channel_Reader_close_Params.
const Channel_Reader_close_Params_TypeID = 0x9428ea64f18c41c8

func NewChannel_Reader_close_Params(s *capnp.Segment) (Channel_Reader_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Params(st), err
}

func NewRootChannel_Reader_close_Params(s *capnp.Segment) (Channel_Reader_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Params(st), err
}

func ReadRootChannel_Reader_close_Params(msg *capnp.Message) (Channel_Reader_close_Params, error) {
	root, err := msg.Root()
	return Channel_Reader_close_Params(root.Struct()), err
}

func (s Channel_Reader_close_Params) String() string {
	str, _ := text.Marshal(0x9428ea64f18c41c8, capnp.Struct(s))
	return str
}

func (s Channel_Reader_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_Reader_close_Params) DecodeFromPtr(p capnp.Ptr) Channel_Reader_close_Params {
	return Channel_Reader_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_Reader_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_Reader_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_Reader_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_Reader_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_Reader_close_Params_List is a list of Channel_Reader_close_Params.
type Channel_Reader_close_Params_List = capnp.StructList[Channel_Reader_close_Params]

// NewChannel_Reader_close_Params creates a new list of Channel_Reader_close_Params.
func NewChannel_Reader_close_Params_List(s *capnp.Segment, sz int32) (Channel_Reader_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_Reader_close_Params](l), err
}

// Channel_Reader_close_Params_Future is a wrapper for a Channel_Reader_close_Params promised by a client call.
type Channel_Reader_close_Params_Future struct{ *capnp.Future }

func (f Channel_Reader_close_Params_Future) Struct() (Channel_Reader_close_Params, error) {
	p, err := f.Future.Ptr()
	return Channel_Reader_close_Params(p.Struct()), err
}

type Channel_Reader_close_Results capnp.Struct

// Channel_Reader_close_Results_TypeID is the unique identifier for the type Channel_Reader_close_Results.
const Channel_Reader_close_Results_TypeID = 0xb3fe08a1bf53821a

func NewChannel_Reader_close_Results(s *capnp.Segment) (Channel_Reader_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results(st), err
}

func NewRootChannel_Reader_close_Results(s *capnp.Segment) (Channel_Reader_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results(st), err
}

func ReadRootChannel_Reader_close_Results(msg *capnp.Message) (Channel_Reader_close_Results, error) {
	root, err := msg.Root()
	return Channel_Reader_close_Results(root.Struct()), err
}

func (s Channel_Reader_close_Results) String() string {
	str, _ := text.Marshal(0xb3fe08a1bf53821a, capnp.Struct(s))
	return str
}

func (s Channel_Reader_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_Reader_close_Results) DecodeFromPtr(p capnp.Ptr) Channel_Reader_close_Results {
	return Channel_Reader_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_Reader_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_Reader_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_Reader_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_Reader_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_Reader_close_Results_List is a list of Channel_Reader_close_Results.
type Channel_Reader_close_Results_List = capnp.StructList[Channel_Reader_close_Results]

// NewChannel_Reader_close_Results creates a new list of Channel_Reader_close_Results.
func NewChannel_Reader_close_Results_List(s *capnp.Segment, sz int32) (Channel_Reader_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_Reader_close_Results](l), err
}

// Channel_Reader_close_Results_Future is a wrapper for a Channel_Reader_close_Results promised by a client call.
type Channel_Reader_close_Results_Future struct{ *capnp.Future }

func (f Channel_Reader_close_Results_Future) Struct() (Channel_Reader_close_Results, error) {
	p, err := f.Future.Ptr()
	return Channel_Reader_close_Results(p.Struct()), err
}

type Channel_Writer capnp.Client

// Channel_Writer_TypeID is the unique identifier for the type Channel_Writer.
const Channel_Writer_TypeID = 0xf7fec613b4a8c79f

func (c Channel_Writer) Write(ctx context.Context, params func(Channel_Msg) error) (Channel_Writer_write_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf7fec613b4a8c79f,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel.Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Msg(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Channel_Writer_write_Results_Future{Future: ans.Future()}, release

}

func (c Channel_Writer) Close(ctx context.Context, params func(Channel_Writer_close_Params) error) (Channel_Writer_close_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf7fec613b4a8c79f,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel.Writer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Writer_close_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Channel_Writer_close_Results_Future{Future: ans.Future()}, release

}

func (c Channel_Writer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Channel_Writer) String() string {
	return "Channel_Writer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Channel_Writer) AddRef() Channel_Writer {
	return Channel_Writer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Channel_Writer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Channel_Writer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Channel_Writer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Channel_Writer) DecodeFromPtr(p capnp.Ptr) Channel_Writer {
	return Channel_Writer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Channel_Writer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Channel_Writer) IsSame(other Channel_Writer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Channel_Writer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Channel_Writer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Channel_Writer_Server is a Channel_Writer with a local implementation.
type Channel_Writer_Server interface {
	Write(context.Context, Channel_Writer_write) error

	Close(context.Context, Channel_Writer_close) error
}

// Channel_Writer_NewServer creates a new Server from an implementation of Channel_Writer_Server.
func Channel_Writer_NewServer(s Channel_Writer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Writer_Methods(nil, s), s, c)
}

// Channel_Writer_ServerToClient creates a new Client from an implementation of Channel_Writer_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_Writer_ServerToClient(s Channel_Writer_Server) Channel_Writer {
	return Channel_Writer(capnp.NewClient(Channel_Writer_NewServer(s)))
}

// Channel_Writer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Writer_Methods(methods []server.Method, s Channel_Writer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf7fec613b4a8c79f,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel.Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Channel_Writer_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf7fec613b4a8c79f,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel.Writer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_Writer_close{call})
		},
	})

	return methods
}

// Channel_Writer_write holds the state for a server call to Channel_Writer.write.
// See server.Call for documentation.
type Channel_Writer_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Writer_write) Args() Channel_Msg {
	return Channel_Msg(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Channel_Writer_write) AllocResults() (Channel_Writer_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results(r), err
}

// Channel_Writer_close holds the state for a server call to Channel_Writer.close.
// See server.Call for documentation.
type Channel_Writer_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Writer_close) Args() Channel_Writer_close_Params {
	return Channel_Writer_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Channel_Writer_close) AllocResults() (Channel_Writer_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results(r), err
}

// Channel_Writer_List is a list of Channel_Writer.
type Channel_Writer_List = capnp.CapList[Channel_Writer]

// NewChannel_Writer_List creates a new list of Channel_Writer.
func NewChannel_Writer_List(s *capnp.Segment, sz int32) (Channel_Writer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Channel_Writer](l), err
}

type Channel_Writer_write_Results capnp.Struct

// Channel_Writer_write_Results_TypeID is the unique identifier for the type Channel_Writer_write_Results.
const Channel_Writer_write_Results_TypeID = 0xce9f24b8ec149524

func NewChannel_Writer_write_Results(s *capnp.Segment) (Channel_Writer_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results(st), err
}

func NewRootChannel_Writer_write_Results(s *capnp.Segment) (Channel_Writer_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results(st), err
}

func ReadRootChannel_Writer_write_Results(msg *capnp.Message) (Channel_Writer_write_Results, error) {
	root, err := msg.Root()
	return Channel_Writer_write_Results(root.Struct()), err
}

func (s Channel_Writer_write_Results) String() string {
	str, _ := text.Marshal(0xce9f24b8ec149524, capnp.Struct(s))
	return str
}

func (s Channel_Writer_write_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_Writer_write_Results) DecodeFromPtr(p capnp.Ptr) Channel_Writer_write_Results {
	return Channel_Writer_write_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_Writer_write_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_Writer_write_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_Writer_write_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_Writer_write_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_Writer_write_Results_List is a list of Channel_Writer_write_Results.
type Channel_Writer_write_Results_List = capnp.StructList[Channel_Writer_write_Results]

// NewChannel_Writer_write_Results creates a new list of Channel_Writer_write_Results.
func NewChannel_Writer_write_Results_List(s *capnp.Segment, sz int32) (Channel_Writer_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_Writer_write_Results](l), err
}

// Channel_Writer_write_Results_Future is a wrapper for a Channel_Writer_write_Results promised by a client call.
type Channel_Writer_write_Results_Future struct{ *capnp.Future }

func (f Channel_Writer_write_Results_Future) Struct() (Channel_Writer_write_Results, error) {
	p, err := f.Future.Ptr()
	return Channel_Writer_write_Results(p.Struct()), err
}

type Channel_Writer_close_Params capnp.Struct

// Channel_Writer_close_Params_TypeID is the unique identifier for the type Channel_Writer_close_Params.
const Channel_Writer_close_Params_TypeID = 0xbadc988dda3d1e50

func NewChannel_Writer_close_Params(s *capnp.Segment) (Channel_Writer_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Params(st), err
}

func NewRootChannel_Writer_close_Params(s *capnp.Segment) (Channel_Writer_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Params(st), err
}

func ReadRootChannel_Writer_close_Params(msg *capnp.Message) (Channel_Writer_close_Params, error) {
	root, err := msg.Root()
	return Channel_Writer_close_Params(root.Struct()), err
}

func (s Channel_Writer_close_Params) String() string {
	str, _ := text.Marshal(0xbadc988dda3d1e50, capnp.Struct(s))
	return str
}

func (s Channel_Writer_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_Writer_close_Params) DecodeFromPtr(p capnp.Ptr) Channel_Writer_close_Params {
	return Channel_Writer_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_Writer_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_Writer_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_Writer_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_Writer_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_Writer_close_Params_List is a list of Channel_Writer_close_Params.
type Channel_Writer_close_Params_List = capnp.StructList[Channel_Writer_close_Params]

// NewChannel_Writer_close_Params creates a new list of Channel_Writer_close_Params.
func NewChannel_Writer_close_Params_List(s *capnp.Segment, sz int32) (Channel_Writer_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_Writer_close_Params](l), err
}

// Channel_Writer_close_Params_Future is a wrapper for a Channel_Writer_close_Params promised by a client call.
type Channel_Writer_close_Params_Future struct{ *capnp.Future }

func (f Channel_Writer_close_Params_Future) Struct() (Channel_Writer_close_Params, error) {
	p, err := f.Future.Ptr()
	return Channel_Writer_close_Params(p.Struct()), err
}

type Channel_Writer_close_Results capnp.Struct

// Channel_Writer_close_Results_TypeID is the unique identifier for the type Channel_Writer_close_Results.
const Channel_Writer_close_Results_TypeID = 0xcb02dc91e18e58c9

func NewChannel_Writer_close_Results(s *capnp.Segment) (Channel_Writer_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results(st), err
}

func NewRootChannel_Writer_close_Results(s *capnp.Segment) (Channel_Writer_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results(st), err
}

func ReadRootChannel_Writer_close_Results(msg *capnp.Message) (Channel_Writer_close_Results, error) {
	root, err := msg.Root()
	return Channel_Writer_close_Results(root.Struct()), err
}

func (s Channel_Writer_close_Results) String() string {
	str, _ := text.Marshal(0xcb02dc91e18e58c9, capnp.Struct(s))
	return str
}

func (s Channel_Writer_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_Writer_close_Results) DecodeFromPtr(p capnp.Ptr) Channel_Writer_close_Results {
	return Channel_Writer_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_Writer_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_Writer_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_Writer_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_Writer_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_Writer_close_Results_List is a list of Channel_Writer_close_Results.
type Channel_Writer_close_Results_List = capnp.StructList[Channel_Writer_close_Results]

// NewChannel_Writer_close_Results creates a new list of Channel_Writer_close_Results.
func NewChannel_Writer_close_Results_List(s *capnp.Segment, sz int32) (Channel_Writer_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_Writer_close_Results](l), err
}

// Channel_Writer_close_Results_Future is a wrapper for a Channel_Writer_close_Results promised by a client call.
type Channel_Writer_close_Results_Future struct{ *capnp.Future }

func (f Channel_Writer_close_Results_Future) Struct() (Channel_Writer_close_Results, error) {
	p, err := f.Future.Ptr()
	return Channel_Writer_close_Results(p.Struct()), err
}

type Channel_setBufferSize_Params capnp.Struct

// Channel_setBufferSize_Params_TypeID is the unique identifier for the type Channel_setBufferSize_Params.
const Channel_setBufferSize_Params_TypeID = 0x92101e3b7a761333

func NewChannel_setBufferSize_Params(s *capnp.Segment) (Channel_setBufferSize_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setBufferSize_Params(st), err
}

func NewRootChannel_setBufferSize_Params(s *capnp.Segment) (Channel_setBufferSize_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setBufferSize_Params(st), err
}

func ReadRootChannel_setBufferSize_Params(msg *capnp.Message) (Channel_setBufferSize_Params, error) {
	root, err := msg.Root()
	return Channel_setBufferSize_Params(root.Struct()), err
}

func (s Channel_setBufferSize_Params) String() string {
	str, _ := text.Marshal(0x92101e3b7a761333, capnp.Struct(s))
	return str
}

func (s Channel_setBufferSize_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_setBufferSize_Params) DecodeFromPtr(p capnp.Ptr) Channel_setBufferSize_Params {
	return Channel_setBufferSize_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_setBufferSize_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_setBufferSize_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_setBufferSize_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_setBufferSize_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Channel_setBufferSize_Params) Size() uint64 {
	return capnp.Struct(s).Uint64(0) ^ 1
}

func (s Channel_setBufferSize_Params) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v^1)
}

// Channel_setBufferSize_Params_List is a list of Channel_setBufferSize_Params.
type Channel_setBufferSize_Params_List = capnp.StructList[Channel_setBufferSize_Params]

// NewChannel_setBufferSize_Params creates a new list of Channel_setBufferSize_Params.
func NewChannel_setBufferSize_Params_List(s *capnp.Segment, sz int32) (Channel_setBufferSize_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Channel_setBufferSize_Params](l), err
}

// Channel_setBufferSize_Params_Future is a wrapper for a Channel_setBufferSize_Params promised by a client call.
type Channel_setBufferSize_Params_Future struct{ *capnp.Future }

func (f Channel_setBufferSize_Params_Future) Struct() (Channel_setBufferSize_Params, error) {
	p, err := f.Future.Ptr()
	return Channel_setBufferSize_Params(p.Struct()), err
}

type Channel_setBufferSize_Results capnp.Struct

// Channel_setBufferSize_Results_TypeID is the unique identifier for the type Channel_setBufferSize_Results.
const Channel_setBufferSize_Results_TypeID = 0xfe6a08d5e0712c23

func NewChannel_setBufferSize_Results(s *capnp.Segment) (Channel_setBufferSize_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results(st), err
}

func NewRootChannel_setBufferSize_Results(s *capnp.Segment) (Channel_setBufferSize_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results(st), err
}

func ReadRootChannel_setBufferSize_Results(msg *capnp.Message) (Channel_setBufferSize_Results, error) {
	root, err := msg.Root()
	return Channel_setBufferSize_Results(root.Struct()), err
}

func (s Channel_setBufferSize_Results) String() string {
	str, _ := text.Marshal(0xfe6a08d5e0712c23, capnp.Struct(s))
	return str
}

func (s Channel_setBufferSize_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_setBufferSize_Results) DecodeFromPtr(p capnp.Ptr) Channel_setBufferSize_Results {
	return Channel_setBufferSize_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_setBufferSize_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_setBufferSize_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_setBufferSize_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_setBufferSize_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_setBufferSize_Results_List is a list of Channel_setBufferSize_Results.
type Channel_setBufferSize_Results_List = capnp.StructList[Channel_setBufferSize_Results]

// NewChannel_setBufferSize_Results creates a new list of Channel_setBufferSize_Results.
func NewChannel_setBufferSize_Results_List(s *capnp.Segment, sz int32) (Channel_setBufferSize_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_setBufferSize_Results](l), err
}

// Channel_setBufferSize_Results_Future is a wrapper for a Channel_setBufferSize_Results promised by a client call.
type Channel_setBufferSize_Results_Future struct{ *capnp.Future }

func (f Channel_setBufferSize_Results_Future) Struct() (Channel_setBufferSize_Results, error) {
	p, err := f.Future.Ptr()
	return Channel_setBufferSize_Results(p.Struct()), err
}

type Channel_reader_Params capnp.Struct

// Channel_reader_Params_TypeID is the unique identifier for the type Channel_reader_Params.
const Channel_reader_Params_TypeID = 0xe607c9dd64da04c4

func NewChannel_reader_Params(s *capnp.Segment) (Channel_reader_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_reader_Params(st), err
}

func NewRootChannel_reader_Params(s *capnp.Segment) (Channel_reader_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_reader_Params(st), err
}

func ReadRootChannel_reader_Params(msg *capnp.Message) (Channel_reader_Params, error) {
	root, err := msg.Root()
	return Channel_reader_Params(root.Struct()), err
}

func (s Channel_reader_Params) String() string {
	str, _ := text.Marshal(0xe607c9dd64da04c4, capnp.Struct(s))
	return str
}

func (s Channel_reader_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_reader_Params) DecodeFromPtr(p capnp.Ptr) Channel_reader_Params {
	return Channel_reader_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_reader_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_reader_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_reader_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_reader_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_reader_Params_List is a list of Channel_reader_Params.
type Channel_reader_Params_List = capnp.StructList[Channel_reader_Params]

// NewChannel_reader_Params creates a new list of Channel_reader_Params.
func NewChannel_reader_Params_List(s *capnp.Segment, sz int32) (Channel_reader_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_reader_Params](l), err
}

// Channel_reader_Params_Future is a wrapper for a Channel_reader_Params promised by a client call.
type Channel_reader_Params_Future struct{ *capnp.Future }

func (f Channel_reader_Params_Future) Struct() (Channel_reader_Params, error) {
	p, err := f.Future.Ptr()
	return Channel_reader_Params(p.Struct()), err
}

type Channel_reader_Results capnp.Struct

// Channel_reader_Results_TypeID is the unique identifier for the type Channel_reader_Results.
const Channel_reader_Results_TypeID = 0xb135ffc9ccc9eca6

func NewChannel_reader_Results(s *capnp.Segment) (Channel_reader_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results(st), err
}

func NewRootChannel_reader_Results(s *capnp.Segment) (Channel_reader_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results(st), err
}

func ReadRootChannel_reader_Results(msg *capnp.Message) (Channel_reader_Results, error) {
	root, err := msg.Root()
	return Channel_reader_Results(root.Struct()), err
}

func (s Channel_reader_Results) String() string {
	str, _ := text.Marshal(0xb135ffc9ccc9eca6, capnp.Struct(s))
	return str
}

func (s Channel_reader_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_reader_Results) DecodeFromPtr(p capnp.Ptr) Channel_reader_Results {
	return Channel_reader_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_reader_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_reader_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_reader_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_reader_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Channel_reader_Results) R() Channel_Reader {
	p, _ := capnp.Struct(s).Ptr(0)
	return Channel_Reader(p.Interface().Client())
}

func (s Channel_reader_Results) HasR() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Channel_reader_Results) SetR(v Channel_Reader) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Channel_reader_Results_List is a list of Channel_reader_Results.
type Channel_reader_Results_List = capnp.StructList[Channel_reader_Results]

// NewChannel_reader_Results creates a new list of Channel_reader_Results.
func NewChannel_reader_Results_List(s *capnp.Segment, sz int32) (Channel_reader_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Channel_reader_Results](l), err
}

// Channel_reader_Results_Future is a wrapper for a Channel_reader_Results promised by a client call.
type Channel_reader_Results_Future struct{ *capnp.Future }

func (f Channel_reader_Results_Future) Struct() (Channel_reader_Results, error) {
	p, err := f.Future.Ptr()
	return Channel_reader_Results(p.Struct()), err
}
func (p Channel_reader_Results_Future) R() Channel_Reader {
	return Channel_Reader(p.Future.Field(0, nil).Client())
}

type Channel_writer_Params capnp.Struct

// Channel_writer_Params_TypeID is the unique identifier for the type Channel_writer_Params.
const Channel_writer_Params_TypeID = 0xbe611d34e368e109

func NewChannel_writer_Params(s *capnp.Segment) (Channel_writer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_writer_Params(st), err
}

func NewRootChannel_writer_Params(s *capnp.Segment) (Channel_writer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_writer_Params(st), err
}

func ReadRootChannel_writer_Params(msg *capnp.Message) (Channel_writer_Params, error) {
	root, err := msg.Root()
	return Channel_writer_Params(root.Struct()), err
}

func (s Channel_writer_Params) String() string {
	str, _ := text.Marshal(0xbe611d34e368e109, capnp.Struct(s))
	return str
}

func (s Channel_writer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_writer_Params) DecodeFromPtr(p capnp.Ptr) Channel_writer_Params {
	return Channel_writer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_writer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_writer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_writer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_writer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_writer_Params_List is a list of Channel_writer_Params.
type Channel_writer_Params_List = capnp.StructList[Channel_writer_Params]

// NewChannel_writer_Params creates a new list of Channel_writer_Params.
func NewChannel_writer_Params_List(s *capnp.Segment, sz int32) (Channel_writer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_writer_Params](l), err
}

// Channel_writer_Params_Future is a wrapper for a Channel_writer_Params promised by a client call.
type Channel_writer_Params_Future struct{ *capnp.Future }

func (f Channel_writer_Params_Future) Struct() (Channel_writer_Params, error) {
	p, err := f.Future.Ptr()
	return Channel_writer_Params(p.Struct()), err
}

type Channel_writer_Results capnp.Struct

// Channel_writer_Results_TypeID is the unique identifier for the type Channel_writer_Results.
const Channel_writer_Results_TypeID = 0xb47b53679e985c7e

func NewChannel_writer_Results(s *capnp.Segment) (Channel_writer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results(st), err
}

func NewRootChannel_writer_Results(s *capnp.Segment) (Channel_writer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results(st), err
}

func ReadRootChannel_writer_Results(msg *capnp.Message) (Channel_writer_Results, error) {
	root, err := msg.Root()
	return Channel_writer_Results(root.Struct()), err
}

func (s Channel_writer_Results) String() string {
	str, _ := text.Marshal(0xb47b53679e985c7e, capnp.Struct(s))
	return str
}

func (s Channel_writer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_writer_Results) DecodeFromPtr(p capnp.Ptr) Channel_writer_Results {
	return Channel_writer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_writer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_writer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_writer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_writer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Channel_writer_Results) W() Channel_Writer {
	p, _ := capnp.Struct(s).Ptr(0)
	return Channel_Writer(p.Interface().Client())
}

func (s Channel_writer_Results) HasW() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Channel_writer_Results) SetW(v Channel_Writer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Channel_writer_Results_List is a list of Channel_writer_Results.
type Channel_writer_Results_List = capnp.StructList[Channel_writer_Results]

// NewChannel_writer_Results creates a new list of Channel_writer_Results.
func NewChannel_writer_Results_List(s *capnp.Segment, sz int32) (Channel_writer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Channel_writer_Results](l), err
}

// Channel_writer_Results_Future is a wrapper for a Channel_writer_Results promised by a client call.
type Channel_writer_Results_Future struct{ *capnp.Future }

func (f Channel_writer_Results_Future) Struct() (Channel_writer_Results, error) {
	p, err := f.Future.Ptr()
	return Channel_writer_Results(p.Struct()), err
}
func (p Channel_writer_Results_Future) W() Channel_Writer {
	return Channel_Writer(p.Future.Field(0, nil).Client())
}

type Channel_endpoints_Params capnp.Struct

// Channel_endpoints_Params_TypeID is the unique identifier for the type Channel_endpoints_Params.
const Channel_endpoints_Params_TypeID = 0xd23f817e914373d8

func NewChannel_endpoints_Params(s *capnp.Segment) (Channel_endpoints_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_endpoints_Params(st), err
}

func NewRootChannel_endpoints_Params(s *capnp.Segment) (Channel_endpoints_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_endpoints_Params(st), err
}

func ReadRootChannel_endpoints_Params(msg *capnp.Message) (Channel_endpoints_Params, error) {
	root, err := msg.Root()
	return Channel_endpoints_Params(root.Struct()), err
}

func (s Channel_endpoints_Params) String() string {
	str, _ := text.Marshal(0xd23f817e914373d8, capnp.Struct(s))
	return str
}

func (s Channel_endpoints_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_endpoints_Params) DecodeFromPtr(p capnp.Ptr) Channel_endpoints_Params {
	return Channel_endpoints_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_endpoints_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_endpoints_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_endpoints_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_endpoints_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_endpoints_Params_List is a list of Channel_endpoints_Params.
type Channel_endpoints_Params_List = capnp.StructList[Channel_endpoints_Params]

// NewChannel_endpoints_Params creates a new list of Channel_endpoints_Params.
func NewChannel_endpoints_Params_List(s *capnp.Segment, sz int32) (Channel_endpoints_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_endpoints_Params](l), err
}

// Channel_endpoints_Params_Future is a wrapper for a Channel_endpoints_Params promised by a client call.
type Channel_endpoints_Params_Future struct{ *capnp.Future }

func (f Channel_endpoints_Params_Future) Struct() (Channel_endpoints_Params, error) {
	p, err := f.Future.Ptr()
	return Channel_endpoints_Params(p.Struct()), err
}

type Channel_endpoints_Results capnp.Struct

// Channel_endpoints_Results_TypeID is the unique identifier for the type Channel_endpoints_Results.
const Channel_endpoints_Results_TypeID = 0xf37401d21f8d97bb

func NewChannel_endpoints_Results(s *capnp.Segment) (Channel_endpoints_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results(st), err
}

func NewRootChannel_endpoints_Results(s *capnp.Segment) (Channel_endpoints_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results(st), err
}

func ReadRootChannel_endpoints_Results(msg *capnp.Message) (Channel_endpoints_Results, error) {
	root, err := msg.Root()
	return Channel_endpoints_Results(root.Struct()), err
}

func (s Channel_endpoints_Results) String() string {
	str, _ := text.Marshal(0xf37401d21f8d97bb, capnp.Struct(s))
	return str
}

func (s Channel_endpoints_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_endpoints_Results) DecodeFromPtr(p capnp.Ptr) Channel_endpoints_Results {
	return Channel_endpoints_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_endpoints_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_endpoints_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_endpoints_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_endpoints_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Channel_endpoints_Results) R() Channel_Reader {
	p, _ := capnp.Struct(s).Ptr(0)
	return Channel_Reader(p.Interface().Client())
}

func (s Channel_endpoints_Results) HasR() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Channel_endpoints_Results) SetR(v Channel_Reader) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Channel_endpoints_Results) W() Channel_Writer {
	p, _ := capnp.Struct(s).Ptr(1)
	return Channel_Writer(p.Interface().Client())
}

func (s Channel_endpoints_Results) HasW() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Channel_endpoints_Results) SetW(v Channel_Writer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Channel_endpoints_Results_List is a list of Channel_endpoints_Results.
type Channel_endpoints_Results_List = capnp.StructList[Channel_endpoints_Results]

// NewChannel_endpoints_Results creates a new list of Channel_endpoints_Results.
func NewChannel_endpoints_Results_List(s *capnp.Segment, sz int32) (Channel_endpoints_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Channel_endpoints_Results](l), err
}

// Channel_endpoints_Results_Future is a wrapper for a Channel_endpoints_Results promised by a client call.
type Channel_endpoints_Results_Future struct{ *capnp.Future }

func (f Channel_endpoints_Results_Future) Struct() (Channel_endpoints_Results, error) {
	p, err := f.Future.Ptr()
	return Channel_endpoints_Results(p.Struct()), err
}
func (p Channel_endpoints_Results_Future) R() Channel_Reader {
	return Channel_Reader(p.Future.Field(0, nil).Client())
}

func (p Channel_endpoints_Results_Future) W() Channel_Writer {
	return Channel_Writer(p.Future.Field(1, nil).Client())
}

type Channel_setAutoCloseSemantics_Params capnp.Struct

// Channel_setAutoCloseSemantics_Params_TypeID is the unique identifier for the type Channel_setAutoCloseSemantics_Params.
const Channel_setAutoCloseSemantics_Params_TypeID = 0xb49836b545583add

func NewChannel_setAutoCloseSemantics_Params(s *capnp.Segment) (Channel_setAutoCloseSemantics_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Params(st), err
}

func NewRootChannel_setAutoCloseSemantics_Params(s *capnp.Segment) (Channel_setAutoCloseSemantics_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Params(st), err
}

func ReadRootChannel_setAutoCloseSemantics_Params(msg *capnp.Message) (Channel_setAutoCloseSemantics_Params, error) {
	root, err := msg.Root()
	return Channel_setAutoCloseSemantics_Params(root.Struct()), err
}

func (s Channel_setAutoCloseSemantics_Params) String() string {
	str, _ := text.Marshal(0xb49836b545583add, capnp.Struct(s))
	return str
}

func (s Channel_setAutoCloseSemantics_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_setAutoCloseSemantics_Params) DecodeFromPtr(p capnp.Ptr) Channel_setAutoCloseSemantics_Params {
	return Channel_setAutoCloseSemantics_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_setAutoCloseSemantics_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_setAutoCloseSemantics_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_setAutoCloseSemantics_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_setAutoCloseSemantics_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Channel_setAutoCloseSemantics_Params) Cs() Channel_CloseSemantics {
	return Channel_CloseSemantics(capnp.Struct(s).Uint16(0))
}

func (s Channel_setAutoCloseSemantics_Params) SetCs(v Channel_CloseSemantics) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Channel_setAutoCloseSemantics_Params_List is a list of Channel_setAutoCloseSemantics_Params.
type Channel_setAutoCloseSemantics_Params_List = capnp.StructList[Channel_setAutoCloseSemantics_Params]

// NewChannel_setAutoCloseSemantics_Params creates a new list of Channel_setAutoCloseSemantics_Params.
func NewChannel_setAutoCloseSemantics_Params_List(s *capnp.Segment, sz int32) (Channel_setAutoCloseSemantics_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Channel_setAutoCloseSemantics_Params](l), err
}

// Channel_setAutoCloseSemantics_Params_Future is a wrapper for a Channel_setAutoCloseSemantics_Params promised by a client call.
type Channel_setAutoCloseSemantics_Params_Future struct{ *capnp.Future }

func (f Channel_setAutoCloseSemantics_Params_Future) Struct() (Channel_setAutoCloseSemantics_Params, error) {
	p, err := f.Future.Ptr()
	return Channel_setAutoCloseSemantics_Params(p.Struct()), err
}

type Channel_setAutoCloseSemantics_Results capnp.Struct

// Channel_setAutoCloseSemantics_Results_TypeID is the unique identifier for the type Channel_setAutoCloseSemantics_Results.
const Channel_setAutoCloseSemantics_Results_TypeID = 0xc0fc6e5a3fcb3206

func NewChannel_setAutoCloseSemantics_Results(s *capnp.Segment) (Channel_setAutoCloseSemantics_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results(st), err
}

func NewRootChannel_setAutoCloseSemantics_Results(s *capnp.Segment) (Channel_setAutoCloseSemantics_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results(st), err
}

func ReadRootChannel_setAutoCloseSemantics_Results(msg *capnp.Message) (Channel_setAutoCloseSemantics_Results, error) {
	root, err := msg.Root()
	return Channel_setAutoCloseSemantics_Results(root.Struct()), err
}

func (s Channel_setAutoCloseSemantics_Results) String() string {
	str, _ := text.Marshal(0xc0fc6e5a3fcb3206, capnp.Struct(s))
	return str
}

func (s Channel_setAutoCloseSemantics_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_setAutoCloseSemantics_Results) DecodeFromPtr(p capnp.Ptr) Channel_setAutoCloseSemantics_Results {
	return Channel_setAutoCloseSemantics_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_setAutoCloseSemantics_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_setAutoCloseSemantics_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_setAutoCloseSemantics_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_setAutoCloseSemantics_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_setAutoCloseSemantics_Results_List is a list of Channel_setAutoCloseSemantics_Results.
type Channel_setAutoCloseSemantics_Results_List = capnp.StructList[Channel_setAutoCloseSemantics_Results]

// NewChannel_setAutoCloseSemantics_Results creates a new list of Channel_setAutoCloseSemantics_Results.
func NewChannel_setAutoCloseSemantics_Results_List(s *capnp.Segment, sz int32) (Channel_setAutoCloseSemantics_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_setAutoCloseSemantics_Results](l), err
}

// Channel_setAutoCloseSemantics_Results_Future is a wrapper for a Channel_setAutoCloseSemantics_Results promised by a client call.
type Channel_setAutoCloseSemantics_Results_Future struct{ *capnp.Future }

func (f Channel_setAutoCloseSemantics_Results_Future) Struct() (Channel_setAutoCloseSemantics_Results, error) {
	p, err := f.Future.Ptr()
	return Channel_setAutoCloseSemantics_Results(p.Struct()), err
}

type Channel_close_Params capnp.Struct

// Channel_close_Params_TypeID is the unique identifier for the type Channel_close_Params.
const Channel_close_Params_TypeID = 0x95d8ad01c1113d9c

func NewChannel_close_Params(s *capnp.Segment) (Channel_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_close_Params(st), err
}

func NewRootChannel_close_Params(s *capnp.Segment) (Channel_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_close_Params(st), err
}

func ReadRootChannel_close_Params(msg *capnp.Message) (Channel_close_Params, error) {
	root, err := msg.Root()
	return Channel_close_Params(root.Struct()), err
}

func (s Channel_close_Params) String() string {
	str, _ := text.Marshal(0x95d8ad01c1113d9c, capnp.Struct(s))
	return str
}

func (s Channel_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_close_Params) DecodeFromPtr(p capnp.Ptr) Channel_close_Params {
	return Channel_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Channel_close_Params) WaitForEmptyBuffer() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s Channel_close_Params) SetWaitForEmptyBuffer(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

// Channel_close_Params_List is a list of Channel_close_Params.
type Channel_close_Params_List = capnp.StructList[Channel_close_Params]

// NewChannel_close_Params creates a new list of Channel_close_Params.
func NewChannel_close_Params_List(s *capnp.Segment, sz int32) (Channel_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Channel_close_Params](l), err
}

// Channel_close_Params_Future is a wrapper for a Channel_close_Params promised by a client call.
type Channel_close_Params_Future struct{ *capnp.Future }

func (f Channel_close_Params_Future) Struct() (Channel_close_Params, error) {
	p, err := f.Future.Ptr()
	return Channel_close_Params(p.Struct()), err
}

type Channel_close_Results capnp.Struct

// Channel_close_Results_TypeID is the unique identifier for the type Channel_close_Results.
const Channel_close_Results_TypeID = 0xcc079ad60f1363b7

func NewChannel_close_Results(s *capnp.Segment) (Channel_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results(st), err
}

func NewRootChannel_close_Results(s *capnp.Segment) (Channel_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results(st), err
}

func ReadRootChannel_close_Results(msg *capnp.Message) (Channel_close_Results, error) {
	root, err := msg.Root()
	return Channel_close_Results(root.Struct()), err
}

func (s Channel_close_Results) String() string {
	str, _ := text.Marshal(0xcc079ad60f1363b7, capnp.Struct(s))
	return str
}

func (s Channel_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Channel_close_Results) DecodeFromPtr(p capnp.Ptr) Channel_close_Results {
	return Channel_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Channel_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Channel_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Channel_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Channel_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Channel_close_Results_List is a list of Channel_close_Results.
type Channel_close_Results_List = capnp.StructList[Channel_close_Results]

// NewChannel_close_Results creates a new list of Channel_close_Results.
func NewChannel_close_Results_List(s *capnp.Segment, sz int32) (Channel_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Channel_close_Results](l), err
}

// Channel_close_Results_Future is a wrapper for a Channel_close_Results promised by a client call.
type Channel_close_Results_Future struct{ *capnp.Future }

func (f Channel_close_Results_Future) Struct() (Channel_close_Results, error) {
	p, err := f.Future.Ptr()
	return Channel_close_Results(p.Struct()), err
}

type NewPortInfo capnp.Struct
type NewPortInfo_Which uint16

const (
	NewPortInfo_Which_inPortReaderCap  NewPortInfo_Which = 0
	NewPortInfo_Which_inPortReaderSR   NewPortInfo_Which = 1
	NewPortInfo_Which_outPortWriterCap NewPortInfo_Which = 2
	NewPortInfo_Which_outPortWriterSR  NewPortInfo_Which = 3
)

func (w NewPortInfo_Which) String() string {
	const s = "inPortReaderCapinPortReaderSRoutPortWriterCapoutPortWriterSR"
	switch w {
	case NewPortInfo_Which_inPortReaderCap:
		return s[0:15]
	case NewPortInfo_Which_inPortReaderSR:
		return s[15:29]
	case NewPortInfo_Which_outPortWriterCap:
		return s[29:45]
	case NewPortInfo_Which_outPortWriterSR:
		return s[45:60]

	}
	return "NewPortInfo_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// NewPortInfo_TypeID is the unique identifier for the type NewPortInfo.
const NewPortInfo_TypeID = 0xa2dcae494290639e

func NewNewPortInfo(s *capnp.Segment) (NewPortInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NewPortInfo(st), err
}

func NewRootNewPortInfo(s *capnp.Segment) (NewPortInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NewPortInfo(st), err
}

func ReadRootNewPortInfo(msg *capnp.Message) (NewPortInfo, error) {
	root, err := msg.Root()
	return NewPortInfo(root.Struct()), err
}

func (s NewPortInfo) String() string {
	str, _ := text.Marshal(0xa2dcae494290639e, capnp.Struct(s))
	return str
}

func (s NewPortInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NewPortInfo) DecodeFromPtr(p capnp.Ptr) NewPortInfo {
	return NewPortInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NewPortInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s NewPortInfo) Which() NewPortInfo_Which {
	return NewPortInfo_Which(capnp.Struct(s).Uint16(0))
}
func (s NewPortInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NewPortInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NewPortInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NewPortInfo) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NewPortInfo) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NewPortInfo) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NewPortInfo) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NewPortInfo) InPortReaderCap() Channel_Reader {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != inPortReaderCap")
	}
	p, _ := capnp.Struct(s).Ptr(1)
	return Channel_Reader(p.Interface().Client())
}

func (s NewPortInfo) HasInPortReaderCap() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s NewPortInfo) SetInPortReaderCap(v Channel_Reader) error {
	capnp.Struct(s).SetUint16(0, 0)
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s NewPortInfo) InPortReaderSR() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != inPortReaderSR")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s NewPortInfo) HasInPortReaderSR() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s NewPortInfo) InPortReaderSRBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s NewPortInfo) SetInPortReaderSR(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(1, v)
}

func (s NewPortInfo) OutPortWriterCap() Channel_Writer {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != outPortWriterCap")
	}
	p, _ := capnp.Struct(s).Ptr(1)
	return Channel_Writer(p.Interface().Client())
}

func (s NewPortInfo) HasOutPortWriterCap() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s NewPortInfo) SetOutPortWriterCap(v Channel_Writer) error {
	capnp.Struct(s).SetUint16(0, 2)
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s NewPortInfo) OutPortWriterSR() (string, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != outPortWriterSR")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s NewPortInfo) HasOutPortWriterSR() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s NewPortInfo) OutPortWriterSRBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s NewPortInfo) SetOutPortWriterSR(v string) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetText(1, v)
}

// NewPortInfo_List is a list of NewPortInfo.
type NewPortInfo_List = capnp.StructList[NewPortInfo]

// NewNewPortInfo creates a new list of NewPortInfo.
func NewNewPortInfo_List(s *capnp.Segment, sz int32) (NewPortInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[NewPortInfo](l), err
}

// NewPortInfo_Future is a wrapper for a NewPortInfo promised by a client call.
type NewPortInfo_Future struct{ *capnp.Future }

func (f NewPortInfo_Future) Struct() (NewPortInfo, error) {
	p, err := f.Future.Ptr()
	return NewPortInfo(p.Struct()), err
}
func (p NewPortInfo_Future) InPortReaderCap() Channel_Reader {
	return Channel_Reader(p.Future.Field(1, nil).Client())
}

func (p NewPortInfo_Future) OutPortWriterCap() Channel_Writer {
	return Channel_Writer(p.Future.Field(1, nil).Client())
}

type PortInfos capnp.Struct

// PortInfos_TypeID is the unique identifier for the type PortInfos.
const PortInfos_TypeID = 0xece0efa9a922d4a8

func NewPortInfos(s *capnp.Segment) (PortInfos, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PortInfos(st), err
}

func NewRootPortInfos(s *capnp.Segment) (PortInfos, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PortInfos(st), err
}

func ReadRootPortInfos(msg *capnp.Message) (PortInfos, error) {
	root, err := msg.Root()
	return PortInfos(root.Struct()), err
}

func (s PortInfos) String() string {
	str, _ := text.Marshal(0xece0efa9a922d4a8, capnp.Struct(s))
	return str
}

func (s PortInfos) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PortInfos) DecodeFromPtr(p capnp.Ptr) PortInfos {
	return PortInfos(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PortInfos) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PortInfos) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PortInfos) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PortInfos) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PortInfos) InPorts() (PortInfos_NameAndSR_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PortInfos_NameAndSR_List(p.List()), err
}

func (s PortInfos) HasInPorts() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PortInfos) SetInPorts(v PortInfos_NameAndSR_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInPorts sets the inPorts field to a newly
// allocated PortInfos_NameAndSR_List, preferring placement in s's segment.
func (s PortInfos) NewInPorts(n int32) (PortInfos_NameAndSR_List, error) {
	l, err := NewPortInfos_NameAndSR_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PortInfos_NameAndSR_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s PortInfos) OutPorts() (PortInfos_NameAndSR_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return PortInfos_NameAndSR_List(p.List()), err
}

func (s PortInfos) HasOutPorts() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PortInfos) SetOutPorts(v PortInfos_NameAndSR_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewOutPorts sets the outPorts field to a newly
// allocated PortInfos_NameAndSR_List, preferring placement in s's segment.
func (s PortInfos) NewOutPorts(n int32) (PortInfos_NameAndSR_List, error) {
	l, err := NewPortInfos_NameAndSR_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PortInfos_NameAndSR_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// PortInfos_List is a list of PortInfos.
type PortInfos_List = capnp.StructList[PortInfos]

// NewPortInfos creates a new list of PortInfos.
func NewPortInfos_List(s *capnp.Segment, sz int32) (PortInfos_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[PortInfos](l), err
}

// PortInfos_Future is a wrapper for a PortInfos promised by a client call.
type PortInfos_Future struct{ *capnp.Future }

func (f PortInfos_Future) Struct() (PortInfos, error) {
	p, err := f.Future.Ptr()
	return PortInfos(p.Struct()), err
}

type PortInfos_NameAndSR capnp.Struct
type PortInfos_NameAndSR_Which uint16

const (
	PortInfos_NameAndSR_Which_sr  PortInfos_NameAndSR_Which = 0
	PortInfos_NameAndSR_Which_srs PortInfos_NameAndSR_Which = 1
)

func (w PortInfos_NameAndSR_Which) String() string {
	const s = "srsrs"
	switch w {
	case PortInfos_NameAndSR_Which_sr:
		return s[0:2]
	case PortInfos_NameAndSR_Which_srs:
		return s[2:5]

	}
	return "PortInfos_NameAndSR_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PortInfos_NameAndSR_TypeID is the unique identifier for the type PortInfos_NameAndSR.
const PortInfos_NameAndSR_TypeID = 0x8a4d34c4b5eb1545

func NewPortInfos_NameAndSR(s *capnp.Segment) (PortInfos_NameAndSR, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PortInfos_NameAndSR(st), err
}

func NewRootPortInfos_NameAndSR(s *capnp.Segment) (PortInfos_NameAndSR, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return PortInfos_NameAndSR(st), err
}

func ReadRootPortInfos_NameAndSR(msg *capnp.Message) (PortInfos_NameAndSR, error) {
	root, err := msg.Root()
	return PortInfos_NameAndSR(root.Struct()), err
}

func (s PortInfos_NameAndSR) String() string {
	str, _ := text.Marshal(0x8a4d34c4b5eb1545, capnp.Struct(s))
	return str
}

func (s PortInfos_NameAndSR) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PortInfos_NameAndSR) DecodeFromPtr(p capnp.Ptr) PortInfos_NameAndSR {
	return PortInfos_NameAndSR(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PortInfos_NameAndSR) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s PortInfos_NameAndSR) Which() PortInfos_NameAndSR_Which {
	return PortInfos_NameAndSR_Which(capnp.Struct(s).Uint16(0))
}
func (s PortInfos_NameAndSR) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PortInfos_NameAndSR) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PortInfos_NameAndSR) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PortInfos_NameAndSR) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PortInfos_NameAndSR) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PortInfos_NameAndSR) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PortInfos_NameAndSR) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s PortInfos_NameAndSR) Sr() (string, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != sr")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s PortInfos_NameAndSR) HasSr() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s PortInfos_NameAndSR) SrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s PortInfos_NameAndSR) SetSr(v string) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetText(1, v)
}

func (s PortInfos_NameAndSR) Srs() (capnp.TextList, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != srs")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s PortInfos_NameAndSR) HasSrs() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s PortInfos_NameAndSR) SetSrs(v capnp.TextList) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewSrs sets the srs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s PortInfos_NameAndSR) NewSrs(n int32) (capnp.TextList, error) {
	capnp.Struct(s).SetUint16(0, 1)
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// PortInfos_NameAndSR_List is a list of PortInfos_NameAndSR.
type PortInfos_NameAndSR_List = capnp.StructList[PortInfos_NameAndSR]

// NewPortInfos_NameAndSR creates a new list of PortInfos_NameAndSR.
func NewPortInfos_NameAndSR_List(s *capnp.Segment, sz int32) (PortInfos_NameAndSR_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[PortInfos_NameAndSR](l), err
}

// PortInfos_NameAndSR_Future is a wrapper for a PortInfos_NameAndSR promised by a client call.
type PortInfos_NameAndSR_Future struct{ *capnp.Future }

func (f PortInfos_NameAndSR_Future) Struct() (PortInfos_NameAndSR, error) {
	p, err := f.Future.Ptr()
	return PortInfos_NameAndSR(p.Struct()), err
}

type Component capnp.Client

// Component_TypeID is the unique identifier for the type Component.
const Component_TypeID = 0xd717ff7d6815a6b0

func (c Component) Start(ctx context.Context, params func(Component_start_Params) error) (Component_start_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd717ff7d6815a6b0,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Component",
			MethodName:    "start",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Component_start_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Component_start_Results_Future{Future: ans.Future()}, release

}

func (c Component) Stop(ctx context.Context, params func(Component_stop_Params) error) (Component_stop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd717ff7d6815a6b0,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Component",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Component_stop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Component_stop_Results_Future{Future: ans.Future()}, release

}

func (c Component) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Component) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Component) String() string {
	return "Component(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Component) AddRef() Component {
	return Component(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Component) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Component) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Component) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Component) DecodeFromPtr(p capnp.Ptr) Component {
	return Component(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Component) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Component) IsSame(other Component) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Component) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Component) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Component_Server is a Component with a local implementation.
type Component_Server interface {
	Start(context.Context, Component_start) error

	Stop(context.Context, Component_stop) error

	Info(context.Context, common.Identifiable_info) error
}

// Component_NewServer creates a new Server from an implementation of Component_Server.
func Component_NewServer(s Component_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Component_Methods(nil, s), s, c)
}

// Component_ServerToClient creates a new Client from an implementation of Component_Server.
// The caller is responsible for calling Release on the returned Client.
func Component_ServerToClient(s Component_Server) Component {
	return Component(capnp.NewClient(Component_NewServer(s)))
}

// Component_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Component_Methods(methods []server.Method, s Component_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd717ff7d6815a6b0,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Component",
			MethodName:    "start",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Start(ctx, Component_start{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd717ff7d6815a6b0,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Component",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Component_stop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Component_start holds the state for a server call to Component.start.
// See server.Call for documentation.
type Component_start struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Component_start) Args() Component_start_Params {
	return Component_start_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Component_start) AllocResults() (Component_start_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Component_start_Results(r), err
}

// Component_stop holds the state for a server call to Component.stop.
// See server.Call for documentation.
type Component_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Component_stop) Args() Component_stop_Params {
	return Component_stop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Component_stop) AllocResults() (Component_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Component_stop_Results(r), err
}

// Component_List is a list of Component.
type Component_List = capnp.CapList[Component]

// NewComponent_List creates a new list of Component.
func NewComponent_List(s *capnp.Segment, sz int32) (Component_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Component](l), err
}

type Component_start_Params capnp.Struct

// Component_start_Params_TypeID is the unique identifier for the type Component_start_Params.
const Component_start_Params_TypeID = 0xf5b257d7fba7ed60

func NewComponent_start_Params(s *capnp.Segment) (Component_start_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Component_start_Params(st), err
}

func NewRootComponent_start_Params(s *capnp.Segment) (Component_start_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Component_start_Params(st), err
}

func ReadRootComponent_start_Params(msg *capnp.Message) (Component_start_Params, error) {
	root, err := msg.Root()
	return Component_start_Params(root.Struct()), err
}

func (s Component_start_Params) String() string {
	str, _ := text.Marshal(0xf5b257d7fba7ed60, capnp.Struct(s))
	return str
}

func (s Component_start_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Component_start_Params) DecodeFromPtr(p capnp.Ptr) Component_start_Params {
	return Component_start_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Component_start_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Component_start_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Component_start_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Component_start_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Component_start_Params) PortInfosReaderSr() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Component_start_Params) HasPortInfosReaderSr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Component_start_Params) PortInfosReaderSrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Component_start_Params) SetPortInfosReaderSr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Component_start_Params_List is a list of Component_start_Params.
type Component_start_Params_List = capnp.StructList[Component_start_Params]

// NewComponent_start_Params creates a new list of Component_start_Params.
func NewComponent_start_Params_List(s *capnp.Segment, sz int32) (Component_start_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Component_start_Params](l), err
}

// Component_start_Params_Future is a wrapper for a Component_start_Params promised by a client call.
type Component_start_Params_Future struct{ *capnp.Future }

func (f Component_start_Params_Future) Struct() (Component_start_Params, error) {
	p, err := f.Future.Ptr()
	return Component_start_Params(p.Struct()), err
}

type Component_start_Results capnp.Struct

// Component_start_Results_TypeID is the unique identifier for the type Component_start_Results.
const Component_start_Results_TypeID = 0xda58608ec3b1dfa6

func NewComponent_start_Results(s *capnp.Segment) (Component_start_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Component_start_Results(st), err
}

func NewRootComponent_start_Results(s *capnp.Segment) (Component_start_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Component_start_Results(st), err
}

func ReadRootComponent_start_Results(msg *capnp.Message) (Component_start_Results, error) {
	root, err := msg.Root()
	return Component_start_Results(root.Struct()), err
}

func (s Component_start_Results) String() string {
	str, _ := text.Marshal(0xda58608ec3b1dfa6, capnp.Struct(s))
	return str
}

func (s Component_start_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Component_start_Results) DecodeFromPtr(p capnp.Ptr) Component_start_Results {
	return Component_start_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Component_start_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Component_start_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Component_start_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Component_start_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Component_start_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Component_start_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Component_start_Results_List is a list of Component_start_Results.
type Component_start_Results_List = capnp.StructList[Component_start_Results]

// NewComponent_start_Results creates a new list of Component_start_Results.
func NewComponent_start_Results_List(s *capnp.Segment, sz int32) (Component_start_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Component_start_Results](l), err
}

// Component_start_Results_Future is a wrapper for a Component_start_Results promised by a client call.
type Component_start_Results_Future struct{ *capnp.Future }

func (f Component_start_Results_Future) Struct() (Component_start_Results, error) {
	p, err := f.Future.Ptr()
	return Component_start_Results(p.Struct()), err
}

type Component_stop_Params capnp.Struct

// Component_stop_Params_TypeID is the unique identifier for the type Component_stop_Params.
const Component_stop_Params_TypeID = 0xbe5bb9ba1de54674

func NewComponent_stop_Params(s *capnp.Segment) (Component_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Component_stop_Params(st), err
}

func NewRootComponent_stop_Params(s *capnp.Segment) (Component_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Component_stop_Params(st), err
}

func ReadRootComponent_stop_Params(msg *capnp.Message) (Component_stop_Params, error) {
	root, err := msg.Root()
	return Component_stop_Params(root.Struct()), err
}

func (s Component_stop_Params) String() string {
	str, _ := text.Marshal(0xbe5bb9ba1de54674, capnp.Struct(s))
	return str
}

func (s Component_stop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Component_stop_Params) DecodeFromPtr(p capnp.Ptr) Component_stop_Params {
	return Component_stop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Component_stop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Component_stop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Component_stop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Component_stop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Component_stop_Params_List is a list of Component_stop_Params.
type Component_stop_Params_List = capnp.StructList[Component_stop_Params]

// NewComponent_stop_Params creates a new list of Component_stop_Params.
func NewComponent_stop_Params_List(s *capnp.Segment, sz int32) (Component_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Component_stop_Params](l), err
}

// Component_stop_Params_Future is a wrapper for a Component_stop_Params promised by a client call.
type Component_stop_Params_Future struct{ *capnp.Future }

func (f Component_stop_Params_Future) Struct() (Component_stop_Params, error) {
	p, err := f.Future.Ptr()
	return Component_stop_Params(p.Struct()), err
}

type Component_stop_Results capnp.Struct

// Component_stop_Results_TypeID is the unique identifier for the type Component_stop_Results.
const Component_stop_Results_TypeID = 0xbe0c6a5a76e75105

func NewComponent_stop_Results(s *capnp.Segment) (Component_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Component_stop_Results(st), err
}

func NewRootComponent_stop_Results(s *capnp.Segment) (Component_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Component_stop_Results(st), err
}

func ReadRootComponent_stop_Results(msg *capnp.Message) (Component_stop_Results, error) {
	root, err := msg.Root()
	return Component_stop_Results(root.Struct()), err
}

func (s Component_stop_Results) String() string {
	str, _ := text.Marshal(0xbe0c6a5a76e75105, capnp.Struct(s))
	return str
}

func (s Component_stop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Component_stop_Results) DecodeFromPtr(p capnp.Ptr) Component_stop_Results {
	return Component_stop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Component_stop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Component_stop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Component_stop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Component_stop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Component_stop_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Component_stop_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Component_stop_Results_List is a list of Component_stop_Results.
type Component_stop_Results_List = capnp.StructList[Component_stop_Results]

// NewComponent_stop_Results creates a new list of Component_stop_Results.
func NewComponent_stop_Results_List(s *capnp.Segment, sz int32) (Component_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Component_stop_Results](l), err
}

// Component_stop_Results_Future is a wrapper for a Component_stop_Results promised by a client call.
type Component_stop_Results_Future struct{ *capnp.Future }

func (f Component_stop_Results_Future) Struct() (Component_stop_Results, error) {
	p, err := f.Future.Ptr()
	return Component_stop_Results(p.Struct()), err
}

const schema_bf602c4868dbb22f = "x\xda\xbcX\x7fpT\xd5\xf5?\xe7\xbd]^~\xb2" +
	"{\xf7n\x86/\x19\xd7\x1db\x1c1j\xd4\xc4\xaf\x9d" +
	"Ia\x92M\x88C\xd4\xd0}\xbb\x94_\x85)/\xbb" +
	"/\x10Lv\x97}/\xa4I\xabT\x06\x87\x8e\x16\xa7" +
	"a\xea\x88\x14Ph\xe5G\xa7\x16\x89d\xaa\x16\x91\x8c" +
	"\xd1\x96_\x16\x9dR,\xc6)\xa9\xf5W\x0b\xd3\x09\x88" +
	"\x8e-\xe4u\xee}\xfbv\xdf&\x1bc\x9ci\xffK" +
	"\xde\xbd\xf7\x9c{\xce\xf9\x9c\xcf\xe7\x9e\xbd\xe3\xf4\xb4:" +
	"\xc7\x9d\xc5\x9fS\x10\xe4\x8f\x9d\xd3\x8c\xc6\x92\x7f\xf4\x0f" +
	"\xde\xd5\xfc(\xc8^Dc\xdf\x1f\xcb\xf6\xef\xff\xe7\xf9" +
	"\x0b\xd0(H\x02\x00\x1d\xce\xbfD/\xe6K\x00\xf4\x93" +
	"\xfc\x03\x80\xc6\xc9'\x0f_\xde\xd2\xfb\xc6c@<\xa2" +
	"\xf1\xf1\xc1K\xb7\xdf\xf2Z\xcbv\x00p#\xed-8" +
	"Nw\x14HtG\x81\x9f\x0e\x14l\xa2J\xa1\x04`" +
	"T\xd3u=\xdf\xbc\xde\xbd\x05d\x0f\"\x80Crc" +
	"uSa\x0d\x02R\xb9\xb0\x16\xd0\xf8}\xe0\xc7#\xd1" +
	"\xbf\xcf\xfe)\x90\x99\xd6\xfa\xda\xc2*\x04\x87\xb1}." +
	"\x19\xc0\xe7\xdey\xc2v\x94.-\xfc\x17 ]\xc1O" +
	"\xa6\xdd\x93\x02\xd1\xb8\xbd\xef\xdd\xd5\xf3o]\xf9\xaay" +
	"\x97G\x0a\xb7\xd0\xcd\x85\x8b\x01\xaaO\x15nB\xfaJ" +
	"\xf1M\xf4T\xb1\xcb\xf8\xf0\xa9\xc1\xf3\xbd\xe1\x9d;\x81" +
	"\x14\xa3\xf1\x87\xe5\xdb\x12\x83\xbe\x82\x03\xe0\x14Y|\x03" +
	"\xc5\x1b\xe8\xeb\xc5\xe6_,\xd2\x9d\x91\x9f\xd47\xfdz" +
	"h7\xc8\x05\x88\x19\xf3\x8d\x82\xe4\x00\xa0K\xa7\xf7Q" +
	"e\xba\x04P\xbdb\xba\x1f\x01\x8d\x86\xbe\xf3\x1f\x1d\xdf" +
	"tv\x1f\x10\x8f\x90\x9d\x98\xeaaW\x01\xd2\x11\x173" +
	"}\xd1\xf5\x0d\xb0y\xce6\xed\x14\xd8\x96\x11\xd7\x1az" +
	"\xc5u\x13\x00\xcdw\xb3{\xec\xb9p\xec\xe41\xe3\xff" +
	"\x0f\x02\xf1 \x80\x13Y\x82\xfa\xdd\x05,\x81\xaf\xb8Y" +
	"\x1aJ7\x84_\xdd\x957\xfa\x82-\x81#\xee\x1a\x96" +
	"\xc0\x87\x96o\xdd\xb9*\xfc\xfdC\xf6\xa3\x7f6\x8f\x0e" +
	"\xf3\xa3\xef\xd5,i\xec\xbf{\xeb!{qJH\x0f" +
	"\xdb0\x8b\xb0\x0d\xc1\xeb\xe7\x9e\xdb\xbcu\xe8e\x9b\xed" +
	"o\x13^\x1c\xa7\xfc\xd1\xbaek\x8a\x8ep\xd8\xb0%" +
	"\x80\xea\xb9\x84\xdbn\xe4G\xf5{>\xf0\xbd\xfc\xd2w" +
	"\x8e\x00\xf1Z\xeb*\x11\xd8\xd1\xfc\xe1\xd5\xef\xdf\xe5S" +
	"\x8e\x98\xd72\x11a\xae<{\xcbc\xef>\xb5\xa2\xfa" +
	"\xa8\xcd\xddm\xa4\x82\xadL\xab:Q\xbb,v\xf5\xa8" +
	"\xedL\x09\xd9\xc0V\x8e-y|\xb8wH8a;" +
	"\x83\x84\x87\xff\x9b\x08u\xfdi\x9bt\xd2v\xe6\x137" +
	"\xf7S\xfe\x84\xf7\xc2\x8b\xe5O\xbfi;s\xcaL\xd9" +
	";ZC\xefC\x0f\xd7\xbem;\xd3\xef.e+\x95" +
	"\xbf<}\xf8SO\xff\x19\x9e\xabL\x85\x1bQ\x12\xdc" +
	"Hw\xb8\xfb\xe8\xb3nV\xbf]\xee.@\xe3\xf9=" +
	"%\xab\x1f4f\x9c\x1d\x83M\xa4\xd7\xdc\xbb\xa9\x93\xb0" +
	"\x8dH6Q\x99\xcc\x000\xf6\xfc\xe5\xe0k\x8f\xaf\\" +
	"r\xce\x9e\xcb\x00\xbb\x00\xd2&\x9e\xcb\xd9\xc1\x19\xebo" +
	"\xf8\xf9\xd9\xf7\x99o\x1b\xba\x9c\"k\x896r\x89v" +
	"2\x8b\xd5k\x09\x87\xe2\xa0\xe3\\\xf4\xbdc\xd2\x87\xb6" +
	"\x18\x8eyx\xdc\xe9\xee&\x05\xe3p\xf7\x9cg7\xed" +
	"\xf7\xcc`\xf8\xf7\xb0\x08\xfc\xbb\xe7u\xbc\xf0\xdd\xc4\xe5" +
	"1{\x91\xed\x0d\xd0$m\xa4\xe6_\xec~\xbf}r" +
	"\xb3\xffm\xd4/\xa7\x80&0\x97\x0a-c\x01\xb4Q" +
	"fl\xe5\xc5\xbd\xff>\xbb\xb8\xef\x8a\x09\x06n\xa4\xfa" +
	"\"\xe5h\xb9\xc2-,\x98?\xf4\xb3\xbf\x1e\xdf\xf8\x19" +
	"\x90b!\xd3\x1f\x80\xd4\xe7\xddBo\xf42W\xb3\xbc" +
	"\xdf\x024\x9e\xfe\xdd\xbeC\xf4\x8d\xd1\xcfs\x10P\xc0" +
	"{\x9c6{%\xda\xec\xf5\xd3\xb5\xdeM\x94\x940\x02" +
	"\xba\xe1\xd6\xb5\xe7\xcf\xe4\xad\x19\xb5e\xe3\x0bo=\xc2" +
	"gFkK\xa22\xa2$bB\xa2&\x18O\xeaM" +
	"\xb1\xd6\xb8V\xb9@\xe9P\xfd\x81X4\x1c\x0a\"\xca" +
	"E\xa2\x03\xc0\x81\x00\xa4\xb1\x02@\xae\x13Q\xbe_@" +
	"\x1f\x1a\x06\xf2R\x91\xa6R\x00y\x9e\x88rP@\x9f" +
	"0\xca>\x0b\x00\xa4\xb9\x0c@\x9e/\xa2\x1c\x15\xd0\x15" +
	"S:T,\x02\x01\x8b\x00E-i\xfd)iI\x0d" +
	"\xa7\x03\x06E\xe4\x9f\xa6\x03\xda\xaf\xd4\xb0Z\x89\xc5\xd4" +
	"\xf6\xca\x90\xaaD\xd5$\x00\xbb\x8e\x03\x05\xe3\xcd\xde\x91" +
	"\xd1\xee\xbd\xd1K ;\x04\x0cx\xd9Y \xb8\xcc`" +
	"\xfb\xd9^\x10\xd9n9Ot\x02\xa4\x1b\x0a-\xf4\x92" +
	";+\x00\x02\xb7b`\x0e\x92f\x093\xf4\x8b\x16\x8d" +
	"\x90@\x15@`\x0e\x06\xeeG\xb2Br%U%J" +
	"\xd0\xcf\x9ce\xd2\xcdC\xcf\xf5\xb1\x0e\xfd\x91\xf6\xb8\xa6" +
	"N\xe5D\x103q\x8b\x99\xb85U\xaf\xeflmU" +
	"\x93\xe1\xb6\x1e\xb5\xbc6\xa8$\x95\x0eMv\x98\x05A" +
	"$\xc5\x15<J\x94\xbd\x02\xba\xb4\xb6\x1e\x15\xf3A\xc0" +
	"|f3\x9793\x8d\x95\xfcv\xe5A?\xb7\x96+" +
	"\xdd\xe6\x86\x1c\xee\xb6\x01\xc8n\x11\xe5\xeb\x044\xba\x94" +
	"6\xfd\x9ex\xb2\x11;\x12z7\xbb\xa5\xa8&\x11A" +
	"p\"\xda\x8a\x88\x96Ul\xe7\xda\x9a\x91\x88Y=\x19" +
	":!\xb3\xca2\xfdM|-6\x89\xf5\xd5\xd8\xe0>" +
	"\xb3\xc6h`w\x0b\xab\x1dP\xab\xc4\xf4\xb6\x88&5" +
	"k\xab\x8c\xb0\xae$\xf5\xceD\x13H\xb1\xd6x\xad\x19" +
	"f\xed\xe2d\x9b\xae&\xe5\xff\xe3 \xb0$\x18\xadV" +
	" \x07\x93\x00\x81\xe71p\x14\xc9[\x0c\x04\x16c\xa0" +
	"%6\xe4\xf5\x1a\x80\xc0Q\x0c\x9cF2,\xa1\x90\xe6" +
	"l\xb44\x85\x9ca;Nc\xe0<\x92\x11\x09\xc54" +
	"s\xa2E\x06\xe4\x83\x10@\xe0o\x18\xf8\x14\xa9\x13%" +
	"t\xa4\xe5\x06-6'_\xf4\x01\x04\xaebC\x11\"" +
	"\xf5\xa1\x84\xce\xb4\xe8\xa3\xc5\xde\x94`\x15\x00\xdb\xd1p" +
	"\x1d\"\xbd\x0d%\xc3\x82\x06\xf898\xa6\x02\xb6\xda$" +
	"O\xd0\x94\x8et\xf1dN\xe5\x88\xa1\xc6\xa2\x89x[" +
	"L\x07\xd4\xa6tNS\xf5@\xa7\x1eo\xc0T\xa5\x15" +
	"?/\xf4\x7f\xb7\x01\xe5<D\xe3\xcc\xfc\xedKO\xbc" +
	"u\xa0\x0f\x00\x0c\xf5\xc4\xddC\xcf\x9c\xdb;\x00\x00\x01" +
	"\x07\x12\xf4\xe0\";\xa8\x9b\x82\x95\xf7-\x821\xf4X" +
	"\x96\xa1G\x82\x169Vd\xc8\x91\x08B\x8a\x1a\xabR" +
	"\xd4\xb8P@\xe9\x01\xb5\xdb\xa2CWT\xd5\"\xd6?" +
	"\xfeuJ{\xa7\x8a\x1e\x10\xd0\x93\xddQ\x0b\xd4\xae`" +
	"<\xe9\xe7l\xcd\xae\xe0M_\xe1A\xe6\xed{\"\xca" +
	"\x1b\xb3\x18\xfa\xe1\x0d\x00\xf2\x0fE\x94\x0fg1\xf4K" +
	"=\x00\xf2\x8b\"\xca\x83\x02\xfa\xc4k\xec\xb3\x08@\x06" +
	"\x1e\x05\x90\x07E\x0c\xa1\x80>\xc7U\xf6\xd9\x01@\xae" +
	"1#WE\x0c\xe7\xe1\x18B7\xdabL<B*" +
	"2\\5(\x09@\x92ia\x96\xdeqYg\x85\x98" +
	"!3V\xe1\xdc\xef\xb6\xeb\x1d\x12\x9bI\xa8e6\xc3" +
	"\xa1\xb4\xafx\xa7\xceV\x16#G$s\xc6\xbc\xa59" +
	"\xe2\xeby\xcb6\x1a\x0eA\xda]\x0e\x1a\xb5(\xc8$" +
	" S\x95\xf2xBI\x197\x98_\x0a \xb5\xb6$" +
	"\xc4X<}\x1e\\\x0c4\x1cf\x99\x17x~\xa9M" +
	"\xf4\x9d\x15\xe2}\x8b\\\x0b\xbb\x13\xaa\x1dS\xcbR\xf0" +
	"Y\xc9\xe0\x93*\xe7\x8az\x00y\x89\xa9\xac\x0cg\x02" +
	"\"QX\xe5\x97\x8b(\xaf\x16\xd0Pt=\xd9\xd6\xd2" +
	"\xa9\x83\xa8\xa6\xe5\xd5\x9d\xf1\x0b\xc8>\xae\x8f\xc4c\xba" +
	"\x1a\xd3-\x84\xb9\xf4\xee\x84\x8a\xae\xcc\x8d\x00\xd1\x95;" +
	"\x03&\x81\x94\x87T\xad\xb3]\xd7\x00,\x8d\x00 \xc5" +
	"\x9e\x94$\xcd\x16\x10\x93\x93\xe2\x80\xc5\xc3+0\x99\\" +
	"\x85jMg\xb96\x9a\xe44\xf9u\xba&\x05\xca\xb8" +
	"\xeb8\xb2\xc4\x98\xf3RV\xf5\xc7\xaa$sY\x9aq" +
	")F4teDob\x9f\x13$\xda\xd4\xb0\x09\x14" +
	"\x9b\xed\x8bw$\xe215\xa6Wjz<\x91;\x03" +
	"\xf5\x997\xc2z\xad3\x12Q5\x8d\xe9t\x96L\x17" +
	"\x8e3e\x86\x05\xd6\x86q\xc9\x9ep=U5\x06\x91" +
	"\xf2\xa0\xe2\xca\xbaq\xfed\xd9\xb4\x02\x18o6+\x13" +
	"\xe3\xc0 \x8d}\xbcLj\x88\x87\xf1\xa5\xa8\xb2\xf4K" +
	"\xe3\xb1\x8a\xb60\xd2\x8f\x1a\x7f{e\xb3\xb6\x8a\xf7\xbf" +
	"\xe8(2\x0c\x9e\xf0\x9b\x19\xb9\x97\x8b(\xdf!`1" +
	"\x8e\x1af\xcf\xde\xc6\xfas\xb6\x88\xf2]B\x9a\xd91" +
	"\x8b\xa2x\x0fF\xe31\x15\xa6ey\xe2u\x91\xd4\x98" +
	"n\xfaa\xaf\x19k\x94@kj\"wV\x81@n" +
	"d\xef\x18k\xe6Dk:%3+@ \xc5\x92_" +
	"c\xaf\xa4:t\xb1\xfa\xd6\xb1\x87t\xb6\xe2M\x00+" +
	"%\xa9\xa7\xb2\x89\xdaTae{S\x9aO4\x7f\"" +
	"\x87f1\x8a\xfb\x81\x88\xf2\x8f\x98l:\xcct=\xc2" +
	"\xa4i\xa3\x88\xf2/\x04\xc4\x94j\xee\x0a\x01\xc8\xcf\x88" +
	"(\xffJ@\"\xa6\xc4j?\xfb\xb8\xcf\xd40\xe2\x10" +
	"L\xa9\x1a`\x1f\x8f\x8a(\x0f\x09h\xb4\xa4^\xd0 " +
	"Z\xefc@#2\xe6\x19\xf9\xd5\xbb4b\x06\x14\x06" +
	"\xcch\x92\xc9\x87L6\xc6M3]iE\x99p\xd0" +
	"q\x8e#\xd6q\xcde\xcefRk\\\xe3eK\xff" +
	"^E0d\xb0i\x8d\x0dk\x80!\x06\xc3TVo" +
	"\xaeO\xa1\xb0\xce\xf6\x18\x99{/\x80<GDy\x89" +
	"\x80\xebM\x85\xb5\xe9C\xda\xaa\xa9\x0f\x96(j\x0c\x9b" +
	"\x13nJ\xeb\x9b?Q\xd3\xd4\x14\xe4\x13Zn\x90\x8c" +
	"\x91\x9b/o9\x868\xa9]\xd7\xec\x11yR\x11\xcd" +
	"\xb3E\x14\xf0\xa4\"Z>%\xb9\xf9:R\x90\xa3/" +
	"Ru\xca\xa2\xdb-\xb6\x19)\x91\x1a\xa9Q3Y1" +
	"\x8c\xc9q\x0f\x0b\xf31\xb9\xb0;\x81*\x7fNr\xa8" +
	"\xfb\xee\xe5\x0f\x89\x99-\x00(\x90\x925\x00\x86\xa6+" +
	"\xb1\xa8\x92\x8c\xb2V\x8d'\xd4X}R\x89\x80\xf4\x80" +
	"\xaa\x9bX\xaeO*\xe0\x8a\xb0\x7fs4\x9f\xc9y_" +
	"m~f{\xb3\xe6gkJC\xeb\x17#F6Y" +
	"\xf3\xb3\xf5\x0b\x19Z\xbfCe\xcf\xcf~\xde\x03\xff\xbb" +
	"\x01\xda1\xd1\x00m\x89\xc2\x7f\x02\x00\x00\xff\xff8@" +
	"T\x95"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_bf602c4868dbb22f,
		Nodes: []uint64{
			0x8a4d34c4b5eb1545,
			0x8bc69192f3bc97cc,
			0x92101e3b7a761333,
			0x9428ea64f18c41c8,
			0x95d8ad01c1113d9c,
			0x9c62c32b2ff2b1e8,
			0x9e9e5391e0c499e6,
			0xa2dcae494290639e,
			0xa8d787cae7e0b243,
			0xaf0a1dc4709a5ccf,
			0xb135ffc9ccc9eca6,
			0xb3fe08a1bf53821a,
			0xb47b53679e985c7e,
			0xb49836b545583add,
			0xbadc988dda3d1e50,
			0xbe0c6a5a76e75105,
			0xbe5bb9ba1de54674,
			0xbe611d34e368e109,
			0xc0335d99db8b2ba5,
			0xc0fc6e5a3fcb3206,
			0xcb02dc91e18e58c9,
			0xcc079ad60f1363b7,
			0xce9f24b8ec149524,
			0xd23f817e914373d8,
			0xd5b512f4bcd0aa2e,
			0xd717ff7d6815a6b0,
			0xda58608ec3b1dfa6,
			0xe3d7a3237f175028,
			0xe607c9dd64da04c4,
			0xece0efa9a922d4a8,
			0xf3705fb36d44a21f,
			0xf37401d21f8d97bb,
			0xf5b257d7fba7ed60,
			0xf684cae29bdc484e,
			0xf7fec613b4a8c79f,
			0xfe6a08d5e0712c23,
		},
		Compressed: true,
	})
}
