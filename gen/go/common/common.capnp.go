// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	math "math"
	strconv "strconv"
)

type IdInformation capnp.Struct

// IdInformation_TypeID is the unique identifier for the type IdInformation.
const IdInformation_TypeID = 0xd4cb7ecbfe03dad3

func NewIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation(st), err
}

func NewRootIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation(st), err
}

func ReadRootIdInformation(msg *capnp.Message) (IdInformation, error) {
	root, err := msg.Root()
	return IdInformation(root.Struct()), err
}

func (s IdInformation) String() string {
	str, _ := text.Marshal(0xd4cb7ecbfe03dad3, capnp.Struct(s))
	return str
}

func (s IdInformation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IdInformation) DecodeFromPtr(p capnp.Ptr) IdInformation {
	return IdInformation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IdInformation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IdInformation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IdInformation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IdInformation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IdInformation) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s IdInformation) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s IdInformation) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s IdInformation) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s IdInformation) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s IdInformation) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s IdInformation) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s IdInformation) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s IdInformation) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s IdInformation) HasDescription() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s IdInformation) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s IdInformation) SetDescription(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// IdInformation_List is a list of IdInformation.
type IdInformation_List = capnp.StructList[IdInformation]

// NewIdInformation creates a new list of IdInformation.
func NewIdInformation_List(s *capnp.Segment, sz int32) (IdInformation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[IdInformation](l), err
}

// IdInformation_Future is a wrapper for a IdInformation promised by a client call.
type IdInformation_Future struct{ *capnp.Future }

func (f IdInformation_Future) Struct() (IdInformation, error) {
	p, err := f.Future.Ptr()
	return IdInformation(p.Struct()), err
}

type Identifiable capnp.Client

// Identifiable_TypeID is the unique identifier for the type Identifiable.
const Identifiable_TypeID = 0xb2afd1cb599c48d5

func (c Identifiable) Info(ctx context.Context, params func(Identifiable_info_Params) error) (IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IdInformation_Future{Future: ans.Future()}, release

}

func (c Identifiable) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Identifiable) String() string {
	return "Identifiable(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Identifiable) AddRef() Identifiable {
	return Identifiable(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Identifiable) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Identifiable) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Identifiable) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Identifiable) DecodeFromPtr(p capnp.Ptr) Identifiable {
	return Identifiable(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Identifiable) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Identifiable) IsSame(other Identifiable) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Identifiable) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Identifiable) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Identifiable_Server is a Identifiable with a local implementation.
type Identifiable_Server interface {
	Info(context.Context, Identifiable_info) error
}

// Identifiable_NewServer creates a new Server from an implementation of Identifiable_Server.
func Identifiable_NewServer(s Identifiable_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Identifiable_Methods(nil, s), s, c)
}

// Identifiable_ServerToClient creates a new Client from an implementation of Identifiable_Server.
// The caller is responsible for calling Release on the returned Client.
func Identifiable_ServerToClient(s Identifiable_Server) Identifiable {
	return Identifiable(capnp.NewClient(Identifiable_NewServer(s)))
}

// Identifiable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Identifiable_Methods(methods []server.Method, s Identifiable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, Identifiable_info{call})
		},
	})

	return methods
}

// Identifiable_info holds the state for a server call to Identifiable.info.
// See server.Call for documentation.
type Identifiable_info struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Identifiable_info) Args() Identifiable_info_Params {
	return Identifiable_info_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Identifiable_info) AllocResults() (IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation(r), err
}

// Identifiable_List is a list of Identifiable.
type Identifiable_List = capnp.CapList[Identifiable]

// NewIdentifiable_List creates a new list of Identifiable.
func NewIdentifiable_List(s *capnp.Segment, sz int32) (Identifiable_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Identifiable](l), err
}

type Identifiable_info_Params capnp.Struct

// Identifiable_info_Params_TypeID is the unique identifier for the type Identifiable_info_Params.
const Identifiable_info_Params_TypeID = 0x9d8aa1cf1e49deb1

func NewIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params(st), err
}

func NewRootIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params(st), err
}

func ReadRootIdentifiable_info_Params(msg *capnp.Message) (Identifiable_info_Params, error) {
	root, err := msg.Root()
	return Identifiable_info_Params(root.Struct()), err
}

func (s Identifiable_info_Params) String() string {
	str, _ := text.Marshal(0x9d8aa1cf1e49deb1, capnp.Struct(s))
	return str
}

func (s Identifiable_info_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Identifiable_info_Params) DecodeFromPtr(p capnp.Ptr) Identifiable_info_Params {
	return Identifiable_info_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Identifiable_info_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Identifiable_info_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Identifiable_info_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Identifiable_info_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Identifiable_info_Params_List is a list of Identifiable_info_Params.
type Identifiable_info_Params_List = capnp.StructList[Identifiable_info_Params]

// NewIdentifiable_info_Params creates a new list of Identifiable_info_Params.
func NewIdentifiable_info_Params_List(s *capnp.Segment, sz int32) (Identifiable_info_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Identifiable_info_Params](l), err
}

// Identifiable_info_Params_Future is a wrapper for a Identifiable_info_Params promised by a client call.
type Identifiable_info_Params_Future struct{ *capnp.Future }

func (f Identifiable_info_Params_Future) Struct() (Identifiable_info_Params, error) {
	p, err := f.Future.Ptr()
	return Identifiable_info_Params(p.Struct()), err
}

type StructuredText capnp.Struct
type StructuredText_structure StructuredText
type StructuredText_structure_Which uint16

const (
	StructuredText_structure_Which_none StructuredText_structure_Which = 0
	StructuredText_structure_Which_json StructuredText_structure_Which = 1
	StructuredText_structure_Which_xml  StructuredText_structure_Which = 2
	StructuredText_structure_Which_toml StructuredText_structure_Which = 3
)

func (w StructuredText_structure_Which) String() string {
	const s = "nonejsonxmltoml"
	switch w {
	case StructuredText_structure_Which_none:
		return s[0:4]
	case StructuredText_structure_Which_json:
		return s[4:8]
	case StructuredText_structure_Which_xml:
		return s[8:11]
	case StructuredText_structure_Which_toml:
		return s[11:15]

	}
	return "StructuredText_structure_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// StructuredText_TypeID is the unique identifier for the type StructuredText.
const StructuredText_TypeID = 0xed6c098b67cad454

func NewStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText(st), err
}

func NewRootStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText(st), err
}

func ReadRootStructuredText(msg *capnp.Message) (StructuredText, error) {
	root, err := msg.Root()
	return StructuredText(root.Struct()), err
}

func (s StructuredText) String() string {
	str, _ := text.Marshal(0xed6c098b67cad454, capnp.Struct(s))
	return str
}

func (s StructuredText) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StructuredText) DecodeFromPtr(p capnp.Ptr) StructuredText {
	return StructuredText(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StructuredText) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StructuredText) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StructuredText) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StructuredText) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StructuredText) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StructuredText) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StructuredText) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StructuredText) SetValue(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s StructuredText) Type() StructuredText_Type {
	return StructuredText_Type(capnp.Struct(s).Uint16(2))
}

func (s StructuredText) SetType(v StructuredText_Type) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s StructuredText) Structure() StructuredText_structure { return StructuredText_structure(s) }

func (s StructuredText_structure) Which() StructuredText_structure_Which {
	return StructuredText_structure_Which(capnp.Struct(s).Uint16(0))
}
func (s StructuredText_structure) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StructuredText_structure) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StructuredText_structure) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StructuredText_structure) SetNone() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s StructuredText_structure) SetJson() {
	capnp.Struct(s).SetUint16(0, 1)

}

func (s StructuredText_structure) SetXml() {
	capnp.Struct(s).SetUint16(0, 2)

}

func (s StructuredText_structure) SetToml() {
	capnp.Struct(s).SetUint16(0, 3)

}

// StructuredText_List is a list of StructuredText.
type StructuredText_List = capnp.StructList[StructuredText]

// NewStructuredText creates a new list of StructuredText.
func NewStructuredText_List(s *capnp.Segment, sz int32) (StructuredText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[StructuredText](l), err
}

// StructuredText_Future is a wrapper for a StructuredText promised by a client call.
type StructuredText_Future struct{ *capnp.Future }

func (f StructuredText_Future) Struct() (StructuredText, error) {
	p, err := f.Future.Ptr()
	return StructuredText(p.Struct()), err
}
func (p StructuredText_Future) Structure() StructuredText_structure_Future {
	return StructuredText_structure_Future{p.Future}
}

// StructuredText_structure_Future is a wrapper for a StructuredText_structure promised by a client call.
type StructuredText_structure_Future struct{ *capnp.Future }

func (f StructuredText_structure_Future) Struct() (StructuredText_structure, error) {
	p, err := f.Future.Ptr()
	return StructuredText_structure(p.Struct()), err
}

type StructuredText_Type uint16

// StructuredText_Type_TypeID is the unique identifier for the type StructuredText_Type.
const StructuredText_Type_TypeID = 0x9eebc43e17b5974f

// Values of StructuredText_Type.
const (
	StructuredText_Type_unstructured StructuredText_Type = 0
	StructuredText_Type_json         StructuredText_Type = 1
	StructuredText_Type_xml          StructuredText_Type = 2
	StructuredText_Type_toml         StructuredText_Type = 3
	StructuredText_Type_sturdyRef    StructuredText_Type = 4
)

// String returns the enum's constant name.
func (c StructuredText_Type) String() string {
	switch c {
	case StructuredText_Type_unstructured:
		return "unstructured"
	case StructuredText_Type_json:
		return "json"
	case StructuredText_Type_xml:
		return "xml"
	case StructuredText_Type_toml:
		return "toml"
	case StructuredText_Type_sturdyRef:
		return "sturdyRef"

	default:
		return ""
	}
}

// StructuredText_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func StructuredText_TypeFromString(c string) StructuredText_Type {
	switch c {
	case "unstructured":
		return StructuredText_Type_unstructured
	case "json":
		return StructuredText_Type_json
	case "xml":
		return StructuredText_Type_xml
	case "toml":
		return StructuredText_Type_toml
	case "sturdyRef":
		return StructuredText_Type_sturdyRef

	default:
		return 0
	}
}

type StructuredText_Type_List = capnp.EnumList[StructuredText_Type]

func NewStructuredText_Type_List(s *capnp.Segment, sz int32) (StructuredText_Type_List, error) {
	return capnp.NewEnumList[StructuredText_Type](s, sz)
}

type Value capnp.Struct
type Value_Which uint16

const (
	Value_Which_f64   Value_Which = 0
	Value_Which_f32   Value_Which = 1
	Value_Which_i64   Value_Which = 2
	Value_Which_i32   Value_Which = 3
	Value_Which_i16   Value_Which = 4
	Value_Which_i8    Value_Which = 5
	Value_Which_ui64  Value_Which = 6
	Value_Which_ui32  Value_Which = 7
	Value_Which_ui16  Value_Which = 8
	Value_Which_ui8   Value_Which = 9
	Value_Which_b     Value_Which = 10
	Value_Which_t     Value_Which = 11
	Value_Which_d     Value_Which = 12
	Value_Which_p     Value_Which = 13
	Value_Which_cap   Value_Which = 14
	Value_Which_lf64  Value_Which = 15
	Value_Which_lf32  Value_Which = 16
	Value_Which_li64  Value_Which = 17
	Value_Which_li32  Value_Which = 18
	Value_Which_li16  Value_Which = 19
	Value_Which_li8   Value_Which = 20
	Value_Which_lui64 Value_Which = 21
	Value_Which_lui32 Value_Which = 22
	Value_Which_lui16 Value_Which = 23
	Value_Which_lui8  Value_Which = 24
	Value_Which_lb    Value_Which = 25
	Value_Which_lt    Value_Which = 26
	Value_Which_ld    Value_Which = 27
	Value_Which_lcap  Value_Which = 28
	Value_Which_lpair Value_Which = 29
)

func (w Value_Which) String() string {
	const s = "f64f32i64i32i16i8ui64ui32ui16ui8btdpcaplf64lf32li64li32li16li8lui64lui32lui16lui8lbltldlcaplpair"
	switch w {
	case Value_Which_f64:
		return s[0:3]
	case Value_Which_f32:
		return s[3:6]
	case Value_Which_i64:
		return s[6:9]
	case Value_Which_i32:
		return s[9:12]
	case Value_Which_i16:
		return s[12:15]
	case Value_Which_i8:
		return s[15:17]
	case Value_Which_ui64:
		return s[17:21]
	case Value_Which_ui32:
		return s[21:25]
	case Value_Which_ui16:
		return s[25:29]
	case Value_Which_ui8:
		return s[29:32]
	case Value_Which_b:
		return s[32:33]
	case Value_Which_t:
		return s[33:34]
	case Value_Which_d:
		return s[34:35]
	case Value_Which_p:
		return s[35:36]
	case Value_Which_cap:
		return s[36:39]
	case Value_Which_lf64:
		return s[39:43]
	case Value_Which_lf32:
		return s[43:47]
	case Value_Which_li64:
		return s[47:51]
	case Value_Which_li32:
		return s[51:55]
	case Value_Which_li16:
		return s[55:59]
	case Value_Which_li8:
		return s[59:62]
	case Value_Which_lui64:
		return s[62:67]
	case Value_Which_lui32:
		return s[67:72]
	case Value_Which_lui16:
		return s[72:77]
	case Value_Which_lui8:
		return s[77:81]
	case Value_Which_lb:
		return s[81:83]
	case Value_Which_lt:
		return s[83:85]
	case Value_Which_ld:
		return s[85:87]
	case Value_Which_lcap:
		return s[87:91]
	case Value_Which_lpair:
		return s[91:96]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xe17592335373b246

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value(st), err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Value(st), err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value(root.Struct()), err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xe17592335373b246, capnp.Struct(s))
	return str
}

func (s Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value) DecodeFromPtr(p capnp.Ptr) Value {
	return Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Value) Which() Value_Which {
	return Value_Which(capnp.Struct(s).Uint16(8))
}
func (s Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value) F64() float64 {
	if capnp.Struct(s).Uint16(8) != 0 {
		panic("Which() != f64")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Value) SetF64(v float64) {
	capnp.Struct(s).SetUint16(8, 0)
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Value) F32() float32 {
	if capnp.Struct(s).Uint16(8) != 1 {
		panic("Which() != f32")
	}
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Value) SetF32(v float32) {
	capnp.Struct(s).SetUint16(8, 1)
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Value) I64() int64 {
	if capnp.Struct(s).Uint16(8) != 2 {
		panic("Which() != i64")
	}
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Value) SetI64(v int64) {
	capnp.Struct(s).SetUint16(8, 2)
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Value) I32() int32 {
	if capnp.Struct(s).Uint16(8) != 3 {
		panic("Which() != i32")
	}
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Value) SetI32(v int32) {
	capnp.Struct(s).SetUint16(8, 3)
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Value) I16() int16 {
	if capnp.Struct(s).Uint16(8) != 4 {
		panic("Which() != i16")
	}
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Value) SetI16(v int16) {
	capnp.Struct(s).SetUint16(8, 4)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Value) I8() int8 {
	if capnp.Struct(s).Uint16(8) != 5 {
		panic("Which() != i8")
	}
	return int8(capnp.Struct(s).Uint8(0))
}

func (s Value) SetI8(v int8) {
	capnp.Struct(s).SetUint16(8, 5)
	capnp.Struct(s).SetUint8(0, uint8(v))
}

func (s Value) Ui64() uint64 {
	if capnp.Struct(s).Uint16(8) != 6 {
		panic("Which() != ui64")
	}
	return capnp.Struct(s).Uint64(0)
}

func (s Value) SetUi64(v uint64) {
	capnp.Struct(s).SetUint16(8, 6)
	capnp.Struct(s).SetUint64(0, v)
}

func (s Value) Ui32() uint32 {
	if capnp.Struct(s).Uint16(8) != 7 {
		panic("Which() != ui32")
	}
	return capnp.Struct(s).Uint32(0)
}

func (s Value) SetUi32(v uint32) {
	capnp.Struct(s).SetUint16(8, 7)
	capnp.Struct(s).SetUint32(0, v)
}

func (s Value) Ui16() uint16 {
	if capnp.Struct(s).Uint16(8) != 8 {
		panic("Which() != ui16")
	}
	return capnp.Struct(s).Uint16(0)
}

func (s Value) SetUi16(v uint16) {
	capnp.Struct(s).SetUint16(8, 8)
	capnp.Struct(s).SetUint16(0, v)
}

func (s Value) Ui8() uint8 {
	if capnp.Struct(s).Uint16(8) != 9 {
		panic("Which() != ui8")
	}
	return capnp.Struct(s).Uint8(0)
}

func (s Value) SetUi8(v uint8) {
	capnp.Struct(s).SetUint16(8, 9)
	capnp.Struct(s).SetUint8(0, v)
}

func (s Value) B() bool {
	if capnp.Struct(s).Uint16(8) != 10 {
		panic("Which() != b")
	}
	return capnp.Struct(s).Bit(0)
}

func (s Value) SetB(v bool) {
	capnp.Struct(s).SetUint16(8, 10)
	capnp.Struct(s).SetBit(0, v)
}

func (s Value) T() (string, error) {
	if capnp.Struct(s).Uint16(8) != 11 {
		panic("Which() != t")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Value) HasT() bool {
	if capnp.Struct(s).Uint16(8) != 11 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) TBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Value) SetT(v string) error {
	capnp.Struct(s).SetUint16(8, 11)
	return capnp.Struct(s).SetText(0, v)
}

func (s Value) D() ([]byte, error) {
	if capnp.Struct(s).Uint16(8) != 12 {
		panic("Which() != d")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Value) HasD() bool {
	if capnp.Struct(s).Uint16(8) != 12 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetD(v []byte) error {
	capnp.Struct(s).SetUint16(8, 12)
	return capnp.Struct(s).SetData(0, v)
}

func (s Value) P() (capnp.Ptr, error) {
	if capnp.Struct(s).Uint16(8) != 13 {
		panic("Which() != p")
	}
	return capnp.Struct(s).Ptr(0)
}

func (s Value) HasP() bool {
	if capnp.Struct(s).Uint16(8) != 13 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetP(v capnp.Ptr) error {
	capnp.Struct(s).SetUint16(8, 13)
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Value) Cap() capnp.Client {
	if capnp.Struct(s).Uint16(8) != 14 {
		panic("Which() != cap")
	}
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s Value) HasCap() bool {
	if capnp.Struct(s).Uint16(8) != 14 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetCap(c capnp.Client) error {
	capnp.Struct(s).SetUint16(8, 14)
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s Value) Lf64() (capnp.Float64List, error) {
	if capnp.Struct(s).Uint16(8) != 15 {
		panic("Which() != lf64")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s Value) HasLf64() bool {
	if capnp.Struct(s).Uint16(8) != 15 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLf64(v capnp.Float64List) error {
	capnp.Struct(s).SetUint16(8, 15)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLf64 sets the lf64 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Value) NewLf64(n int32) (capnp.Float64List, error) {
	capnp.Struct(s).SetUint16(8, 15)
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Lf32() (capnp.Float32List, error) {
	if capnp.Struct(s).Uint16(8) != 16 {
		panic("Which() != lf32")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s Value) HasLf32() bool {
	if capnp.Struct(s).Uint16(8) != 16 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLf32(v capnp.Float32List) error {
	capnp.Struct(s).SetUint16(8, 16)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLf32 sets the lf32 field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s Value) NewLf32(n int32) (capnp.Float32List, error) {
	capnp.Struct(s).SetUint16(8, 16)
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Li64() (capnp.Int64List, error) {
	if capnp.Struct(s).Uint16(8) != 17 {
		panic("Which() != li64")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int64List(p.List()), err
}

func (s Value) HasLi64() bool {
	if capnp.Struct(s).Uint16(8) != 17 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLi64(v capnp.Int64List) error {
	capnp.Struct(s).SetUint16(8, 17)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLi64 sets the li64 field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s Value) NewLi64(n int32) (capnp.Int64List, error) {
	capnp.Struct(s).SetUint16(8, 17)
	l, err := capnp.NewInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Li32() (capnp.Int32List, error) {
	if capnp.Struct(s).Uint16(8) != 18 {
		panic("Which() != li32")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Value) HasLi32() bool {
	if capnp.Struct(s).Uint16(8) != 18 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLi32(v capnp.Int32List) error {
	capnp.Struct(s).SetUint16(8, 18)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLi32 sets the li32 field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Value) NewLi32(n int32) (capnp.Int32List, error) {
	capnp.Struct(s).SetUint16(8, 18)
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Li16() (capnp.Int16List, error) {
	if capnp.Struct(s).Uint16(8) != 19 {
		panic("Which() != li16")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int16List(p.List()), err
}

func (s Value) HasLi16() bool {
	if capnp.Struct(s).Uint16(8) != 19 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLi16(v capnp.Int16List) error {
	capnp.Struct(s).SetUint16(8, 19)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLi16 sets the li16 field to a newly
// allocated capnp.Int16List, preferring placement in s's segment.
func (s Value) NewLi16(n int32) (capnp.Int16List, error) {
	capnp.Struct(s).SetUint16(8, 19)
	l, err := capnp.NewInt16List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int16List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Li8() (capnp.Int8List, error) {
	if capnp.Struct(s).Uint16(8) != 20 {
		panic("Which() != li8")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int8List(p.List()), err
}

func (s Value) HasLi8() bool {
	if capnp.Struct(s).Uint16(8) != 20 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLi8(v capnp.Int8List) error {
	capnp.Struct(s).SetUint16(8, 20)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLi8 sets the li8 field to a newly
// allocated capnp.Int8List, preferring placement in s's segment.
func (s Value) NewLi8(n int32) (capnp.Int8List, error) {
	capnp.Struct(s).SetUint16(8, 20)
	l, err := capnp.NewInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int8List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Lui64() (capnp.UInt64List, error) {
	if capnp.Struct(s).Uint16(8) != 21 {
		panic("Which() != lui64")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt64List(p.List()), err
}

func (s Value) HasLui64() bool {
	if capnp.Struct(s).Uint16(8) != 21 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLui64(v capnp.UInt64List) error {
	capnp.Struct(s).SetUint16(8, 21)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLui64 sets the lui64 field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Value) NewLui64(n int32) (capnp.UInt64List, error) {
	capnp.Struct(s).SetUint16(8, 21)
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Lui32() (capnp.UInt32List, error) {
	if capnp.Struct(s).Uint16(8) != 22 {
		panic("Which() != lui32")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt32List(p.List()), err
}

func (s Value) HasLui32() bool {
	if capnp.Struct(s).Uint16(8) != 22 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLui32(v capnp.UInt32List) error {
	capnp.Struct(s).SetUint16(8, 22)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLui32 sets the lui32 field to a newly
// allocated capnp.UInt32List, preferring placement in s's segment.
func (s Value) NewLui32(n int32) (capnp.UInt32List, error) {
	capnp.Struct(s).SetUint16(8, 22)
	l, err := capnp.NewUInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Lui16() (capnp.UInt16List, error) {
	if capnp.Struct(s).Uint16(8) != 23 {
		panic("Which() != lui16")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt16List(p.List()), err
}

func (s Value) HasLui16() bool {
	if capnp.Struct(s).Uint16(8) != 23 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLui16(v capnp.UInt16List) error {
	capnp.Struct(s).SetUint16(8, 23)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLui16 sets the lui16 field to a newly
// allocated capnp.UInt16List, preferring placement in s's segment.
func (s Value) NewLui16(n int32) (capnp.UInt16List, error) {
	capnp.Struct(s).SetUint16(8, 23)
	l, err := capnp.NewUInt16List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt16List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Lui8() (capnp.UInt8List, error) {
	if capnp.Struct(s).Uint16(8) != 24 {
		panic("Which() != lui8")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt8List(p.List()), err
}

func (s Value) HasLui8() bool {
	if capnp.Struct(s).Uint16(8) != 24 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLui8(v capnp.UInt8List) error {
	capnp.Struct(s).SetUint16(8, 24)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLui8 sets the lui8 field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Value) NewLui8(n int32) (capnp.UInt8List, error) {
	capnp.Struct(s).SetUint16(8, 24)
	l, err := capnp.NewUInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Lb() (capnp.BitList, error) {
	if capnp.Struct(s).Uint16(8) != 25 {
		panic("Which() != lb")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.BitList(p.List()), err
}

func (s Value) HasLb() bool {
	if capnp.Struct(s).Uint16(8) != 25 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLb(v capnp.BitList) error {
	capnp.Struct(s).SetUint16(8, 25)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLb sets the lb field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s Value) NewLb(n int32) (capnp.BitList, error) {
	capnp.Struct(s).SetUint16(8, 25)
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Lt() (capnp.TextList, error) {
	if capnp.Struct(s).Uint16(8) != 26 {
		panic("Which() != lt")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Value) HasLt() bool {
	if capnp.Struct(s).Uint16(8) != 26 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLt(v capnp.TextList) error {
	capnp.Struct(s).SetUint16(8, 26)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLt sets the lt field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Value) NewLt(n int32) (capnp.TextList, error) {
	capnp.Struct(s).SetUint16(8, 26)
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Ld() (capnp.DataList, error) {
	if capnp.Struct(s).Uint16(8) != 27 {
		panic("Which() != ld")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.DataList(p.List()), err
}

func (s Value) HasLd() bool {
	if capnp.Struct(s).Uint16(8) != 27 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLd(v capnp.DataList) error {
	capnp.Struct(s).SetUint16(8, 27)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLd sets the ld field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Value) NewLd(n int32) (capnp.DataList, error) {
	capnp.Struct(s).SetUint16(8, 27)
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Lcap() (capnp.PointerList, error) {
	if capnp.Struct(s).Uint16(8) != 28 {
		panic("Which() != lcap")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s Value) HasLcap() bool {
	if capnp.Struct(s).Uint16(8) != 28 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLcap(v capnp.PointerList) error {
	capnp.Struct(s).SetUint16(8, 28)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLcap sets the lcap field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Value) NewLcap(n int32) (capnp.PointerList, error) {
	capnp.Struct(s).SetUint16(8, 28)
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Value) Lpair() (Pair_List, error) {
	if capnp.Struct(s).Uint16(8) != 29 {
		panic("Which() != lpair")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Pair_List(p.List()), err
}

func (s Value) HasLpair() bool {
	if capnp.Struct(s).Uint16(8) != 29 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetLpair(v Pair_List) error {
	capnp.Struct(s).SetUint16(8, 29)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLpair sets the lpair field to a newly
// allocated Pair_List, preferring placement in s's segment.
func (s Value) NewLpair(n int32) (Pair_List, error) {
	capnp.Struct(s).SetUint16(8, 29)
	l, err := NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Value_List is a list of Value.
type Value_List = capnp.StructList[Value]

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Value](l), err
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (f Value_Future) Struct() (Value, error) {
	p, err := f.Future.Ptr()
	return Value(p.Struct()), err
}
func (p Value_Future) P() *capnp.Future {
	return p.Future.Field(0, nil)
}
func (p Value_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type Pair capnp.Struct

// Pair_TypeID is the unique identifier for the type Pair.
const Pair_TypeID = 0xb9d4864725174733

func NewPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair(st), err
}

func NewRootPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair(st), err
}

func ReadRootPair(msg *capnp.Message) (Pair, error) {
	root, err := msg.Root()
	return Pair(root.Struct()), err
}

func (s Pair) String() string {
	str, _ := text.Marshal(0xb9d4864725174733, capnp.Struct(s))
	return str
}

func (s Pair) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Pair) DecodeFromPtr(p capnp.Ptr) Pair {
	return Pair(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Pair) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Pair) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Pair) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Pair) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Pair) Fst() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Pair) HasFst() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Pair) SetFst(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Pair) Snd() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Pair) HasSnd() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Pair) SetSnd(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Pair_List is a list of Pair.
type Pair_List = capnp.StructList[Pair]

// NewPair creates a new list of Pair.
func NewPair_List(s *capnp.Segment, sz int32) (Pair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Pair](l), err
}

// Pair_Future is a wrapper for a Pair promised by a client call.
type Pair_Future struct{ *capnp.Future }

func (f Pair_Future) Struct() (Pair, error) {
	p, err := f.Future.Ptr()
	return Pair(p.Struct()), err
}
func (p Pair_Future) Fst() *capnp.Future {
	return p.Future.Field(0, nil)
}
func (p Pair_Future) Snd() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Holder capnp.Client

// Holder_TypeID is the unique identifier for the type Holder.
const Holder_TypeID = 0xc83045ccbb0b6ac5

func (c Holder) Value(ctx context.Context, params func(Holder_value_Params) error) (Holder_value_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc83045ccbb0b6ac5,
			MethodID:      0,
			InterfaceName: "common.capnp:Holder",
			MethodName:    "value",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Holder_value_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Holder_value_Results_Future{Future: ans.Future()}, release

}

func (c Holder) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Holder) String() string {
	return "Holder(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Holder) AddRef() Holder {
	return Holder(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Holder) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Holder) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Holder) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Holder) DecodeFromPtr(p capnp.Ptr) Holder {
	return Holder(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Holder) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Holder) IsSame(other Holder) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Holder) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Holder) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Holder_Server is a Holder with a local implementation.
type Holder_Server interface {
	Value(context.Context, Holder_value) error
}

// Holder_NewServer creates a new Server from an implementation of Holder_Server.
func Holder_NewServer(s Holder_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Holder_Methods(nil, s), s, c)
}

// Holder_ServerToClient creates a new Client from an implementation of Holder_Server.
// The caller is responsible for calling Release on the returned Client.
func Holder_ServerToClient(s Holder_Server) Holder {
	return Holder(capnp.NewClient(Holder_NewServer(s)))
}

// Holder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Holder_Methods(methods []server.Method, s Holder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc83045ccbb0b6ac5,
			MethodID:      0,
			InterfaceName: "common.capnp:Holder",
			MethodName:    "value",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Value(ctx, Holder_value{call})
		},
	})

	return methods
}

// Holder_value holds the state for a server call to Holder.value.
// See server.Call for documentation.
type Holder_value struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Holder_value) Args() Holder_value_Params {
	return Holder_value_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Holder_value) AllocResults() (Holder_value_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Holder_value_Results(r), err
}

// Holder_List is a list of Holder.
type Holder_List = capnp.CapList[Holder]

// NewHolder_List creates a new list of Holder.
func NewHolder_List(s *capnp.Segment, sz int32) (Holder_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Holder](l), err
}

type Holder_value_Params capnp.Struct

// Holder_value_Params_TypeID is the unique identifier for the type Holder_value_Params.
const Holder_value_Params_TypeID = 0x966d054acf5f578d

func NewHolder_value_Params(s *capnp.Segment) (Holder_value_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Holder_value_Params(st), err
}

func NewRootHolder_value_Params(s *capnp.Segment) (Holder_value_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Holder_value_Params(st), err
}

func ReadRootHolder_value_Params(msg *capnp.Message) (Holder_value_Params, error) {
	root, err := msg.Root()
	return Holder_value_Params(root.Struct()), err
}

func (s Holder_value_Params) String() string {
	str, _ := text.Marshal(0x966d054acf5f578d, capnp.Struct(s))
	return str
}

func (s Holder_value_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Holder_value_Params) DecodeFromPtr(p capnp.Ptr) Holder_value_Params {
	return Holder_value_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Holder_value_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Holder_value_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Holder_value_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Holder_value_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Holder_value_Params_List is a list of Holder_value_Params.
type Holder_value_Params_List = capnp.StructList[Holder_value_Params]

// NewHolder_value_Params creates a new list of Holder_value_Params.
func NewHolder_value_Params_List(s *capnp.Segment, sz int32) (Holder_value_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Holder_value_Params](l), err
}

// Holder_value_Params_Future is a wrapper for a Holder_value_Params promised by a client call.
type Holder_value_Params_Future struct{ *capnp.Future }

func (f Holder_value_Params_Future) Struct() (Holder_value_Params, error) {
	p, err := f.Future.Ptr()
	return Holder_value_Params(p.Struct()), err
}

type Holder_value_Results capnp.Struct

// Holder_value_Results_TypeID is the unique identifier for the type Holder_value_Results.
const Holder_value_Results_TypeID = 0xa18bd34aee32cc89

func NewHolder_value_Results(s *capnp.Segment) (Holder_value_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Holder_value_Results(st), err
}

func NewRootHolder_value_Results(s *capnp.Segment) (Holder_value_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Holder_value_Results(st), err
}

func ReadRootHolder_value_Results(msg *capnp.Message) (Holder_value_Results, error) {
	root, err := msg.Root()
	return Holder_value_Results(root.Struct()), err
}

func (s Holder_value_Results) String() string {
	str, _ := text.Marshal(0xa18bd34aee32cc89, capnp.Struct(s))
	return str
}

func (s Holder_value_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Holder_value_Results) DecodeFromPtr(p capnp.Ptr) Holder_value_Results {
	return Holder_value_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Holder_value_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Holder_value_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Holder_value_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Holder_value_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Holder_value_Results) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Holder_value_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Holder_value_Results) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Holder_value_Results_List is a list of Holder_value_Results.
type Holder_value_Results_List = capnp.StructList[Holder_value_Results]

// NewHolder_value_Results creates a new list of Holder_value_Results.
func NewHolder_value_Results_List(s *capnp.Segment, sz int32) (Holder_value_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Holder_value_Results](l), err
}

// Holder_value_Results_Future is a wrapper for a Holder_value_Results promised by a client call.
type Holder_value_Results_Future struct{ *capnp.Future }

func (f Holder_value_Results_Future) Struct() (Holder_value_Results, error) {
	p, err := f.Future.Ptr()
	return Holder_value_Results(p.Struct()), err
}
func (p Holder_value_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type IdentifiableHolder capnp.Client

// IdentifiableHolder_TypeID is the unique identifier for the type IdentifiableHolder.
const IdentifiableHolder_TypeID = 0xee543d7c305d56f6

func (c IdentifiableHolder) Info(ctx context.Context, params func(Identifiable_info_Params) error) (IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return IdInformation_Future{Future: ans.Future()}, release

}

func (c IdentifiableHolder) Value(ctx context.Context, params func(Holder_value_Params) error) (Holder_value_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc83045ccbb0b6ac5,
			MethodID:      0,
			InterfaceName: "common.capnp:Holder",
			MethodName:    "value",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Holder_value_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Holder_value_Results_Future{Future: ans.Future()}, release

}

func (c IdentifiableHolder) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c IdentifiableHolder) String() string {
	return "IdentifiableHolder(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c IdentifiableHolder) AddRef() IdentifiableHolder {
	return IdentifiableHolder(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c IdentifiableHolder) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c IdentifiableHolder) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c IdentifiableHolder) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (IdentifiableHolder) DecodeFromPtr(p capnp.Ptr) IdentifiableHolder {
	return IdentifiableHolder(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c IdentifiableHolder) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c IdentifiableHolder) IsSame(other IdentifiableHolder) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c IdentifiableHolder) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c IdentifiableHolder) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A IdentifiableHolder_Server is a IdentifiableHolder with a local implementation.
type IdentifiableHolder_Server interface {
	Info(context.Context, Identifiable_info) error

	Value(context.Context, Holder_value) error
}

// IdentifiableHolder_NewServer creates a new Server from an implementation of IdentifiableHolder_Server.
func IdentifiableHolder_NewServer(s IdentifiableHolder_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IdentifiableHolder_Methods(nil, s), s, c)
}

// IdentifiableHolder_ServerToClient creates a new Client from an implementation of IdentifiableHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func IdentifiableHolder_ServerToClient(s IdentifiableHolder_Server) IdentifiableHolder {
	return IdentifiableHolder(capnp.NewClient(IdentifiableHolder_NewServer(s)))
}

// IdentifiableHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IdentifiableHolder_Methods(methods []server.Method, s IdentifiableHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc83045ccbb0b6ac5,
			MethodID:      0,
			InterfaceName: "common.capnp:Holder",
			MethodName:    "value",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Value(ctx, Holder_value{call})
		},
	})

	return methods
}

// IdentifiableHolder_List is a list of IdentifiableHolder.
type IdentifiableHolder_List = capnp.CapList[IdentifiableHolder]

// NewIdentifiableHolder_List creates a new list of IdentifiableHolder.
func NewIdentifiableHolder_List(s *capnp.Segment, sz int32) (IdentifiableHolder_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[IdentifiableHolder](l), err
}

const schema_99f1c9a775a88ac9 = "x\xda|\x96m\x8c\x9cU\x15\xc7\xff\xff{\x9f\x99g" +
	"w;\xb3\xb3\xcf\xdc\xa7,--MI\x8d\xd2H\xd3" +
	"\xce\x94u5\xa0\xbbIKw\xc96\xce\xb3\xb3`\x9b" +
	"\x94\xd8\xd9\x9dYw\x9ayc^t\x9b\x10\x8d\x891" +
	"\x02\x92\x18>\x88\x181\xd6\x98\xe8\x07\x13R\xa2\x1f\x88" +
	"1Q#\x09\xd8\x1aR)\x1f$j\x02\xbeP\xc4V" +
	"P\xc17\xe4\x9as\x87gg\xdc5|\x9b\xfb\xff\x9d" +
	"9\xe7\xdc\xf3\xdc{\xce=\xb8\xd7\x9b\xf1\x0e\xa5?\x90" +
	"\x84\x8a\xe6\x12I\xfb\xd0\xc7>\xfe\xec\x9d\x89\xfa\x97\x11" +
	"\x84\x04<\x7f\x82y\xea1\xc2\xb3\xe7\x7f3\x7f\xe3\xb3" +
	"\xe7\x1ex\x0c\xc1NG\x80\xfc+*'\xe4\xa3\x8f|" +
	"\x7f\xf2\xc3?}\xf5\xeb\x08v)\xbbt\xf9g\x9fx" +
	"p\xb4v\x15`\xfe\x92\x1a\xa3yQ\xf9\x80\xf9\xb5\xfa" +
	"\x0ch\xef\xbf\x98\xbbv\xe7s\x0f\x9e\xeb{OP\xdc" +
	"\xef\xd0Y\x82f\xaf\xfe\x08h\x9f\x9f\xfb\xda\xc9\x0b\x97" +
	"\x1e\x7f\x02AZ\xdbg\x1e\xf8N\xef\xdb\xcf\xbc\xfe(" +
	"@3\xab\x7fa\x8ek\xf14\xaf\x8f\x99{\xe5\x97\xcd" +
	"\x1f\x9b|\xcf\xb1\xcf_~\x12A\x9a\x03\xe3\x84\xf2'" +
	"hN\xea\x87M\xc9\xd9\xdf\xa3?\x05\x98Kz\xd2>" +
	"uf\xdb\x0f.\x1e=\xf8\xf4&\xe7\x98\xa0\xf9\xb9\xfe" +
	"\xa6y\xde\x99_\xd2\xc7\xcc^\xcf7{\xbd\x8c}\xee" +
	"\x05\xfd\xf6\x85O_\xb8\xbc)\x80\xb3\xdb\xee\xbd v" +
	"\x80\xd9\xed=\x0e\xda;\x9e\xe8\x14\xf3\x0f\xf7^D\x94" +
	"\xa6\x1a\x18\x1f\xa5\x7f#=\xf3\xa4\xf7U\xf3cW\xb3" +
	"\x1fz\x8f$A{q\xf9'\xe7\x17\xdf\xb8p\x05\xd1" +
	".rP\xb4\xbb\xe8\xd3\x03\xf2\x8f\xa6rR\x94s\xa9" +
	"\x971D\xa34\x87\xf3\xa0D\xef\xa5_2\x9fMO" +
	"\x02\xe6\xfe\xb4\xe4\xf1\xe6\xdd\xf7\x1c\xbc\xef\xf6\xa5k[" +
	"7\x99\x1f\x1dW4\xdb\xc7\xe5_\xc1\xb8o\x82\xf1\xf7" +
	"\x9ah<\x83Y\xbb\xd2\xac\xd7\x9b\x8d\x03+\xba\xd4j" +
	"\xb4>4\xd7\xac\x95+\xed\x03\x9f,\xd5z\x95}\x85" +
	"R\xbbT\xef\x00\x9bl\xe6\xcb\x95F\xb7\xbaZ--" +
	"\xd7*\x07\xaa\x8d\xd5\xe6\xbe\xc2\x1eg\xb9\xc9\xae\xd8m" +
	"\xf7V\xba\xbdv\xa5\xbcTY\xef\x1eX:\xdb\xaa\x00" +
	"\x052\x0a\xa9\x80\xe0\xd63\x00\x19\x1c\xda\x0fP\x057" +
	"\xdf\x04P\x07{e\xe5\x05;\x16\x01\xdbkt\x9c\x07" +
	"d\xc4G\xe6L\xa7\xd9\xf0\xd7\xeb\xb5L\xb7Y\xaf\xd9" +
	"N\xb7\xd7.\x9f]\xac\x80\xab\xef\xb6\x85\xc5J\xa7W" +
	"\xeb\xb2\x13y\xda\x03<\x02A:\x07D#\x9aQ\xa8" +
	"\xb8\xc7Y1K\x0e\x0e\x08\xc0,\xb8\xe1Tm\xde3" +
	"+\xb2\x07O'\x80\x8d{\xc1\xf8\xb4\x04\xc1~\xa8 " +
	"\xe1g\xa4.3,p\xe0\x88\xceQ\xa1Te[\x1c" +
	"\x8cl$$[\x8f\xf6iF\x07\x15\x032\xa4\x88\xb7" +
	"\x88\xf8>\xcd\xe8\xb0\xa2\xbf\xda\xe9\xba\x1c7\x0e}?" +
	"G\xbf\xd3(3\x9b\xd8\x0afG\x18$\xb2A\"\xcb" +
	";X\xdc\x94\xc0\\\xb3\xe6\x97+\xed\xc1\x1e\xe2[\xcf" +
	"\xf8\x82\x06A\x0e\x98Mqv\x17\x83[\xfc~\x89\x02" +
	"\xee\x89<5T%\x97\xe4\xff\x13\xdd\xa6g=\x06\xcc" +
	"riK\x15\xe7\x1b\xab\xcdv\xbd\xd4\xad\xeafCR" +
	"HmT\xe1\xe8N \x9a\xd1\x8c\x16\x86\xaa0\xbf\x1f" +
	"\x88\x8ehF\x05\xc5@\xa9\xfe\xc19\xbe\x0cD\x0b\x9a" +
	"\xd1\x09E]-3\x05\xc5\x14\x98i\x94\xea\x95xa" +
	"\xcb\x95\xceJ\xbb\xda\xea\xc2\xaf6\x1b\x1b\xea\xff\x96\xe2" +
	"\xeeRM\xf7\xdc\xd7\\\xd7^\xcaZ\xc9\xc3|P\xdf" +
	"\x04\x14\x0fk\xcd\xe2\x8cVL\xf3m\xebr1\xb7;" +
	"0-\xe0\x88\x00\xf5\x1f\xeb\xf21\xb3\x0e\xdc&`N" +
	"\x80~\xcb\x86\xd4\x809\xea\xc0\x8c\x80\x05\x01\xde\xbfm" +
	"(7\xdc\xcc;pD@A@\xe2_6d\x020" +
	"\xc7\xf5N\xa08'`I@\xf2\x9f6d\x120\x91" +
	"\xde\x0f\x14\x17\x04\x9c\x10\xe0\xff\xc3\x86\xae\x05\xdc\xe5@" +
	"A\xc0)\x01#\x7f\xb7!G\x00s\xd2\x81%\x01\xa7" +
	"\x05\x8c\xbeiC\x8e\xba\x9e(\xc1O\x08(\x0b\x18{" +
	"\xc3\x86\x1c\x03LIg\x81\xe2)\x01k\x02\xb6\xfd\xcd" +
	"\x86\xdc\x06\x98\x8a\x03\xa7\x05\xd4\x04\xa4\xfejC\xa6\x00" +
	"Su\xa0,\xa0% \xfd\x17\x1b2\x0d\x98\xba\x03k" +
	"\x02\xba\x02\xc6_\xb7!\xc7\x01s\xaf\x0b^\x13\xb0." +
	" \xf3\x9a\x0d\x99\x91V\xe6\xd2m\x09\xf8\xa2\x80\x89?" +
	"\xdb\x90\x13\xd2\xd9\x1c\xf8\x9c\x80o\x08\x08\xae\xd9\x90\x01" +
	"`\x1es\xe0+\x02\xbe' {\xd5\x86\xcc\x02\xe6\xbc" +
	"\x03\xdf\x15\xf0\xb4\x00\xf3'\x1b\xd2\x00\xe6)\x07~$" +
	"\xe0W\x02\xc2Wm\xc8\x100\xbftY]\x16\xf0\x9a" +
	"\x80\xed\x7f\xb4!\xb7\x03\xe6\xaa\xce\x01\xc5+\x02<O" +
	"1}\xdd+6\xe4u\x80\xa1'\xe0-\x01\xd7\x0b\x98" +
	"\xbcbCN\xba\xd1 `\xc2\xd3,\xbe_\xc0\xf5/" +
	"\xdb\x90\xd7\x03\xe6fO\x82\xef\x130#`\xc7\x1fl" +
	"\xc8\x1dr\xae<\xf9\xe6\xd3\x02\x96\x04\xec\xfc\xbd\x0d\xb9" +
	"S\xbe\xb9\x03\x0b\x02\xd6\x04\xdc\xf0;\x1b\xf2\x06\xf9\x1e" +
	"\x0e\x9c\x16p\x9f\x80]\xbf\xb5!w\x01\xe6\xac\x8b\xd1" +
	"\x15\xf0%\x01\xbb_\xb2!w\x03\xe6!\x97\xd5\x17\x04" +
	"|\xcb\x93\x862u\x98\xdb\xa0\xb8\x0d\xf4W\xf39\x8e" +
	"Aq\x0c\xf4\xabS\x87\x99\x80bB~\xe7s\xf4\xa0" +
	"\xe8\xc9\xefCS\xd4P\xd4\xa0\xaeNSAQ\x81\x99" +
	"\x9e\xd8\x8fBq\xd4-\xf29\x8e@q\xc4-\x0eM" +
	"\xd1\x87\xa2\x0f\xfa\xbd\xea4\x93PL\x82\\&\xa1H" +
	"\x90\xdd\xf8V\xb2\xcc4\x14\xd3 [\xccB\xb9\xd6\xb6" +
	"Rj1\xebiPV\x99\x9a$<\x0e\x164]\xde" +
	"\xe3N\xcb\xe7bm,\xd6\xaa\x03\xbb\xc4\x866\xb0\xf3" +
	"6\xb4CS\xb1\xa6\xfb\x9a_\xabN\xc7\x92\xeaK{" +
	"j\xbd!\x7f\xa3\x03q\xe0pd \x0e<\xfaq\x94" +
	"\xde\xc0e\xb2\xaf\xe9\xdar\xac0V\xba\xb1\x92\x8a\x95" +
	"r\xac\xa4cOR\x8ew\xb4~U\\\xd0V\xa9\xda" +
	"\x8e\xe5\x89\xa1!\xe0\xf0\xbbOc\x19\xad{\xdc:\x9a" +
	"p\xcd\xaf\xdfpK\xd2pOiFkq\xeb\x93\x8e" +
	"[\x11\xf5\xb4fT\x8b\xfb\x9e\x06\x82\xaa\x8c\xa8\xb2f" +
	"\xd4\x8a\x9b\x9e\x07\x04u\xb1]\xd3\x8c\xba\x8a\x99F\xb3" +
	"QA\xd2\x8dn$ex#\xe9\xc67\x92\x9b&\xc3" +
	"Pv~e\xbd\x1by\xe4\xd0\xd3\x92\xfb3\xf2z\x18" +
	"\x9e\x16\xb9\xc1\xb4\xa0\xe2\xd0\x9b*\x98_\x84r\x03$" +
	"A\x06\xb7J6\x075\xa3\xdb6\x86}<\x0b:\xef" +
	"\x84\x04+\x99\xee\xd9V\x85\x99AD\x90\x99-\x15\x1c" +
	"~\xf7\xf4\x1f\x19\xf2\x9a)\xe8D4\xc2\xa1\xd7+0" +
	"\x18\x883\xdc2#elN\xca\xfe\xd8\xff\x9a\x1cz" +
	"\xb6\x01\xf1\xe0\xfco\x00\x00\x00\xff\xff\xf1\xd9\x91\xb2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_99f1c9a775a88ac9,
		Nodes: []uint64{
			0x966d054acf5f578d,
			0x9d8aa1cf1e49deb1,
			0x9eebc43e17b5974f,
			0xa18bd34aee32cc89,
			0xb2afd1cb599c48d5,
			0xb9d4864725174733,
			0xc83045ccbb0b6ac5,
			0xd4cb7ecbfe03dad3,
			0xe17592335373b246,
			0xe8cbf552b1c262cc,
			0xed6c098b67cad454,
			0xee543d7c305d56f6,
		},
		Compressed: true,
	})
}
