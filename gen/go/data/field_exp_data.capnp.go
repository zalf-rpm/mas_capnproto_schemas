// Code generated by capnpc-go. DO NOT EDIT.

package data

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	math "math"
)

type WeatherStation struct{ capnp.Struct }

// WeatherStation_TypeID is the unique identifier for the type WeatherStation.
const WeatherStation_TypeID = 0xbfa2d703516408b8

func NewWeatherStation(s *capnp.Segment) (WeatherStation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 8})
	return WeatherStation{st}, err
}

func NewRootWeatherStation(s *capnp.Segment) (WeatherStation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 8})
	return WeatherStation{st}, err
}

func ReadRootWeatherStation(msg *capnp.Message) (WeatherStation, error) {
	root, err := msg.Root()
	return WeatherStation{root.Struct()}, err
}

func (s WeatherStation) String() string {
	str, _ := text.Marshal(0xbfa2d703516408b8, s.Struct)
	return str
}

func (s WeatherStation) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s WeatherStation) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s WeatherStation) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s WeatherStation) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s WeatherStation) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s WeatherStation) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s WeatherStation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s WeatherStation) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s WeatherStation) InstituteName() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s WeatherStation) HasInstituteName() bool {
	return s.Struct.HasPtr(2)
}

func (s WeatherStation) InstituteNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s WeatherStation) SetInstituteName(v string) error {
	return s.Struct.SetText(2, v)
}

func (s WeatherStation) Site() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s WeatherStation) HasSite() bool {
	return s.Struct.HasPtr(3)
}

func (s WeatherStation) SiteBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s WeatherStation) SetSite(v string) error {
	return s.Struct.SetText(3, v)
}

func (s WeatherStation) Country() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s WeatherStation) HasCountry() bool {
	return s.Struct.HasPtr(4)
}

func (s WeatherStation) CountryBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s WeatherStation) SetCountry(v string) error {
	return s.Struct.SetText(4, v)
}

func (s WeatherStation) Location2ndLevel() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s WeatherStation) HasLocation2ndLevel() bool {
	return s.Struct.HasPtr(5)
}

func (s WeatherStation) Location2ndLevelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s WeatherStation) SetLocation2ndLevel(v string) error {
	return s.Struct.SetText(5, v)
}

func (s WeatherStation) Location3rdLevel() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s WeatherStation) HasLocation3rdLevel() bool {
	return s.Struct.HasPtr(6)
}

func (s WeatherStation) Location3rdLevelBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s WeatherStation) SetLocation3rdLevel(v string) error {
	return s.Struct.SetText(6, v)
}

func (s WeatherStation) LatitudeInDecDeg() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0xc0c3878000000000)
}

func (s WeatherStation) SetLatitudeInDecDeg(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0xc0c3878000000000)
}

func (s WeatherStation) LongitudeInDecDeg() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0xc0c3878000000000)
}

func (s WeatherStation) SetLongitudeInDecDeg(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0xc0c3878000000000)
}

func (s WeatherStation) ElevationM() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0xc0c3878000000000)
}

func (s WeatherStation) SetElevationM(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0xc0c3878000000000)
}

func (s WeatherStation) YearlyAvgTempInDegC() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0xc0c3878000000000)
}

func (s WeatherStation) SetYearlyAvgTempInDegC(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0xc0c3878000000000)
}

func (s WeatherStation) AmplitudeOfMonthlyAvgTempsInDegC() float64 {
	return math.Float64frombits(s.Struct.Uint64(32) ^ 0xc0c3878000000000)
}

func (s WeatherStation) SetAmplitudeOfMonthlyAvgTempsInDegC(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v)^0xc0c3878000000000)
}

func (s WeatherStation) TempSensorHeightInM() float64 {
	return math.Float64frombits(s.Struct.Uint64(40) ^ 0xbff0000000000000)
}

func (s WeatherStation) SetTempSensorHeightInM(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v)^0xbff0000000000000)
}

func (s WeatherStation) RefHeightWeatherMeasurementInM() float64 {
	return math.Float64frombits(s.Struct.Uint64(48) ^ 0xbff0000000000000)
}

func (s WeatherStation) SetRefHeightWeatherMeasurementInM(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v)^0xbff0000000000000)
}

func (s WeatherStation) RefHeightWindspeedMeasurementInM() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0xbff0000000000000)
}

func (s WeatherStation) SetRefHeightWindspeedMeasurementInM(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0xbff0000000000000)
}

func (s WeatherStation) AnnualCO2ConcentrationInPPM() float64 {
	return math.Float64frombits(s.Struct.Uint64(64) ^ 0xbff0000000000000)
}

func (s WeatherStation) SetAnnualCO2ConcentrationInPPM(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v)^0xbff0000000000000)
}

func (s WeatherStation) Notes() (string, error) {
	p, err := s.Struct.Ptr(7)
	return p.Text(), err
}

func (s WeatherStation) HasNotes() bool {
	return s.Struct.HasPtr(7)
}

func (s WeatherStation) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(7)
	return p.TextBytes(), err
}

func (s WeatherStation) SetNotes(v string) error {
	return s.Struct.SetText(7, v)
}

// WeatherStation_List is a list of WeatherStation.
type WeatherStation_List struct{ capnp.List }

// NewWeatherStation creates a new list of WeatherStation.
func NewWeatherStation_List(s *capnp.Segment, sz int32) (WeatherStation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 8}, sz)
	return WeatherStation_List{l}, err
}

func (s WeatherStation_List) At(i int) WeatherStation { return WeatherStation{s.List.Struct(i)} }

func (s WeatherStation_List) Set(i int, v WeatherStation) error { return s.List.SetStruct(i, v.Struct) }

func (s WeatherStation_List) String() string {
	str, _ := text.MarshalList(0xbfa2d703516408b8, s.List)
	return str
}

// WeatherStation_Future is a wrapper for a WeatherStation promised by a client call.
type WeatherStation_Future struct{ *capnp.Future }

func (p WeatherStation_Future) Struct() (WeatherStation, error) {
	s, err := p.Future.Struct()
	return WeatherStation{s}, err
}

type SoilMetadata struct{ capnp.Struct }

// SoilMetadata_TypeID is the unique identifier for the type SoilMetadata.
const SoilMetadata_TypeID = 0x86836f1366e5f73f

func NewSoilMetadata(s *capnp.Segment) (SoilMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 7})
	return SoilMetadata{st}, err
}

func NewRootSoilMetadata(s *capnp.Segment) (SoilMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 7})
	return SoilMetadata{st}, err
}

func ReadRootSoilMetadata(msg *capnp.Message) (SoilMetadata, error) {
	root, err := msg.Root()
	return SoilMetadata{root.Struct()}, err
}

func (s SoilMetadata) String() string {
	str, _ := text.Marshal(0x86836f1366e5f73f, s.Struct)
	return str
}

func (s SoilMetadata) ProfileId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SoilMetadata) HasProfileId() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilMetadata) ProfileIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SoilMetadata) SetProfileId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SoilMetadata) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SoilMetadata) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilMetadata) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SoilMetadata) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s SoilMetadata) Source() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s SoilMetadata) HasSource() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilMetadata) SourceBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s SoilMetadata) SetSource(v string) error {
	return s.Struct.SetText(2, v)
}

func (s SoilMetadata) DepthInCM() int16 {
	return int16(s.Struct.Uint16(0) ^ 65535)
}

func (s SoilMetadata) SetDepthInCM(v int16) {
	s.Struct.SetUint16(0, uint16(v)^65535)
}

func (s SoilMetadata) ObstableDepthInCM() int16 {
	return int16(s.Struct.Uint16(2) ^ 65535)
}

func (s SoilMetadata) SetObstableDepthInCM(v int16) {
	s.Struct.SetUint16(2, uint16(v)^65535)
}

func (s SoilMetadata) DepthOfTopsoilInCM() int16 {
	return int16(s.Struct.Uint16(4) ^ 65535)
}

func (s SoilMetadata) SetDepthOfTopsoilInCM(v int16) {
	s.Struct.SetUint16(4, uint16(v)^65535)
}

func (s SoilMetadata) DrainageRatePerDay() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0xbff0000000000000)
}

func (s SoilMetadata) SetDrainageRatePerDay(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilMetadata) RunoffCureNoSCS() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0xbff0000000000000)
}

func (s SoilMetadata) SetRunoffCureNoSCS(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilMetadata) SoilAvailableWaterContentInCM() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0xbff0000000000000)
}

func (s SoilMetadata) SetSoilAvailableWaterContentInCM(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilMetadata) SurfaceStoneCoverAsFraction() float64 {
	return math.Float64frombits(s.Struct.Uint64(32) ^ 0xbff0000000000000)
}

func (s SoilMetadata) SetSurfaceStoneCoverAsFraction(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilMetadata) SoilAlbedo() float64 {
	return math.Float64frombits(s.Struct.Uint64(40) ^ 0xbff0000000000000)
}

func (s SoilMetadata) SetSoilAlbedo(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilMetadata) SoilEvaporationLimitInMM() float64 {
	return math.Float64frombits(s.Struct.Uint64(48) ^ 0xbff0000000000000)
}

func (s SoilMetadata) SetSoilEvaporationLimitInMM(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilMetadata) MineralizationFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0xbff0000000000000)
}

func (s SoilMetadata) SetMineralizationFactor(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilMetadata) SoilFertilityOnFoto() float64 {
	return math.Float64frombits(s.Struct.Uint64(64) ^ 0xbff0000000000000)
}

func (s SoilMetadata) SetSoilFertilityOnFoto(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilMetadata) SoilClassificationSystem() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s SoilMetadata) HasSoilClassificationSystem() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilMetadata) SoilClassificationSystemBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s SoilMetadata) SetSoilClassificationSystem(v string) error {
	return s.Struct.SetText(3, v)
}

func (s SoilMetadata) SoilTexture() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s SoilMetadata) HasSoilTexture() bool {
	return s.Struct.HasPtr(4)
}

func (s SoilMetadata) SoilTextureBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s SoilMetadata) SetSoilTexture(v string) error {
	return s.Struct.SetText(4, v)
}

func (s SoilMetadata) Classification() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s SoilMetadata) HasClassification() bool {
	return s.Struct.HasPtr(5)
}

func (s SoilMetadata) ClassificationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s SoilMetadata) SetClassification(v string) error {
	return s.Struct.SetText(5, v)
}

func (s SoilMetadata) Notes() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s SoilMetadata) HasNotes() bool {
	return s.Struct.HasPtr(6)
}

func (s SoilMetadata) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s SoilMetadata) SetNotes(v string) error {
	return s.Struct.SetText(6, v)
}

// SoilMetadata_List is a list of SoilMetadata.
type SoilMetadata_List struct{ capnp.List }

// NewSoilMetadata creates a new list of SoilMetadata.
func NewSoilMetadata_List(s *capnp.Segment, sz int32) (SoilMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 7}, sz)
	return SoilMetadata_List{l}, err
}

func (s SoilMetadata_List) At(i int) SoilMetadata { return SoilMetadata{s.List.Struct(i)} }

func (s SoilMetadata_List) Set(i int, v SoilMetadata) error { return s.List.SetStruct(i, v.Struct) }

func (s SoilMetadata_List) String() string {
	str, _ := text.MarshalList(0x86836f1366e5f73f, s.List)
	return str
}

// SoilMetadata_Future is a wrapper for a SoilMetadata promised by a client call.
type SoilMetadata_Future struct{ *capnp.Future }

func (p SoilMetadata_Future) Struct() (SoilMetadata, error) {
	s, err := p.Future.Struct()
	return SoilMetadata{s}, err
}

type Field struct{ capnp.Struct }

// Field_TypeID is the unique identifier for the type Field.
const Field_TypeID = 0xc158bd732092cde5

func NewField(s *capnp.Segment) (Field, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 7})
	return Field{st}, err
}

func NewRootField(s *capnp.Segment) (Field, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 7})
	return Field{st}, err
}

func ReadRootField(msg *capnp.Message) (Field, error) {
	root, err := msg.Root()
	return Field{root.Struct()}, err
}

func (s Field) String() string {
	str, _ := text.Marshal(0xc158bd732092cde5, s.Struct)
	return str
}

func (s Field) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Field) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Field) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Field) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Field) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Field) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s Field) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Field) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Field) LatitudeInDecDeg() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0xc0c3878000000000)
}

func (s Field) SetLatitudeInDecDeg(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0xc0c3878000000000)
}

func (s Field) LongitudeInDecDeg() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0xc0c3878000000000)
}

func (s Field) SetLongitudeInDecDeg(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0xc0c3878000000000)
}

func (s Field) ElevationInM() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0xc0c3878000000000)
}

func (s Field) SetElevationInM(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0xc0c3878000000000)
}

func (s Field) SlopeDegreeInDeg() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0xbff0000000000000)
}

func (s Field) SetSlopeDegreeInDeg(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0xbff0000000000000)
}

func (s Field) DrainageType() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Field) HasDrainageType() bool {
	return s.Struct.HasPtr(2)
}

func (s Field) DrainageTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Field) SetDrainageType(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Field) DistanceToWeatherStationInKM() float64 {
	return math.Float64frombits(s.Struct.Uint64(32) ^ 0xbff0000000000000)
}

func (s Field) SetDistanceToWeatherStationInKM(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v)^0xbff0000000000000)
}

func (s Field) Country() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Field) HasCountry() bool {
	return s.Struct.HasPtr(3)
}

func (s Field) CountryBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Field) SetCountry(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Field) SubCountry() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Field) HasSubCountry() bool {
	return s.Struct.HasPtr(4)
}

func (s Field) SubCountryBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Field) SetSubCountry(v string) error {
	return s.Struct.SetText(4, v)
}

func (s Field) SubSubCountry() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s Field) HasSubSubCountry() bool {
	return s.Struct.HasPtr(5)
}

func (s Field) SubSubCountryBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s Field) SetSubSubCountry(v string) error {
	return s.Struct.SetText(5, v)
}

func (s Field) Notes() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s Field) HasNotes() bool {
	return s.Struct.HasPtr(6)
}

func (s Field) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s Field) SetNotes(v string) error {
	return s.Struct.SetText(6, v)
}

// Field_List is a list of Field.
type Field_List struct{ capnp.List }

// NewField creates a new list of Field.
func NewField_List(s *capnp.Segment, sz int32) (Field_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 7}, sz)
	return Field_List{l}, err
}

func (s Field_List) At(i int) Field { return Field{s.List.Struct(i)} }

func (s Field_List) Set(i int, v Field) error { return s.List.SetStruct(i, v.Struct) }

func (s Field_List) String() string {
	str, _ := text.MarshalList(0xc158bd732092cde5, s.List)
	return str
}

// Field_Future is a wrapper for a Field promised by a client call.
type Field_Future struct{ *capnp.Future }

func (p Field_Future) Struct() (Field, error) {
	s, err := p.Future.Struct()
	return Field{s}, err
}

type ExperimentDescription struct{ capnp.Struct }

// ExperimentDescription_TypeID is the unique identifier for the type ExperimentDescription.
const ExperimentDescription_TypeID = 0x9d795a72a27f67d7

func NewExperimentDescription(s *capnp.Segment) (ExperimentDescription, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 15})
	return ExperimentDescription{st}, err
}

func NewRootExperimentDescription(s *capnp.Segment) (ExperimentDescription, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 15})
	return ExperimentDescription{st}, err
}

func ReadRootExperimentDescription(msg *capnp.Message) (ExperimentDescription, error) {
	root, err := msg.Root()
	return ExperimentDescription{root.Struct()}, err
}

func (s ExperimentDescription) String() string {
	str, _ := text.Marshal(0x9d795a72a27f67d7, s.Struct)
	return str
}

func (s ExperimentDescription) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ExperimentDescription) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s ExperimentDescription) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ExperimentDescription) SuiteId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ExperimentDescription) HasSuiteId() bool {
	return s.Struct.HasPtr(1)
}

func (s ExperimentDescription) SuiteIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetSuiteId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ExperimentDescription) Name() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ExperimentDescription) HasName() bool {
	return s.Struct.HasPtr(2)
}

func (s ExperimentDescription) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetName(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ExperimentDescription) ResearchInfrastructureName() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s ExperimentDescription) HasResearchInfrastructureName() bool {
	return s.Struct.HasPtr(3)
}

func (s ExperimentDescription) ResearchInfrastructureNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetResearchInfrastructureName(v string) error {
	return s.Struct.SetText(3, v)
}

func (s ExperimentDescription) InstituteName() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s ExperimentDescription) HasInstituteName() bool {
	return s.Struct.HasPtr(4)
}

func (s ExperimentDescription) InstituteNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetInstituteName(v string) error {
	return s.Struct.SetText(4, v)
}

func (s ExperimentDescription) ResearchUnitName() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s ExperimentDescription) HasResearchUnitName() bool {
	return s.Struct.HasPtr(5)
}

func (s ExperimentDescription) ResearchUnitNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetResearchUnitName(v string) error {
	return s.Struct.SetText(5, v)
}

func (s ExperimentDescription) ExperimentalFacilityName() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s ExperimentDescription) HasExperimentalFacilityName() bool {
	return s.Struct.HasPtr(6)
}

func (s ExperimentDescription) ExperimentalFacilityNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetExperimentalFacilityName(v string) error {
	return s.Struct.SetText(6, v)
}

func (s ExperimentDescription) SiteName() (string, error) {
	p, err := s.Struct.Ptr(7)
	return p.Text(), err
}

func (s ExperimentDescription) HasSiteName() bool {
	return s.Struct.HasPtr(7)
}

func (s ExperimentDescription) SiteNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(7)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetSiteName(v string) error {
	return s.Struct.SetText(7, v)
}

func (s ExperimentDescription) SiteType() (string, error) {
	p, err := s.Struct.Ptr(8)
	return p.Text(), err
}

func (s ExperimentDescription) HasSiteType() bool {
	return s.Struct.HasPtr(8)
}

func (s ExperimentDescription) SiteTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(8)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetSiteType(v string) error {
	return s.Struct.SetText(8, v)
}

func (s ExperimentDescription) MainExperimentFactor() (string, error) {
	p, err := s.Struct.Ptr(9)
	return p.Text(), err
}

func (s ExperimentDescription) HasMainExperimentFactor() bool {
	return s.Struct.HasPtr(9)
}

func (s ExperimentDescription) MainExperimentFactorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(9)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetMainExperimentFactor(v string) error {
	return s.Struct.SetText(9, v)
}

func (s ExperimentDescription) ExperimentalFactorCombinations() (string, error) {
	p, err := s.Struct.Ptr(10)
	return p.Text(), err
}

func (s ExperimentDescription) HasExperimentalFactorCombinations() bool {
	return s.Struct.HasPtr(10)
}

func (s ExperimentDescription) ExperimentalFactorCombinationsBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(10)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetExperimentalFactorCombinations(v string) error {
	return s.Struct.SetText(10, v)
}

func (s ExperimentDescription) ExperimentType() (string, error) {
	p, err := s.Struct.Ptr(11)
	return p.Text(), err
}

func (s ExperimentDescription) HasExperimentType() bool {
	return s.Struct.HasPtr(11)
}

func (s ExperimentDescription) ExperimentTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(11)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetExperimentType(v string) error {
	return s.Struct.SetText(11, v)
}

func (s ExperimentDescription) ManagementType() (string, error) {
	p, err := s.Struct.Ptr(12)
	return p.Text(), err
}

func (s ExperimentDescription) HasManagementType() bool {
	return s.Struct.HasPtr(12)
}

func (s ExperimentDescription) ManagementTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(12)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetManagementType(v string) error {
	return s.Struct.SetText(12, v)
}

func (s ExperimentDescription) CroppingSystem() (string, error) {
	p, err := s.Struct.Ptr(13)
	return p.Text(), err
}

func (s ExperimentDescription) HasCroppingSystem() bool {
	return s.Struct.HasPtr(13)
}

func (s ExperimentDescription) CroppingSystemBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(13)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetCroppingSystem(v string) error {
	return s.Struct.SetText(13, v)
}

func (s ExperimentDescription) PlantingYear() int16 {
	return int16(s.Struct.Uint16(0) ^ 65535)
}

func (s ExperimentDescription) SetPlantingYear(v int16) {
	s.Struct.SetUint16(0, uint16(v)^65535)
}

func (s ExperimentDescription) HarvestOperationYear() int16 {
	return int16(s.Struct.Uint16(2) ^ 65535)
}

func (s ExperimentDescription) SetHarvestOperationYear(v int16) {
	s.Struct.SetUint16(2, uint16(v)^65535)
}

func (s ExperimentDescription) Notes() (string, error) {
	p, err := s.Struct.Ptr(14)
	return p.Text(), err
}

func (s ExperimentDescription) HasNotes() bool {
	return s.Struct.HasPtr(14)
}

func (s ExperimentDescription) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(14)
	return p.TextBytes(), err
}

func (s ExperimentDescription) SetNotes(v string) error {
	return s.Struct.SetText(14, v)
}

// ExperimentDescription_List is a list of ExperimentDescription.
type ExperimentDescription_List struct{ capnp.List }

// NewExperimentDescription creates a new list of ExperimentDescription.
func NewExperimentDescription_List(s *capnp.Segment, sz int32) (ExperimentDescription_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 15}, sz)
	return ExperimentDescription_List{l}, err
}

func (s ExperimentDescription_List) At(i int) ExperimentDescription {
	return ExperimentDescription{s.List.Struct(i)}
}

func (s ExperimentDescription_List) Set(i int, v ExperimentDescription) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ExperimentDescription_List) String() string {
	str, _ := text.MarshalList(0x9d795a72a27f67d7, s.List)
	return str
}

// ExperimentDescription_Future is a wrapper for a ExperimentDescription promised by a client call.
type ExperimentDescription_Future struct{ *capnp.Future }

func (p ExperimentDescription_Future) Struct() (ExperimentDescription, error) {
	s, err := p.Future.Struct()
	return ExperimentDescription{s}, err
}

type Treatment struct{ capnp.Struct }

// Treatment_TypeID is the unique identifier for the type Treatment.
const Treatment_TypeID = 0xff1381363c7abd06

func NewTreatment(s *capnp.Segment) (Treatment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Treatment{st}, err
}

func NewRootTreatment(s *capnp.Segment) (Treatment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return Treatment{st}, err
}

func ReadRootTreatment(msg *capnp.Message) (Treatment, error) {
	root, err := msg.Root()
	return Treatment{root.Struct()}, err
}

func (s Treatment) String() string {
	str, _ := text.Marshal(0xff1381363c7abd06, s.Struct)
	return str
}

func (s Treatment) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Treatment) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Treatment) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Treatment) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Treatment) ExperimentId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Treatment) HasExperimentId() bool {
	return s.Struct.HasPtr(1)
}

func (s Treatment) ExperimentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Treatment) SetExperimentId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Treatment) FieldId() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Treatment) HasFieldId() bool {
	return s.Struct.HasPtr(2)
}

func (s Treatment) FieldIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Treatment) SetFieldId(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Treatment) WeatherStationId() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Treatment) HasWeatherStationId() bool {
	return s.Struct.HasPtr(3)
}

func (s Treatment) WeatherStationIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Treatment) SetWeatherStationId(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Treatment) WeatherStationDataset() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Treatment) HasWeatherStationDataset() bool {
	return s.Struct.HasPtr(4)
}

func (s Treatment) WeatherStationDatasetBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Treatment) SetWeatherStationDataset(v string) error {
	return s.Struct.SetText(4, v)
}

func (s Treatment) Name() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s Treatment) HasName() bool {
	return s.Struct.HasPtr(5)
}

func (s Treatment) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s Treatment) SetName(v string) error {
	return s.Struct.SetText(5, v)
}

func (s Treatment) SimulationStartDate() (common.Date, error) {
	p, err := s.Struct.Ptr(6)
	return common.Date{Struct: p.Struct()}, err
}

func (s Treatment) HasSimulationStartDate() bool {
	return s.Struct.HasPtr(6)
}

func (s Treatment) SetSimulationStartDate(v common.Date) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewSimulationStartDate sets the simulationStartDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Treatment) NewSimulationStartDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

func (s Treatment) SimulationEndDate() (common.Date, error) {
	p, err := s.Struct.Ptr(7)
	return common.Date{Struct: p.Struct()}, err
}

func (s Treatment) HasSimulationEndDate() bool {
	return s.Struct.HasPtr(7)
}

func (s Treatment) SetSimulationEndDate(v common.Date) error {
	return s.Struct.SetPtr(7, v.Struct.ToPtr())
}

// NewSimulationEndDate sets the simulationEndDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Treatment) NewSimulationEndDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(7, ss.Struct.ToPtr())
	return ss, err
}

func (s Treatment) IrrigationApplied() bool {
	return s.Struct.Bit(0)
}

func (s Treatment) SetIrrigationApplied(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Treatment) FertilizerApplied() bool {
	return s.Struct.Bit(1)
}

func (s Treatment) SetFertilizerApplied(v bool) {
	s.Struct.SetBit(1, v)
}

func (s Treatment) IrrigationLevel() int8 {
	return int8(s.Struct.Uint8(1) ^ 255)
}

func (s Treatment) SetIrrigationLevel(v int8) {
	s.Struct.SetUint8(1, uint8(v)^255)
}

func (s Treatment) FertilizerLevel() int8 {
	return int8(s.Struct.Uint8(2) ^ 255)
}

func (s Treatment) SetFertilizerLevel(v int8) {
	s.Struct.SetUint8(2, uint8(v)^255)
}

func (s Treatment) PlantingDateLevel() int8 {
	return int8(s.Struct.Uint8(3) ^ 255)
}

func (s Treatment) SetPlantingDateLevel(v int8) {
	s.Struct.SetUint8(3, uint8(v)^255)
}

func (s Treatment) EnvironmentalModificationsLevel() int8 {
	return int8(s.Struct.Uint8(4) ^ 255)
}

func (s Treatment) SetEnvironmentalModificationsLevel(v int8) {
	s.Struct.SetUint8(4, uint8(v)^255)
}

func (s Treatment) InitialConditionsLevel() int8 {
	return int8(s.Struct.Uint8(5) ^ 255)
}

func (s Treatment) SetInitialConditionsLevel(v int8) {
	s.Struct.SetUint8(5, uint8(v)^255)
}

func (s Treatment) PlantingDensityLevel() int8 {
	return int8(s.Struct.Uint8(6) ^ 255)
}

func (s Treatment) SetPlantingDensityLevel(v int8) {
	s.Struct.SetUint8(6, uint8(v)^255)
}

func (s Treatment) NumberOfBlocksOrReplicates() int8 {
	return int8(s.Struct.Uint8(7) ^ 255)
}

func (s Treatment) SetNumberOfBlocksOrReplicates(v int8) {
	s.Struct.SetUint8(7, uint8(v)^255)
}

func (s Treatment) Notes() (string, error) {
	p, err := s.Struct.Ptr(8)
	return p.Text(), err
}

func (s Treatment) HasNotes() bool {
	return s.Struct.HasPtr(8)
}

func (s Treatment) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(8)
	return p.TextBytes(), err
}

func (s Treatment) SetNotes(v string) error {
	return s.Struct.SetText(8, v)
}

// Treatment_List is a list of Treatment.
type Treatment_List struct{ capnp.List }

// NewTreatment creates a new list of Treatment.
func NewTreatment_List(s *capnp.Segment, sz int32) (Treatment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9}, sz)
	return Treatment_List{l}, err
}

func (s Treatment_List) At(i int) Treatment { return Treatment{s.List.Struct(i)} }

func (s Treatment_List) Set(i int, v Treatment) error { return s.List.SetStruct(i, v.Struct) }

func (s Treatment_List) String() string {
	str, _ := text.MarshalList(0xff1381363c7abd06, s.List)
	return str
}

// Treatment_Future is a wrapper for a Treatment promised by a client call.
type Treatment_Future struct{ *capnp.Future }

func (p Treatment_Future) Struct() (Treatment, error) {
	s, err := p.Future.Struct()
	return Treatment{s}, err
}

func (p Treatment_Future) SimulationStartDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(6, nil)}
}

func (p Treatment_Future) SimulationEndDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(7, nil)}
}

type Cultivar struct{ capnp.Struct }

// Cultivar_TypeID is the unique identifier for the type Cultivar.
const Cultivar_TypeID = 0xab7ea2bfa7965af8

func NewCultivar(s *capnp.Segment) (Cultivar, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 10})
	return Cultivar{st}, err
}

func NewRootCultivar(s *capnp.Segment) (Cultivar, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 10})
	return Cultivar{st}, err
}

func ReadRootCultivar(msg *capnp.Message) (Cultivar, error) {
	root, err := msg.Root()
	return Cultivar{root.Struct()}, err
}

func (s Cultivar) String() string {
	str, _ := text.Marshal(0xab7ea2bfa7965af8, s.Struct)
	return str
}

func (s Cultivar) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Cultivar) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Cultivar) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Cultivar) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Cultivar) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Cultivar) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s Cultivar) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Cultivar) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Cultivar) AccessionId() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Cultivar) HasAccessionId() bool {
	return s.Struct.HasPtr(2)
}

func (s Cultivar) AccessionIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Cultivar) SetAccessionId(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Cultivar) AccessionLocation() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Cultivar) HasAccessionLocation() bool {
	return s.Struct.HasPtr(3)
}

func (s Cultivar) AccessionLocationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Cultivar) SetAccessionLocation(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Cultivar) CropIdentifierICASA() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Cultivar) HasCropIdentifierICASA() bool {
	return s.Struct.HasPtr(4)
}

func (s Cultivar) CropIdentifierICASABytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Cultivar) SetCropIdentifierICASA(v string) error {
	return s.Struct.SetText(4, v)
}

func (s Cultivar) SeedLot() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s Cultivar) HasSeedLot() bool {
	return s.Struct.HasPtr(5)
}

func (s Cultivar) SeedLotBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s Cultivar) SetSeedLot(v string) error {
	return s.Struct.SetText(5, v)
}

func (s Cultivar) BreedingProgram() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s Cultivar) HasBreedingProgram() bool {
	return s.Struct.HasPtr(6)
}

func (s Cultivar) BreedingProgramBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s Cultivar) SetBreedingProgram(v string) error {
	return s.Struct.SetText(6, v)
}

func (s Cultivar) OriginalName() (string, error) {
	p, err := s.Struct.Ptr(7)
	return p.Text(), err
}

func (s Cultivar) HasOriginalName() bool {
	return s.Struct.HasPtr(7)
}

func (s Cultivar) OriginalNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(7)
	return p.TextBytes(), err
}

func (s Cultivar) SetOriginalName(v string) error {
	return s.Struct.SetText(7, v)
}

func (s Cultivar) ReleaseYear() int16 {
	return int16(s.Struct.Uint16(0) ^ 65535)
}

func (s Cultivar) SetReleaseYear(v int16) {
	s.Struct.SetUint16(0, uint16(v)^65535)
}

func (s Cultivar) Synonym() (string, error) {
	p, err := s.Struct.Ptr(8)
	return p.Text(), err
}

func (s Cultivar) HasSynonym() bool {
	return s.Struct.HasPtr(8)
}

func (s Cultivar) SynonymBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(8)
	return p.TextBytes(), err
}

func (s Cultivar) SetSynonym(v string) error {
	return s.Struct.SetText(8, v)
}

func (s Cultivar) Notes() (string, error) {
	p, err := s.Struct.Ptr(9)
	return p.Text(), err
}

func (s Cultivar) HasNotes() bool {
	return s.Struct.HasPtr(9)
}

func (s Cultivar) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(9)
	return p.TextBytes(), err
}

func (s Cultivar) SetNotes(v string) error {
	return s.Struct.SetText(9, v)
}

// Cultivar_List is a list of Cultivar.
type Cultivar_List struct{ capnp.List }

// NewCultivar creates a new list of Cultivar.
func NewCultivar_List(s *capnp.Segment, sz int32) (Cultivar_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 10}, sz)
	return Cultivar_List{l}, err
}

func (s Cultivar_List) At(i int) Cultivar { return Cultivar{s.List.Struct(i)} }

func (s Cultivar_List) Set(i int, v Cultivar) error { return s.List.SetStruct(i, v.Struct) }

func (s Cultivar_List) String() string {
	str, _ := text.MarshalList(0xab7ea2bfa7965af8, s.List)
	return str
}

// Cultivar_Future is a wrapper for a Cultivar promised by a client call.
type Cultivar_Future struct{ *capnp.Future }

func (p Cultivar_Future) Struct() (Cultivar, error) {
	s, err := p.Future.Struct()
	return Cultivar{s}, err
}

type Plot struct{ capnp.Struct }

// Plot_TypeID is the unique identifier for the type Plot.
const Plot_TypeID = 0xa7a2210fb1e289f2

func NewPlot(s *capnp.Segment) (Plot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7})
	return Plot{st}, err
}

func NewRootPlot(s *capnp.Segment) (Plot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7})
	return Plot{st}, err
}

func ReadRootPlot(msg *capnp.Message) (Plot, error) {
	root, err := msg.Root()
	return Plot{root.Struct()}, err
}

func (s Plot) String() string {
	str, _ := text.Marshal(0xa7a2210fb1e289f2, s.Struct)
	return str
}

func (s Plot) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Plot) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Plot) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Plot) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Plot) ExperimentId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Plot) HasExperimentId() bool {
	return s.Struct.HasPtr(1)
}

func (s Plot) ExperimentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Plot) SetExperimentId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Plot) TreatmentId() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Plot) HasTreatmentId() bool {
	return s.Struct.HasPtr(2)
}

func (s Plot) TreatmentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Plot) SetTreatmentId(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Plot) CultivarId() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Plot) HasCultivarId() bool {
	return s.Struct.HasPtr(3)
}

func (s Plot) CultivarIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Plot) SetCultivarId(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Plot) SoilId() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Plot) HasSoilId() bool {
	return s.Struct.HasPtr(4)
}

func (s Plot) SoilIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Plot) SetSoilId(v string) error {
	return s.Struct.SetText(4, v)
}

func (s Plot) BlockNumber() int8 {
	return int8(s.Struct.Uint8(0) ^ 255)
}

func (s Plot) SetBlockNumber(v int8) {
	s.Struct.SetUint8(0, uint8(v)^255)
}

func (s Plot) PlotNumber() int8 {
	return int8(s.Struct.Uint8(1) ^ 255)
}

func (s Plot) SetPlotNumber(v int8) {
	s.Struct.SetUint8(1, uint8(v)^255)
}

func (s Plot) ReplicateNumber() int8 {
	return int8(s.Struct.Uint8(2) ^ 255)
}

func (s Plot) SetReplicateNumber(v int8) {
	s.Struct.SetUint8(2, uint8(v)^255)
}

func (s Plot) RowNumber() int8 {
	return int8(s.Struct.Uint8(3) ^ 255)
}

func (s Plot) SetRowNumber(v int8) {
	s.Struct.SetUint8(3, uint8(v)^255)
}

func (s Plot) ColumnNumber() int8 {
	return int8(s.Struct.Uint8(4) ^ 255)
}

func (s Plot) SetColumnNumber(v int8) {
	s.Struct.SetUint8(4, uint8(v)^255)
}

func (s Plot) HarvestMethod() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s Plot) HasHarvestMethod() bool {
	return s.Struct.HasPtr(5)
}

func (s Plot) HarvestMethodBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s Plot) SetHarvestMethod(v string) error {
	return s.Struct.SetText(5, v)
}

func (s Plot) Notes() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s Plot) HasNotes() bool {
	return s.Struct.HasPtr(6)
}

func (s Plot) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s Plot) SetNotes(v string) error {
	return s.Struct.SetText(6, v)
}

// Plot_List is a list of Plot.
type Plot_List struct{ capnp.List }

// NewPlot creates a new list of Plot.
func NewPlot_List(s *capnp.Segment, sz int32) (Plot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 7}, sz)
	return Plot_List{l}, err
}

func (s Plot_List) At(i int) Plot { return Plot{s.List.Struct(i)} }

func (s Plot_List) Set(i int, v Plot) error { return s.List.SetStruct(i, v.Struct) }

func (s Plot_List) String() string {
	str, _ := text.MarshalList(0xa7a2210fb1e289f2, s.List)
	return str
}

// Plot_Future is a wrapper for a Plot promised by a client call.
type Plot_Future struct{ *capnp.Future }

func (p Plot_Future) Struct() (Plot, error) {
	s, err := p.Future.Struct()
	return Plot{s}, err
}

type InitialConditionsLayer struct{ capnp.Struct }

// InitialConditionsLayer_TypeID is the unique identifier for the type InitialConditionsLayer.
const InitialConditionsLayer_TypeID = 0xd1c0bc9f5b332a6e

func NewInitialConditionsLayer(s *capnp.Segment) (InitialConditionsLayer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 3})
	return InitialConditionsLayer{st}, err
}

func NewRootInitialConditionsLayer(s *capnp.Segment) (InitialConditionsLayer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 3})
	return InitialConditionsLayer{st}, err
}

func ReadRootInitialConditionsLayer(msg *capnp.Message) (InitialConditionsLayer, error) {
	root, err := msg.Root()
	return InitialConditionsLayer{root.Struct()}, err
}

func (s InitialConditionsLayer) String() string {
	str, _ := text.Marshal(0xd1c0bc9f5b332a6e, s.Struct)
	return str
}

func (s InitialConditionsLayer) ExperimentId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s InitialConditionsLayer) HasExperimentId() bool {
	return s.Struct.HasPtr(0)
}

func (s InitialConditionsLayer) ExperimentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s InitialConditionsLayer) SetExperimentId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s InitialConditionsLayer) TreatmentId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s InitialConditionsLayer) HasTreatmentId() bool {
	return s.Struct.HasPtr(1)
}

func (s InitialConditionsLayer) TreatmentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s InitialConditionsLayer) SetTreatmentId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s InitialConditionsLayer) Date() (common.Date, error) {
	p, err := s.Struct.Ptr(2)
	return common.Date{Struct: p.Struct()}, err
}

func (s InitialConditionsLayer) HasDate() bool {
	return s.Struct.HasPtr(2)
}

func (s InitialConditionsLayer) SetDate(v common.Date) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s InitialConditionsLayer) NewDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s InitialConditionsLayer) SoilLayerTopDepthInCM() int16 {
	return int16(s.Struct.Uint16(0) ^ 65535)
}

func (s InitialConditionsLayer) SetSoilLayerTopDepthInCM(v int16) {
	s.Struct.SetUint16(0, uint16(v)^65535)
}

func (s InitialConditionsLayer) SoilLayerBaseDepthInCM() int16 {
	return int16(s.Struct.Uint16(2) ^ 65535)
}

func (s InitialConditionsLayer) SetSoilLayerBaseDepthInCM(v int16) {
	s.Struct.SetUint16(2, uint16(v)^65535)
}

func (s InitialConditionsLayer) WaterConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0xbff0000000000000)
}

func (s InitialConditionsLayer) SetWaterConcentration(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0xbff0000000000000)
}

func (s InitialConditionsLayer) TotalNInKGperHA() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0xbff0000000000000)
}

func (s InitialConditionsLayer) SetTotalNInKGperHA(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0xbff0000000000000)
}

func (s InitialConditionsLayer) MassNH4InKGperHA() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0xbff0000000000000)
}

func (s InitialConditionsLayer) SetMassNH4InKGperHA(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0xbff0000000000000)
}

func (s InitialConditionsLayer) MassNO3InKGperHA() float64 {
	return math.Float64frombits(s.Struct.Uint64(32) ^ 0xbff0000000000000)
}

func (s InitialConditionsLayer) SetMassNO3InKGperHA(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v)^0xbff0000000000000)
}

func (s InitialConditionsLayer) ConcNH4InPPM() float64 {
	return math.Float64frombits(s.Struct.Uint64(40) ^ 0xbff0000000000000)
}

func (s InitialConditionsLayer) SetConcNH4InPPM(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v)^0xbff0000000000000)
}

func (s InitialConditionsLayer) ConcNO3InPPM() float64 {
	return math.Float64frombits(s.Struct.Uint64(48) ^ 0xbff0000000000000)
}

func (s InitialConditionsLayer) SetConcNO3InPPM(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v)^0xbff0000000000000)
}

// InitialConditionsLayer_List is a list of InitialConditionsLayer.
type InitialConditionsLayer_List struct{ capnp.List }

// NewInitialConditionsLayer creates a new list of InitialConditionsLayer.
func NewInitialConditionsLayer_List(s *capnp.Segment, sz int32) (InitialConditionsLayer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 56, PointerCount: 3}, sz)
	return InitialConditionsLayer_List{l}, err
}

func (s InitialConditionsLayer_List) At(i int) InitialConditionsLayer {
	return InitialConditionsLayer{s.List.Struct(i)}
}

func (s InitialConditionsLayer_List) Set(i int, v InitialConditionsLayer) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InitialConditionsLayer_List) String() string {
	str, _ := text.MarshalList(0xd1c0bc9f5b332a6e, s.List)
	return str
}

// InitialConditionsLayer_Future is a wrapper for a InitialConditionsLayer promised by a client call.
type InitialConditionsLayer_Future struct{ *capnp.Future }

func (p InitialConditionsLayer_Future) Struct() (InitialConditionsLayer, error) {
	s, err := p.Future.Struct()
	return InitialConditionsLayer{s}, err
}

func (p InitialConditionsLayer_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}

type PlantingEvent struct{ capnp.Struct }

// PlantingEvent_TypeID is the unique identifier for the type PlantingEvent.
const PlantingEvent_TypeID = 0xf6b17c769768d8ff

func NewPlantingEvent(s *capnp.Segment) (PlantingEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7})
	return PlantingEvent{st}, err
}

func NewRootPlantingEvent(s *capnp.Segment) (PlantingEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7})
	return PlantingEvent{st}, err
}

func ReadRootPlantingEvent(msg *capnp.Message) (PlantingEvent, error) {
	root, err := msg.Root()
	return PlantingEvent{root.Struct()}, err
}

func (s PlantingEvent) String() string {
	str, _ := text.Marshal(0xf6b17c769768d8ff, s.Struct)
	return str
}

func (s PlantingEvent) ExperimentId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PlantingEvent) HasExperimentId() bool {
	return s.Struct.HasPtr(0)
}

func (s PlantingEvent) ExperimentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PlantingEvent) SetExperimentId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PlantingEvent) TreatmentId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PlantingEvent) HasTreatmentId() bool {
	return s.Struct.HasPtr(1)
}

func (s PlantingEvent) TreatmentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PlantingEvent) SetTreatmentId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s PlantingEvent) PlantingDistribution() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s PlantingEvent) HasPlantingDistribution() bool {
	return s.Struct.HasPtr(2)
}

func (s PlantingEvent) PlantingDistributionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s PlantingEvent) SetPlantingDistribution(v string) error {
	return s.Struct.SetText(2, v)
}

func (s PlantingEvent) RowSpacingInCM() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0xbff0000000000000)
}

func (s PlantingEvent) SetRowSpacingInCM(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0xbff0000000000000)
}

func (s PlantingEvent) RowDirectionInArcDeg() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0xc0c3878000000000)
}

func (s PlantingEvent) SetRowDirectionInArcDeg(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0xc0c3878000000000)
}

func (s PlantingEvent) PlantingDepthInMM() int16 {
	return int16(s.Struct.Uint16(16) ^ 65535)
}

func (s PlantingEvent) SetPlantingDepthInMM(v int16) {
	s.Struct.SetUint16(16, uint16(v)^65535)
}

func (s PlantingEvent) PlotLayout() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s PlantingEvent) HasPlotLayout() bool {
	return s.Struct.HasPtr(3)
}

func (s PlantingEvent) PlotLayoutBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s PlantingEvent) SetPlotLayout(v string) error {
	return s.Struct.SetText(3, v)
}

func (s PlantingEvent) PlantingDate() (common.Date, error) {
	p, err := s.Struct.Ptr(4)
	return common.Date{Struct: p.Struct()}, err
}

func (s PlantingEvent) HasPlantingDate() bool {
	return s.Struct.HasPtr(4)
}

func (s PlantingEvent) SetPlantingDate(v common.Date) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewPlantingDate sets the plantingDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s PlantingEvent) NewPlantingDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

func (s PlantingEvent) PlantPopulationAtPlantingInNoPerM2() int16 {
	return int16(s.Struct.Uint16(18) ^ 65535)
}

func (s PlantingEvent) SetPlantPopulationAtPlantingInNoPerM2(v int16) {
	s.Struct.SetUint16(18, uint16(v)^65535)
}

func (s PlantingEvent) AverageEmergenceDate() (common.Date, error) {
	p, err := s.Struct.Ptr(5)
	return common.Date{Struct: p.Struct()}, err
}

func (s PlantingEvent) HasAverageEmergenceDate() bool {
	return s.Struct.HasPtr(5)
}

func (s PlantingEvent) SetAverageEmergenceDate(v common.Date) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewAverageEmergenceDate sets the averageEmergenceDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s PlantingEvent) NewAverageEmergenceDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

func (s PlantingEvent) AveragePlantPopulationAtEmergenceInNoPerM2() int16 {
	return int16(s.Struct.Uint16(20) ^ 65535)
}

func (s PlantingEvent) SetAveragePlantPopulationAtEmergenceInNoPerM2(v int16) {
	s.Struct.SetUint16(20, uint16(v)^65535)
}

func (s PlantingEvent) Notes() (string, error) {
	p, err := s.Struct.Ptr(6)
	return p.Text(), err
}

func (s PlantingEvent) HasNotes() bool {
	return s.Struct.HasPtr(6)
}

func (s PlantingEvent) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return p.TextBytes(), err
}

func (s PlantingEvent) SetNotes(v string) error {
	return s.Struct.SetText(6, v)
}

// PlantingEvent_List is a list of PlantingEvent.
type PlantingEvent_List struct{ capnp.List }

// NewPlantingEvent creates a new list of PlantingEvent.
func NewPlantingEvent_List(s *capnp.Segment, sz int32) (PlantingEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 7}, sz)
	return PlantingEvent_List{l}, err
}

func (s PlantingEvent_List) At(i int) PlantingEvent { return PlantingEvent{s.List.Struct(i)} }

func (s PlantingEvent_List) Set(i int, v PlantingEvent) error { return s.List.SetStruct(i, v.Struct) }

func (s PlantingEvent_List) String() string {
	str, _ := text.MarshalList(0xf6b17c769768d8ff, s.List)
	return str
}

// PlantingEvent_Future is a wrapper for a PlantingEvent promised by a client call.
type PlantingEvent_Future struct{ *capnp.Future }

func (p PlantingEvent_Future) Struct() (PlantingEvent, error) {
	s, err := p.Future.Struct()
	return PlantingEvent{s}, err
}

func (p PlantingEvent_Future) PlantingDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(4, nil)}
}

func (p PlantingEvent_Future) AverageEmergenceDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(5, nil)}
}

type HarvestEvent struct{ capnp.Struct }

// HarvestEvent_TypeID is the unique identifier for the type HarvestEvent.
const HarvestEvent_TypeID = 0x97eb30dbcf87911a

func NewHarvestEvent(s *capnp.Segment) (HarvestEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return HarvestEvent{st}, err
}

func NewRootHarvestEvent(s *capnp.Segment) (HarvestEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return HarvestEvent{st}, err
}

func ReadRootHarvestEvent(msg *capnp.Message) (HarvestEvent, error) {
	root, err := msg.Root()
	return HarvestEvent{root.Struct()}, err
}

func (s HarvestEvent) String() string {
	str, _ := text.Marshal(0x97eb30dbcf87911a, s.Struct)
	return str
}

func (s HarvestEvent) ExperimentId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HarvestEvent) HasExperimentId() bool {
	return s.Struct.HasPtr(0)
}

func (s HarvestEvent) ExperimentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HarvestEvent) SetExperimentId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HarvestEvent) TreatmentId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s HarvestEvent) HasTreatmentId() bool {
	return s.Struct.HasPtr(1)
}

func (s HarvestEvent) TreatmentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s HarvestEvent) SetTreatmentId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s HarvestEvent) Date() (common.Date, error) {
	p, err := s.Struct.Ptr(2)
	return common.Date{Struct: p.Struct()}, err
}

func (s HarvestEvent) HasDate() bool {
	return s.Struct.HasPtr(2)
}

func (s HarvestEvent) SetDate(v common.Date) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s HarvestEvent) NewDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s HarvestEvent) HarvestMethod() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s HarvestEvent) HasHarvestMethod() bool {
	return s.Struct.HasPtr(3)
}

func (s HarvestEvent) HarvestMethodBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s HarvestEvent) SetHarvestMethod(v string) error {
	return s.Struct.SetText(3, v)
}

func (s HarvestEvent) HarvestArea() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0xbff0000000000000)
}

func (s HarvestEvent) SetHarvestArea(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0xbff0000000000000)
}

func (s HarvestEvent) Notes() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s HarvestEvent) HasNotes() bool {
	return s.Struct.HasPtr(4)
}

func (s HarvestEvent) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s HarvestEvent) SetNotes(v string) error {
	return s.Struct.SetText(4, v)
}

func (s HarvestEvent) Comments() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s HarvestEvent) HasComments() bool {
	return s.Struct.HasPtr(5)
}

func (s HarvestEvent) CommentsBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s HarvestEvent) SetComments(v string) error {
	return s.Struct.SetText(5, v)
}

// HarvestEvent_List is a list of HarvestEvent.
type HarvestEvent_List struct{ capnp.List }

// NewHarvestEvent creates a new list of HarvestEvent.
func NewHarvestEvent_List(s *capnp.Segment, sz int32) (HarvestEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return HarvestEvent_List{l}, err
}

func (s HarvestEvent_List) At(i int) HarvestEvent { return HarvestEvent{s.List.Struct(i)} }

func (s HarvestEvent_List) Set(i int, v HarvestEvent) error { return s.List.SetStruct(i, v.Struct) }

func (s HarvestEvent_List) String() string {
	str, _ := text.MarshalList(0x97eb30dbcf87911a, s.List)
	return str
}

// HarvestEvent_Future is a wrapper for a HarvestEvent promised by a client call.
type HarvestEvent_Future struct{ *capnp.Future }

func (p HarvestEvent_Future) Struct() (HarvestEvent, error) {
	s, err := p.Future.Struct()
	return HarvestEvent{s}, err
}

func (p HarvestEvent_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}

type IrrigationEvent struct{ capnp.Struct }

// IrrigationEvent_TypeID is the unique identifier for the type IrrigationEvent.
const IrrigationEvent_TypeID = 0xcf2547b626594655

func NewIrrigationEvent(s *capnp.Segment) (IrrigationEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return IrrigationEvent{st}, err
}

func NewRootIrrigationEvent(s *capnp.Segment) (IrrigationEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return IrrigationEvent{st}, err
}

func ReadRootIrrigationEvent(msg *capnp.Message) (IrrigationEvent, error) {
	root, err := msg.Root()
	return IrrigationEvent{root.Struct()}, err
}

func (s IrrigationEvent) String() string {
	str, _ := text.Marshal(0xcf2547b626594655, s.Struct)
	return str
}

func (s IrrigationEvent) ExperimentId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IrrigationEvent) HasExperimentId() bool {
	return s.Struct.HasPtr(0)
}

func (s IrrigationEvent) ExperimentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IrrigationEvent) SetExperimentId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s IrrigationEvent) TreatmentId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IrrigationEvent) HasTreatmentId() bool {
	return s.Struct.HasPtr(1)
}

func (s IrrigationEvent) TreatmentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IrrigationEvent) SetTreatmentId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s IrrigationEvent) Date() (common.Date, error) {
	p, err := s.Struct.Ptr(2)
	return common.Date{Struct: p.Struct()}, err
}

func (s IrrigationEvent) HasDate() bool {
	return s.Struct.HasPtr(2)
}

func (s IrrigationEvent) SetDate(v common.Date) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s IrrigationEvent) NewDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s IrrigationEvent) Operation() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s IrrigationEvent) HasOperation() bool {
	return s.Struct.HasPtr(3)
}

func (s IrrigationEvent) OperationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s IrrigationEvent) SetOperation(v string) error {
	return s.Struct.SetText(3, v)
}

func (s IrrigationEvent) ApplicationDepth() int16 {
	return int16(s.Struct.Uint16(0) ^ 55537)
}

func (s IrrigationEvent) SetApplicationDepth(v int16) {
	s.Struct.SetUint16(0, uint16(v)^55537)
}

func (s IrrigationEvent) Amount() int16 {
	return int16(s.Struct.Uint16(2) ^ 65535)
}

func (s IrrigationEvent) SetAmount(v int16) {
	s.Struct.SetUint16(2, uint16(v)^65535)
}

func (s IrrigationEvent) WaterNConcentrationInPerc() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0xbff0000000000000)
}

func (s IrrigationEvent) SetWaterNConcentrationInPerc(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0xbff0000000000000)
}

func (s IrrigationEvent) Notes() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s IrrigationEvent) HasNotes() bool {
	return s.Struct.HasPtr(4)
}

func (s IrrigationEvent) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s IrrigationEvent) SetNotes(v string) error {
	return s.Struct.SetText(4, v)
}

// IrrigationEvent_List is a list of IrrigationEvent.
type IrrigationEvent_List struct{ capnp.List }

// NewIrrigationEvent creates a new list of IrrigationEvent.
func NewIrrigationEvent_List(s *capnp.Segment, sz int32) (IrrigationEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return IrrigationEvent_List{l}, err
}

func (s IrrigationEvent_List) At(i int) IrrigationEvent { return IrrigationEvent{s.List.Struct(i)} }

func (s IrrigationEvent_List) Set(i int, v IrrigationEvent) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IrrigationEvent_List) String() string {
	str, _ := text.MarshalList(0xcf2547b626594655, s.List)
	return str
}

// IrrigationEvent_Future is a wrapper for a IrrigationEvent promised by a client call.
type IrrigationEvent_Future struct{ *capnp.Future }

func (p IrrigationEvent_Future) Struct() (IrrigationEvent, error) {
	s, err := p.Future.Struct()
	return IrrigationEvent{s}, err
}

func (p IrrigationEvent_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}

type FertilizerEvent struct{ capnp.Struct }

// FertilizerEvent_TypeID is the unique identifier for the type FertilizerEvent.
const FertilizerEvent_TypeID = 0xa5df81bae928e6da

func NewFertilizerEvent(s *capnp.Segment) (FertilizerEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return FertilizerEvent{st}, err
}

func NewRootFertilizerEvent(s *capnp.Segment) (FertilizerEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return FertilizerEvent{st}, err
}

func ReadRootFertilizerEvent(msg *capnp.Message) (FertilizerEvent, error) {
	root, err := msg.Root()
	return FertilizerEvent{root.Struct()}, err
}

func (s FertilizerEvent) String() string {
	str, _ := text.Marshal(0xa5df81bae928e6da, s.Struct)
	return str
}

func (s FertilizerEvent) ExperimentId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FertilizerEvent) HasExperimentId() bool {
	return s.Struct.HasPtr(0)
}

func (s FertilizerEvent) ExperimentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FertilizerEvent) SetExperimentId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FertilizerEvent) TreatmentId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s FertilizerEvent) HasTreatmentId() bool {
	return s.Struct.HasPtr(1)
}

func (s FertilizerEvent) TreatmentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s FertilizerEvent) SetTreatmentId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s FertilizerEvent) Date() (common.Date, error) {
	p, err := s.Struct.Ptr(2)
	return common.Date{Struct: p.Struct()}, err
}

func (s FertilizerEvent) HasDate() bool {
	return s.Struct.HasPtr(2)
}

func (s FertilizerEvent) SetDate(v common.Date) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s FertilizerEvent) NewDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s FertilizerEvent) ApplicationMethod() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s FertilizerEvent) HasApplicationMethod() bool {
	return s.Struct.HasPtr(3)
}

func (s FertilizerEvent) ApplicationMethodBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s FertilizerEvent) SetApplicationMethod(v string) error {
	return s.Struct.SetText(3, v)
}

func (s FertilizerEvent) ApplicationDepthInCM() int16 {
	return int16(s.Struct.Uint16(0) ^ 65535)
}

func (s FertilizerEvent) SetApplicationDepthInCM(v int16) {
	s.Struct.SetUint16(0, uint16(v)^65535)
}

func (s FertilizerEvent) Material() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s FertilizerEvent) HasMaterial() bool {
	return s.Struct.HasPtr(4)
}

func (s FertilizerEvent) MaterialBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s FertilizerEvent) SetMaterial(v string) error {
	return s.Struct.SetText(4, v)
}

func (s FertilizerEvent) AppliedNInKGNPerHA() int16 {
	return int16(s.Struct.Uint16(2) ^ 65535)
}

func (s FertilizerEvent) SetAppliedNInKGNPerHA(v int16) {
	s.Struct.SetUint16(2, uint16(v)^65535)
}

func (s FertilizerEvent) AppliedNO3InKGNperHA() int16 {
	return int16(s.Struct.Uint16(4) ^ 65535)
}

func (s FertilizerEvent) SetAppliedNO3InKGNperHA(v int16) {
	s.Struct.SetUint16(4, uint16(v)^65535)
}

func (s FertilizerEvent) AppliedNH4InKGNperHA() int16 {
	return int16(s.Struct.Uint16(6) ^ 65535)
}

func (s FertilizerEvent) SetAppliedNH4InKGNperHA(v int16) {
	s.Struct.SetUint16(6, uint16(v)^65535)
}

func (s FertilizerEvent) Notes() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s FertilizerEvent) HasNotes() bool {
	return s.Struct.HasPtr(5)
}

func (s FertilizerEvent) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s FertilizerEvent) SetNotes(v string) error {
	return s.Struct.SetText(5, v)
}

// FertilizerEvent_List is a list of FertilizerEvent.
type FertilizerEvent_List struct{ capnp.List }

// NewFertilizerEvent creates a new list of FertilizerEvent.
func NewFertilizerEvent_List(s *capnp.Segment, sz int32) (FertilizerEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return FertilizerEvent_List{l}, err
}

func (s FertilizerEvent_List) At(i int) FertilizerEvent { return FertilizerEvent{s.List.Struct(i)} }

func (s FertilizerEvent_List) Set(i int, v FertilizerEvent) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FertilizerEvent_List) String() string {
	str, _ := text.MarshalList(0xa5df81bae928e6da, s.List)
	return str
}

// FertilizerEvent_Future is a wrapper for a FertilizerEvent promised by a client call.
type FertilizerEvent_Future struct{ *capnp.Future }

func (p FertilizerEvent_Future) Struct() (FertilizerEvent, error) {
	s, err := p.Future.Struct()
	return FertilizerEvent{s}, err
}

func (p FertilizerEvent_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}

type Residue struct{ capnp.Struct }

// Residue_TypeID is the unique identifier for the type Residue.
const Residue_TypeID = 0xe82432f4ef15a586

func NewResidue(s *capnp.Segment) (Residue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 4})
	return Residue{st}, err
}

func NewRootResidue(s *capnp.Segment) (Residue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 4})
	return Residue{st}, err
}

func ReadRootResidue(msg *capnp.Message) (Residue, error) {
	root, err := msg.Root()
	return Residue{root.Struct()}, err
}

func (s Residue) String() string {
	str, _ := text.Marshal(0xe82432f4ef15a586, s.Struct)
	return str
}

func (s Residue) ExperimentId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Residue) HasExperimentId() bool {
	return s.Struct.HasPtr(0)
}

func (s Residue) ExperimentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Residue) SetExperimentId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Residue) TreatmentId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Residue) HasTreatmentId() bool {
	return s.Struct.HasPtr(1)
}

func (s Residue) TreatmentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Residue) SetTreatmentId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Residue) InitialMeasureDate() (common.Date, error) {
	p, err := s.Struct.Ptr(2)
	return common.Date{Struct: p.Struct()}, err
}

func (s Residue) HasInitialMeasureDate() bool {
	return s.Struct.HasPtr(2)
}

func (s Residue) SetInitialMeasureDate(v common.Date) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewInitialMeasureDate sets the initialMeasureDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Residue) NewInitialMeasureDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Residue) IncorporationDepth() int16 {
	return int16(s.Struct.Uint16(0) ^ 65535)
}

func (s Residue) SetIncorporationDepth(v int16) {
	s.Struct.SetUint16(0, uint16(v)^65535)
}

func (s Residue) PercentIncorporated() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0xbff0000000000000)
}

func (s Residue) SetPercentIncorporated(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0xbff0000000000000)
}

func (s Residue) PrevCropCode() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Residue) HasPrevCropCode() bool {
	return s.Struct.HasPtr(3)
}

func (s Residue) PrevCropCodeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Residue) SetPrevCropCode(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Residue) AboveGroundWeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0xbff0000000000000)
}

func (s Residue) SetAboveGroundWeight(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0xbff0000000000000)
}

func (s Residue) AboveGroundNConcentrationInPerc() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0xbff0000000000000)
}

func (s Residue) SetAboveGroundNConcentrationInPerc(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0xbff0000000000000)
}

func (s Residue) RootWeightPreviousCrop() float64 {
	return math.Float64frombits(s.Struct.Uint64(32) ^ 0xbff0000000000000)
}

func (s Residue) SetRootWeightPreviousCrop(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v)^0xbff0000000000000)
}

// Residue_List is a list of Residue.
type Residue_List struct{ capnp.List }

// NewResidue creates a new list of Residue.
func NewResidue_List(s *capnp.Segment, sz int32) (Residue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 4}, sz)
	return Residue_List{l}, err
}

func (s Residue_List) At(i int) Residue { return Residue{s.List.Struct(i)} }

func (s Residue_List) Set(i int, v Residue) error { return s.List.SetStruct(i, v.Struct) }

func (s Residue_List) String() string {
	str, _ := text.MarshalList(0xe82432f4ef15a586, s.List)
	return str
}

// Residue_Future is a wrapper for a Residue promised by a client call.
type Residue_Future struct{ *capnp.Future }

func (p Residue_Future) Struct() (Residue, error) {
	s, err := p.Future.Struct()
	return Residue{s}, err
}

func (p Residue_Future) InitialMeasureDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}

type EnvironmentModification struct{ capnp.Struct }

// EnvironmentModification_TypeID is the unique identifier for the type EnvironmentModification.
const EnvironmentModification_TypeID = 0xb52867725b843050

func NewEnvironmentModification(s *capnp.Segment) (EnvironmentModification, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return EnvironmentModification{st}, err
}

func NewRootEnvironmentModification(s *capnp.Segment) (EnvironmentModification, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return EnvironmentModification{st}, err
}

func ReadRootEnvironmentModification(msg *capnp.Message) (EnvironmentModification, error) {
	root, err := msg.Root()
	return EnvironmentModification{root.Struct()}, err
}

func (s EnvironmentModification) String() string {
	str, _ := text.Marshal(0xb52867725b843050, s.Struct)
	return str
}

func (s EnvironmentModification) ExperimentId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s EnvironmentModification) HasExperimentId() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvironmentModification) ExperimentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s EnvironmentModification) SetExperimentId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s EnvironmentModification) TreatmentId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s EnvironmentModification) HasTreatmentId() bool {
	return s.Struct.HasPtr(1)
}

func (s EnvironmentModification) TreatmentIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s EnvironmentModification) SetTreatmentId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s EnvironmentModification) Date() (common.Date, error) {
	p, err := s.Struct.Ptr(2)
	return common.Date{Struct: p.Struct()}, err
}

func (s EnvironmentModification) HasDate() bool {
	return s.Struct.HasPtr(2)
}

func (s EnvironmentModification) SetDate(v common.Date) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s EnvironmentModification) NewDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s EnvironmentModification) CodeCO2() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s EnvironmentModification) HasCodeCO2() bool {
	return s.Struct.HasPtr(3)
}

func (s EnvironmentModification) CodeCO2Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s EnvironmentModification) SetCodeCO2(v string) error {
	return s.Struct.SetText(3, v)
}

func (s EnvironmentModification) ValueCO2() int16 {
	return int16(s.Struct.Uint16(0) ^ 65535)
}

func (s EnvironmentModification) SetValueCO2(v int16) {
	s.Struct.SetUint16(0, uint16(v)^65535)
}

func (s EnvironmentModification) Notes() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s EnvironmentModification) HasNotes() bool {
	return s.Struct.HasPtr(4)
}

func (s EnvironmentModification) NotesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s EnvironmentModification) SetNotes(v string) error {
	return s.Struct.SetText(4, v)
}

// EnvironmentModification_List is a list of EnvironmentModification.
type EnvironmentModification_List struct{ capnp.List }

// NewEnvironmentModification creates a new list of EnvironmentModification.
func NewEnvironmentModification_List(s *capnp.Segment, sz int32) (EnvironmentModification_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return EnvironmentModification_List{l}, err
}

func (s EnvironmentModification_List) At(i int) EnvironmentModification {
	return EnvironmentModification{s.List.Struct(i)}
}

func (s EnvironmentModification_List) Set(i int, v EnvironmentModification) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvironmentModification_List) String() string {
	str, _ := text.MarshalList(0xb52867725b843050, s.List)
	return str
}

// EnvironmentModification_Future is a wrapper for a EnvironmentModification promised by a client call.
type EnvironmentModification_Future struct{ *capnp.Future }

func (p EnvironmentModification_Future) Struct() (EnvironmentModification, error) {
	s, err := p.Future.Struct()
	return EnvironmentModification{s}, err
}

func (p EnvironmentModification_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}

const schema_e14a1fcaee034d63 = "x\xda\xacY\x7f\x8c\\\xd5u>\xe7\xbd\x99\x9d]{" +
	"\xbd\xb3\x937\x0e\x84\x1al\x82]a\x0b*\xd7\x8b[" +
	"@F\xeb\xf5\xcc\x9a\x1d\xd8\xd9\xdd\xf1[\xcb?\x02\x0a" +
	"og\xee\xce>\xe7\xcd}\xe3\xfb\xee\xac\xbd\x16\xaeM" +
	"\xeb&\x01\x81J\xa2\xb4\x98\x08\xd4`\x19\x11\xda A" +
	"\x15\xaa\x16\x810\xaa\xa2RD\x94\x10Q\xc5P\xa2B" +
	"\x84#H\xa15\x08\x0a\x8ep\xa7:\xf7\xcd\x9b\xf7\xde" +
	"\xecl0\x92\xff\xdb\xfd\xee\xb9\xf7\xbdy\xf7;\xdf\xf9" +
	"\xce\xbd\x1bS\xfd[\xb5?N>\x90\x02(\xedN\xf6" +
	"4\x87?93k\xb8\x7f\xf1M(\xad\xc4\xbef\xb9" +
	"\xa8\xff\xf7K\xaboy\x0b\x92\xa9\x14\xc0\xd0S\xfa\x97" +
	"\xd0xA\xa7?\x9f\xd3?\xd1\x01\x9b\x97}\xe7[?" +
	"\xfb\x8f\x8d\xff\xf5\x00\x85c$\xbc\x87b\x0a\xbd_B" +
	"cO/\xfd\xb9\xb3\xf7\xaf\x10\xb0\xf9\xcb\xea\x91\x13b" +
	"\xef\xc2\xc3\x9d\xe1i\x8a\xf9\xa0o/\x1a\xc9e\xf4'" +
	".{\x9eV\x7f\xfd7W\xbf\xfb\xcc]\xff\xf9h\xd7" +
	"\xd5o\x18\xd8\x80Fa\x80\xfe\x1c\x1d\xf8S\x0d\xb0\xf9" +
	"\xe1\xdd\xbf~*}\xe5\x89\xc7:\xc3\xe9\xdd\x8d\xa7\x07" +
	"\x7fa\xbc0\xa8^}\xf01\x8a\xfet\xef\xdf<\xf6" +
	"\xfc\x89?\xfb\xfb\xcehz\x01\xe3\xaf\x8d\x0f\x8dG\x0c" +
	"\x8a~\xd8p)zj\xe3\xb1\xaf\x89\xea\xd5OwF" +
	"')f\xf3\x97\xf7\xa1Q\xf8\xb2z\x95/\xef\xa2\x1f" +
	"\xfaO\xbd\x95\x92\xfe\xcb\x13\xcfw~F\xf51\x1e\xbe" +
	"\xe4\xabh<q\x09\xfd\xf9\xf8%\xea\x87\x9e\xf9\xe9w" +
	"\xd7x\xcf\xed~\x81\xc2\x93\x9do~\xee\x0f^7\x92" +
	"\xab\xd4gY\xa5\xde|\xe7\xf6=\x7f\xf8\x8f7\xaf\xfb" +
	"\x19Ek\x9d\xef\xf2\xee\x15\x1b\xd08w\x05\xfd\xf9\xf1" +
	"\x15\xffJ\xef\xc27\x0c}\xedo\x9f=\xf5\x0a\x85\xa7" +
	"\"\xe1j\x1f_[3\x83\xc6\xfbk\xd4\xcc5\xea\x97" +
	"~\xf3\xd1\x95\xff\xf3\xd1\xa6\xb5\xeft\xbeK\x82\xde\xe5" +
	"\xe1\xab~k<~\x15E?zU\x93\x16o\x9e\x9e" +
	"{`\xfe\xce\xa7\xfe\x97\xa2\xf5N\xbe\x9cYw\x19\x1a" +
	"\x1f\xafS\x9b\xbbN\xbdz\xcfs\x87\xb6\xfc\xc9]F" +
	"\xb3\xf33\xf6\xd1\xe2\xe7\xaf\xfe\x9d\xd1\xb7\x9e\xa2\x93\xeb" +
	"?\xd1aOs\xd6fN\xe5\xeb\xec\xa0^\xffz\xc5" +
	"\x92\xd6\x1f\x95\xad:\xaf\xdfh\xba\xb6Sd\xd2\xaaX" +
	"\x12\xad)\xc4\xd2\x98\x9e\x00H \x80\xf1.\xee\x000" +
	"\xdfA\x1d\xcd\x8fP\xc3\x0cb\x16\x09\xff\x007\x00\x98" +
	"\xef\x11\xfe)\xe1\x9a\x96E\x0d\xc0\xf8\x18o\x040\xcf" +
	"\x12\xfe\x19j\x88z\x16uD\xe3\x9cZ\xe6S\x82\x13" +
	"\x9a\x86\x99\x04f1\x81h\xa0\xf6]\x003\xa1\xe9h" +
	"\x0e\x12\x9e\xd4\xb2\x98D4Vh\xdf\x070\x07\x09_" +
	"Ex\x0ff\xb1\x07\xd1\xf8\x8a\xc2W\x11~5\xe1)" +
	"-\x8b)Dc\x9d\xf6\xe7\x00\xe6Z\xc27\x12\xde\xab" +
	"g\xb1\x17\xd1\xb8V\xfb\x10\xc0\xbc\x8e\xf0\xad\x84\xf7%" +
	"\xb2\xd8\x87h\xdc\xa4\xfd\x1a\xc0\xcc\x13>E\xf8\xb2d" +
	"\x16\x97!\x1aEm/\x809N\xf8n\xc2\x97\xf7d" +
	"q9\xa2\xb1S{\x09\xc0\xbc\x8d\xf09\xc2\xfbSY" +
	"\xecG4\x98\xf6w\x00\xe6\x1c\xe1\x92\xf0\x15\xbdY\\" +
	"\x81h\xec\xd7N\x00\x98\x92\xf0\xa3\x84\x0f\xe8Y\x1c\x00" +
	"0\x0e\xabu\x8e\x11~?\xe1\xe9D\x16\xd3\x00\xc6}" +
	"\xda\x0c\x80y/\xe1\xc7\x09\x1fLfq\x90\xb2F;" +
	"\x04`~\x8f\xf0\x1f\x10\x9e\xe9\xc9b\x86X\xa3m\x02" +
	"0\x8f\x13~R\xd3\xb0Y\x17\xee\xac\xed\xb0\x02`\x05" +
	"\xfbA\xc3~\xc04\xb7j,\xf8g\xd8s\x1b\xa2\xdc" +
	"\xfe\xb7Yau9W\xe09\xc0\"\xea\xa0\xad\xd0\x9b" +
	"M\xc0\xa6;\xe3Ik\xc6a\x98o\x0d\xc7F\xd5\x9c" +
	"\xc9\xd9it\xeb\x9ek;\x05\xae\xe7b\xc3\xc2\xb2\xb9" +
	"Ue\xb8\xc3\x92l\x8a\x89\xbcn-\xe0r\xd0p\xf9" +
	"\xa9\xb3\xcf\x034E\x83\xbb\xb3\xb3\xb9\x06\x0a6\xe1\x9a" +
	"9\x13\xa2\x83\xb4\xe0\xc8\xbcek\x0e=\x7f\x97%\x99" +
	"\xc8\xb9\\2\xbeZ\x16x\xae\x18\x0bm\x88Y\xab\xcc" +
	"LM\xba\x9c\xe5\xdcy&F\xbc\xed\xc2*\xcb\x94\xed" +
	"\xf2Ek:3\x0c\xf4\x8a\xdb\x89\x8f\xce[u\xcd\x15" +
	"\x96\xb4]>n\xd7lY\xe0\xc5\"\xc4^\xa9fs" +
	"&,\xc7\xc6C*j\xbb\x95.KWt.\xb4\x9d" +
	"\x09\x89\xb6c\xcb\x85I\xbe=\xe5\xcaEO\xca9\x96" +
	"\xa7y\xf6\xac]V\xcb\x98\x0b\x9ed5\x80\xf6NP" +
	"\xcc4;(!\xd5\x10\xe1\xfe\x94\x1d\xcb\xa3I0\xec" +
	"O\x0b\x06VsW2\xaf\x1d\xd6=\x9d\xc7,1\xcf" +
	"<9:\xcf8JJ\xe7UA:g\x9e\xde\x07P" +
	"\xfa\xb1\x8e\xa5Sa.g\x9e\x9b\x01(=\xabc\xe9" +
	"\xc50\x913?\xd9\x00P:\xa5c\xe9e\x0d3:" +
	"\xa51@\xe6\xdf\x04@\xe9E\x1dK\xafj\x88\x09\x95" +
	"\xc2\x99Wh\xf6\xcfu,\xbdA\xf9\x9b\xc8b\x12 " +
	"\xf3\xda&\x80\xd2\xab:\x96\xde\xa4\xe4Mf\xb1\x07 " +
	"\xf3\xab[\x00Jo\xe8XzG\xc3&;Xg\xc2" +
	"\xae1HsYh\x93\xb6)\x05\xb3d\x8dqHE" +
	"\xd0t\xc5\x92\x0c\x07\x9b\xf7e\xbe\xaa\xff\xe8\xff~\xf3" +
	"\x00\x00\xe2 `s\xce\xff\xa1EX\xcd\xe4\x9c\x1b." +
	"\xd2\xc2G %\x98\x15\xd9\x90\x8e\xafWvk5\xc6" +
	"\xa5\x07\x91\xed\x08\xbeh\"\xf6EG[/\xcbe\x9e" +
	"yea\xd7\xa5\xad\xbb\x9c>m\xbe\xad\x94?\xc5\xcb" +
	"\x00\xcc\x17I\xe2^\x8d*\xe5+\xb8\x0d\xc0|\x99\xf0" +
	"\xd3Q\xa5\xfcw\xa5\xa0?'\xfc\x0d\x0c\xbf\xb1\xf1\x1a" +
	"\xbe\x0e`\xbeI\xf8{\x84'\xe8;+%\x161%" +
	"N&\xd5\xa76>\xc0{\x00\xcc\x8fP\xc7\x1dJ)" +
	"{\xd4\xc76\xce\xe3K1eM\xa5\xb2H%a\x85" +
	"v\x0b\x80\xd9O\xf8\xa5J){\xb3\xd8\x0b`\xacT" +
	"x\x96\xf05J)\xfb\xb2\xd8\x07`\\\xae\x14n\x0d" +
	"\xe1\xd7(\xa5\\\x96\xc5e\x00\xc6z\xedw\x00\xe6F" +
	"\xc2\xb7(\xa5\\\x9e\xc5\xe5\x00\xc6\x0dJ\xb1\xae'<" +
	"\xaf\x94\xb2?\x8b\xfd\x00\xc6\x88\xc2\xb7\x12>\xae\x94r" +
	"E\x16W\x00\x18\x05\x85\x8f\x11>\xadi\x88\x03Y\x1c" +
	"@4J\xda>\x00s\x8a\xe0\xdb\x94Pb\x16\xd3\x88" +
	"\xc6\x1e\xf5:\xa1\x10\x0f\x0e\xf8B\xc9\x94 \xdeA\xb8" +
	"\xa3i\xa8\xdbm6\x1c\xf1\x1a\xb6d\x85\xee\xba\xd8\x14" +
	"\xccc\x96(\xcfi\x05>+,O\x8aFY6\x04" +
	"\x9b\xb0\xf4H\x90\xcd=i\xcb\x86\x84\xd5l\xa2\xdbd" +
	"\xdc\xc9mI#\x11\"\x05\xfc\xd6\xb8\xb4\x9c\xedVY" +
	"iDG\x8cgK\xe6Cqlz\xa1\x1e\xc3j\x96" +
	"\xcd\x89\x82\xe8s0\x90\xa2\xa5\x1e%]\x91sk3" +
	"6\x1fV\xda\xe1-\x0a\x84a.\xe9\x19\x91\x07\x90r" +
	"w\x19(\x0b\xb7^\xb7y\x15\x86}\xe1j\x0f\xd4\x1d" +
	"\x8bK\x1aH\xefa\x96\x88\x94\x81V\xeeMb\x9d\xf9" +
	"\xf2\xda\x11pA\x0aF\xaaj;\xf6!&F\xd3\xf3" +
	"\x8c+\x11\xbb\xba\x9di}H\xdc\xe8\xa5L\xc8F3" +
	"-\x83TD\x07\x09_\x15\xcd\xb4\xaf\xa8L##b" +
	"\xae\x89f\xda\xe5H\xe6c\x0d\xe1\xd7`[\xd0\x8c\xf5" +
	"H\x14\xbb\x86\xe0\xeb1\xd44c3R\x86\\G\xf8" +
	"V\x8cx\x92\x9b\x90<\xc9V\xc2\xc71\xe2I\x0aj" +
	"\x9dq\xc2wc\xc4\x93\xecT\xf8n\xc2+\x84\xf7%" +
	"\xfdL\xb3\x90(|\x1b\xe1sx\x91\x14\xd2\xaa\xd7\x1d" +
	"\xaa<h\xbb\xbcH\"\x19\xfa\x83\xd8\x98*\xf8iU" +
	"j\xc3\xad\xacQ\x19\xb6-'JE5\x89U&\xb0" +
	"\xc0o\xbdyb\x8a\x09}l$2\xa5=<9\xa4" +
	"\x02\xeai&\xba\x07\x8c]\xd75`\x09zh1z" +
	"L9\xae_\xd86\xb691\xa2\xd4w\x0b}\xbc\xb1" +
	"('F\x15W\xf2\x84OE9QT\\\x097'" +
	"\xe0\xc4N$\x038M\xf8\x1dQ\xf5\xbd]\xf9\xda\xf6" +
	"\xa6a\xd2\xf7\xa9\x96Z\xe6\x0e\x82\x9d('l\xb5\xcc" +
	"\x1c\xe12\xca\x89\xfdH>\xb5N\xf8\x9dQN,(" +
	"\x7f|\x90\xf0c\x18\xf1\xa9w\xa9\xd7?J\xf8\xbd\x18" +
	"\xf8T\x00\xe3nU\x0c\xbeM\xf8\xf70\xf0\xa9\x00\xc6" +
	"w\x14\x87\xee%\xfc8\xc6d\xf0\x0b\xd1\xa9Yn8" +
	"\xd2\x9e\xb7\x04\xe8!8\xac\\_\x183\xe3\xb8\xe5o" +
	"L4j\x90\x9aa\x025\xd0\x92ZS)\x83+'" +
	"\x1a\xb5\x19\xd0\xa3\xa8`-\xb21\x1ac\x02\"C\xee" +
	"\x01\x85\x01F\xe2\xcb\xae\xd3\xa8\xf1\x89\x06\xa4k\xb1\xd5" +
	"\x97(\xf9\x17D\x9b\\\xc3Y\xad~\x15Q\xe7\x9a6" +
	"u\xd6)\xea\xb4e\xa0M\x9d\xf5J6\xd6\x12\xbe1" +
	"J\x9dk\xd5\x9e\x87\xfa\x10Pg\xb3\x92\x93\xeb\x09\xcf" +
	"G\xa93\x82'b\x14\x0c\x0awQ\x19\x831\xc2\xa7" +
	"1R\xb9K\x8a#S\x84\xdf\x86\x91\xca\xbdGq!" +
	"\xa4`\xafO\x9dN\x0a\xf6\xf5\xfarb\xab\xe5+\x84" +
	"\xd7\x15u\xfa|\xea\xd4\x14E\xda\xd4\x8cP$^\x19" +
	"\xadr\x99y\x9e\xedB\x8aG6=@\x91\x8f\xbb\xca" +
	"\x9a\"\x8f\x15\x8bB\x85L\xa7=k3Q\xc8\xa5F" +
	"\xcc\x91\xb0\x0c3V\x19weH\x1f\xc1X\xc5\xe6U" +
	"\x9c\x12nUX\xb5Pc\\aWmn9\x90\xee" +
	"\xa8\xb6\x0e\xb3<\xb6\x07R\xb1\x82r\xc4[\xe0._" +
	"\xa8}\x0e\x15:\x0c\x1d\x9f\xb7\x85\xcb\xa9\x9a\x16\xdd\x8a" +
	"r\xe7i*V\xc4\x8cK\xdbn\xf9Ar\xcb\xc7u" +
	",\x9d\x8c\xb8\xe5G\xc8\xef\xfe@\xc7\xd2\x8f\"n\xf9" +
	"qr\xcb'u,=\x19q\xcbOl\x03(\xfdP" +
	"\xc7\xd2\x8fC\xb7\xfc\x14y\xe0'u,=\x1bq\xcb" +
	"\xff\xbc)t\xe5\x17C\xf6\x8f\x94\xdd\x0a\xcbMnj" +
	"O\x9e\xb7\x9c\x06\x01\xa4\xe4_\xac\x12\xefb\x96\x9cc" +
	"\xc2\x94\x96\xea\xaf.\xd4\xf2nX\xc2\xf2\x92j\xbdJ" +
	"\xf8\x9b\xd1\xcc\xf9\x95\x8a?M\xf8\xdb\xd1\xccyKQ" +
	"\xf8\x0d\xc2\xdf\x89f\xce\x19eyC+\x1cdN\xdc" +
	"\x0ac\xca\xd7\xdc\xf3\x84\xee g\xd8\xaf\x0c/\xfay" +
	"\xd3\xa7\x8e\x1eB#\xdc\xa7\xf9\x92\xbbR\x1d\x01\x84F" +
	"x\x99\xee\x1f\x0d\\\xaeZ\xfa\xd0\x08/O\xa8\xa3\x81" +
	"\xa1\xf5\xda2\x8c\x9d1\xf4'\xfd\xb3\x81\x9b\xd4\x84\x88" +
	"\xe3\xed\xf1\xcf\x06\x0a\xca9\x87\xd6v \xa5,\xef\xd0" +
	"\x1e\x7f\xa1\x0a\x0d\xd4\x95\xe7\xed\xf5=oM\x1dV\x84" +
	"\x87\x09\x83)\xdf\xf3\x1eV\x9e\xf7 \xe1\xc7\xb4\xdf\x93" +
	"\xc9K\xd8\xd74Y\xcdvz\x96\xdd\x06\x97b\xa1=" +
	"\xc9q[\x9d\xe7&^\x19g\xf3\xcc\x89\x98\x80\xf6\xd8" +
	"\x90X<f\xd1\xb3*\x0c\x0b<\xcf\xcayV\x0d\xba" +
	"\xea\xb3G\xbf\xf5/\xa7\x00\x9a\x8e\xcb\xab\x14\x81\xac\x15" +
	"\x81\xd5x\x00s\xd8<-\x0f:/\xc6G\x16\x98%" +
	"\x9c\x85\x91y\xacN\xb3Z\xbd\xc0\xf3)V\xcd\xc5C" +
	"\xacZ\xdd\xa1\xd5u69[t\xb9\x9c\xa3x\x15\xee" +
	"\xd1\xe3\xaa\xb9\xce\xd7\x91\xacV7\x19\xf7\xd0\x15c\xcc" +
	"\xae\xce\xc9T\x81\xc7\xce\x1b\x04\x9bU\x03\x9al\xe5B" +
	"\x91Y^C\xb0\xda0\xe3r\x89X]\xee\xb2y\xc5" +
	"\xab3V\x09\xa2\xfd\xe0\xf8\x11\x83\xc5y\xc3rr\x93" +
	"\xda\xa6\x9c\xcb\xcb\x8cK\xdf1\x17xjj\xaa\xb8t" +
	"\xdf\xda\xbd\xbam\xb7\x99\xeeT.\xd4\x15m\x88ZV" +
	"\xa4\xfcT\x8e\xf5\x9e\xb8)B\xff\xf4n\xa7\xaal\xa1" +
	"cMh\xbeS\xb6TE\x0aKOR\xf7]\x91\xad" +
	"\xd6q\x08?\xa8\xf2S\xf3\xf3\xb3\xa1\xe2%\xe1GU" +
	"eK\xf8\x19z\x18\x7f\x0b`\x1e#\xfc\xfe\xb6+\x02" +
	"0\xeeS\xf9\x1f\xba\x1c\xe5\x8a\x94\xcb\xa1\x14\xbd\x9f\xf0" +
	"\x87\xa2\xae\xe8A\xa5/\xc7\x09?\x19uE\x8f\xa8\x92" +
	"\xf7\x10\xe1?\xfc}%\xef\"r7\xcd\x0b\x9d\xec\xf5" +
	"\x1c\xb7\xce\xf2\xac\x8a\x82\xa9\xe9\xd58\x19\x82\xf33H" +
	"\xc7:\xb0\x8a\xedI\x8b\x97\x996\xedF\xb4\x98\xfa\xaa" +
	"\x02\xbf5J\x92E\x19\xec5fr\x04\x81\x1e\x07M" +
	"\xc2au,\xf8\x82jAA\x08\xbb\xaa\x9e\x1dve" +
	"k\xda\xc5\xf2\x95}\x91s\xa0\xa0X\xbeF\xc5\xf2\xb4" +
	"\x8e\xa5\xb7#\xc5\xf2\xad\x0d\xe19P\xbbX\x9e\xd9\x01" +
	"Pz[\xc7\xd2\xd9\xb0X\xbe\x7f\x0f@\xe9\xac\x8e\xa5" +
	"\xcf\x88\\\xa8\xc8\x959w#@\xe9#\x1dwD\xfc" +
	"v\xe6\xfc/\x00\xcc\x04m\xf0`\x9bX\x00\xc6\x0a\xb5" +
	"\xf1\xedN\xf1\xa2\xb4Tn\xab\xb1\x85\x88\xf3Y\xd4J" +
	"\x05u\xf6\x83\xd3\x80\xc3V\x8d\xb6!\xd2\x04\x1d\xa0\xc6" +
	"j\"\xe7j\xb1\xa4\x9fb\x02\xcb\x9f\x9f\xf5q#S" +
	"\xe0\xb6\xb4-'\xe7\xf2\x8a\xad\x9a\xfdq+\xb5\xc0\x16" +
	"9\xdc}1'\x1b\xc8@\xa7\x93\x0d\xea\xf4f%\x0f" +
	"\x1b\x09\xdf\x129\xc4\xbf\x01\xff!\xa6&\xc1!\xfe(" +
	">\x133\xb2\xad\x9d2J\xaa1\x0e{)%\x03\x88" +
	"\xc6\xed\xca\xe0\xb6\x1b\xddLJ\xf7e\x80)\xd9\x08\x9b" +
	"\xa6\xde\x84_\xa9\xf7+<\x94\x0d\xd50+\xd9\xa0\x9f" +
	"u'\xe1\xdfV2\xd0\xe3W\xea\xbfTx[N." +
	"\xca\xaeS\xef3n-0\x14\xd3n\x9d\xb6x\xf5\\" +
	"G\xb7\x1cFl\xb3<\x96g\xf5a\xd9\x19r\xa0u" +
	"\xae\x8d\xc1\xb6\xeb\xf1\x13k\xe9J\xcb\x99(p\xbc\xf5" +
	"\xe6:\xb5\xc5\xf1\xf3h\xcb\xf3&\xc6\xae+ \x0fF" +
	"\x17\x0fO\x0e-5\\vy\x99fC\x9a\xc7k\x8b" +
	"?29\xd4e\xa4{\x9d\xd9\xc1\xbc\xb4]i0\xa2" +
	"\xd8\xdav\xf6\xbfO\xd9\xff\x9e\x8e\xa5O#\xd9\xff\xf1" +
	"L$U\x83\xec?\xff}\x80\x1d\xb47\xfd\x11j\xf5" +
	")\xaa\xf4\x13|i\x94Z+U\xeft)\xe1k\xdb" +
	"\x15\x06\xc0\xb8Rmq\xd8\xb3\x05\xd4Z\xaf*U\xc8" +
	"\xe8\x16\xb5\x866\xa3\x861\xee\x06\xdc\xea\xe0\xee\x17\xeb" +
	"\x92m?\xf9\x8a\xe8\xd7\xf8\xbc\xa5w\xe5\x8e\xcd\xcb\xae" +
	"\xa8\xbb\x02U\xa2\xe7Y]\x97s\x11V\xd4\x99 >" +
	"\x14\xb0\x15f\xa5$\xabD\xf7\xa1.\xd8|N\xb8u" +
	"H\xe7\xdcJ\xa4A\x9bq\xe7\xd9\xcd\xc2\xc5\x06\xaf\xec" +
	"\"\xd7\x812f.Z\xc3z\x83W&:\xfc\xc5\x14" +
	"\x13\xe5\x18=\x84\xebJZ\x03\xe7\xe4\x94`\xf3\xb6;" +
	"\xdc\xf0\xe8\x91\xdd\xe8\xa0w\x9c\xc5\xf8\x07\x81\xa3\xf3L" +
	"\xe7\x8b\x0ee\xf6\xc5N\xc6\x02\xdd)(\xdd\x09\x05#" +
	"\xd0\x9d\x92:\x19k\x0bF@\x8e\xdb\xf1PL/\x02" +
	"r0\x15\x1e\xeaE\xb2\xd7\xd7\x9d\xfd\x8a\x04\xa1^\xf4" +
	"\xe8\xbe\xfd8\xaclC\xa8\x17A\x95\xe8\xd0\x8bLo" +
	"\x9f\xe2\xc6\xd0}x\x19\xc6\xfcDpR\xf7\x88z\xf0" +
	"I\xc2\x9f\xc4\xe0L\x1cq\xe8\x09\xdcK\x13\x9e\xa5\x81" +
	"\x17\xa3\x06\xe4'\xaa\x0e\x9d\"\xfc\xe5/\xcc\xb2\xe0\xa8" +
	"\x15\xf3\xb6'\x85=\xd3HGo\x84\x9a\xc2=`\xd6" +
	"\xad\xb2\x0d\xc3\xbc\xdayW&\xdc\x03y[\xb02\xfa" +
	"\xdb>\"\xd2\xe4j\xe2\xb6$\\\xde\xbf\xf4+\xc6." +
	"\xfd\xea\x8e+\xc7\xad\x05\x17\xf4\x86\xecr\xf8\x9b\xef\xae" +
	"\x96*`\xca\xad\xeb\x0dG1nD\x064)\xf0\x09" +
	"w\x8a\x09\xbd\xb8)z(8\xcf\x84Ue\xa3Xc" +
	"\xa2\xcax\x99-\xb5n+p*\xd1Z\xbf\xbd\xfch" +
	"0\xb3\xdb\xfa\x17d\x9f\xa7\x05\x1bV\x1f_v^\x80" +
	"\x93\x85~\x9b\xb6\xeel\x94\xc3\xef+\xd2t\xbb\x00\xdf" +
	"\x16\xbd\x00o\xf7\xb8\xe7T\x11\xfb\x8c\xf0^-\xd2\xe3" +
	"&5*\xaa\xbd\xd4\xc4e\xb5H\x8f\x9b\xd16\xc4\xda" +
	"\xd3\xa0\xc7]\xa9\xba\xcaK\x09_\x1b\xbd\xd7\xb9R\xb5" +
	"\xb3\xed\x1bpl]\xeb\\\xab\xe0\xf0\x9a\xa6\x0f}\x0a" +
	"\xdf\xa0\xf0-\x84\x8f\xa9.\x17\xfd\xda9\xaa.\xd2\xc3" +
	"\x8b\xf1\xe5\x9a\x7f\x01^Txx1\xde\xaf\xfbM\xee" +
	"N\xb5\xcen\xc2+\xaa\xc9M\xa8&w\xc8\xd2\x94\xe0" +
	"\x867\xe3\x03I\xffbg\xbf\xf6L\xac\x99M\xf7\xf8" +
	"M\xeeau\xb1s\x94\xf0{\xdbM.\xa2q\xb7\xf6" +
	":y}\xc2\x1fR7\xe0\xbd\xfe\x0d\xf8\x83\xaa\xf9m" +
	"\xdf\x8c\x7f\xfeI\xe7\x11\xb5\xef\x91\xbc:\xd0\xb2\xd3\xe8" +
	"\xfb\xe9B%\xd2\xc5v\x8c\xe5\xad\xd5\xd2\xf2\x98\xec\xde" +
	"6xvM\x11\x11]nJK\xc8|j\x09\x0f\x11" +
	"\xc6\x8d\xf2J\xde\x92\xd8\xb5Z\xb4\\6\xba|D\x1d" +
	"\x96c\x05\x114D\xa2n\xeb^\x04\x99X4\x16\x99" +
	"\xe7\xf7\xe4\xe1\xa1idZ\xe7P\x98\xfd\x96d4\x88" +
	"N8\xc8Z\xa7d:\xe3\xd2r\x82\x832\xdffv" +
	"\xac\xd3*\x859\x0c\x8c\xe8\xb0\x1f\xd2\xedI\x8c{\xb6" +
	"\\\x18O\xc7\xc7\xb9:\x17\x9e\x9c\xd5\xb69n\xf9\x1b" +
	"\xde\xa4\xd8\xd1:2\xd6\x99\xd7\x8e\x8a\xa7\xf2\xff\x07\x00" +
	"\x00\xff\xff\xe3dh\x11"

func init() {
	schemas.Register(schema_e14a1fcaee034d63,
		0x86836f1366e5f73f,
		0x97eb30dbcf87911a,
		0x9d795a72a27f67d7,
		0xa5df81bae928e6da,
		0xa7a2210fb1e289f2,
		0xab7ea2bfa7965af8,
		0xb52867725b843050,
		0xbfa2d703516408b8,
		0xc158bd732092cde5,
		0xcf2547b626594655,
		0xd1c0bc9f5b332a6e,
		0xe82432f4ef15a586,
		0xf6b17c769768d8ff,
		0xff1381363c7abd06)
}
