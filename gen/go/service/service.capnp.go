// Code generated by capnpc-go. DO NOT EDIT.

package service

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
)

type Admin capnp.Client

// Admin_TypeID is the unique identifier for the type Admin.
const Admin_TypeID = 0xfec1f88b198df649

func (c Admin) Heartbeat(ctx context.Context, params func(Admin_heartbeat_Params) error) (Admin_heartbeat_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      0,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "heartbeat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_heartbeat_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_heartbeat_Results_Future{Future: ans.Future()}, release

}

func (c Admin) SetTimeout(ctx context.Context, params func(Admin_setTimeout_Params) error) (Admin_setTimeout_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      1,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "setTimeout",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_setTimeout_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_setTimeout_Results_Future{Future: ans.Future()}, release

}

func (c Admin) Stop(ctx context.Context, params func(Admin_stop_Params) error) (Admin_stop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      2,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_stop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_stop_Results_Future{Future: ans.Future()}, release

}

func (c Admin) Identities(ctx context.Context, params func(Admin_identities_Params) error) (Admin_identities_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      3,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "identities",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_identities_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_identities_Results_Future{Future: ans.Future()}, release

}

func (c Admin) UpdateIdentity(ctx context.Context, params func(Admin_updateIdentity_Params) error) (Admin_updateIdentity_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      4,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "updateIdentity",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_updateIdentity_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_updateIdentity_Results_Future{Future: ans.Future()}, release

}

func (c Admin) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Admin) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Admin) String() string {
	return "Admin(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Admin) AddRef() Admin {
	return Admin(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Admin) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Admin) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Admin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Admin) DecodeFromPtr(p capnp.Ptr) Admin {
	return Admin(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Admin) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Admin) IsSame(other Admin) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Admin) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Admin) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Admin_Server is a Admin with a local implementation.
type Admin_Server interface {
	Heartbeat(context.Context, Admin_heartbeat) error

	SetTimeout(context.Context, Admin_setTimeout) error

	Stop(context.Context, Admin_stop) error

	Identities(context.Context, Admin_identities) error

	UpdateIdentity(context.Context, Admin_updateIdentity) error

	Info(context.Context, common.Identifiable_info) error
}

// Admin_NewServer creates a new Server from an implementation of Admin_Server.
func Admin_NewServer(s Admin_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Admin_Methods(nil, s), s, c)
}

// Admin_ServerToClient creates a new Client from an implementation of Admin_Server.
// The caller is responsible for calling Release on the returned Client.
func Admin_ServerToClient(s Admin_Server) Admin {
	return Admin(capnp.NewClient(Admin_NewServer(s)))
}

// Admin_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Admin_Methods(methods []server.Method, s Admin_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      0,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "heartbeat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Heartbeat(ctx, Admin_heartbeat{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      1,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "setTimeout",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetTimeout(ctx, Admin_setTimeout{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      2,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Admin_stop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      3,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "identities",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Identities(ctx, Admin_identities{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      4,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "updateIdentity",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.UpdateIdentity(ctx, Admin_updateIdentity{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Admin_heartbeat holds the state for a server call to Admin.heartbeat.
// See server.Call for documentation.
type Admin_heartbeat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_heartbeat) Args() Admin_heartbeat_Params {
	return Admin_heartbeat_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_heartbeat) AllocResults() (Admin_heartbeat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results(r), err
}

// Admin_setTimeout holds the state for a server call to Admin.setTimeout.
// See server.Call for documentation.
type Admin_setTimeout struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_setTimeout) Args() Admin_setTimeout_Params {
	return Admin_setTimeout_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_setTimeout) AllocResults() (Admin_setTimeout_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results(r), err
}

// Admin_stop holds the state for a server call to Admin.stop.
// See server.Call for documentation.
type Admin_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_stop) Args() Admin_stop_Params {
	return Admin_stop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_stop) AllocResults() (Admin_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results(r), err
}

// Admin_identities holds the state for a server call to Admin.identities.
// See server.Call for documentation.
type Admin_identities struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_identities) Args() Admin_identities_Params {
	return Admin_identities_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_identities) AllocResults() (Admin_identities_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_identities_Results(r), err
}

// Admin_updateIdentity holds the state for a server call to Admin.updateIdentity.
// See server.Call for documentation.
type Admin_updateIdentity struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_updateIdentity) Args() Admin_updateIdentity_Params {
	return Admin_updateIdentity_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_updateIdentity) AllocResults() (Admin_updateIdentity_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results(r), err
}

// Admin_List is a list of Admin.
type Admin_List = capnp.CapList[Admin]

// NewAdmin_List creates a new list of Admin.
func NewAdmin_List(s *capnp.Segment, sz int32) (Admin_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Admin](l), err
}

type Admin_heartbeat_Params capnp.Struct

// Admin_heartbeat_Params_TypeID is the unique identifier for the type Admin_heartbeat_Params.
const Admin_heartbeat_Params_TypeID = 0xd627f31bdae7f234

func NewAdmin_heartbeat_Params(s *capnp.Segment) (Admin_heartbeat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Params(st), err
}

func NewRootAdmin_heartbeat_Params(s *capnp.Segment) (Admin_heartbeat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Params(st), err
}

func ReadRootAdmin_heartbeat_Params(msg *capnp.Message) (Admin_heartbeat_Params, error) {
	root, err := msg.Root()
	return Admin_heartbeat_Params(root.Struct()), err
}

func (s Admin_heartbeat_Params) String() string {
	str, _ := text.Marshal(0xd627f31bdae7f234, capnp.Struct(s))
	return str
}

func (s Admin_heartbeat_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_heartbeat_Params) DecodeFromPtr(p capnp.Ptr) Admin_heartbeat_Params {
	return Admin_heartbeat_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_heartbeat_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_heartbeat_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_heartbeat_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_heartbeat_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_heartbeat_Params_List is a list of Admin_heartbeat_Params.
type Admin_heartbeat_Params_List = capnp.StructList[Admin_heartbeat_Params]

// NewAdmin_heartbeat_Params creates a new list of Admin_heartbeat_Params.
func NewAdmin_heartbeat_Params_List(s *capnp.Segment, sz int32) (Admin_heartbeat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_heartbeat_Params](l), err
}

// Admin_heartbeat_Params_Future is a wrapper for a Admin_heartbeat_Params promised by a client call.
type Admin_heartbeat_Params_Future struct{ *capnp.Future }

func (f Admin_heartbeat_Params_Future) Struct() (Admin_heartbeat_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_heartbeat_Params(p.Struct()), err
}

type Admin_heartbeat_Results capnp.Struct

// Admin_heartbeat_Results_TypeID is the unique identifier for the type Admin_heartbeat_Results.
const Admin_heartbeat_Results_TypeID = 0xe01c2290ae549759

func NewAdmin_heartbeat_Results(s *capnp.Segment) (Admin_heartbeat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results(st), err
}

func NewRootAdmin_heartbeat_Results(s *capnp.Segment) (Admin_heartbeat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results(st), err
}

func ReadRootAdmin_heartbeat_Results(msg *capnp.Message) (Admin_heartbeat_Results, error) {
	root, err := msg.Root()
	return Admin_heartbeat_Results(root.Struct()), err
}

func (s Admin_heartbeat_Results) String() string {
	str, _ := text.Marshal(0xe01c2290ae549759, capnp.Struct(s))
	return str
}

func (s Admin_heartbeat_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_heartbeat_Results) DecodeFromPtr(p capnp.Ptr) Admin_heartbeat_Results {
	return Admin_heartbeat_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_heartbeat_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_heartbeat_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_heartbeat_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_heartbeat_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_heartbeat_Results_List is a list of Admin_heartbeat_Results.
type Admin_heartbeat_Results_List = capnp.StructList[Admin_heartbeat_Results]

// NewAdmin_heartbeat_Results creates a new list of Admin_heartbeat_Results.
func NewAdmin_heartbeat_Results_List(s *capnp.Segment, sz int32) (Admin_heartbeat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_heartbeat_Results](l), err
}

// Admin_heartbeat_Results_Future is a wrapper for a Admin_heartbeat_Results promised by a client call.
type Admin_heartbeat_Results_Future struct{ *capnp.Future }

func (f Admin_heartbeat_Results_Future) Struct() (Admin_heartbeat_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_heartbeat_Results(p.Struct()), err
}

type Admin_setTimeout_Params capnp.Struct

// Admin_setTimeout_Params_TypeID is the unique identifier for the type Admin_setTimeout_Params.
const Admin_setTimeout_Params_TypeID = 0x9abf358a691110fd

func NewAdmin_setTimeout_Params(s *capnp.Segment) (Admin_setTimeout_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_setTimeout_Params(st), err
}

func NewRootAdmin_setTimeout_Params(s *capnp.Segment) (Admin_setTimeout_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_setTimeout_Params(st), err
}

func ReadRootAdmin_setTimeout_Params(msg *capnp.Message) (Admin_setTimeout_Params, error) {
	root, err := msg.Root()
	return Admin_setTimeout_Params(root.Struct()), err
}

func (s Admin_setTimeout_Params) String() string {
	str, _ := text.Marshal(0x9abf358a691110fd, capnp.Struct(s))
	return str
}

func (s Admin_setTimeout_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_setTimeout_Params) DecodeFromPtr(p capnp.Ptr) Admin_setTimeout_Params {
	return Admin_setTimeout_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_setTimeout_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_setTimeout_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_setTimeout_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_setTimeout_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_setTimeout_Params) Seconds() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Admin_setTimeout_Params) SetSeconds(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Admin_setTimeout_Params_List is a list of Admin_setTimeout_Params.
type Admin_setTimeout_Params_List = capnp.StructList[Admin_setTimeout_Params]

// NewAdmin_setTimeout_Params creates a new list of Admin_setTimeout_Params.
func NewAdmin_setTimeout_Params_List(s *capnp.Segment, sz int32) (Admin_setTimeout_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Admin_setTimeout_Params](l), err
}

// Admin_setTimeout_Params_Future is a wrapper for a Admin_setTimeout_Params promised by a client call.
type Admin_setTimeout_Params_Future struct{ *capnp.Future }

func (f Admin_setTimeout_Params_Future) Struct() (Admin_setTimeout_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_setTimeout_Params(p.Struct()), err
}

type Admin_setTimeout_Results capnp.Struct

// Admin_setTimeout_Results_TypeID is the unique identifier for the type Admin_setTimeout_Results.
const Admin_setTimeout_Results_TypeID = 0xd6fd194a1ac74bc1

func NewAdmin_setTimeout_Results(s *capnp.Segment) (Admin_setTimeout_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results(st), err
}

func NewRootAdmin_setTimeout_Results(s *capnp.Segment) (Admin_setTimeout_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results(st), err
}

func ReadRootAdmin_setTimeout_Results(msg *capnp.Message) (Admin_setTimeout_Results, error) {
	root, err := msg.Root()
	return Admin_setTimeout_Results(root.Struct()), err
}

func (s Admin_setTimeout_Results) String() string {
	str, _ := text.Marshal(0xd6fd194a1ac74bc1, capnp.Struct(s))
	return str
}

func (s Admin_setTimeout_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_setTimeout_Results) DecodeFromPtr(p capnp.Ptr) Admin_setTimeout_Results {
	return Admin_setTimeout_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_setTimeout_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_setTimeout_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_setTimeout_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_setTimeout_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_setTimeout_Results_List is a list of Admin_setTimeout_Results.
type Admin_setTimeout_Results_List = capnp.StructList[Admin_setTimeout_Results]

// NewAdmin_setTimeout_Results creates a new list of Admin_setTimeout_Results.
func NewAdmin_setTimeout_Results_List(s *capnp.Segment, sz int32) (Admin_setTimeout_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_setTimeout_Results](l), err
}

// Admin_setTimeout_Results_Future is a wrapper for a Admin_setTimeout_Results promised by a client call.
type Admin_setTimeout_Results_Future struct{ *capnp.Future }

func (f Admin_setTimeout_Results_Future) Struct() (Admin_setTimeout_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_setTimeout_Results(p.Struct()), err
}

type Admin_stop_Params capnp.Struct

// Admin_stop_Params_TypeID is the unique identifier for the type Admin_stop_Params.
const Admin_stop_Params_TypeID = 0xddc3d3cd37ef5b78

func NewAdmin_stop_Params(s *capnp.Segment) (Admin_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Params(st), err
}

func NewRootAdmin_stop_Params(s *capnp.Segment) (Admin_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Params(st), err
}

func ReadRootAdmin_stop_Params(msg *capnp.Message) (Admin_stop_Params, error) {
	root, err := msg.Root()
	return Admin_stop_Params(root.Struct()), err
}

func (s Admin_stop_Params) String() string {
	str, _ := text.Marshal(0xddc3d3cd37ef5b78, capnp.Struct(s))
	return str
}

func (s Admin_stop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_stop_Params) DecodeFromPtr(p capnp.Ptr) Admin_stop_Params {
	return Admin_stop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_stop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_stop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_stop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_stop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_stop_Params_List is a list of Admin_stop_Params.
type Admin_stop_Params_List = capnp.StructList[Admin_stop_Params]

// NewAdmin_stop_Params creates a new list of Admin_stop_Params.
func NewAdmin_stop_Params_List(s *capnp.Segment, sz int32) (Admin_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_stop_Params](l), err
}

// Admin_stop_Params_Future is a wrapper for a Admin_stop_Params promised by a client call.
type Admin_stop_Params_Future struct{ *capnp.Future }

func (f Admin_stop_Params_Future) Struct() (Admin_stop_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_stop_Params(p.Struct()), err
}

type Admin_stop_Results capnp.Struct

// Admin_stop_Results_TypeID is the unique identifier for the type Admin_stop_Results.
const Admin_stop_Results_TypeID = 0xce2a1a063e759787

func NewAdmin_stop_Results(s *capnp.Segment) (Admin_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results(st), err
}

func NewRootAdmin_stop_Results(s *capnp.Segment) (Admin_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results(st), err
}

func ReadRootAdmin_stop_Results(msg *capnp.Message) (Admin_stop_Results, error) {
	root, err := msg.Root()
	return Admin_stop_Results(root.Struct()), err
}

func (s Admin_stop_Results) String() string {
	str, _ := text.Marshal(0xce2a1a063e759787, capnp.Struct(s))
	return str
}

func (s Admin_stop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_stop_Results) DecodeFromPtr(p capnp.Ptr) Admin_stop_Results {
	return Admin_stop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_stop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_stop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_stop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_stop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_stop_Results_List is a list of Admin_stop_Results.
type Admin_stop_Results_List = capnp.StructList[Admin_stop_Results]

// NewAdmin_stop_Results creates a new list of Admin_stop_Results.
func NewAdmin_stop_Results_List(s *capnp.Segment, sz int32) (Admin_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_stop_Results](l), err
}

// Admin_stop_Results_Future is a wrapper for a Admin_stop_Results promised by a client call.
type Admin_stop_Results_Future struct{ *capnp.Future }

func (f Admin_stop_Results_Future) Struct() (Admin_stop_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_stop_Results(p.Struct()), err
}

type Admin_identities_Params capnp.Struct

// Admin_identities_Params_TypeID is the unique identifier for the type Admin_identities_Params.
const Admin_identities_Params_TypeID = 0xff4271628d295896

func NewAdmin_identities_Params(s *capnp.Segment) (Admin_identities_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_identities_Params(st), err
}

func NewRootAdmin_identities_Params(s *capnp.Segment) (Admin_identities_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_identities_Params(st), err
}

func ReadRootAdmin_identities_Params(msg *capnp.Message) (Admin_identities_Params, error) {
	root, err := msg.Root()
	return Admin_identities_Params(root.Struct()), err
}

func (s Admin_identities_Params) String() string {
	str, _ := text.Marshal(0xff4271628d295896, capnp.Struct(s))
	return str
}

func (s Admin_identities_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_identities_Params) DecodeFromPtr(p capnp.Ptr) Admin_identities_Params {
	return Admin_identities_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_identities_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_identities_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_identities_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_identities_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_identities_Params_List is a list of Admin_identities_Params.
type Admin_identities_Params_List = capnp.StructList[Admin_identities_Params]

// NewAdmin_identities_Params creates a new list of Admin_identities_Params.
func NewAdmin_identities_Params_List(s *capnp.Segment, sz int32) (Admin_identities_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_identities_Params](l), err
}

// Admin_identities_Params_Future is a wrapper for a Admin_identities_Params promised by a client call.
type Admin_identities_Params_Future struct{ *capnp.Future }

func (f Admin_identities_Params_Future) Struct() (Admin_identities_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_identities_Params(p.Struct()), err
}

type Admin_identities_Results capnp.Struct

// Admin_identities_Results_TypeID is the unique identifier for the type Admin_identities_Results.
const Admin_identities_Results_TypeID = 0xf5423d8578dbb398

func NewAdmin_identities_Results(s *capnp.Segment) (Admin_identities_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_identities_Results(st), err
}

func NewRootAdmin_identities_Results(s *capnp.Segment) (Admin_identities_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_identities_Results(st), err
}

func ReadRootAdmin_identities_Results(msg *capnp.Message) (Admin_identities_Results, error) {
	root, err := msg.Root()
	return Admin_identities_Results(root.Struct()), err
}

func (s Admin_identities_Results) String() string {
	str, _ := text.Marshal(0xf5423d8578dbb398, capnp.Struct(s))
	return str
}

func (s Admin_identities_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_identities_Results) DecodeFromPtr(p capnp.Ptr) Admin_identities_Results {
	return Admin_identities_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_identities_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_identities_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_identities_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_identities_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_identities_Results) Infos() (common.IdInformation_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation_List(p.List()), err
}

func (s Admin_identities_Results) HasInfos() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_identities_Results) SetInfos(v common.IdInformation_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInfos sets the infos field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Admin_identities_Results) NewInfos(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Admin_identities_Results_List is a list of Admin_identities_Results.
type Admin_identities_Results_List = capnp.StructList[Admin_identities_Results]

// NewAdmin_identities_Results creates a new list of Admin_identities_Results.
func NewAdmin_identities_Results_List(s *capnp.Segment, sz int32) (Admin_identities_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Admin_identities_Results](l), err
}

// Admin_identities_Results_Future is a wrapper for a Admin_identities_Results promised by a client call.
type Admin_identities_Results_Future struct{ *capnp.Future }

func (f Admin_identities_Results_Future) Struct() (Admin_identities_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_identities_Results(p.Struct()), err
}

type Admin_updateIdentity_Params capnp.Struct

// Admin_updateIdentity_Params_TypeID is the unique identifier for the type Admin_updateIdentity_Params.
const Admin_updateIdentity_Params_TypeID = 0xdc8472f9b668ba83

func NewAdmin_updateIdentity_Params(s *capnp.Segment) (Admin_updateIdentity_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_updateIdentity_Params(st), err
}

func NewRootAdmin_updateIdentity_Params(s *capnp.Segment) (Admin_updateIdentity_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_updateIdentity_Params(st), err
}

func ReadRootAdmin_updateIdentity_Params(msg *capnp.Message) (Admin_updateIdentity_Params, error) {
	root, err := msg.Root()
	return Admin_updateIdentity_Params(root.Struct()), err
}

func (s Admin_updateIdentity_Params) String() string {
	str, _ := text.Marshal(0xdc8472f9b668ba83, capnp.Struct(s))
	return str
}

func (s Admin_updateIdentity_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_updateIdentity_Params) DecodeFromPtr(p capnp.Ptr) Admin_updateIdentity_Params {
	return Admin_updateIdentity_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_updateIdentity_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_updateIdentity_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_updateIdentity_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_updateIdentity_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_updateIdentity_Params) OldId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Admin_updateIdentity_Params) HasOldId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_updateIdentity_Params) OldIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Admin_updateIdentity_Params) SetOldId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Admin_updateIdentity_Params) NewInfo() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.IdInformation(p.Struct()), err
}

func (s Admin_updateIdentity_Params) HasNewInfo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Admin_updateIdentity_Params) SetNewInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewNewInfo sets the newInfo field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Admin_updateIdentity_Params) NewNewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Admin_updateIdentity_Params_List is a list of Admin_updateIdentity_Params.
type Admin_updateIdentity_Params_List = capnp.StructList[Admin_updateIdentity_Params]

// NewAdmin_updateIdentity_Params creates a new list of Admin_updateIdentity_Params.
func NewAdmin_updateIdentity_Params_List(s *capnp.Segment, sz int32) (Admin_updateIdentity_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Admin_updateIdentity_Params](l), err
}

// Admin_updateIdentity_Params_Future is a wrapper for a Admin_updateIdentity_Params promised by a client call.
type Admin_updateIdentity_Params_Future struct{ *capnp.Future }

func (f Admin_updateIdentity_Params_Future) Struct() (Admin_updateIdentity_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_updateIdentity_Params(p.Struct()), err
}
func (p Admin_updateIdentity_Params_Future) NewInfo() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(1, nil)}
}

type Admin_updateIdentity_Results capnp.Struct

// Admin_updateIdentity_Results_TypeID is the unique identifier for the type Admin_updateIdentity_Results.
const Admin_updateIdentity_Results_TypeID = 0xb15e79db08e2ab2c

func NewAdmin_updateIdentity_Results(s *capnp.Segment) (Admin_updateIdentity_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results(st), err
}

func NewRootAdmin_updateIdentity_Results(s *capnp.Segment) (Admin_updateIdentity_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results(st), err
}

func ReadRootAdmin_updateIdentity_Results(msg *capnp.Message) (Admin_updateIdentity_Results, error) {
	root, err := msg.Root()
	return Admin_updateIdentity_Results(root.Struct()), err
}

func (s Admin_updateIdentity_Results) String() string {
	str, _ := text.Marshal(0xb15e79db08e2ab2c, capnp.Struct(s))
	return str
}

func (s Admin_updateIdentity_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_updateIdentity_Results) DecodeFromPtr(p capnp.Ptr) Admin_updateIdentity_Results {
	return Admin_updateIdentity_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_updateIdentity_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_updateIdentity_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_updateIdentity_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_updateIdentity_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_updateIdentity_Results_List is a list of Admin_updateIdentity_Results.
type Admin_updateIdentity_Results_List = capnp.StructList[Admin_updateIdentity_Results]

// NewAdmin_updateIdentity_Results creates a new list of Admin_updateIdentity_Results.
func NewAdmin_updateIdentity_Results_List(s *capnp.Segment, sz int32) (Admin_updateIdentity_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_updateIdentity_Results](l), err
}

// Admin_updateIdentity_Results_Future is a wrapper for a Admin_updateIdentity_Results promised by a client call.
type Admin_updateIdentity_Results_Future struct{ *capnp.Future }

func (f Admin_updateIdentity_Results_Future) Struct() (Admin_updateIdentity_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_updateIdentity_Results(p.Struct()), err
}

type SimpleFactory capnp.Client

// SimpleFactory_TypeID is the unique identifier for the type SimpleFactory.
const SimpleFactory_TypeID = 0xaba5829222c213cb

func (c SimpleFactory) Create(ctx context.Context, params func(SimpleFactory_create_Params) error) (SimpleFactory_create_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaba5829222c213cb,
			MethodID:      0,
			InterfaceName: "service.capnp:SimpleFactory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SimpleFactory_create_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SimpleFactory_create_Results_Future{Future: ans.Future()}, release

}

func (c SimpleFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c SimpleFactory) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SimpleFactory) String() string {
	return "SimpleFactory(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SimpleFactory) AddRef() SimpleFactory {
	return SimpleFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SimpleFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SimpleFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SimpleFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SimpleFactory) DecodeFromPtr(p capnp.Ptr) SimpleFactory {
	return SimpleFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SimpleFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SimpleFactory) IsSame(other SimpleFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SimpleFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SimpleFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A SimpleFactory_Server is a SimpleFactory with a local implementation.
type SimpleFactory_Server interface {
	Create(context.Context, SimpleFactory_create) error

	Info(context.Context, common.Identifiable_info) error
}

// SimpleFactory_NewServer creates a new Server from an implementation of SimpleFactory_Server.
func SimpleFactory_NewServer(s SimpleFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SimpleFactory_Methods(nil, s), s, c)
}

// SimpleFactory_ServerToClient creates a new Client from an implementation of SimpleFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func SimpleFactory_ServerToClient(s SimpleFactory_Server) SimpleFactory {
	return SimpleFactory(capnp.NewClient(SimpleFactory_NewServer(s)))
}

// SimpleFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SimpleFactory_Methods(methods []server.Method, s SimpleFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaba5829222c213cb,
			MethodID:      0,
			InterfaceName: "service.capnp:SimpleFactory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, SimpleFactory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// SimpleFactory_create holds the state for a server call to SimpleFactory.create.
// See server.Call for documentation.
type SimpleFactory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SimpleFactory_create) Args() SimpleFactory_create_Params {
	return SimpleFactory_create_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SimpleFactory_create) AllocResults() (SimpleFactory_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleFactory_create_Results(r), err
}

// SimpleFactory_List is a list of SimpleFactory.
type SimpleFactory_List = capnp.CapList[SimpleFactory]

// NewSimpleFactory_List creates a new list of SimpleFactory.
func NewSimpleFactory_List(s *capnp.Segment, sz int32) (SimpleFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SimpleFactory](l), err
}

type SimpleFactory_create_Params capnp.Struct

// SimpleFactory_create_Params_TypeID is the unique identifier for the type SimpleFactory_create_Params.
const SimpleFactory_create_Params_TypeID = 0xa8296fdc60dcb6dd

func NewSimpleFactory_create_Params(s *capnp.Segment) (SimpleFactory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SimpleFactory_create_Params(st), err
}

func NewRootSimpleFactory_create_Params(s *capnp.Segment) (SimpleFactory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SimpleFactory_create_Params(st), err
}

func ReadRootSimpleFactory_create_Params(msg *capnp.Message) (SimpleFactory_create_Params, error) {
	root, err := msg.Root()
	return SimpleFactory_create_Params(root.Struct()), err
}

func (s SimpleFactory_create_Params) String() string {
	str, _ := text.Marshal(0xa8296fdc60dcb6dd, capnp.Struct(s))
	return str
}

func (s SimpleFactory_create_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimpleFactory_create_Params) DecodeFromPtr(p capnp.Ptr) SimpleFactory_create_Params {
	return SimpleFactory_create_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimpleFactory_create_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimpleFactory_create_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimpleFactory_create_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimpleFactory_create_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SimpleFactory_create_Params_List is a list of SimpleFactory_create_Params.
type SimpleFactory_create_Params_List = capnp.StructList[SimpleFactory_create_Params]

// NewSimpleFactory_create_Params creates a new list of SimpleFactory_create_Params.
func NewSimpleFactory_create_Params_List(s *capnp.Segment, sz int32) (SimpleFactory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SimpleFactory_create_Params](l), err
}

// SimpleFactory_create_Params_Future is a wrapper for a SimpleFactory_create_Params promised by a client call.
type SimpleFactory_create_Params_Future struct{ *capnp.Future }

func (f SimpleFactory_create_Params_Future) Struct() (SimpleFactory_create_Params, error) {
	p, err := f.Future.Ptr()
	return SimpleFactory_create_Params(p.Struct()), err
}

type SimpleFactory_create_Results capnp.Struct

// SimpleFactory_create_Results_TypeID is the unique identifier for the type SimpleFactory_create_Results.
const SimpleFactory_create_Results_TypeID = 0x89a33828e0de1eaa

func NewSimpleFactory_create_Results(s *capnp.Segment) (SimpleFactory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleFactory_create_Results(st), err
}

func NewRootSimpleFactory_create_Results(s *capnp.Segment) (SimpleFactory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleFactory_create_Results(st), err
}

func ReadRootSimpleFactory_create_Results(msg *capnp.Message) (SimpleFactory_create_Results, error) {
	root, err := msg.Root()
	return SimpleFactory_create_Results(root.Struct()), err
}

func (s SimpleFactory_create_Results) String() string {
	str, _ := text.Marshal(0x89a33828e0de1eaa, capnp.Struct(s))
	return str
}

func (s SimpleFactory_create_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimpleFactory_create_Results) DecodeFromPtr(p capnp.Ptr) SimpleFactory_create_Results {
	return SimpleFactory_create_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimpleFactory_create_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimpleFactory_create_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimpleFactory_create_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimpleFactory_create_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SimpleFactory_create_Results) Caps() (common.Identifiable_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Identifiable_List(p.List()), err
}

func (s SimpleFactory_create_Results) HasCaps() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SimpleFactory_create_Results) SetCaps(v common.Identifiable_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCaps sets the caps field to a newly
// allocated common.Identifiable_List, preferring placement in s's segment.
func (s SimpleFactory_create_Results) NewCaps(n int32) (common.Identifiable_List, error) {
	l, err := common.NewIdentifiable_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Identifiable_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SimpleFactory_create_Results_List is a list of SimpleFactory_create_Results.
type SimpleFactory_create_Results_List = capnp.StructList[SimpleFactory_create_Results]

// NewSimpleFactory_create_Results creates a new list of SimpleFactory_create_Results.
func NewSimpleFactory_create_Results_List(s *capnp.Segment, sz int32) (SimpleFactory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SimpleFactory_create_Results](l), err
}

// SimpleFactory_create_Results_Future is a wrapper for a SimpleFactory_create_Results promised by a client call.
type SimpleFactory_create_Results_Future struct{ *capnp.Future }

func (f SimpleFactory_create_Results_Future) Struct() (SimpleFactory_create_Results, error) {
	p, err := f.Future.Ptr()
	return SimpleFactory_create_Results(p.Struct()), err
}

type Factory capnp.Client

// Factory_TypeID is the unique identifier for the type Factory.
const Factory_TypeID = 0x8ab0ecb99c269c7f

func (c Factory) Create(ctx context.Context, params func(Factory_CreateParams) error) (Factory_AccessInfo_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      0,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Factory_CreateParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Factory_AccessInfo_Future{Future: ans.Future()}, release

}

func (c Factory) ServiceInterfaceNames(ctx context.Context, params func(Factory_serviceInterfaceNames_Params) error) (Factory_serviceInterfaceNames_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      1,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "serviceInterfaceNames",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Factory_serviceInterfaceNames_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Factory_serviceInterfaceNames_Results_Future{Future: ans.Future()}, release

}

func (c Factory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Factory) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Factory) String() string {
	return "Factory(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Factory) AddRef() Factory {
	return Factory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Factory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Factory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Factory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Factory) DecodeFromPtr(p capnp.Ptr) Factory {
	return Factory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Factory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Factory) IsSame(other Factory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Factory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Factory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Factory_Server is a Factory with a local implementation.
type Factory_Server interface {
	Create(context.Context, Factory_create) error

	ServiceInterfaceNames(context.Context, Factory_serviceInterfaceNames) error

	Info(context.Context, common.Identifiable_info) error
}

// Factory_NewServer creates a new Server from an implementation of Factory_Server.
func Factory_NewServer(s Factory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Factory_Methods(nil, s), s, c)
}

// Factory_ServerToClient creates a new Client from an implementation of Factory_Server.
// The caller is responsible for calling Release on the returned Client.
func Factory_ServerToClient(s Factory_Server) Factory {
	return Factory(capnp.NewClient(Factory_NewServer(s)))
}

// Factory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Factory_Methods(methods []server.Method, s Factory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      0,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, Factory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      1,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "serviceInterfaceNames",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ServiceInterfaceNames(ctx, Factory_serviceInterfaceNames{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Factory_create holds the state for a server call to Factory.create.
// See server.Call for documentation.
type Factory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Factory_create) Args() Factory_CreateParams {
	return Factory_CreateParams(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Factory_create) AllocResults() (Factory_AccessInfo, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Factory_AccessInfo(r), err
}

// Factory_serviceInterfaceNames holds the state for a server call to Factory.serviceInterfaceNames.
// See server.Call for documentation.
type Factory_serviceInterfaceNames struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Factory_serviceInterfaceNames) Args() Factory_serviceInterfaceNames_Params {
	return Factory_serviceInterfaceNames_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Factory_serviceInterfaceNames) AllocResults() (Factory_serviceInterfaceNames_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_serviceInterfaceNames_Results(r), err
}

// Factory_List is a list of Factory.
type Factory_List = capnp.CapList[Factory]

// NewFactory_List creates a new list of Factory.
func NewFactory_List(s *capnp.Segment, sz int32) (Factory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Factory](l), err
}

type Factory_CreateParams capnp.Struct

// Factory_CreateParams_TypeID is the unique identifier for the type Factory_CreateParams.
const Factory_CreateParams_TypeID = 0xc2b88517ccaa9197

func NewFactory_CreateParams(s *capnp.Segment) (Factory_CreateParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Factory_CreateParams(st), err
}

func NewRootFactory_CreateParams(s *capnp.Segment) (Factory_CreateParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Factory_CreateParams(st), err
}

func ReadRootFactory_CreateParams(msg *capnp.Message) (Factory_CreateParams, error) {
	root, err := msg.Root()
	return Factory_CreateParams(root.Struct()), err
}

func (s Factory_CreateParams) String() string {
	str, _ := text.Marshal(0xc2b88517ccaa9197, capnp.Struct(s))
	return str
}

func (s Factory_CreateParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Factory_CreateParams) DecodeFromPtr(p capnp.Ptr) Factory_CreateParams {
	return Factory_CreateParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Factory_CreateParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Factory_CreateParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Factory_CreateParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Factory_CreateParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Factory_CreateParams) TimeoutSeconds() uint64 {
	return capnp.Struct(s).Uint64(0) ^ 3600
}

func (s Factory_CreateParams) SetTimeoutSeconds(v uint64) {
	capnp.Struct(s).SetUint64(0, v^3600)
}

func (s Factory_CreateParams) InterfaceNameToRegistrySR() (common.Pair_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Pair_List(p.List()), err
}

func (s Factory_CreateParams) HasInterfaceNameToRegistrySR() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Factory_CreateParams) SetInterfaceNameToRegistrySR(v common.Pair_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInterfaceNameToRegistrySR sets the interfaceNameToRegistrySR field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s Factory_CreateParams) NewInterfaceNameToRegistrySR(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Factory_CreateParams) MsgPayload() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Factory_CreateParams) HasMsgPayload() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Factory_CreateParams) SetMsgPayload(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Factory_CreateParams_List is a list of Factory_CreateParams.
type Factory_CreateParams_List = capnp.StructList[Factory_CreateParams]

// NewFactory_CreateParams creates a new list of Factory_CreateParams.
func NewFactory_CreateParams_List(s *capnp.Segment, sz int32) (Factory_CreateParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Factory_CreateParams](l), err
}

// Factory_CreateParams_Future is a wrapper for a Factory_CreateParams promised by a client call.
type Factory_CreateParams_Future struct{ *capnp.Future }

func (f Factory_CreateParams_Future) Struct() (Factory_CreateParams, error) {
	p, err := f.Future.Ptr()
	return Factory_CreateParams(p.Struct()), err
}
func (p Factory_CreateParams_Future) MsgPayload() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Factory_AccessInfo capnp.Struct

// Factory_AccessInfo_TypeID is the unique identifier for the type Factory_AccessInfo.
const Factory_AccessInfo_TypeID = 0xb9816a53df7cb62e

func NewFactory_AccessInfo(s *capnp.Segment) (Factory_AccessInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Factory_AccessInfo(st), err
}

func NewRootFactory_AccessInfo(s *capnp.Segment) (Factory_AccessInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Factory_AccessInfo(st), err
}

func ReadRootFactory_AccessInfo(msg *capnp.Message) (Factory_AccessInfo, error) {
	root, err := msg.Root()
	return Factory_AccessInfo(root.Struct()), err
}

func (s Factory_AccessInfo) String() string {
	str, _ := text.Marshal(0xb9816a53df7cb62e, capnp.Struct(s))
	return str
}

func (s Factory_AccessInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Factory_AccessInfo) DecodeFromPtr(p capnp.Ptr) Factory_AccessInfo {
	return Factory_AccessInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Factory_AccessInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Factory_AccessInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Factory_AccessInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Factory_AccessInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Factory_AccessInfo) AdminCap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s Factory_AccessInfo) HasAdminCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Factory_AccessInfo) SetAdminCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s Factory_AccessInfo) ServiceCaps() (common.Identifiable_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Identifiable_List(p.List()), err
}

func (s Factory_AccessInfo) HasServiceCaps() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Factory_AccessInfo) SetServiceCaps(v common.Identifiable_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewServiceCaps sets the serviceCaps field to a newly
// allocated common.Identifiable_List, preferring placement in s's segment.
func (s Factory_AccessInfo) NewServiceCaps(n int32) (common.Identifiable_List, error) {
	l, err := common.NewIdentifiable_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Identifiable_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Factory_AccessInfo) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Factory_AccessInfo) HasError() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Factory_AccessInfo) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Factory_AccessInfo) SetError(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Factory_AccessInfo_List is a list of Factory_AccessInfo.
type Factory_AccessInfo_List = capnp.StructList[Factory_AccessInfo]

// NewFactory_AccessInfo creates a new list of Factory_AccessInfo.
func NewFactory_AccessInfo_List(s *capnp.Segment, sz int32) (Factory_AccessInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Factory_AccessInfo](l), err
}

// Factory_AccessInfo_Future is a wrapper for a Factory_AccessInfo promised by a client call.
type Factory_AccessInfo_Future struct{ *capnp.Future }

func (f Factory_AccessInfo_Future) Struct() (Factory_AccessInfo, error) {
	p, err := f.Future.Ptr()
	return Factory_AccessInfo(p.Struct()), err
}
func (p Factory_AccessInfo_Future) AdminCap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type Factory_serviceInterfaceNames_Params capnp.Struct

// Factory_serviceInterfaceNames_Params_TypeID is the unique identifier for the type Factory_serviceInterfaceNames_Params.
const Factory_serviceInterfaceNames_Params_TypeID = 0xd4d567352ab3882a

func NewFactory_serviceInterfaceNames_Params(s *capnp.Segment) (Factory_serviceInterfaceNames_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Factory_serviceInterfaceNames_Params(st), err
}

func NewRootFactory_serviceInterfaceNames_Params(s *capnp.Segment) (Factory_serviceInterfaceNames_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Factory_serviceInterfaceNames_Params(st), err
}

func ReadRootFactory_serviceInterfaceNames_Params(msg *capnp.Message) (Factory_serviceInterfaceNames_Params, error) {
	root, err := msg.Root()
	return Factory_serviceInterfaceNames_Params(root.Struct()), err
}

func (s Factory_serviceInterfaceNames_Params) String() string {
	str, _ := text.Marshal(0xd4d567352ab3882a, capnp.Struct(s))
	return str
}

func (s Factory_serviceInterfaceNames_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Factory_serviceInterfaceNames_Params) DecodeFromPtr(p capnp.Ptr) Factory_serviceInterfaceNames_Params {
	return Factory_serviceInterfaceNames_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Factory_serviceInterfaceNames_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Factory_serviceInterfaceNames_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Factory_serviceInterfaceNames_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Factory_serviceInterfaceNames_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Factory_serviceInterfaceNames_Params_List is a list of Factory_serviceInterfaceNames_Params.
type Factory_serviceInterfaceNames_Params_List = capnp.StructList[Factory_serviceInterfaceNames_Params]

// NewFactory_serviceInterfaceNames_Params creates a new list of Factory_serviceInterfaceNames_Params.
func NewFactory_serviceInterfaceNames_Params_List(s *capnp.Segment, sz int32) (Factory_serviceInterfaceNames_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Factory_serviceInterfaceNames_Params](l), err
}

// Factory_serviceInterfaceNames_Params_Future is a wrapper for a Factory_serviceInterfaceNames_Params promised by a client call.
type Factory_serviceInterfaceNames_Params_Future struct{ *capnp.Future }

func (f Factory_serviceInterfaceNames_Params_Future) Struct() (Factory_serviceInterfaceNames_Params, error) {
	p, err := f.Future.Ptr()
	return Factory_serviceInterfaceNames_Params(p.Struct()), err
}

type Factory_serviceInterfaceNames_Results capnp.Struct

// Factory_serviceInterfaceNames_Results_TypeID is the unique identifier for the type Factory_serviceInterfaceNames_Results.
const Factory_serviceInterfaceNames_Results_TypeID = 0xa962c127b5dccf05

func NewFactory_serviceInterfaceNames_Results(s *capnp.Segment) (Factory_serviceInterfaceNames_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_serviceInterfaceNames_Results(st), err
}

func NewRootFactory_serviceInterfaceNames_Results(s *capnp.Segment) (Factory_serviceInterfaceNames_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_serviceInterfaceNames_Results(st), err
}

func ReadRootFactory_serviceInterfaceNames_Results(msg *capnp.Message) (Factory_serviceInterfaceNames_Results, error) {
	root, err := msg.Root()
	return Factory_serviceInterfaceNames_Results(root.Struct()), err
}

func (s Factory_serviceInterfaceNames_Results) String() string {
	str, _ := text.Marshal(0xa962c127b5dccf05, capnp.Struct(s))
	return str
}

func (s Factory_serviceInterfaceNames_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Factory_serviceInterfaceNames_Results) DecodeFromPtr(p capnp.Ptr) Factory_serviceInterfaceNames_Results {
	return Factory_serviceInterfaceNames_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Factory_serviceInterfaceNames_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Factory_serviceInterfaceNames_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Factory_serviceInterfaceNames_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Factory_serviceInterfaceNames_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Factory_serviceInterfaceNames_Results) Names() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Factory_serviceInterfaceNames_Results) HasNames() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Factory_serviceInterfaceNames_Results) SetNames(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewNames sets the names field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Factory_serviceInterfaceNames_Results) NewNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Factory_serviceInterfaceNames_Results_List is a list of Factory_serviceInterfaceNames_Results.
type Factory_serviceInterfaceNames_Results_List = capnp.StructList[Factory_serviceInterfaceNames_Results]

// NewFactory_serviceInterfaceNames_Results creates a new list of Factory_serviceInterfaceNames_Results.
func NewFactory_serviceInterfaceNames_Results_List(s *capnp.Segment, sz int32) (Factory_serviceInterfaceNames_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Factory_serviceInterfaceNames_Results](l), err
}

// Factory_serviceInterfaceNames_Results_Future is a wrapper for a Factory_serviceInterfaceNames_Results promised by a client call.
type Factory_serviceInterfaceNames_Results_Future struct{ *capnp.Future }

func (f Factory_serviceInterfaceNames_Results_Future) Struct() (Factory_serviceInterfaceNames_Results, error) {
	p, err := f.Future.Ptr()
	return Factory_serviceInterfaceNames_Results(p.Struct()), err
}

type Stoppable capnp.Client

// Stoppable_TypeID is the unique identifier for the type Stoppable.
const Stoppable_TypeID = 0xcd5f6458232e9276

func (c Stoppable) Stop(ctx context.Context, params func(Stoppable_stop_Params) error) (Stoppable_stop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd5f6458232e9276,
			MethodID:      0,
			InterfaceName: "service.capnp:Stoppable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Stoppable_stop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Stoppable_stop_Results_Future{Future: ans.Future()}, release

}

func (c Stoppable) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Stoppable) String() string {
	return "Stoppable(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Stoppable) AddRef() Stoppable {
	return Stoppable(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Stoppable) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Stoppable) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Stoppable) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Stoppable) DecodeFromPtr(p capnp.Ptr) Stoppable {
	return Stoppable(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Stoppable) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Stoppable) IsSame(other Stoppable) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Stoppable) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Stoppable) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Stoppable_Server is a Stoppable with a local implementation.
type Stoppable_Server interface {
	Stop(context.Context, Stoppable_stop) error
}

// Stoppable_NewServer creates a new Server from an implementation of Stoppable_Server.
func Stoppable_NewServer(s Stoppable_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Stoppable_Methods(nil, s), s, c)
}

// Stoppable_ServerToClient creates a new Client from an implementation of Stoppable_Server.
// The caller is responsible for calling Release on the returned Client.
func Stoppable_ServerToClient(s Stoppable_Server) Stoppable {
	return Stoppable(capnp.NewClient(Stoppable_NewServer(s)))
}

// Stoppable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Stoppable_Methods(methods []server.Method, s Stoppable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd5f6458232e9276,
			MethodID:      0,
			InterfaceName: "service.capnp:Stoppable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Stoppable_stop{call})
		},
	})

	return methods
}

// Stoppable_stop holds the state for a server call to Stoppable.stop.
// See server.Call for documentation.
type Stoppable_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Stoppable_stop) Args() Stoppable_stop_Params {
	return Stoppable_stop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Stoppable_stop) AllocResults() (Stoppable_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stoppable_stop_Results(r), err
}

// Stoppable_List is a list of Stoppable.
type Stoppable_List = capnp.CapList[Stoppable]

// NewStoppable_List creates a new list of Stoppable.
func NewStoppable_List(s *capnp.Segment, sz int32) (Stoppable_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Stoppable](l), err
}

type Stoppable_stop_Params capnp.Struct

// Stoppable_stop_Params_TypeID is the unique identifier for the type Stoppable_stop_Params.
const Stoppable_stop_Params_TypeID = 0x94af8fce16d48a92

func NewStoppable_stop_Params(s *capnp.Segment) (Stoppable_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stoppable_stop_Params(st), err
}

func NewRootStoppable_stop_Params(s *capnp.Segment) (Stoppable_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stoppable_stop_Params(st), err
}

func ReadRootStoppable_stop_Params(msg *capnp.Message) (Stoppable_stop_Params, error) {
	root, err := msg.Root()
	return Stoppable_stop_Params(root.Struct()), err
}

func (s Stoppable_stop_Params) String() string {
	str, _ := text.Marshal(0x94af8fce16d48a92, capnp.Struct(s))
	return str
}

func (s Stoppable_stop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stoppable_stop_Params) DecodeFromPtr(p capnp.Ptr) Stoppable_stop_Params {
	return Stoppable_stop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stoppable_stop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stoppable_stop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stoppable_stop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stoppable_stop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Stoppable_stop_Params_List is a list of Stoppable_stop_Params.
type Stoppable_stop_Params_List = capnp.StructList[Stoppable_stop_Params]

// NewStoppable_stop_Params creates a new list of Stoppable_stop_Params.
func NewStoppable_stop_Params_List(s *capnp.Segment, sz int32) (Stoppable_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Stoppable_stop_Params](l), err
}

// Stoppable_stop_Params_Future is a wrapper for a Stoppable_stop_Params promised by a client call.
type Stoppable_stop_Params_Future struct{ *capnp.Future }

func (f Stoppable_stop_Params_Future) Struct() (Stoppable_stop_Params, error) {
	p, err := f.Future.Ptr()
	return Stoppable_stop_Params(p.Struct()), err
}

type Stoppable_stop_Results capnp.Struct

// Stoppable_stop_Results_TypeID is the unique identifier for the type Stoppable_stop_Results.
const Stoppable_stop_Results_TypeID = 0xd2c46584c294cfd8

func NewStoppable_stop_Results(s *capnp.Segment) (Stoppable_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stoppable_stop_Results(st), err
}

func NewRootStoppable_stop_Results(s *capnp.Segment) (Stoppable_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stoppable_stop_Results(st), err
}

func ReadRootStoppable_stop_Results(msg *capnp.Message) (Stoppable_stop_Results, error) {
	root, err := msg.Root()
	return Stoppable_stop_Results(root.Struct()), err
}

func (s Stoppable_stop_Results) String() string {
	str, _ := text.Marshal(0xd2c46584c294cfd8, capnp.Struct(s))
	return str
}

func (s Stoppable_stop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stoppable_stop_Results) DecodeFromPtr(p capnp.Ptr) Stoppable_stop_Results {
	return Stoppable_stop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stoppable_stop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stoppable_stop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stoppable_stop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stoppable_stop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Stoppable_stop_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Stoppable_stop_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Stoppable_stop_Results_List is a list of Stoppable_stop_Results.
type Stoppable_stop_Results_List = capnp.StructList[Stoppable_stop_Results]

// NewStoppable_stop_Results creates a new list of Stoppable_stop_Results.
func NewStoppable_stop_Results_List(s *capnp.Segment, sz int32) (Stoppable_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Stoppable_stop_Results](l), err
}

// Stoppable_stop_Results_Future is a wrapper for a Stoppable_stop_Results promised by a client call.
type Stoppable_stop_Results_Future struct{ *capnp.Future }

func (f Stoppable_stop_Results_Future) Struct() (Stoppable_stop_Results, error) {
	p, err := f.Future.Ptr()
	return Stoppable_stop_Results(p.Struct()), err
}

const schema_f52adf98d2bbc6c0 = "x\xda\x94V]l\x14\xd5\x17?gf\xe7c\xf9\x03" +
	"\xdd\xcb4\x14\xf8\x137\xc1ja\x83\x0d\x14\x88\xa6\x11" +
	"\xdb-\x1f\xb5(fg\xdb\x07\xa8Q\x98\xeeNaI" +
	"wg\x9d\x99\x05J\xc4\x06\x05\x11\x0cQ\x08\x08\x12x" +
	"\x10Cb!\x88\x80\x10\xd0\x07i\xfd\x8a\xa9@\x80b" +
	"\x04Z\xf9x\xf1Ec\xd4\xd4\xc8\x03\x8c\xb93{w" +
	"\xa7\x1f \xbeM\xe6\x9es\xcf\xef\xfc\xce\xef\x9csg" +
	"\xac\xe2k\x033\xc7,\xfb\x1fp\xeaFAt\x0e=" +
	"\xf2\xd3\xcd\xa9O}\xb8\x05\xc8d\x04\x10P\x02\x98\xb5" +
	"KhF@\xe5\x03\xa1\x06\xd0\xe9\xd8\xf7\xf8\xbe3\xbf" +
	"|\xb2\x15\xc8X\xde9\xfb\xcd\xe7\x97\xf6\xdc\x88\x0c\x00" +
	"@\x08\x95\x8b\xc2q\xe5\xaaP\x01\xa0\x0c\x08\x9b\x95\xfd" +
	"b\x99rP,qvl\xed\x1d\x7f\xfe\x9d\xa3;\x81" +
	"L@\x80\x00\xbd\xf0}q\x0aB\xc0\xb9\x1b\"\xa9\xad" +
	"s\xbe\xd8\x0bj)\xb2\xa3\x0db\x15\x8d\xb5E\xa4\xb1" +
	"\xfaO\xf5-\xef3\xa6}\xe4\x81q\xcf;\xc58u" +
	"\x15.\xf4\x9d\xac\xe8j\xe9\x042\xde\x83\x19\xc2Y\xbb" +
	"\xc4\x03\xd4\xf5\xa0\xeb\xda\xa3tO\xd9\xf1\xfa\xc1\xc3C" +
	"`\xa2rE\xbc\xad\xdc\x12%\x00\xa5_\xacW\x04\xa9" +
	"\x0c\xc0\x99~\xf8\xb6|\xbd\xfd\xe5c@JY\x9c\x01" +
	"\xb1\x99\xc6\xa9<\xf5\xea\x8d\xc6U\x1b\xce\xd08\xc5\xd4" +
	"\x05\x9e\xc6\xbb%\x8eB\xe5w\xf7\xaa_\xc5\xa3\x80\xce" +
	"\xee\xed\x87\xbe/\xdbt\xba\x1b\xd4\xf1\xe8\xb7\xe6\xa8\xf5" +
	"~i\x12*G$j\xdd)Q\xeb\xd5;*\x1f]" +
	"\x92\\vn\x18\xc2#r\xb7rR\xa6\x86\xc7\xe4z" +
	"\xe5*\xfdr6\xef\xce=#N\x8a\x9c\xf7!\xec\x92" +
	"GQ\x84?^\xd8\xd9\xbdQ\xff\xea\x12\xa8\x13\x0a$" +
	"v\xca\x11\xca\xc41\x992\x11y\xebDd\xce\x8a+" +
	"\xbd\x1eU\x01\x8a\xe5\xa2\xbc\x97\xba\xce\xfe\xe3\xe7k\xff" +
	"\xff\xb3\xe2\x87A\x97F\xe8I\xd7s\xdfNZ4\xf1" +
	"\xae\xff\xa4S\xae\xa6'o|\xb6\xf2\xd4\x1dsc\x9f" +
	"w\"p\xf4h\xbb\x1c\xa7\xe1\xf6\xcbk\x00\x9d\xb5/" +
	"\xfe\xf6\xe4\xb9\xcb_\xf6\xfb\\\xef\xc8\x1cu]\xba\xbb" +
	"\xe9\xe3w\xa7L\xbe\xe9;\xe9\x97\xab\xe8\xc9\x9e\x13\xd7" +
	"\xd7n\x9a[7\x90\xbf\xd4\x15\xdd\xd74\x1e*\xe7\xdc" +
	"\x1c\x1a\xfe\xda6\xf1\xed\xbf\xbb\xee\x0d\xe3\xea\xae|@" +
	"\x11\x82\xd4\x1e\x83\xf5\xa8\\\x0d\xd2r\xbe\xb7d\xda\xb6" +
	"\x96W\xea\x1c_\xa0\xef\x82U\x08\xeb\x1dK7W\xa7" +
	"\x12ze \xa1e3\xd9\xea\xc6T:\xdb\xa6/\xd4" +
	"\x12\xb6a\xb6W&L]\xb3\xf5\xf2\xb8n\xe5\xdax" +
	"\xdbR\x03|\x00 \x80\x00dL\x04@\x95yT\xcb" +
	"9,IhY\x0b\xc7\x02\xc6xD\xe2\\yv\xdf" +
	"\xd2\x9e\x8bG\x8f\x03 \xfdY\x88\x80^\x84\x85Z\xd8" +
	"\xbd\\\x95\xd1\xa7\x0f\x12\\\xe5SV\xb0\xd9\x99\xe7\x86" +
	"\x8eiPbji\xcb\x89&\x12\xbae5d\x80o" +
	"5T\x99\x17\x00\x0a\xbe\xc8\xfc\xc8\xccj\x80\xe8t\x8c" +
	">\x8dd\xb1\x84\xc5:#\xeb\x0d\x12=\x0e\x10\x9d\x8f" +
	"\xd1&$\xbaT\xe3\xa5G0\xac\x068\x9f:\xa9h" +
	"F\xfcY[H\xa6\x013\xb6n\xb6j\x09=\xfc\x82" +
	"\x96\xd6\xad\xffr\x87\x1a@\xf4\x91\x04\xd1\x00\x12\xac\xeb" +
	"\x88i\xedm\x86\x96,\xd0\xc5\xe7\x0bb\x1b\xd9\xac\xd6" +
	"\xd2\xa6WZ\xb6\x91-\x8fi\xa6D\xf9\x18b\x15M" +
	"\xa6S\x99JK\xb7\x9bRi\xdd\xc8\xd9\xe5\xb1\xb0F" +
	"y\xf3W\xac._\xb1R\x0e;,=ad\x92\x16" +
	"\x06\x81\xc3\xa0\xafF\x0fRA\x8c\xde\x88\xc5\xd0\x02\xab" +
	"\xa7g\xc5\x98a\xc4\xb8\xbc\xb8\xd2\x91\xda\x06K\xa7\xaa" +
	"(\x9dp\x86Z1\xed\x8c\x06n\x90b\xb8\xa1h$" +
	"\xc3l\x8f!\xaa\x01W\x00l\x16\"\x9b\xd0\x84T\x03" +
	"G\x04V\xd8\xe1T\x0f\xcd\xd3\xa3-\x97Mj\xb6\xde" +
	"\x90\xd43v\xcan/\xa8}(\xc7,Q&\xc5V" +
	"\x03\x80\x82\x19]\xc8l\xc1\"\x00u>\x8fj\x8cC" +
	"\x82\xe8\x8ep\xb2\xb8\x05@}\x9eGu%\x87\x84\xe3" +
	"J\x91\x03 :\xe5`9\x8fj\x1b\x87\x8eFQ\xcc" +
	"\xd3\xb2\x00\x80\xe3\x02< \x8e+\x920\x0f\xa4\x07u" +
	"WX7M\xc3t\x99\x1b\xedcn\x08d\xd6L\xa6" +
	"\xc6\xa7-\x1ffD\xb2`]\x11s\x01\xf2%\x00\xb5" +
	"\x89G\xf54\x85\x8c\x1e\xe4\x93\xcd\x00\xea\xa7<\xaag" +
	"9tlOf\x8dP\xe3\x17\x12\x1f\x1a\x0b\xe0\xa4\xf2" +
	"\x0a\xe0\\\x094\x19q}E\xca\xb2\xcd\xf6F\x8c\xb3" +
	"4B\xce\xac\xfa\xb2\xc7\xea\xdf\xec=\x03\xb4#X\xa3" +
	"\xf8~\x12\xac\xa0\x03\x02\x91*\x05Q\x0d\xe5\xe5\xc1$" +
	"\x92\xb6V\xb8\x0d\x03\xbc\x96\xc4q\xfe\xddBI\x1cA" +
	"C\xac\x8d\xa0\xa8\x1f\xb6\x86\x91-\x0cB\"\xae~J" +
	"h\xab\xd5b\x0c\xf1>}F;\xd1\x95\x89m\xf9D" +
	"5r\xc7\xc6u\xab$7\xa4\x03\x06\xb5b\xce\xd5\x13" +
	"\"p\x88>\xe0\x0f\xd5^\xf9\x92\x8e\x0cs\xa5\xae\x99" +
	"v\x8b\xae\xd9\xe51\xcd\x9b\xa2\xff65\xe25^R" +
	"\x0f\xd5'\xf9y\xa0\xca\x85\xbc\xa6QU\x97\xf3\xa8\xce" +
	"\xf0\xe9\xff\x09\x9a\xecT\x1e\xd5\xd9\x1c\x86\x8d\xb6dC" +
	"\x92\xa9\xb5#\xa3\xaf\xa1m\x84!\xe7\xf25\xfe^\xcf" +
	"k=\xbdT\xd5!\x1f\x09\xd20\xda\xdd\xa8\x160\x83" +
	"\x91\xf3\x8d\xeb\xe1\xc1y\x0cJ8\xe5e\x90\xa2\xe3)" +
	"\x9f\xf0\xfd\xc6S*\xd3jXE\xd5\xfaa\x8e\xb0\xda" +
	"\xa2I)\x9d\xcaP\x81\x95\xba\x02c\xaf\x09d{\x9e" +
	"l\x8f\x03G\xb6\xd0\xdd\xc4^z\xc8\x1e\x16d}3" +
	"p$'!Wx0 {\xe3\x90\x14\x15\xe6K\x12" +
	"\xf2\x85M\x8e\xec\x85@T\xea\xd7 a\xf1%\x82\xec" +
	"\xf5F\xe6\xae\x03\x8e\xcc\x91\x1cF\x0d\xa0\xed.1\xaf" +
	"\xe2\xc0\xe7\xecZ\xcc\xab\xdda\xb4\x00\xaf[\xb5\xe8\xb0" +
	"jC\x8dW\xef\x07L\xd3\xfb\xb1\x9b_B\xff\x04\x00" +
	"\x00\xff\xff\x0d>q\xa7"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f52adf98d2bbc6c0,
		Nodes: []uint64{
			0x89a33828e0de1eaa,
			0x8ab0ecb99c269c7f,
			0x94af8fce16d48a92,
			0x9abf358a691110fd,
			0xa8296fdc60dcb6dd,
			0xa962c127b5dccf05,
			0xaba5829222c213cb,
			0xb15e79db08e2ab2c,
			0xb9816a53df7cb62e,
			0xc2b88517ccaa9197,
			0xcd5f6458232e9276,
			0xce2a1a063e759787,
			0xd2c46584c294cfd8,
			0xd4d567352ab3882a,
			0xd627f31bdae7f234,
			0xd6fd194a1ac74bc1,
			0xdc8472f9b668ba83,
			0xddc3d3cd37ef5b78,
			0xe01c2290ae549759,
			0xf5423d8578dbb398,
			0xfec1f88b198df649,
			0xff4271628d295896,
		},
		Compressed: true,
	})
}
