// Code generated by capnpc-go. DO NOT EDIT.

package registry

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
)

type Admin capnp.Client

// Admin_TypeID is the unique identifier for the type Admin.
const Admin_TypeID = 0xf503f3237666574e

func (c Admin) AddCategory(ctx context.Context, params func(Admin_addCategory_Params) error) (Admin_addCategory_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      0,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "addCategory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_addCategory_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_addCategory_Results_Future{Future: ans.Future()}, release

}

func (c Admin) RemoveCategory(ctx context.Context, params func(Admin_removeCategory_Params) error) (Admin_removeCategory_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      1,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeCategory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_removeCategory_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_removeCategory_Results_Future{Future: ans.Future()}, release

}

func (c Admin) MoveObjects(ctx context.Context, params func(Admin_moveObjects_Params) error) (Admin_moveObjects_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      2,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "moveObjects",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_moveObjects_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_moveObjects_Results_Future{Future: ans.Future()}, release

}

func (c Admin) RemoveObjects(ctx context.Context, params func(Admin_removeObjects_Params) error) (Admin_removeObjects_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      3,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeObjects",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_removeObjects_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_removeObjects_Results_Future{Future: ans.Future()}, release

}

func (c Admin) Registry(ctx context.Context, params func(Admin_registry_Params) error) (Admin_registry_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      4,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "registry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_registry_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_registry_Results_Future{Future: ans.Future()}, release

}

func (c Admin) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Admin) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Admin) String() string {
	return "Admin(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Admin) AddRef() Admin {
	return Admin(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Admin) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Admin) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Admin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Admin) DecodeFromPtr(p capnp.Ptr) Admin {
	return Admin(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Admin) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Admin) IsSame(other Admin) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Admin) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Admin) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Admin_Server is a Admin with a local implementation.
type Admin_Server interface {
	AddCategory(context.Context, Admin_addCategory) error

	RemoveCategory(context.Context, Admin_removeCategory) error

	MoveObjects(context.Context, Admin_moveObjects) error

	RemoveObjects(context.Context, Admin_removeObjects) error

	Registry(context.Context, Admin_registry) error

	Info(context.Context, common.Identifiable_info) error
}

// Admin_NewServer creates a new Server from an implementation of Admin_Server.
func Admin_NewServer(s Admin_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Admin_Methods(nil, s), s, c)
}

// Admin_ServerToClient creates a new Client from an implementation of Admin_Server.
// The caller is responsible for calling Release on the returned Client.
func Admin_ServerToClient(s Admin_Server) Admin {
	return Admin(capnp.NewClient(Admin_NewServer(s)))
}

// Admin_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Admin_Methods(methods []server.Method, s Admin_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      0,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "addCategory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddCategory(ctx, Admin_addCategory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      1,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeCategory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveCategory(ctx, Admin_removeCategory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      2,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "moveObjects",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.MoveObjects(ctx, Admin_moveObjects{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      3,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeObjects",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveObjects(ctx, Admin_removeObjects{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      4,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "registry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Registry(ctx, Admin_registry{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Admin_addCategory holds the state for a server call to Admin.addCategory.
// See server.Call for documentation.
type Admin_addCategory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_addCategory) Args() Admin_addCategory_Params {
	return Admin_addCategory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_addCategory) AllocResults() (Admin_addCategory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results(r), err
}

// Admin_removeCategory holds the state for a server call to Admin.removeCategory.
// See server.Call for documentation.
type Admin_removeCategory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_removeCategory) Args() Admin_removeCategory_Params {
	return Admin_removeCategory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_removeCategory) AllocResults() (Admin_removeCategory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results(r), err
}

// Admin_moveObjects holds the state for a server call to Admin.moveObjects.
// See server.Call for documentation.
type Admin_moveObjects struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_moveObjects) Args() Admin_moveObjects_Params {
	return Admin_moveObjects_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_moveObjects) AllocResults() (Admin_moveObjects_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results(r), err
}

// Admin_removeObjects holds the state for a server call to Admin.removeObjects.
// See server.Call for documentation.
type Admin_removeObjects struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_removeObjects) Args() Admin_removeObjects_Params {
	return Admin_removeObjects_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_removeObjects) AllocResults() (Admin_removeObjects_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results(r), err
}

// Admin_registry holds the state for a server call to Admin.registry.
// See server.Call for documentation.
type Admin_registry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_registry) Args() Admin_registry_Params {
	return Admin_registry_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_registry) AllocResults() (Admin_registry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results(r), err
}

// Admin_List is a list of Admin.
type Admin_List = capnp.CapList[Admin]

// NewAdmin_List creates a new list of Admin.
func NewAdmin_List(s *capnp.Segment, sz int32) (Admin_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Admin](l), err
}

type Admin_addCategory_Params capnp.Struct

// Admin_addCategory_Params_TypeID is the unique identifier for the type Admin_addCategory_Params.
const Admin_addCategory_Params_TypeID = 0xdb16d4fbb18486f6

func NewAdmin_addCategory_Params(s *capnp.Segment) (Admin_addCategory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Admin_addCategory_Params(st), err
}

func NewRootAdmin_addCategory_Params(s *capnp.Segment) (Admin_addCategory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Admin_addCategory_Params(st), err
}

func ReadRootAdmin_addCategory_Params(msg *capnp.Message) (Admin_addCategory_Params, error) {
	root, err := msg.Root()
	return Admin_addCategory_Params(root.Struct()), err
}

func (s Admin_addCategory_Params) String() string {
	str, _ := text.Marshal(0xdb16d4fbb18486f6, capnp.Struct(s))
	return str
}

func (s Admin_addCategory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_addCategory_Params) DecodeFromPtr(p capnp.Ptr) Admin_addCategory_Params {
	return Admin_addCategory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_addCategory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_addCategory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_addCategory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_addCategory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_addCategory_Params) Category() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Admin_addCategory_Params) HasCategory() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_addCategory_Params) SetCategory(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCategory sets the category field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Admin_addCategory_Params) NewCategory() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Admin_addCategory_Params) Upsert() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Admin_addCategory_Params) SetUpsert(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Admin_addCategory_Params_List is a list of Admin_addCategory_Params.
type Admin_addCategory_Params_List = capnp.StructList[Admin_addCategory_Params]

// NewAdmin_addCategory_Params creates a new list of Admin_addCategory_Params.
func NewAdmin_addCategory_Params_List(s *capnp.Segment, sz int32) (Admin_addCategory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Admin_addCategory_Params](l), err
}

// Admin_addCategory_Params_Future is a wrapper for a Admin_addCategory_Params promised by a client call.
type Admin_addCategory_Params_Future struct{ *capnp.Future }

func (f Admin_addCategory_Params_Future) Struct() (Admin_addCategory_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_addCategory_Params(p.Struct()), err
}
func (p Admin_addCategory_Params_Future) Category() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Admin_addCategory_Results capnp.Struct

// Admin_addCategory_Results_TypeID is the unique identifier for the type Admin_addCategory_Results.
const Admin_addCategory_Results_TypeID = 0xbd3d832f7a7235b5

func NewAdmin_addCategory_Results(s *capnp.Segment) (Admin_addCategory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results(st), err
}

func NewRootAdmin_addCategory_Results(s *capnp.Segment) (Admin_addCategory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results(st), err
}

func ReadRootAdmin_addCategory_Results(msg *capnp.Message) (Admin_addCategory_Results, error) {
	root, err := msg.Root()
	return Admin_addCategory_Results(root.Struct()), err
}

func (s Admin_addCategory_Results) String() string {
	str, _ := text.Marshal(0xbd3d832f7a7235b5, capnp.Struct(s))
	return str
}

func (s Admin_addCategory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_addCategory_Results) DecodeFromPtr(p capnp.Ptr) Admin_addCategory_Results {
	return Admin_addCategory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_addCategory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_addCategory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_addCategory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_addCategory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_addCategory_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Admin_addCategory_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Admin_addCategory_Results_List is a list of Admin_addCategory_Results.
type Admin_addCategory_Results_List = capnp.StructList[Admin_addCategory_Results]

// NewAdmin_addCategory_Results creates a new list of Admin_addCategory_Results.
func NewAdmin_addCategory_Results_List(s *capnp.Segment, sz int32) (Admin_addCategory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Admin_addCategory_Results](l), err
}

// Admin_addCategory_Results_Future is a wrapper for a Admin_addCategory_Results promised by a client call.
type Admin_addCategory_Results_Future struct{ *capnp.Future }

func (f Admin_addCategory_Results_Future) Struct() (Admin_addCategory_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_addCategory_Results(p.Struct()), err
}

type Admin_removeCategory_Params capnp.Struct

// Admin_removeCategory_Params_TypeID is the unique identifier for the type Admin_removeCategory_Params.
const Admin_removeCategory_Params_TypeID = 0xd5be1b8e0180ded6

func NewAdmin_removeCategory_Params(s *capnp.Segment) (Admin_removeCategory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_removeCategory_Params(st), err
}

func NewRootAdmin_removeCategory_Params(s *capnp.Segment) (Admin_removeCategory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_removeCategory_Params(st), err
}

func ReadRootAdmin_removeCategory_Params(msg *capnp.Message) (Admin_removeCategory_Params, error) {
	root, err := msg.Root()
	return Admin_removeCategory_Params(root.Struct()), err
}

func (s Admin_removeCategory_Params) String() string {
	str, _ := text.Marshal(0xd5be1b8e0180ded6, capnp.Struct(s))
	return str
}

func (s Admin_removeCategory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_removeCategory_Params) DecodeFromPtr(p capnp.Ptr) Admin_removeCategory_Params {
	return Admin_removeCategory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_removeCategory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_removeCategory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_removeCategory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_removeCategory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_removeCategory_Params) CategoryId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Admin_removeCategory_Params) HasCategoryId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_removeCategory_Params) CategoryIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Admin_removeCategory_Params) SetCategoryId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Admin_removeCategory_Params) MoveObjectsToCategoryId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Admin_removeCategory_Params) HasMoveObjectsToCategoryId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Admin_removeCategory_Params) MoveObjectsToCategoryIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Admin_removeCategory_Params) SetMoveObjectsToCategoryId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Admin_removeCategory_Params_List is a list of Admin_removeCategory_Params.
type Admin_removeCategory_Params_List = capnp.StructList[Admin_removeCategory_Params]

// NewAdmin_removeCategory_Params creates a new list of Admin_removeCategory_Params.
func NewAdmin_removeCategory_Params_List(s *capnp.Segment, sz int32) (Admin_removeCategory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Admin_removeCategory_Params](l), err
}

// Admin_removeCategory_Params_Future is a wrapper for a Admin_removeCategory_Params promised by a client call.
type Admin_removeCategory_Params_Future struct{ *capnp.Future }

func (f Admin_removeCategory_Params_Future) Struct() (Admin_removeCategory_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_removeCategory_Params(p.Struct()), err
}

type Admin_removeCategory_Results capnp.Struct

// Admin_removeCategory_Results_TypeID is the unique identifier for the type Admin_removeCategory_Results.
const Admin_removeCategory_Results_TypeID = 0xa9aca103106c8f05

func NewAdmin_removeCategory_Results(s *capnp.Segment) (Admin_removeCategory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results(st), err
}

func NewRootAdmin_removeCategory_Results(s *capnp.Segment) (Admin_removeCategory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results(st), err
}

func ReadRootAdmin_removeCategory_Results(msg *capnp.Message) (Admin_removeCategory_Results, error) {
	root, err := msg.Root()
	return Admin_removeCategory_Results(root.Struct()), err
}

func (s Admin_removeCategory_Results) String() string {
	str, _ := text.Marshal(0xa9aca103106c8f05, capnp.Struct(s))
	return str
}

func (s Admin_removeCategory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_removeCategory_Results) DecodeFromPtr(p capnp.Ptr) Admin_removeCategory_Results {
	return Admin_removeCategory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_removeCategory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_removeCategory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_removeCategory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_removeCategory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_removeCategory_Results) RemovedObjects() (common.Identifiable_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Identifiable_List(p.List()), err
}

func (s Admin_removeCategory_Results) HasRemovedObjects() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_removeCategory_Results) SetRemovedObjects(v common.Identifiable_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRemovedObjects sets the removedObjects field to a newly
// allocated common.Identifiable_List, preferring placement in s's segment.
func (s Admin_removeCategory_Results) NewRemovedObjects(n int32) (common.Identifiable_List, error) {
	l, err := common.NewIdentifiable_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Identifiable_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Admin_removeCategory_Results_List is a list of Admin_removeCategory_Results.
type Admin_removeCategory_Results_List = capnp.StructList[Admin_removeCategory_Results]

// NewAdmin_removeCategory_Results creates a new list of Admin_removeCategory_Results.
func NewAdmin_removeCategory_Results_List(s *capnp.Segment, sz int32) (Admin_removeCategory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Admin_removeCategory_Results](l), err
}

// Admin_removeCategory_Results_Future is a wrapper for a Admin_removeCategory_Results promised by a client call.
type Admin_removeCategory_Results_Future struct{ *capnp.Future }

func (f Admin_removeCategory_Results_Future) Struct() (Admin_removeCategory_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_removeCategory_Results(p.Struct()), err
}

type Admin_moveObjects_Params capnp.Struct

// Admin_moveObjects_Params_TypeID is the unique identifier for the type Admin_moveObjects_Params.
const Admin_moveObjects_Params_TypeID = 0x8ebfd50c805adbc3

func NewAdmin_moveObjects_Params(s *capnp.Segment) (Admin_moveObjects_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_moveObjects_Params(st), err
}

func NewRootAdmin_moveObjects_Params(s *capnp.Segment) (Admin_moveObjects_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_moveObjects_Params(st), err
}

func ReadRootAdmin_moveObjects_Params(msg *capnp.Message) (Admin_moveObjects_Params, error) {
	root, err := msg.Root()
	return Admin_moveObjects_Params(root.Struct()), err
}

func (s Admin_moveObjects_Params) String() string {
	str, _ := text.Marshal(0x8ebfd50c805adbc3, capnp.Struct(s))
	return str
}

func (s Admin_moveObjects_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_moveObjects_Params) DecodeFromPtr(p capnp.Ptr) Admin_moveObjects_Params {
	return Admin_moveObjects_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_moveObjects_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_moveObjects_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_moveObjects_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_moveObjects_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_moveObjects_Params) ObjectIds() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Admin_moveObjects_Params) HasObjectIds() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_moveObjects_Params) SetObjectIds(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewObjectIds sets the objectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_moveObjects_Params) NewObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Admin_moveObjects_Params) ToCatId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Admin_moveObjects_Params) HasToCatId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Admin_moveObjects_Params) ToCatIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Admin_moveObjects_Params) SetToCatId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Admin_moveObjects_Params_List is a list of Admin_moveObjects_Params.
type Admin_moveObjects_Params_List = capnp.StructList[Admin_moveObjects_Params]

// NewAdmin_moveObjects_Params creates a new list of Admin_moveObjects_Params.
func NewAdmin_moveObjects_Params_List(s *capnp.Segment, sz int32) (Admin_moveObjects_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Admin_moveObjects_Params](l), err
}

// Admin_moveObjects_Params_Future is a wrapper for a Admin_moveObjects_Params promised by a client call.
type Admin_moveObjects_Params_Future struct{ *capnp.Future }

func (f Admin_moveObjects_Params_Future) Struct() (Admin_moveObjects_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_moveObjects_Params(p.Struct()), err
}

type Admin_moveObjects_Results capnp.Struct

// Admin_moveObjects_Results_TypeID is the unique identifier for the type Admin_moveObjects_Results.
const Admin_moveObjects_Results_TypeID = 0xd887d79a7ed3f45f

func NewAdmin_moveObjects_Results(s *capnp.Segment) (Admin_moveObjects_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results(st), err
}

func NewRootAdmin_moveObjects_Results(s *capnp.Segment) (Admin_moveObjects_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results(st), err
}

func ReadRootAdmin_moveObjects_Results(msg *capnp.Message) (Admin_moveObjects_Results, error) {
	root, err := msg.Root()
	return Admin_moveObjects_Results(root.Struct()), err
}

func (s Admin_moveObjects_Results) String() string {
	str, _ := text.Marshal(0xd887d79a7ed3f45f, capnp.Struct(s))
	return str
}

func (s Admin_moveObjects_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_moveObjects_Results) DecodeFromPtr(p capnp.Ptr) Admin_moveObjects_Results {
	return Admin_moveObjects_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_moveObjects_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_moveObjects_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_moveObjects_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_moveObjects_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_moveObjects_Results) MovedObjectIds() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Admin_moveObjects_Results) HasMovedObjectIds() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_moveObjects_Results) SetMovedObjectIds(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMovedObjectIds sets the movedObjectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_moveObjects_Results) NewMovedObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Admin_moveObjects_Results_List is a list of Admin_moveObjects_Results.
type Admin_moveObjects_Results_List = capnp.StructList[Admin_moveObjects_Results]

// NewAdmin_moveObjects_Results creates a new list of Admin_moveObjects_Results.
func NewAdmin_moveObjects_Results_List(s *capnp.Segment, sz int32) (Admin_moveObjects_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Admin_moveObjects_Results](l), err
}

// Admin_moveObjects_Results_Future is a wrapper for a Admin_moveObjects_Results promised by a client call.
type Admin_moveObjects_Results_Future struct{ *capnp.Future }

func (f Admin_moveObjects_Results_Future) Struct() (Admin_moveObjects_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_moveObjects_Results(p.Struct()), err
}

type Admin_removeObjects_Params capnp.Struct

// Admin_removeObjects_Params_TypeID is the unique identifier for the type Admin_removeObjects_Params.
const Admin_removeObjects_Params_TypeID = 0x96a5b17eee7ee1a3

func NewAdmin_removeObjects_Params(s *capnp.Segment) (Admin_removeObjects_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Params(st), err
}

func NewRootAdmin_removeObjects_Params(s *capnp.Segment) (Admin_removeObjects_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Params(st), err
}

func ReadRootAdmin_removeObjects_Params(msg *capnp.Message) (Admin_removeObjects_Params, error) {
	root, err := msg.Root()
	return Admin_removeObjects_Params(root.Struct()), err
}

func (s Admin_removeObjects_Params) String() string {
	str, _ := text.Marshal(0x96a5b17eee7ee1a3, capnp.Struct(s))
	return str
}

func (s Admin_removeObjects_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_removeObjects_Params) DecodeFromPtr(p capnp.Ptr) Admin_removeObjects_Params {
	return Admin_removeObjects_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_removeObjects_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_removeObjects_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_removeObjects_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_removeObjects_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_removeObjects_Params) ObjectIds() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Admin_removeObjects_Params) HasObjectIds() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_removeObjects_Params) SetObjectIds(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewObjectIds sets the objectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_removeObjects_Params) NewObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Admin_removeObjects_Params_List is a list of Admin_removeObjects_Params.
type Admin_removeObjects_Params_List = capnp.StructList[Admin_removeObjects_Params]

// NewAdmin_removeObjects_Params creates a new list of Admin_removeObjects_Params.
func NewAdmin_removeObjects_Params_List(s *capnp.Segment, sz int32) (Admin_removeObjects_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Admin_removeObjects_Params](l), err
}

// Admin_removeObjects_Params_Future is a wrapper for a Admin_removeObjects_Params promised by a client call.
type Admin_removeObjects_Params_Future struct{ *capnp.Future }

func (f Admin_removeObjects_Params_Future) Struct() (Admin_removeObjects_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_removeObjects_Params(p.Struct()), err
}

type Admin_removeObjects_Results capnp.Struct

// Admin_removeObjects_Results_TypeID is the unique identifier for the type Admin_removeObjects_Results.
const Admin_removeObjects_Results_TypeID = 0xa092f60656bb0db4

func NewAdmin_removeObjects_Results(s *capnp.Segment) (Admin_removeObjects_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results(st), err
}

func NewRootAdmin_removeObjects_Results(s *capnp.Segment) (Admin_removeObjects_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results(st), err
}

func ReadRootAdmin_removeObjects_Results(msg *capnp.Message) (Admin_removeObjects_Results, error) {
	root, err := msg.Root()
	return Admin_removeObjects_Results(root.Struct()), err
}

func (s Admin_removeObjects_Results) String() string {
	str, _ := text.Marshal(0xa092f60656bb0db4, capnp.Struct(s))
	return str
}

func (s Admin_removeObjects_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_removeObjects_Results) DecodeFromPtr(p capnp.Ptr) Admin_removeObjects_Results {
	return Admin_removeObjects_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_removeObjects_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_removeObjects_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_removeObjects_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_removeObjects_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_removeObjects_Results) RemovedObjects() (common.Identifiable_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Identifiable_List(p.List()), err
}

func (s Admin_removeObjects_Results) HasRemovedObjects() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_removeObjects_Results) SetRemovedObjects(v common.Identifiable_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRemovedObjects sets the removedObjects field to a newly
// allocated common.Identifiable_List, preferring placement in s's segment.
func (s Admin_removeObjects_Results) NewRemovedObjects(n int32) (common.Identifiable_List, error) {
	l, err := common.NewIdentifiable_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Identifiable_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Admin_removeObjects_Results_List is a list of Admin_removeObjects_Results.
type Admin_removeObjects_Results_List = capnp.StructList[Admin_removeObjects_Results]

// NewAdmin_removeObjects_Results creates a new list of Admin_removeObjects_Results.
func NewAdmin_removeObjects_Results_List(s *capnp.Segment, sz int32) (Admin_removeObjects_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Admin_removeObjects_Results](l), err
}

// Admin_removeObjects_Results_Future is a wrapper for a Admin_removeObjects_Results promised by a client call.
type Admin_removeObjects_Results_Future struct{ *capnp.Future }

func (f Admin_removeObjects_Results_Future) Struct() (Admin_removeObjects_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_removeObjects_Results(p.Struct()), err
}

type Admin_registry_Params capnp.Struct

// Admin_registry_Params_TypeID is the unique identifier for the type Admin_registry_Params.
const Admin_registry_Params_TypeID = 0xee2cf8cf148921b5

func NewAdmin_registry_Params(s *capnp.Segment) (Admin_registry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_registry_Params(st), err
}

func NewRootAdmin_registry_Params(s *capnp.Segment) (Admin_registry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_registry_Params(st), err
}

func ReadRootAdmin_registry_Params(msg *capnp.Message) (Admin_registry_Params, error) {
	root, err := msg.Root()
	return Admin_registry_Params(root.Struct()), err
}

func (s Admin_registry_Params) String() string {
	str, _ := text.Marshal(0xee2cf8cf148921b5, capnp.Struct(s))
	return str
}

func (s Admin_registry_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_registry_Params) DecodeFromPtr(p capnp.Ptr) Admin_registry_Params {
	return Admin_registry_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_registry_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_registry_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_registry_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_registry_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_registry_Params_List is a list of Admin_registry_Params.
type Admin_registry_Params_List = capnp.StructList[Admin_registry_Params]

// NewAdmin_registry_Params creates a new list of Admin_registry_Params.
func NewAdmin_registry_Params_List(s *capnp.Segment, sz int32) (Admin_registry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_registry_Params](l), err
}

// Admin_registry_Params_Future is a wrapper for a Admin_registry_Params promised by a client call.
type Admin_registry_Params_Future struct{ *capnp.Future }

func (f Admin_registry_Params_Future) Struct() (Admin_registry_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_registry_Params(p.Struct()), err
}

type Admin_registry_Results capnp.Struct

// Admin_registry_Results_TypeID is the unique identifier for the type Admin_registry_Results.
const Admin_registry_Results_TypeID = 0xfe62caefab7dfdad

func NewAdmin_registry_Results(s *capnp.Segment) (Admin_registry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results(st), err
}

func NewRootAdmin_registry_Results(s *capnp.Segment) (Admin_registry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results(st), err
}

func ReadRootAdmin_registry_Results(msg *capnp.Message) (Admin_registry_Results, error) {
	root, err := msg.Root()
	return Admin_registry_Results(root.Struct()), err
}

func (s Admin_registry_Results) String() string {
	str, _ := text.Marshal(0xfe62caefab7dfdad, capnp.Struct(s))
	return str
}

func (s Admin_registry_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_registry_Results) DecodeFromPtr(p capnp.Ptr) Admin_registry_Results {
	return Admin_registry_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_registry_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_registry_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_registry_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_registry_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_registry_Results) Registry() Registry {
	p, _ := capnp.Struct(s).Ptr(0)
	return Registry(p.Interface().Client())
}

func (s Admin_registry_Results) HasRegistry() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_registry_Results) SetRegistry(v Registry) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Admin_registry_Results_List is a list of Admin_registry_Results.
type Admin_registry_Results_List = capnp.StructList[Admin_registry_Results]

// NewAdmin_registry_Results creates a new list of Admin_registry_Results.
func NewAdmin_registry_Results_List(s *capnp.Segment, sz int32) (Admin_registry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Admin_registry_Results](l), err
}

// Admin_registry_Results_Future is a wrapper for a Admin_registry_Results promised by a client call.
type Admin_registry_Results_Future struct{ *capnp.Future }

func (f Admin_registry_Results_Future) Struct() (Admin_registry_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_registry_Results(p.Struct()), err
}
func (p Admin_registry_Results_Future) Registry() Registry {
	return Registry(p.Future.Field(0, nil).Client())
}

type Registry capnp.Client

// Registry_TypeID is the unique identifier for the type Registry.
const Registry_TypeID = 0xca7b4bd1600633b8

func (c Registry) SupportedCategories(ctx context.Context, params func(Registry_supportedCategories_Params) error) (Registry_supportedCategories_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_supportedCategories_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Registry_supportedCategories_Results_Future{Future: ans.Future()}, release

}

func (c Registry) CategoryInfo(ctx context.Context, params func(Registry_categoryInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_categoryInfo_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Registry) Entries(ctx context.Context, params func(Registry_entries_Params) error) (Registry_entries_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_entries_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Registry_entries_Results_Future{Future: ans.Future()}, release

}

func (c Registry) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Registry) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Registry) String() string {
	return "Registry(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Registry) AddRef() Registry {
	return Registry(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Registry) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Registry) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Registry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Registry) DecodeFromPtr(p capnp.Ptr) Registry {
	return Registry(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Registry) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Registry) IsSame(other Registry) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Registry) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Registry) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Registry_Server is a Registry with a local implementation.
type Registry_Server interface {
	SupportedCategories(context.Context, Registry_supportedCategories) error

	CategoryInfo(context.Context, Registry_categoryInfo) error

	Entries(context.Context, Registry_entries) error

	Info(context.Context, common.Identifiable_info) error
}

// Registry_NewServer creates a new Server from an implementation of Registry_Server.
func Registry_NewServer(s Registry_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registry_Methods(nil, s), s, c)
}

// Registry_ServerToClient creates a new Client from an implementation of Registry_Server.
// The caller is responsible for calling Release on the returned Client.
func Registry_ServerToClient(s Registry_Server) Registry {
	return Registry(capnp.NewClient(Registry_NewServer(s)))
}

// Registry_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registry_Methods(methods []server.Method, s Registry_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedCategories(ctx, Registry_supportedCategories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CategoryInfo(ctx, Registry_categoryInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Entries(ctx, Registry_entries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Registry_supportedCategories holds the state for a server call to Registry.supportedCategories.
// See server.Call for documentation.
type Registry_supportedCategories struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_supportedCategories) Args() Registry_supportedCategories_Params {
	return Registry_supportedCategories_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registry_supportedCategories) AllocResults() (Registry_supportedCategories_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results(r), err
}

// Registry_categoryInfo holds the state for a server call to Registry.categoryInfo.
// See server.Call for documentation.
type Registry_categoryInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_categoryInfo) Args() Registry_categoryInfo_Params {
	return Registry_categoryInfo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registry_categoryInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation(r), err
}

// Registry_entries holds the state for a server call to Registry.entries.
// See server.Call for documentation.
type Registry_entries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_entries) Args() Registry_entries_Params {
	return Registry_entries_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registry_entries) AllocResults() (Registry_entries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results(r), err
}

// Registry_List is a list of Registry.
type Registry_List = capnp.CapList[Registry]

// NewRegistry_List creates a new list of Registry.
func NewRegistry_List(s *capnp.Segment, sz int32) (Registry_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Registry](l), err
}

type Registry_Entry capnp.Struct

// Registry_Entry_TypeID is the unique identifier for the type Registry_Entry.
const Registry_Entry_TypeID = 0xc17987510cf7ac13

func NewRegistry_Entry(s *capnp.Segment) (Registry_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registry_Entry(st), err
}

func NewRootRegistry_Entry(s *capnp.Segment) (Registry_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registry_Entry(st), err
}

func ReadRootRegistry_Entry(msg *capnp.Message) (Registry_Entry, error) {
	root, err := msg.Root()
	return Registry_Entry(root.Struct()), err
}

func (s Registry_Entry) String() string {
	str, _ := text.Marshal(0xc17987510cf7ac13, capnp.Struct(s))
	return str
}

func (s Registry_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_Entry) DecodeFromPtr(p capnp.Ptr) Registry_Entry {
	return Registry_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registry_Entry) CategoryId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Registry_Entry) HasCategoryId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registry_Entry) CategoryIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_Entry) SetCategoryId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Registry_Entry) Ref() common.Identifiable {
	p, _ := capnp.Struct(s).Ptr(1)
	return common.Identifiable(p.Interface().Client())
}

func (s Registry_Entry) HasRef() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Registry_Entry) SetRef(v common.Identifiable) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s Registry_Entry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Registry_Entry) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Registry_Entry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Registry_Entry) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Registry_Entry_List is a list of Registry_Entry.
type Registry_Entry_List = capnp.StructList[Registry_Entry]

// NewRegistry_Entry creates a new list of Registry_Entry.
func NewRegistry_Entry_List(s *capnp.Segment, sz int32) (Registry_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Registry_Entry](l), err
}

// Registry_Entry_Future is a wrapper for a Registry_Entry promised by a client call.
type Registry_Entry_Future struct{ *capnp.Future }

func (f Registry_Entry_Future) Struct() (Registry_Entry, error) {
	p, err := f.Future.Ptr()
	return Registry_Entry(p.Struct()), err
}
func (p Registry_Entry_Future) Ref() common.Identifiable {
	return common.Identifiable(p.Future.Field(1, nil).Client())
}

type Registry_supportedCategories_Params capnp.Struct

// Registry_supportedCategories_Params_TypeID is the unique identifier for the type Registry_supportedCategories_Params.
const Registry_supportedCategories_Params_TypeID = 0x9c49e6e65e34c29b

func NewRegistry_supportedCategories_Params(s *capnp.Segment) (Registry_supportedCategories_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_supportedCategories_Params(st), err
}

func NewRootRegistry_supportedCategories_Params(s *capnp.Segment) (Registry_supportedCategories_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_supportedCategories_Params(st), err
}

func ReadRootRegistry_supportedCategories_Params(msg *capnp.Message) (Registry_supportedCategories_Params, error) {
	root, err := msg.Root()
	return Registry_supportedCategories_Params(root.Struct()), err
}

func (s Registry_supportedCategories_Params) String() string {
	str, _ := text.Marshal(0x9c49e6e65e34c29b, capnp.Struct(s))
	return str
}

func (s Registry_supportedCategories_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_supportedCategories_Params) DecodeFromPtr(p capnp.Ptr) Registry_supportedCategories_Params {
	return Registry_supportedCategories_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_supportedCategories_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_supportedCategories_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_supportedCategories_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_supportedCategories_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Registry_supportedCategories_Params_List is a list of Registry_supportedCategories_Params.
type Registry_supportedCategories_Params_List = capnp.StructList[Registry_supportedCategories_Params]

// NewRegistry_supportedCategories_Params creates a new list of Registry_supportedCategories_Params.
func NewRegistry_supportedCategories_Params_List(s *capnp.Segment, sz int32) (Registry_supportedCategories_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Registry_supportedCategories_Params](l), err
}

// Registry_supportedCategories_Params_Future is a wrapper for a Registry_supportedCategories_Params promised by a client call.
type Registry_supportedCategories_Params_Future struct{ *capnp.Future }

func (f Registry_supportedCategories_Params_Future) Struct() (Registry_supportedCategories_Params, error) {
	p, err := f.Future.Ptr()
	return Registry_supportedCategories_Params(p.Struct()), err
}

type Registry_supportedCategories_Results capnp.Struct

// Registry_supportedCategories_Results_TypeID is the unique identifier for the type Registry_supportedCategories_Results.
const Registry_supportedCategories_Results_TypeID = 0xb2bf60b5817330b0

func NewRegistry_supportedCategories_Results(s *capnp.Segment) (Registry_supportedCategories_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results(st), err
}

func NewRootRegistry_supportedCategories_Results(s *capnp.Segment) (Registry_supportedCategories_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results(st), err
}

func ReadRootRegistry_supportedCategories_Results(msg *capnp.Message) (Registry_supportedCategories_Results, error) {
	root, err := msg.Root()
	return Registry_supportedCategories_Results(root.Struct()), err
}

func (s Registry_supportedCategories_Results) String() string {
	str, _ := text.Marshal(0xb2bf60b5817330b0, capnp.Struct(s))
	return str
}

func (s Registry_supportedCategories_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_supportedCategories_Results) DecodeFromPtr(p capnp.Ptr) Registry_supportedCategories_Results {
	return Registry_supportedCategories_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_supportedCategories_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_supportedCategories_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_supportedCategories_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_supportedCategories_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registry_supportedCategories_Results) Cats() (common.IdInformation_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation_List(p.List()), err
}

func (s Registry_supportedCategories_Results) HasCats() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registry_supportedCategories_Results) SetCats(v common.IdInformation_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCats sets the cats field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Registry_supportedCategories_Results) NewCats(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Registry_supportedCategories_Results_List is a list of Registry_supportedCategories_Results.
type Registry_supportedCategories_Results_List = capnp.StructList[Registry_supportedCategories_Results]

// NewRegistry_supportedCategories_Results creates a new list of Registry_supportedCategories_Results.
func NewRegistry_supportedCategories_Results_List(s *capnp.Segment, sz int32) (Registry_supportedCategories_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Registry_supportedCategories_Results](l), err
}

// Registry_supportedCategories_Results_Future is a wrapper for a Registry_supportedCategories_Results promised by a client call.
type Registry_supportedCategories_Results_Future struct{ *capnp.Future }

func (f Registry_supportedCategories_Results_Future) Struct() (Registry_supportedCategories_Results, error) {
	p, err := f.Future.Ptr()
	return Registry_supportedCategories_Results(p.Struct()), err
}

type Registry_categoryInfo_Params capnp.Struct

// Registry_categoryInfo_Params_TypeID is the unique identifier for the type Registry_categoryInfo_Params.
const Registry_categoryInfo_Params_TypeID = 0x891283e1b248bc9d

func NewRegistry_categoryInfo_Params(s *capnp.Segment) (Registry_categoryInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_categoryInfo_Params(st), err
}

func NewRootRegistry_categoryInfo_Params(s *capnp.Segment) (Registry_categoryInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_categoryInfo_Params(st), err
}

func ReadRootRegistry_categoryInfo_Params(msg *capnp.Message) (Registry_categoryInfo_Params, error) {
	root, err := msg.Root()
	return Registry_categoryInfo_Params(root.Struct()), err
}

func (s Registry_categoryInfo_Params) String() string {
	str, _ := text.Marshal(0x891283e1b248bc9d, capnp.Struct(s))
	return str
}

func (s Registry_categoryInfo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_categoryInfo_Params) DecodeFromPtr(p capnp.Ptr) Registry_categoryInfo_Params {
	return Registry_categoryInfo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_categoryInfo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_categoryInfo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_categoryInfo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_categoryInfo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registry_categoryInfo_Params) CategoryId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Registry_categoryInfo_Params) HasCategoryId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registry_categoryInfo_Params) CategoryIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_categoryInfo_Params) SetCategoryId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Registry_categoryInfo_Params_List is a list of Registry_categoryInfo_Params.
type Registry_categoryInfo_Params_List = capnp.StructList[Registry_categoryInfo_Params]

// NewRegistry_categoryInfo_Params creates a new list of Registry_categoryInfo_Params.
func NewRegistry_categoryInfo_Params_List(s *capnp.Segment, sz int32) (Registry_categoryInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Registry_categoryInfo_Params](l), err
}

// Registry_categoryInfo_Params_Future is a wrapper for a Registry_categoryInfo_Params promised by a client call.
type Registry_categoryInfo_Params_Future struct{ *capnp.Future }

func (f Registry_categoryInfo_Params_Future) Struct() (Registry_categoryInfo_Params, error) {
	p, err := f.Future.Ptr()
	return Registry_categoryInfo_Params(p.Struct()), err
}

type Registry_entries_Params capnp.Struct

// Registry_entries_Params_TypeID is the unique identifier for the type Registry_entries_Params.
const Registry_entries_Params_TypeID = 0x9ffc53716151c5fa

func NewRegistry_entries_Params(s *capnp.Segment) (Registry_entries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Params(st), err
}

func NewRootRegistry_entries_Params(s *capnp.Segment) (Registry_entries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Params(st), err
}

func ReadRootRegistry_entries_Params(msg *capnp.Message) (Registry_entries_Params, error) {
	root, err := msg.Root()
	return Registry_entries_Params(root.Struct()), err
}

func (s Registry_entries_Params) String() string {
	str, _ := text.Marshal(0x9ffc53716151c5fa, capnp.Struct(s))
	return str
}

func (s Registry_entries_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_entries_Params) DecodeFromPtr(p capnp.Ptr) Registry_entries_Params {
	return Registry_entries_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_entries_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_entries_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_entries_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_entries_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registry_entries_Params) CategoryId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Registry_entries_Params) HasCategoryId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registry_entries_Params) CategoryIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_entries_Params) SetCategoryId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Registry_entries_Params_List is a list of Registry_entries_Params.
type Registry_entries_Params_List = capnp.StructList[Registry_entries_Params]

// NewRegistry_entries_Params creates a new list of Registry_entries_Params.
func NewRegistry_entries_Params_List(s *capnp.Segment, sz int32) (Registry_entries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Registry_entries_Params](l), err
}

// Registry_entries_Params_Future is a wrapper for a Registry_entries_Params promised by a client call.
type Registry_entries_Params_Future struct{ *capnp.Future }

func (f Registry_entries_Params_Future) Struct() (Registry_entries_Params, error) {
	p, err := f.Future.Ptr()
	return Registry_entries_Params(p.Struct()), err
}

type Registry_entries_Results capnp.Struct

// Registry_entries_Results_TypeID is the unique identifier for the type Registry_entries_Results.
const Registry_entries_Results_TypeID = 0xe4eaf56eb486064d

func NewRegistry_entries_Results(s *capnp.Segment) (Registry_entries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results(st), err
}

func NewRootRegistry_entries_Results(s *capnp.Segment) (Registry_entries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results(st), err
}

func ReadRootRegistry_entries_Results(msg *capnp.Message) (Registry_entries_Results, error) {
	root, err := msg.Root()
	return Registry_entries_Results(root.Struct()), err
}

func (s Registry_entries_Results) String() string {
	str, _ := text.Marshal(0xe4eaf56eb486064d, capnp.Struct(s))
	return str
}

func (s Registry_entries_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry_entries_Results) DecodeFromPtr(p capnp.Ptr) Registry_entries_Results {
	return Registry_entries_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry_entries_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry_entries_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry_entries_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry_entries_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registry_entries_Results) Entries() (Registry_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Registry_Entry_List(p.List()), err
}

func (s Registry_entries_Results) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registry_entries_Results) SetEntries(v Registry_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Registry_Entry_List, preferring placement in s's segment.
func (s Registry_entries_Results) NewEntries(n int32) (Registry_Entry_List, error) {
	l, err := NewRegistry_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Registry_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Registry_entries_Results_List is a list of Registry_entries_Results.
type Registry_entries_Results_List = capnp.StructList[Registry_entries_Results]

// NewRegistry_entries_Results creates a new list of Registry_entries_Results.
func NewRegistry_entries_Results_List(s *capnp.Segment, sz int32) (Registry_entries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Registry_entries_Results](l), err
}

// Registry_entries_Results_Future is a wrapper for a Registry_entries_Results promised by a client call.
type Registry_entries_Results_Future struct{ *capnp.Future }

func (f Registry_entries_Results_Future) Struct() (Registry_entries_Results, error) {
	p, err := f.Future.Ptr()
	return Registry_entries_Results(p.Struct()), err
}

type Registrar capnp.Client

// Registrar_TypeID is the unique identifier for the type Registrar.
const Registrar_TypeID = 0xabaef93c36f2d1ea

func (c Registrar) Register(ctx context.Context, params func(Registrar_RegParams) error) (Registrar_register_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xabaef93c36f2d1ea,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registrar_RegParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Registrar_register_Results_Future{Future: ans.Future()}, release

}

func (c Registrar) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Registrar) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Registrar) String() string {
	return "Registrar(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Registrar) AddRef() Registrar {
	return Registrar(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Registrar) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Registrar) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Registrar) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Registrar) DecodeFromPtr(p capnp.Ptr) Registrar {
	return Registrar(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Registrar) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Registrar) IsSame(other Registrar) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Registrar) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Registrar) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Registrar_Server is a Registrar with a local implementation.
type Registrar_Server interface {
	Register(context.Context, Registrar_register) error

	Info(context.Context, common.Identifiable_info) error
}

// Registrar_NewServer creates a new Server from an implementation of Registrar_Server.
func Registrar_NewServer(s Registrar_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registrar_Methods(nil, s), s, c)
}

// Registrar_ServerToClient creates a new Client from an implementation of Registrar_Server.
// The caller is responsible for calling Release on the returned Client.
func Registrar_ServerToClient(s Registrar_Server) Registrar {
	return Registrar(capnp.NewClient(Registrar_NewServer(s)))
}

// Registrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registrar_Methods(methods []server.Method, s Registrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xabaef93c36f2d1ea,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, Registrar_register{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Registrar_register holds the state for a server call to Registrar.register.
// See server.Call for documentation.
type Registrar_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registrar_register) Args() Registrar_RegParams {
	return Registrar_RegParams(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registrar_register) AllocResults() (Registrar_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results(r), err
}

// Registrar_List is a list of Registrar.
type Registrar_List = capnp.CapList[Registrar]

// NewRegistrar_List creates a new list of Registrar.
func NewRegistrar_List(s *capnp.Segment, sz int32) (Registrar_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Registrar](l), err
}

type Registrar_CrossDomainRestore capnp.Struct

// Registrar_CrossDomainRestore_TypeID is the unique identifier for the type Registrar_CrossDomainRestore.
const Registrar_CrossDomainRestore_TypeID = 0xaa1198dd7e71b20e

func NewRegistrar_CrossDomainRestore(s *capnp.Segment) (Registrar_CrossDomainRestore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_CrossDomainRestore(st), err
}

func NewRootRegistrar_CrossDomainRestore(s *capnp.Segment) (Registrar_CrossDomainRestore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_CrossDomainRestore(st), err
}

func ReadRootRegistrar_CrossDomainRestore(msg *capnp.Message) (Registrar_CrossDomainRestore, error) {
	root, err := msg.Root()
	return Registrar_CrossDomainRestore(root.Struct()), err
}

func (s Registrar_CrossDomainRestore) String() string {
	str, _ := text.Marshal(0xaa1198dd7e71b20e, capnp.Struct(s))
	return str
}

func (s Registrar_CrossDomainRestore) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registrar_CrossDomainRestore) DecodeFromPtr(p capnp.Ptr) Registrar_CrossDomainRestore {
	return Registrar_CrossDomainRestore(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registrar_CrossDomainRestore) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registrar_CrossDomainRestore) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registrar_CrossDomainRestore) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registrar_CrossDomainRestore) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registrar_CrossDomainRestore) VatId() (persistence.VatId, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return persistence.VatId(p.Struct()), err
}

func (s Registrar_CrossDomainRestore) HasVatId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registrar_CrossDomainRestore) SetVatId(v persistence.VatId) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewVatId sets the vatId field to a newly
// allocated persistence.VatId struct, preferring placement in s's segment.
func (s Registrar_CrossDomainRestore) NewVatId() (persistence.VatId, error) {
	ss, err := persistence.NewVatId(capnp.Struct(s).Segment())
	if err != nil {
		return persistence.VatId{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Registrar_CrossDomainRestore) Restorer() persistence.Restorer {
	p, _ := capnp.Struct(s).Ptr(1)
	return persistence.Restorer(p.Interface().Client())
}

func (s Registrar_CrossDomainRestore) HasRestorer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Registrar_CrossDomainRestore) SetRestorer(v persistence.Restorer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Registrar_CrossDomainRestore_List is a list of Registrar_CrossDomainRestore.
type Registrar_CrossDomainRestore_List = capnp.StructList[Registrar_CrossDomainRestore]

// NewRegistrar_CrossDomainRestore creates a new list of Registrar_CrossDomainRestore.
func NewRegistrar_CrossDomainRestore_List(s *capnp.Segment, sz int32) (Registrar_CrossDomainRestore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Registrar_CrossDomainRestore](l), err
}

// Registrar_CrossDomainRestore_Future is a wrapper for a Registrar_CrossDomainRestore promised by a client call.
type Registrar_CrossDomainRestore_Future struct{ *capnp.Future }

func (f Registrar_CrossDomainRestore_Future) Struct() (Registrar_CrossDomainRestore, error) {
	p, err := f.Future.Ptr()
	return Registrar_CrossDomainRestore(p.Struct()), err
}
func (p Registrar_CrossDomainRestore_Future) VatId() persistence.VatId_Future {
	return persistence.VatId_Future{Future: p.Future.Field(0, nil)}
}
func (p Registrar_CrossDomainRestore_Future) Restorer() persistence.Restorer {
	return persistence.Restorer(p.Future.Field(1, nil).Client())
}

type Registrar_RegParams capnp.Struct

// Registrar_RegParams_TypeID is the unique identifier for the type Registrar_RegParams.
const Registrar_RegParams_TypeID = 0xe5a84717ea75fb0d

func NewRegistrar_RegParams(s *capnp.Segment) (Registrar_RegParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Registrar_RegParams(st), err
}

func NewRootRegistrar_RegParams(s *capnp.Segment) (Registrar_RegParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Registrar_RegParams(st), err
}

func ReadRootRegistrar_RegParams(msg *capnp.Message) (Registrar_RegParams, error) {
	root, err := msg.Root()
	return Registrar_RegParams(root.Struct()), err
}

func (s Registrar_RegParams) String() string {
	str, _ := text.Marshal(0xe5a84717ea75fb0d, capnp.Struct(s))
	return str
}

func (s Registrar_RegParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registrar_RegParams) DecodeFromPtr(p capnp.Ptr) Registrar_RegParams {
	return Registrar_RegParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registrar_RegParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registrar_RegParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registrar_RegParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registrar_RegParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registrar_RegParams) Cap() common.Identifiable {
	p, _ := capnp.Struct(s).Ptr(0)
	return common.Identifiable(p.Interface().Client())
}

func (s Registrar_RegParams) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registrar_RegParams) SetCap(v common.Identifiable) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Registrar_RegParams) RegName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Registrar_RegParams) HasRegName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Registrar_RegParams) RegNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Registrar_RegParams) SetRegName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Registrar_RegParams) CategoryId() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Registrar_RegParams) HasCategoryId() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Registrar_RegParams) CategoryIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Registrar_RegParams) SetCategoryId(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Registrar_RegParams) XDomain() (Registrar_CrossDomainRestore, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Registrar_CrossDomainRestore(p.Struct()), err
}

func (s Registrar_RegParams) HasXDomain() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Registrar_RegParams) SetXDomain(v Registrar_CrossDomainRestore) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewXDomain sets the xDomain field to a newly
// allocated Registrar_CrossDomainRestore struct, preferring placement in s's segment.
func (s Registrar_RegParams) NewXDomain() (Registrar_CrossDomainRestore, error) {
	ss, err := NewRegistrar_CrossDomainRestore(capnp.Struct(s).Segment())
	if err != nil {
		return Registrar_CrossDomainRestore{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Registrar_RegParams_List is a list of Registrar_RegParams.
type Registrar_RegParams_List = capnp.StructList[Registrar_RegParams]

// NewRegistrar_RegParams creates a new list of Registrar_RegParams.
func NewRegistrar_RegParams_List(s *capnp.Segment, sz int32) (Registrar_RegParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Registrar_RegParams](l), err
}

// Registrar_RegParams_Future is a wrapper for a Registrar_RegParams promised by a client call.
type Registrar_RegParams_Future struct{ *capnp.Future }

func (f Registrar_RegParams_Future) Struct() (Registrar_RegParams, error) {
	p, err := f.Future.Ptr()
	return Registrar_RegParams(p.Struct()), err
}
func (p Registrar_RegParams_Future) Cap() common.Identifiable {
	return common.Identifiable(p.Future.Field(0, nil).Client())
}

func (p Registrar_RegParams_Future) XDomain() Registrar_CrossDomainRestore_Future {
	return Registrar_CrossDomainRestore_Future{Future: p.Future.Field(3, nil)}
}

type Registrar_UnregisterCapability capnp.Client

// Registrar_UnregisterCapability_TypeID is the unique identifier for the type Registrar_UnregisterCapability.
const Registrar_UnregisterCapability_TypeID = 0x9846f8829716925a

func (c Registrar_UnregisterCapability) Unregister(ctx context.Context, params func(Registrar_UnregisterCapability_unregister_Params) error) (Registrar_UnregisterCapability_unregister_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9846f8829716925a,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar.UnregisterCapability",
			MethodName:    "unregister",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registrar_UnregisterCapability_unregister_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Registrar_UnregisterCapability_unregister_Results_Future{Future: ans.Future()}, release

}

func (c Registrar_UnregisterCapability) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Registrar_UnregisterCapability) String() string {
	return "Registrar_UnregisterCapability(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Registrar_UnregisterCapability) AddRef() Registrar_UnregisterCapability {
	return Registrar_UnregisterCapability(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Registrar_UnregisterCapability) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Registrar_UnregisterCapability) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Registrar_UnregisterCapability) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Registrar_UnregisterCapability) DecodeFromPtr(p capnp.Ptr) Registrar_UnregisterCapability {
	return Registrar_UnregisterCapability(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Registrar_UnregisterCapability) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Registrar_UnregisterCapability) IsSame(other Registrar_UnregisterCapability) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Registrar_UnregisterCapability) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Registrar_UnregisterCapability) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Registrar_UnregisterCapability_Server is a Registrar_UnregisterCapability with a local implementation.
type Registrar_UnregisterCapability_Server interface {
	Unregister(context.Context, Registrar_UnregisterCapability_unregister) error
}

// Registrar_UnregisterCapability_NewServer creates a new Server from an implementation of Registrar_UnregisterCapability_Server.
func Registrar_UnregisterCapability_NewServer(s Registrar_UnregisterCapability_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registrar_UnregisterCapability_Methods(nil, s), s, c)
}

// Registrar_UnregisterCapability_ServerToClient creates a new Client from an implementation of Registrar_UnregisterCapability_Server.
// The caller is responsible for calling Release on the returned Client.
func Registrar_UnregisterCapability_ServerToClient(s Registrar_UnregisterCapability_Server) Registrar_UnregisterCapability {
	return Registrar_UnregisterCapability(capnp.NewClient(Registrar_UnregisterCapability_NewServer(s)))
}

// Registrar_UnregisterCapability_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registrar_UnregisterCapability_Methods(methods []server.Method, s Registrar_UnregisterCapability_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9846f8829716925a,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar.UnregisterCapability",
			MethodName:    "unregister",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unregister(ctx, Registrar_UnregisterCapability_unregister{call})
		},
	})

	return methods
}

// Registrar_UnregisterCapability_unregister holds the state for a server call to Registrar_UnregisterCapability.unregister.
// See server.Call for documentation.
type Registrar_UnregisterCapability_unregister struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registrar_UnregisterCapability_unregister) Args() Registrar_UnregisterCapability_unregister_Params {
	return Registrar_UnregisterCapability_unregister_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registrar_UnregisterCapability_unregister) AllocResults() (Registrar_UnregisterCapability_unregister_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Registrar_UnregisterCapability_unregister_Results(r), err
}

// Registrar_UnregisterCapability_List is a list of Registrar_UnregisterCapability.
type Registrar_UnregisterCapability_List = capnp.CapList[Registrar_UnregisterCapability]

// NewRegistrar_UnregisterCapability_List creates a new list of Registrar_UnregisterCapability.
func NewRegistrar_UnregisterCapability_List(s *capnp.Segment, sz int32) (Registrar_UnregisterCapability_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Registrar_UnregisterCapability](l), err
}

type Registrar_UnregisterCapability_unregister_Params capnp.Struct

// Registrar_UnregisterCapability_unregister_Params_TypeID is the unique identifier for the type Registrar_UnregisterCapability_unregister_Params.
const Registrar_UnregisterCapability_unregister_Params_TypeID = 0x92080763dc871479

func NewRegistrar_UnregisterCapability_unregister_Params(s *capnp.Segment) (Registrar_UnregisterCapability_unregister_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registrar_UnregisterCapability_unregister_Params(st), err
}

func NewRootRegistrar_UnregisterCapability_unregister_Params(s *capnp.Segment) (Registrar_UnregisterCapability_unregister_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registrar_UnregisterCapability_unregister_Params(st), err
}

func ReadRootRegistrar_UnregisterCapability_unregister_Params(msg *capnp.Message) (Registrar_UnregisterCapability_unregister_Params, error) {
	root, err := msg.Root()
	return Registrar_UnregisterCapability_unregister_Params(root.Struct()), err
}

func (s Registrar_UnregisterCapability_unregister_Params) String() string {
	str, _ := text.Marshal(0x92080763dc871479, capnp.Struct(s))
	return str
}

func (s Registrar_UnregisterCapability_unregister_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registrar_UnregisterCapability_unregister_Params) DecodeFromPtr(p capnp.Ptr) Registrar_UnregisterCapability_unregister_Params {
	return Registrar_UnregisterCapability_unregister_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registrar_UnregisterCapability_unregister_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registrar_UnregisterCapability_unregister_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registrar_UnregisterCapability_unregister_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registrar_UnregisterCapability_unregister_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Registrar_UnregisterCapability_unregister_Params_List is a list of Registrar_UnregisterCapability_unregister_Params.
type Registrar_UnregisterCapability_unregister_Params_List = capnp.StructList[Registrar_UnregisterCapability_unregister_Params]

// NewRegistrar_UnregisterCapability_unregister_Params creates a new list of Registrar_UnregisterCapability_unregister_Params.
func NewRegistrar_UnregisterCapability_unregister_Params_List(s *capnp.Segment, sz int32) (Registrar_UnregisterCapability_unregister_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Registrar_UnregisterCapability_unregister_Params](l), err
}

// Registrar_UnregisterCapability_unregister_Params_Future is a wrapper for a Registrar_UnregisterCapability_unregister_Params promised by a client call.
type Registrar_UnregisterCapability_unregister_Params_Future struct{ *capnp.Future }

func (f Registrar_UnregisterCapability_unregister_Params_Future) Struct() (Registrar_UnregisterCapability_unregister_Params, error) {
	p, err := f.Future.Ptr()
	return Registrar_UnregisterCapability_unregister_Params(p.Struct()), err
}

type Registrar_UnregisterCapability_unregister_Results capnp.Struct

// Registrar_UnregisterCapability_unregister_Results_TypeID is the unique identifier for the type Registrar_UnregisterCapability_unregister_Results.
const Registrar_UnregisterCapability_unregister_Results_TypeID = 0x8e5199f7b0768f03

func NewRegistrar_UnregisterCapability_unregister_Results(s *capnp.Segment) (Registrar_UnregisterCapability_unregister_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Registrar_UnregisterCapability_unregister_Results(st), err
}

func NewRootRegistrar_UnregisterCapability_unregister_Results(s *capnp.Segment) (Registrar_UnregisterCapability_unregister_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Registrar_UnregisterCapability_unregister_Results(st), err
}

func ReadRootRegistrar_UnregisterCapability_unregister_Results(msg *capnp.Message) (Registrar_UnregisterCapability_unregister_Results, error) {
	root, err := msg.Root()
	return Registrar_UnregisterCapability_unregister_Results(root.Struct()), err
}

func (s Registrar_UnregisterCapability_unregister_Results) String() string {
	str, _ := text.Marshal(0x8e5199f7b0768f03, capnp.Struct(s))
	return str
}

func (s Registrar_UnregisterCapability_unregister_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registrar_UnregisterCapability_unregister_Results) DecodeFromPtr(p capnp.Ptr) Registrar_UnregisterCapability_unregister_Results {
	return Registrar_UnregisterCapability_unregister_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registrar_UnregisterCapability_unregister_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registrar_UnregisterCapability_unregister_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registrar_UnregisterCapability_unregister_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registrar_UnregisterCapability_unregister_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registrar_UnregisterCapability_unregister_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Registrar_UnregisterCapability_unregister_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Registrar_UnregisterCapability_unregister_Results_List is a list of Registrar_UnregisterCapability_unregister_Results.
type Registrar_UnregisterCapability_unregister_Results_List = capnp.StructList[Registrar_UnregisterCapability_unregister_Results]

// NewRegistrar_UnregisterCapability_unregister_Results creates a new list of Registrar_UnregisterCapability_unregister_Results.
func NewRegistrar_UnregisterCapability_unregister_Results_List(s *capnp.Segment, sz int32) (Registrar_UnregisterCapability_unregister_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Registrar_UnregisterCapability_unregister_Results](l), err
}

// Registrar_UnregisterCapability_unregister_Results_Future is a wrapper for a Registrar_UnregisterCapability_unregister_Results promised by a client call.
type Registrar_UnregisterCapability_unregister_Results_Future struct{ *capnp.Future }

func (f Registrar_UnregisterCapability_unregister_Results_Future) Struct() (Registrar_UnregisterCapability_unregister_Results, error) {
	p, err := f.Future.Ptr()
	return Registrar_UnregisterCapability_unregister_Results(p.Struct()), err
}

type Registrar_ReregisterCapability capnp.Client

// Registrar_ReregisterCapability_TypeID is the unique identifier for the type Registrar_ReregisterCapability.
const Registrar_ReregisterCapability_TypeID = 0xfbcf34bcf62e574d

func (c Registrar_ReregisterCapability) Reregister(ctx context.Context, params func(Registrar_ReregisterCapability_reregister_Params) error) (Registrar_ReregisterCapability_reregister_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfbcf34bcf62e574d,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar.ReregisterCapability",
			MethodName:    "reregister",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registrar_ReregisterCapability_reregister_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Registrar_ReregisterCapability_reregister_Results_Future{Future: ans.Future()}, release

}

func (c Registrar_ReregisterCapability) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Registrar_ReregisterCapability) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Registrar_ReregisterCapability) String() string {
	return "Registrar_ReregisterCapability(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Registrar_ReregisterCapability) AddRef() Registrar_ReregisterCapability {
	return Registrar_ReregisterCapability(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Registrar_ReregisterCapability) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Registrar_ReregisterCapability) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Registrar_ReregisterCapability) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Registrar_ReregisterCapability) DecodeFromPtr(p capnp.Ptr) Registrar_ReregisterCapability {
	return Registrar_ReregisterCapability(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Registrar_ReregisterCapability) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Registrar_ReregisterCapability) IsSame(other Registrar_ReregisterCapability) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Registrar_ReregisterCapability) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Registrar_ReregisterCapability) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Registrar_ReregisterCapability_Server is a Registrar_ReregisterCapability with a local implementation.
type Registrar_ReregisterCapability_Server interface {
	Reregister(context.Context, Registrar_ReregisterCapability_reregister) error

	Save(context.Context, persistence.Persistent_save) error
}

// Registrar_ReregisterCapability_NewServer creates a new Server from an implementation of Registrar_ReregisterCapability_Server.
func Registrar_ReregisterCapability_NewServer(s Registrar_ReregisterCapability_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registrar_ReregisterCapability_Methods(nil, s), s, c)
}

// Registrar_ReregisterCapability_ServerToClient creates a new Client from an implementation of Registrar_ReregisterCapability_Server.
// The caller is responsible for calling Release on the returned Client.
func Registrar_ReregisterCapability_ServerToClient(s Registrar_ReregisterCapability_Server) Registrar_ReregisterCapability {
	return Registrar_ReregisterCapability(capnp.NewClient(Registrar_ReregisterCapability_NewServer(s)))
}

// Registrar_ReregisterCapability_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registrar_ReregisterCapability_Methods(methods []server.Method, s Registrar_ReregisterCapability_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfbcf34bcf62e574d,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar.ReregisterCapability",
			MethodName:    "reregister",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reregister(ctx, Registrar_ReregisterCapability_reregister{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Registrar_ReregisterCapability_reregister holds the state for a server call to Registrar_ReregisterCapability.reregister.
// See server.Call for documentation.
type Registrar_ReregisterCapability_reregister struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registrar_ReregisterCapability_reregister) Args() Registrar_ReregisterCapability_reregister_Params {
	return Registrar_ReregisterCapability_reregister_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registrar_ReregisterCapability_reregister) AllocResults() (Registrar_ReregisterCapability_reregister_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Registrar_ReregisterCapability_reregister_Results(r), err
}

// Registrar_ReregisterCapability_List is a list of Registrar_ReregisterCapability.
type Registrar_ReregisterCapability_List = capnp.CapList[Registrar_ReregisterCapability]

// NewRegistrar_ReregisterCapability_List creates a new list of Registrar_ReregisterCapability.
func NewRegistrar_ReregisterCapability_List(s *capnp.Segment, sz int32) (Registrar_ReregisterCapability_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Registrar_ReregisterCapability](l), err
}

type Registrar_ReregisterCapability_reregister_Params capnp.Struct

// Registrar_ReregisterCapability_reregister_Params_TypeID is the unique identifier for the type Registrar_ReregisterCapability_reregister_Params.
const Registrar_ReregisterCapability_reregister_Params_TypeID = 0xfc3aeeca54422be9

func NewRegistrar_ReregisterCapability_reregister_Params(s *capnp.Segment) (Registrar_ReregisterCapability_reregister_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registrar_ReregisterCapability_reregister_Params(st), err
}

func NewRootRegistrar_ReregisterCapability_reregister_Params(s *capnp.Segment) (Registrar_ReregisterCapability_reregister_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registrar_ReregisterCapability_reregister_Params(st), err
}

func ReadRootRegistrar_ReregisterCapability_reregister_Params(msg *capnp.Message) (Registrar_ReregisterCapability_reregister_Params, error) {
	root, err := msg.Root()
	return Registrar_ReregisterCapability_reregister_Params(root.Struct()), err
}

func (s Registrar_ReregisterCapability_reregister_Params) String() string {
	str, _ := text.Marshal(0xfc3aeeca54422be9, capnp.Struct(s))
	return str
}

func (s Registrar_ReregisterCapability_reregister_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registrar_ReregisterCapability_reregister_Params) DecodeFromPtr(p capnp.Ptr) Registrar_ReregisterCapability_reregister_Params {
	return Registrar_ReregisterCapability_reregister_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registrar_ReregisterCapability_reregister_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registrar_ReregisterCapability_reregister_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registrar_ReregisterCapability_reregister_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registrar_ReregisterCapability_reregister_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Registrar_ReregisterCapability_reregister_Params_List is a list of Registrar_ReregisterCapability_reregister_Params.
type Registrar_ReregisterCapability_reregister_Params_List = capnp.StructList[Registrar_ReregisterCapability_reregister_Params]

// NewRegistrar_ReregisterCapability_reregister_Params creates a new list of Registrar_ReregisterCapability_reregister_Params.
func NewRegistrar_ReregisterCapability_reregister_Params_List(s *capnp.Segment, sz int32) (Registrar_ReregisterCapability_reregister_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Registrar_ReregisterCapability_reregister_Params](l), err
}

// Registrar_ReregisterCapability_reregister_Params_Future is a wrapper for a Registrar_ReregisterCapability_reregister_Params promised by a client call.
type Registrar_ReregisterCapability_reregister_Params_Future struct{ *capnp.Future }

func (f Registrar_ReregisterCapability_reregister_Params_Future) Struct() (Registrar_ReregisterCapability_reregister_Params, error) {
	p, err := f.Future.Ptr()
	return Registrar_ReregisterCapability_reregister_Params(p.Struct()), err
}

type Registrar_ReregisterCapability_reregister_Results capnp.Struct

// Registrar_ReregisterCapability_reregister_Results_TypeID is the unique identifier for the type Registrar_ReregisterCapability_reregister_Results.
const Registrar_ReregisterCapability_reregister_Results_TypeID = 0xd7d1da5ec5b6e655

func NewRegistrar_ReregisterCapability_reregister_Results(s *capnp.Segment) (Registrar_ReregisterCapability_reregister_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Registrar_ReregisterCapability_reregister_Results(st), err
}

func NewRootRegistrar_ReregisterCapability_reregister_Results(s *capnp.Segment) (Registrar_ReregisterCapability_reregister_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Registrar_ReregisterCapability_reregister_Results(st), err
}

func ReadRootRegistrar_ReregisterCapability_reregister_Results(msg *capnp.Message) (Registrar_ReregisterCapability_reregister_Results, error) {
	root, err := msg.Root()
	return Registrar_ReregisterCapability_reregister_Results(root.Struct()), err
}

func (s Registrar_ReregisterCapability_reregister_Results) String() string {
	str, _ := text.Marshal(0xd7d1da5ec5b6e655, capnp.Struct(s))
	return str
}

func (s Registrar_ReregisterCapability_reregister_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registrar_ReregisterCapability_reregister_Results) DecodeFromPtr(p capnp.Ptr) Registrar_ReregisterCapability_reregister_Results {
	return Registrar_ReregisterCapability_reregister_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registrar_ReregisterCapability_reregister_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registrar_ReregisterCapability_reregister_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registrar_ReregisterCapability_reregister_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registrar_ReregisterCapability_reregister_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registrar_ReregisterCapability_reregister_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Registrar_ReregisterCapability_reregister_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Registrar_ReregisterCapability_reregister_Results_List is a list of Registrar_ReregisterCapability_reregister_Results.
type Registrar_ReregisterCapability_reregister_Results_List = capnp.StructList[Registrar_ReregisterCapability_reregister_Results]

// NewRegistrar_ReregisterCapability_reregister_Results creates a new list of Registrar_ReregisterCapability_reregister_Results.
func NewRegistrar_ReregisterCapability_reregister_Results_List(s *capnp.Segment, sz int32) (Registrar_ReregisterCapability_reregister_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Registrar_ReregisterCapability_reregister_Results](l), err
}

// Registrar_ReregisterCapability_reregister_Results_Future is a wrapper for a Registrar_ReregisterCapability_reregister_Results promised by a client call.
type Registrar_ReregisterCapability_reregister_Results_Future struct{ *capnp.Future }

func (f Registrar_ReregisterCapability_reregister_Results_Future) Struct() (Registrar_ReregisterCapability_reregister_Results, error) {
	p, err := f.Future.Ptr()
	return Registrar_ReregisterCapability_reregister_Results(p.Struct()), err
}

type Registrar_register_Results capnp.Struct

// Registrar_register_Results_TypeID is the unique identifier for the type Registrar_register_Results.
const Registrar_register_Results_TypeID = 0xb2a9b080f0c4013c

func NewRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results(st), err
}

func NewRootRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results(st), err
}

func ReadRootRegistrar_register_Results(msg *capnp.Message) (Registrar_register_Results, error) {
	root, err := msg.Root()
	return Registrar_register_Results(root.Struct()), err
}

func (s Registrar_register_Results) String() string {
	str, _ := text.Marshal(0xb2a9b080f0c4013c, capnp.Struct(s))
	return str
}

func (s Registrar_register_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registrar_register_Results) DecodeFromPtr(p capnp.Ptr) Registrar_register_Results {
	return Registrar_register_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registrar_register_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registrar_register_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registrar_register_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registrar_register_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registrar_register_Results) Unreg() Registrar_UnregisterCapability {
	p, _ := capnp.Struct(s).Ptr(0)
	return Registrar_UnregisterCapability(p.Interface().Client())
}

func (s Registrar_register_Results) HasUnreg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registrar_register_Results) SetUnreg(v Registrar_UnregisterCapability) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Registrar_register_Results) ReregSR() (persistence.SturdyRef, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return persistence.SturdyRef(p.Struct()), err
}

func (s Registrar_register_Results) HasReregSR() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Registrar_register_Results) SetReregSR(v persistence.SturdyRef) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewReregSR sets the reregSR field to a newly
// allocated persistence.SturdyRef struct, preferring placement in s's segment.
func (s Registrar_register_Results) NewReregSR() (persistence.SturdyRef, error) {
	ss, err := persistence.NewSturdyRef(capnp.Struct(s).Segment())
	if err != nil {
		return persistence.SturdyRef{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Registrar_register_Results_List is a list of Registrar_register_Results.
type Registrar_register_Results_List = capnp.StructList[Registrar_register_Results]

// NewRegistrar_register_Results creates a new list of Registrar_register_Results.
func NewRegistrar_register_Results_List(s *capnp.Segment, sz int32) (Registrar_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Registrar_register_Results](l), err
}

// Registrar_register_Results_Future is a wrapper for a Registrar_register_Results promised by a client call.
type Registrar_register_Results_Future struct{ *capnp.Future }

func (f Registrar_register_Results_Future) Struct() (Registrar_register_Results, error) {
	p, err := f.Future.Ptr()
	return Registrar_register_Results(p.Struct()), err
}
func (p Registrar_register_Results_Future) Unreg() Registrar_UnregisterCapability {
	return Registrar_UnregisterCapability(p.Future.Field(0, nil).Client())
}

func (p Registrar_register_Results_Future) ReregSR() persistence.SturdyRef_Future {
	return persistence.SturdyRef_Future{Future: p.Future.Field(1, nil)}
}

const schema_fe1be0c39c7e8269 = "x\xda\xb4W\x7f\x8cT\xd5\x15>\xe7\xdd\x19\x1e3;" +
	"\xb33\xb7oW\xb4\x86l\xb6\xddF\xb1:\xe5\xa7\xa9" +
	"\x84fgY\xec\xb2\xdb\xae\xec\x1d\xa1\xb6\x9b\xd6\xf2v" +
	"\xf6\xb1\x0c\xd9\x99Y\xde{K]\x1av\xa9\x18)i" +
	"\xc4\x94\xa4\xadP\x8c\xd6\xa6iE\xa9\xb0QSS\xad" +
	"Y,i\x02\x7f\xd8\x8dR\x0b\x8a)I\xc1H\"m" +
	"lA-\xc2k\xee}s\xdf\xbb;;,b\xe2\x7f" +
	"\xbb\xf3\xce=?\xbe\xfb}\xe7\x9e3\x7f,\x9a\x8d," +
	"H\xbeCAc\x7f\x8d\xce\xf2\x1e}q\xe5\xf8\xa9m" +
	"\x9f\xdb\x01\xf4z\x04\x88\xa2\x0e\xb0\xe8\xf8\xec>\x044" +
	"N\xcfn\x05\xf4\xc8\xc3\x9b\x0e|\xb0\x9b\xed\x04\x96A" +
	"\x04\x88p\x83X,\xae\x01\x1a\xcd1n\xf0\xca\x9b\xbd" +
	"[\x13\xc7^\xde\x09\xb4\x91{\xd0\xb8A[l9\xf7" +
	"\xd0\x19\xfb\x01\xa07\xd2\xb0\xfd\xad\xbc>{\x17\xd0\x8c" +
	"t\xf0BL\xd3 \xe2\xfd\xfa\xd4\xe8\xb9\xd1\x83\xbf\xf9" +
	"y\xe5\xa8\x08\xbe?\x96\xe3G_\x10\xbe{w]\xf7" +
	"\x8b\xfb?\xfc\xfa#@o \xde\xd9\xc9\xf7o_\xf6" +
	"\xd1\xef\x9f\x02\xc0E\xef\xc5l40\xae\x03\x18\x97b" +
	"\x1d\xc6<\xfe\x97\xf7\xcbC\x8b\xef=s\xa6s\xaf_" +
	"\x8b\x08D\xe3{\x10\"\xde\xff\x0e3s\xe3\xdd\x1f?" +
	"\xa6V\x89\xf1\xa5<P,\xce\x03=\x9b\xfc\xe3\xb7f" +
	"]\xd8\xf5\xb8\x9a\xc9m\xf1^np\x870\x88><" +
	"\x98&\xbfz\xfaI\xd5\xa0\x18\x178\x8d\x08\x83\xfa\xf1" +
	"\x8d\xa3'\x1f\xa1\xfb\x80\xde\x80a\xaa>\x1c\xfb\xe3}" +
	"hL\x88l_\x8asH\x82\xef4E\xbc\xc2\xfd\xa3" +
	"{_\xf9\xc7\x8d\x97\x01\xd0\x98[w\xc4\x98W\xd7\x01" +
	"`l\xac\xeb0\x1e\xad\x9b\x03\xe0-\xc3?\xff{\xeb" +
	"\x81'\xc7\xb9g\x09\xf0Cu\x02\xa5\xddu\xdc\xdb\x81" +
	"\xf9\xce\x8f\x9e[\xfb\xf2\xb8Z\xdd\xf9\xba'\xb8A4" +
	"\xc1s{n\x89\xbd\xf9+\xdb\xbe\xf6\x12\xb0\xc6\xe0\x0e" +
	"\x97$\xba\xb8A\x9b00\x9e\xfe \xc1\xb6\x8fLp" +
	"\x0f\xde\x1f\x16\xcdZ;\xf9\x8d\x1f\x1e\x81(\xe1\x19\x9b" +
	"\x89\xf7\x8db\x82\xffUH<\x03\xca\xe7\xea\xdc\xa3\xc9" +
	"CF29\x07\xc0hL\xfe\xc5\xd8\xcd\xff\xf2\xfe\xf6" +
	"\xf6V\xdcy\xe3\x9f\x8e\xa9\xe4\xd8\x91\x14\xb8\xfe,\xc9" +
	"s_s\xe6\xf9\xc3\xf7\x9e\x98|C\xa5\xd7\xa5\xa4\xa0" +
	"Wc=O\xed\xfb\xff}mt\xcf\x1b\xdb\xff\xae\x02" +
	"\xbf\xa4\xde\xcf]\x18\\x\xf0\x81\x83\x17_\xbf\xee\xcd" +
	"Jq\xbe\xc5p\xbd \xe0\x96z\x1e\xa3{\xd6\x83\xcf" +
	"\x96\xce\x9f\xfd\xa7\x8a\xcfI\xdf\xe0\xb4p\x91\xbc8|" +
	"vN\xc7\xefNW\xdd\x9dH\xa61\xf5y4\xbe\x94" +
	"\xe2\xf57\xa7\xde\xe1`6\xefhx\xf5\xc3[\xcf\xf9" +
	"\x09\x09\x9b\x8fR\xb7p\x96\xddu\xcf\xbaM_\xfc\x0f" +
	"9?\x0d\x99S\xa9}\xc6\xbb\xdc\xc5\xa2\xd3\xa9\x0e4" +
	"&\xd2\x1c\x9a\xee{2\x17^\\\xfc\xea\xc5i\xdc>" +
	"\x98\xb6\xd18\x9c\xe6\x11'\xd2\x1d\xc6{\xc2\xfa\xdd/" +
	"/_}\xe4\xdc\xd2\x8f\x15\x11\x9dL\x0b\x11\xed\xbf\xb4" +
	"\xe5\xa9\x7f\x1d\xe9\xbb\xac\x024\x99^\xc8\xab;\x9en" +
	"\x05\x0fb\x9em\x0d\x14\x1c\xd7\x1e\x89d\xf2\xe6Pi" +
	"hi\xae\xf2\x7f&o\xba\xd6@\xd9\x1e\xe9,\xad+" +
	"\xb7\xf4\x98\xb6n\x16\x1d\x16!\x11\x80\x08\x02\xd0d/" +
	"\x00K\x10d\xd7k\xe8I[ \x9d\xfd\x98\x00\x0d\x13" +
	"\x80\x81g}\xaag\xd3\xce\xac)\xf9\xdf,\xbb\xdd\x1c" +
	"2\xfb\x0a\x83\x05w$3\x1c\xfc\xd8\x92\xb3\x9c\xe1A" +
	"\xd7\x01P\xe3-\x07`\xb3\x09\xb2\x06\x0d\xc7\x9c\xe1|" +
	"\xder\x1cD\xd0\x10\x95P\xb2\x88\xb6\xfeb\xa1\x94)" +
	"\x967Y\xab\xfa6Xy\xd7\xe1\x05\x98E\x87{\x90" +
	"\x0e\xe7\xe5\x00\xd8\xcd\x04\xd9\x0a\x0d)b\x03'\x08m" +
	"\xe3Q\x96\x11d+5\xf4\xca\xe2lg?\xa0\x83\xf5" +
	"\x80=\x04Em\xf5\x80cn\xb9\xddtk\xd4\x9a\xb8" +
	"\xe6Z+\x89\xd9!\xeca\x01\xb65\xad\x04\x9cr\x07" +
	"\xb9\xca\x1d\xdc<c\xb6W\xba\xe3\xe9\xd95\x89\xf4z" +
	"\x10Y\x84D\x01\x82\xf6\x8c\xb2\xd3S\xda\x0b\x1a\x8d\xe9" +
	"\x9e\xac\x00\x88eg\xb1\x07\xc3 \xd1j\"9\xc3C" +
	"Ce\xdb\xb5\xfa\xdb}\x96\x14,\xbf\x16Rt\x82C" +
	"\xa4\xfa\x90Ur\x85a\xab\x8f\xcf\xa7\"^d\x060" +
	"\x05\xc5\x88;\xc5\xf1f\x05M\xdf\xba\x7f\x15\xb4\xfa\x07" +
	"$\xa4\xd4;\xb6r\xefw\x8eN>3\x0e\x805\xc1" +
	"U\xa3U*\x1e\x11\xe1\xf4\xc1\xcf\"\\x\x97\xedv" +
	"\xd9qV\x94\x8bf\xa1\x94\xb3\x1cW/\xdb\x16\xbfI" +
	"\x85\xf1\x0b\x01X\x0bA6_a\xfcm]\x00\xecV" +
	"\x82\xec\xab\x1a6m\x12\xa4N{\x0fM\xfe\xe4\x98\xfb" +
	"\xbd\xf8)\x1e4-\x82:n\xd9\xb6l\x00@\xea-" +
	"\xcb\x1c\xbf\xe9\x81\xe6\xe7\x1f\xe3_\xa9\x92\x92V\x9d\x12" +
	"\x00K\xe3\x94\xe7o\x8f\xd2O\xe7\xe6\x947|\xee>" +
	"\xa5\xe95\xef\xf3d1X\xa9\xa6Ll\xcb\xcbY\x03" +
	"\x82\x0e\x80\x8e'\x99\x8bRX)N]/g\xd5\xfa" +
	"\xb9Bg\x19\x1b\xe5\xb3Ii\x97Og\xa9\x02\x00\xc8" +
	"\"\x8b *\xb8\xc3\x0c\x98W\xb5,t\xae\x0a\xf7\xf2" +
	"J\xd7Y\xaca\x93\x10\x11\xd2\x10\x06\x1f\xd01\x9b\x17" +
	"qw\x0e\xd3^\xf7\xdb\xdb\xe6\xde\xb4\xbe\xf8\xe3\xf0\"" +
	"\xaeAd\xb5HwK\xa5\x8b\xb6h\x98\xca\x9b!\xd1" +
	"\xd2\xdek'\xc8\xe5\xa3\xa3G_\x9f\x99\xd7f\x7f\xff" +
	"\x14R\x7f\xaa6\xadUg\xdftg\xc9\xb5E\xdfI" +
	"\x04\x9e\xee\xe4:_A\x90\xf5(\xf0u\x7f\x01\x80\xad" +
	"$\xc8VkH5\xad\x015\x00\xcaxQ\xdf$\xc8" +
	"\xbe}\x85\x8e\xa0\xdb\xd6\xba*)Q\xc0T\xc9,Z" +
	"\xd3\x9aFun \xd8\x10\x0eA\xb8\xd0O\x96%\x04" +
	"\xa5\xe4\\\x89r\xd0\xa2\xec\x09\xd0h\xb7\x8e\x18\xcc\xcf" +
	"(\xa1\xa5m\x1b@\xa3w\xe8\xa8\x05S'\xca\x01\x84" +
	"3C\xa3\xcd\xba'o\x12%\xd0z\xc1r\xb2Ja" +
	")\xfe\"gq\xac\xd2\"?\x01_k\xb6\xa4J\x0b" +
	"V\x09\xdb\x1br3@|\xc1!\x00\xb6\x98 \xcb^" +
	"\xa9\xdd\xca\xb6\xaa\xe5]guY\xfa\xe7\x0f\xd1\xd5'" +
	"\x01)\xd7)\xaf\xa3m}\x96\x93@M\x97j/\xf6" +
	";q\xdf\x06h\x15\xef\xe9U_\xd3\xe9\xc2\xa81l" +
	"t\x85\xd0\x0ad\x11\xe9\x82\xa5a\xe7\x0d\x91\x05\xa8\xd2" +
	"b\x1a\xb0ux\xc8\xb1l\xf7\x8aEN{5e\x8d" +
	"\xb5Pk\xd1\x02\xea\x84\xe2\x0f\xf8]%~R\xe3\xc6" +
	"\x06*\xcc\xe1rM\x07\xfeM\xae\xcc\xef\x12d\xeb\x15" +
	"\xf2X<\xe8Z\x82lP\x91k\x81\xd3l=A\xe6" +
	"jH\x09i@\x02@7r\xcbA\x82\xec>\x0d\xf5" +
	"\xbc94]\xaec\xb65p\x97\xaa\xd8Zd\x1c\xbb" +
	"\xcf\x7f\x001\x1d\xbe:U\xad\x93T\x89\xc2\xff\xb5\xa5" +
	"\xc7L\xf1K\x0b\xccP\x9a\xa5\xb8\x1d\xaf\xb5A\x08^" +
	"\xae\x14(\x17'\xfa\xd3>\xd0\xe8\x0e.x\xb9\xd1\xa0" +
	"\xdc\x08\xe9\x96\xcd\xa0\xd1a.x\xb9\x0a\xa3\\Zh" +
	"\x81\x9f3u$\xc1\xae\x8br\xd5\xa4kl\xbf\x89D" +
	"\x82\x95\x02\xe5,O\xdb\xbaD\x13\xf1$\xe3@/\xdb" +
	"#Y9C\xb4\x9b\xd0\xea\xe3\x92\x0d\xa5\x09z\xdeu" +
	"\x02\x93U}\xd0$\xb4\x90\x0dQ\xb9\xd6\x87\xafJ\xb8" +
	"\xd5\x83\xa3\\IP\xeep\xc1\xe0(\xc5\xed\x0f\x8e\"" +
	"\xa2u\xf4\xf6\xb7\x1e?\xf1\xdb\x095b\xdd5\xb7\x8a" +
	"\x99\x07\xe9\xca-\xe7\xac&\xa1\x0cU\x18]\xca<\xa9" +
	"\xc0\x814\\g}\x06\xfe?\x00\x00\xff\xff:\xd7\x11" +
	"\xd7"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_fe1be0c39c7e8269,
		Nodes: []uint64{
			0x891283e1b248bc9d,
			0x8e5199f7b0768f03,
			0x8ebfd50c805adbc3,
			0x92080763dc871479,
			0x96a5b17eee7ee1a3,
			0x9846f8829716925a,
			0x9c49e6e65e34c29b,
			0x9ffc53716151c5fa,
			0xa092f60656bb0db4,
			0xa9aca103106c8f05,
			0xaa1198dd7e71b20e,
			0xabaef93c36f2d1ea,
			0xb2a9b080f0c4013c,
			0xb2bf60b5817330b0,
			0xbd3d832f7a7235b5,
			0xc17987510cf7ac13,
			0xca7b4bd1600633b8,
			0xd5be1b8e0180ded6,
			0xd7d1da5ec5b6e655,
			0xd887d79a7ed3f45f,
			0xdb16d4fbb18486f6,
			0xe4eaf56eb486064d,
			0xe5a84717ea75fb0d,
			0xee2cf8cf148921b5,
			0xf503f3237666574e,
			0xfbcf34bcf62e574d,
			0xfc3aeeca54422be9,
			0xfe62caefab7dfdad,
		},
		Compressed: true,
	})
}
