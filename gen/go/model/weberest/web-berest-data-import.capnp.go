// Code generated by capnpc-go. DO NOT EDIT.

package weberest

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type DWLABImport capnp.Client

// DWLABImport_TypeID is the unique identifier for the type DWLABImport.
const DWLABImport_TypeID = 0xa1a4ad9d143eaa6f

func (c DWLABImport) ImportData(ctx context.Context, params func(DWLABImport_importData_Params) error) (DWLABImport_importData_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa1a4ad9d143eaa6f,
			MethodID:      0,
			InterfaceName: "web-berest-data-import.capnp:DWLABImport",
			MethodName:    "importData",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DWLABImport_importData_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return DWLABImport_importData_Results_Future{Future: ans.Future()}, release

}

func (c DWLABImport) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c DWLABImport) String() string {
	return "DWLABImport(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c DWLABImport) AddRef() DWLABImport {
	return DWLABImport(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c DWLABImport) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c DWLABImport) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c DWLABImport) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (DWLABImport) DecodeFromPtr(p capnp.Ptr) DWLABImport {
	return DWLABImport(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c DWLABImport) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c DWLABImport) IsSame(other DWLABImport) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c DWLABImport) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c DWLABImport) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A DWLABImport_Server is a DWLABImport with a local implementation.
type DWLABImport_Server interface {
	ImportData(context.Context, DWLABImport_importData) error
}

// DWLABImport_NewServer creates a new Server from an implementation of DWLABImport_Server.
func DWLABImport_NewServer(s DWLABImport_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(DWLABImport_Methods(nil, s), s, c)
}

// DWLABImport_ServerToClient creates a new Client from an implementation of DWLABImport_Server.
// The caller is responsible for calling Release on the returned Client.
func DWLABImport_ServerToClient(s DWLABImport_Server) DWLABImport {
	return DWLABImport(capnp.NewClient(DWLABImport_NewServer(s)))
}

// DWLABImport_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func DWLABImport_Methods(methods []server.Method, s DWLABImport_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa1a4ad9d143eaa6f,
			MethodID:      0,
			InterfaceName: "web-berest-data-import.capnp:DWLABImport",
			MethodName:    "importData",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ImportData(ctx, DWLABImport_importData{call})
		},
	})

	return methods
}

// DWLABImport_importData holds the state for a server call to DWLABImport.importData.
// See server.Call for documentation.
type DWLABImport_importData struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DWLABImport_importData) Args() DWLABImport_importData_Params {
	return DWLABImport_importData_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c DWLABImport_importData) AllocResults() (DWLABImport_importData_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results(r), err
}

// DWLABImport_List is a list of DWLABImport.
type DWLABImport_List = capnp.CapList[DWLABImport]

// NewDWLABImport_List creates a new list of DWLABImport.
func NewDWLABImport_List(s *capnp.Segment, sz int32) (DWLABImport_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[DWLABImport](l), err
}

type DWLABImport_importData_Params capnp.Struct

// DWLABImport_importData_Params_TypeID is the unique identifier for the type DWLABImport_importData_Params.
const DWLABImport_importData_Params_TypeID = 0xeb03972caa23c7d2

func NewDWLABImport_importData_Params(s *capnp.Segment) (DWLABImport_importData_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return DWLABImport_importData_Params(st), err
}

func NewRootDWLABImport_importData_Params(s *capnp.Segment) (DWLABImport_importData_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return DWLABImport_importData_Params(st), err
}

func ReadRootDWLABImport_importData_Params(msg *capnp.Message) (DWLABImport_importData_Params, error) {
	root, err := msg.Root()
	return DWLABImport_importData_Params(root.Struct()), err
}

func (s DWLABImport_importData_Params) String() string {
	str, _ := text.Marshal(0xeb03972caa23c7d2, capnp.Struct(s))
	return str
}

func (s DWLABImport_importData_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DWLABImport_importData_Params) DecodeFromPtr(p capnp.Ptr) DWLABImport_importData_Params {
	return DWLABImport_importData_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DWLABImport_importData_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DWLABImport_importData_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DWLABImport_importData_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DWLABImport_importData_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DWLABImport_importData_Params) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DWLABImport_importData_Params) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DWLABImport_importData_Params) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Params) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DWLABImport_importData_Params) Dwla() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s DWLABImport_importData_Params) HasDwla() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DWLABImport_importData_Params) SetDwla(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s DWLABImport_importData_Params) Dwlb() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s DWLABImport_importData_Params) HasDwlb() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s DWLABImport_importData_Params) SetDwlb(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// DWLABImport_importData_Params_List is a list of DWLABImport_importData_Params.
type DWLABImport_importData_Params_List = capnp.StructList[DWLABImport_importData_Params]

// NewDWLABImport_importData_Params creates a new list of DWLABImport_importData_Params.
func NewDWLABImport_importData_Params_List(s *capnp.Segment, sz int32) (DWLABImport_importData_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[DWLABImport_importData_Params](l), err
}

// DWLABImport_importData_Params_Future is a wrapper for a DWLABImport_importData_Params promised by a client call.
type DWLABImport_importData_Params_Future struct{ *capnp.Future }

func (f DWLABImport_importData_Params_Future) Struct() (DWLABImport_importData_Params, error) {
	p, err := f.Future.Ptr()
	return DWLABImport_importData_Params(p.Struct()), err
}

type DWLABImport_importData_Results capnp.Struct

// DWLABImport_importData_Results_TypeID is the unique identifier for the type DWLABImport_importData_Results.
const DWLABImport_importData_Results_TypeID = 0xb9bc568c49fcca07

func NewDWLABImport_importData_Results(s *capnp.Segment) (DWLABImport_importData_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results(st), err
}

func NewRootDWLABImport_importData_Results(s *capnp.Segment) (DWLABImport_importData_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results(st), err
}

func ReadRootDWLABImport_importData_Results(msg *capnp.Message) (DWLABImport_importData_Results, error) {
	root, err := msg.Root()
	return DWLABImport_importData_Results(root.Struct()), err
}

func (s DWLABImport_importData_Results) String() string {
	str, _ := text.Marshal(0xb9bc568c49fcca07, capnp.Struct(s))
	return str
}

func (s DWLABImport_importData_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DWLABImport_importData_Results) DecodeFromPtr(p capnp.Ptr) DWLABImport_importData_Results {
	return DWLABImport_importData_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DWLABImport_importData_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DWLABImport_importData_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DWLABImport_importData_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DWLABImport_importData_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DWLABImport_importData_Results) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DWLABImport_importData_Results) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DWLABImport_importData_Results) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Results) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DWLABImport_importData_Results) SuccessA() bool {
	return capnp.Struct(s).Bit(0)
}

func (s DWLABImport_importData_Results) SetSuccessA(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s DWLABImport_importData_Results) SuccessB() bool {
	return capnp.Struct(s).Bit(1)
}

func (s DWLABImport_importData_Results) SetSuccessB(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// DWLABImport_importData_Results_List is a list of DWLABImport_importData_Results.
type DWLABImport_importData_Results_List = capnp.StructList[DWLABImport_importData_Results]

// NewDWLABImport_importData_Results creates a new list of DWLABImport_importData_Results.
func NewDWLABImport_importData_Results_List(s *capnp.Segment, sz int32) (DWLABImport_importData_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DWLABImport_importData_Results](l), err
}

// DWLABImport_importData_Results_Future is a wrapper for a DWLABImport_importData_Results promised by a client call.
type DWLABImport_importData_Results_Future struct{ *capnp.Future }

func (f DWLABImport_importData_Results_Future) Struct() (DWLABImport_importData_Results, error) {
	p, err := f.Future.Ptr()
	return DWLABImport_importData_Results(p.Struct()), err
}

const schema_c4b468a2826bb79b = "x\xda\x9c\x8f\xbf\xab\x13A\x14\x85\xcf\xb9\xb3y\xcb\x83" +
	"]d\xd8TB*\x05I0!!\xd8XH\x12\"" +
	"\x9a\x10aGDAl&\xd9\x05\x83\x89\x09\xd9\x0d\xe9" +
	"\xad\xed-\xc4B\xb1\x0aH\x1aA\x04KA\xb0\xd3\xd2" +
	"R\xb0\xf2/\x10\x84\x955\xe4G#\xc2\xeb\xe6~\x9c" +
	";\xf7;u\x8f-\xa7\xe1_r \xa6^8\xc9f" +
	"\xebk\xc5\x17o^\xbf\x84.\xa9\xec\xf9\xbbGO^" +
	"=|\xfb\x11`\xf3\x17\xfb\x0c|q\x81\xe0Tn\x04" +
	"W\xf2W\xe6~\xfe\xdd{z\xf7\xc3{\x982\x09\x14" +
	"\xe8\x02\xcd\x92|'\x184d\x03f_?]X_" +
	"~\xa6~B\x97\xf3\x80\xca\x03_\xe4[\x1e\xf8!\x1b" +
	"D\xd9*\x1eV\x87\xf1\"v\x92\xb4\x1a\xd9\xd4V\xc7" +
	"\xd3\xf9l\x91\xd6Fv\xfex~\xb5{o\xd0\xee\xf4" +
	"\xfe\x12 $\x8d\xa3\x0a\xc0\xfeW\xee\x04\xb4\xbe\x0f\xd1" +
	"\xa7n\xb6\xdd\xeeZ\xa8\xd4\xb6\x18\x92\xfb\x03'\xff;" +
	"P\xdb\xed\xa6\xf6\xe2\xed8Y\xba\x9341\x9er\x00" +
	"\x87\x80\xbe~\x1e0-E3\x10\x92\xc5\xbc\xaf\xee\xf5" +
	"\x01sS\xd1\xdc\x11ja\x91\x02h\x93\xc3P\xd1<" +
	"\x10\xaaqD\x0fB\x0f\xcc\x92\xe5h\x14'I\x1b\x00" +
	"\x09!\x0f\xacs\xcc\xce$\x1c\xda\x85U\xd3\x7f\xf9\xea" +
	"\xbdp\x050]E\x13\xe6\xc2\xb2\x15\xbeU9\xb48" +
	"\x12>\x17\xad&\x96>\x84\xfev\x18\xee\x86?\x01\x00" +
	"\x00\xff\xff\xcd\xd9\x88\xb0"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c4b468a2826bb79b,
		Nodes: []uint64{
			0xa1a4ad9d143eaa6f,
			0xb9bc568c49fcca07,
			0xeb03972caa23c7d2,
		},
		Compressed: true,
	})
}
