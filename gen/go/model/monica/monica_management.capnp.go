// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	climate "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/climate"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	crop "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/crop"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	math "math"
	strconv "strconv"
)

type ILRDates capnp.Struct

// ILRDates_TypeID is the unique identifier for the type ILRDates.
const ILRDates_TypeID = 0xa1f99f32eea02590

func NewILRDates(s *capnp.Segment) (ILRDates, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ILRDates(st), err
}

func NewRootILRDates(s *capnp.Segment) (ILRDates, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ILRDates(st), err
}

func ReadRootILRDates(msg *capnp.Message) (ILRDates, error) {
	root, err := msg.Root()
	return ILRDates(root.Struct()), err
}

func (s ILRDates) String() string {
	str, _ := text.Marshal(0xa1f99f32eea02590, capnp.Struct(s))
	return str
}

func (s ILRDates) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ILRDates) DecodeFromPtr(p capnp.Ptr) ILRDates {
	return ILRDates(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ILRDates) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ILRDates) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ILRDates) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ILRDates) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ILRDates) Sowing() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s ILRDates) HasSowing() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ILRDates) SetSowing(v common.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewSowing() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) EarliestSowing() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s ILRDates) HasEarliestSowing() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ILRDates) SetEarliestSowing(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEarliestSowing sets the earliestSowing field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewEarliestSowing() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) LatestSowing() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common.Date(p.Struct()), err
}

func (s ILRDates) HasLatestSowing() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ILRDates) SetLatestSowing(v common.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLatestSowing sets the latestSowing field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewLatestSowing() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) Harvest() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common.Date(p.Struct()), err
}

func (s ILRDates) HasHarvest() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ILRDates) SetHarvest(v common.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewHarvest() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) LatestHarvest() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return common.Date(p.Struct()), err
}

func (s ILRDates) HasLatestHarvest() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ILRDates) SetLatestHarvest(v common.Date) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewLatestHarvest sets the latestHarvest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewLatestHarvest() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ILRDates_List is a list of ILRDates.
type ILRDates_List = capnp.StructList[ILRDates]

// NewILRDates creates a new list of ILRDates.
func NewILRDates_List(s *capnp.Segment, sz int32) (ILRDates_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[ILRDates](l), err
}

// ILRDates_Future is a wrapper for a ILRDates promised by a client call.
type ILRDates_Future struct{ *capnp.Future }

func (f ILRDates_Future) Struct() (ILRDates, error) {
	p, err := f.Future.Ptr()
	return ILRDates(p.Struct()), err
}
func (p ILRDates_Future) Sowing() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p ILRDates_Future) EarliestSowing() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p ILRDates_Future) LatestSowing() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p ILRDates_Future) Harvest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(3, nil)}
}
func (p ILRDates_Future) LatestHarvest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(4, nil)}
}

type EventType uint16

// EventType_TypeID is the unique identifier for the type EventType.
const EventType_TypeID = 0xd0290daf8de9f2b0

// Values of EventType.
const (
	EventType_sowing               EventType = 0
	EventType_automaticSowing      EventType = 1
	EventType_harvest              EventType = 2
	EventType_automaticHarvest     EventType = 3
	EventType_irrigation           EventType = 4
	EventType_tillage              EventType = 5
	EventType_organicFertilization EventType = 6
	EventType_mineralFertilization EventType = 7
	EventType_nDemandFertilization EventType = 8
	EventType_cutting              EventType = 9
	EventType_setValue             EventType = 10
	EventType_saveState            EventType = 11
)

// String returns the enum's constant name.
func (c EventType) String() string {
	switch c {
	case EventType_sowing:
		return "sowing"
	case EventType_automaticSowing:
		return "automaticSowing"
	case EventType_harvest:
		return "harvest"
	case EventType_automaticHarvest:
		return "automaticHarvest"
	case EventType_irrigation:
		return "irrigation"
	case EventType_tillage:
		return "tillage"
	case EventType_organicFertilization:
		return "organicFertilization"
	case EventType_mineralFertilization:
		return "mineralFertilization"
	case EventType_nDemandFertilization:
		return "nDemandFertilization"
	case EventType_cutting:
		return "cutting"
	case EventType_setValue:
		return "setValue"
	case EventType_saveState:
		return "saveState"

	default:
		return ""
	}
}

// EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EventTypeFromString(c string) EventType {
	switch c {
	case "sowing":
		return EventType_sowing
	case "automaticSowing":
		return EventType_automaticSowing
	case "harvest":
		return EventType_harvest
	case "automaticHarvest":
		return EventType_automaticHarvest
	case "irrigation":
		return EventType_irrigation
	case "tillage":
		return EventType_tillage
	case "organicFertilization":
		return EventType_organicFertilization
	case "mineralFertilization":
		return EventType_mineralFertilization
	case "nDemandFertilization":
		return EventType_nDemandFertilization
	case "cutting":
		return EventType_cutting
	case "setValue":
		return EventType_setValue
	case "saveState":
		return EventType_saveState

	default:
		return 0
	}
}

type EventType_List = capnp.EnumList[EventType]

func NewEventType_List(s *capnp.Segment, sz int32) (EventType_List, error) {
	return capnp.NewEnumList[EventType](s, sz)
}

type PlantOrgan uint16

// PlantOrgan_TypeID is the unique identifier for the type PlantOrgan.
const PlantOrgan_TypeID = 0xb33447204cdf022c

// Values of PlantOrgan.
const (
	PlantOrgan_root   PlantOrgan = 0
	PlantOrgan_leaf   PlantOrgan = 1
	PlantOrgan_shoot  PlantOrgan = 2
	PlantOrgan_fruit  PlantOrgan = 3
	PlantOrgan_strukt PlantOrgan = 4
	PlantOrgan_sugar  PlantOrgan = 5
)

// String returns the enum's constant name.
func (c PlantOrgan) String() string {
	switch c {
	case PlantOrgan_root:
		return "root"
	case PlantOrgan_leaf:
		return "leaf"
	case PlantOrgan_shoot:
		return "shoot"
	case PlantOrgan_fruit:
		return "fruit"
	case PlantOrgan_strukt:
		return "strukt"
	case PlantOrgan_sugar:
		return "sugar"

	default:
		return ""
	}
}

// PlantOrganFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PlantOrganFromString(c string) PlantOrgan {
	switch c {
	case "root":
		return PlantOrgan_root
	case "leaf":
		return PlantOrgan_leaf
	case "shoot":
		return PlantOrgan_shoot
	case "fruit":
		return PlantOrgan_fruit
	case "strukt":
		return PlantOrgan_strukt
	case "sugar":
		return PlantOrgan_sugar

	default:
		return 0
	}
}

type PlantOrgan_List = capnp.EnumList[PlantOrgan]

func NewPlantOrgan_List(s *capnp.Segment, sz int32) (PlantOrgan_List, error) {
	return capnp.NewEnumList[PlantOrgan](s, sz)
}

type Event capnp.Struct
type Event_at Event
type Event_between Event
type Event_after Event
type Event_Which uint16

const (
	Event_Which_at      Event_Which = 0
	Event_Which_between Event_Which = 1
	Event_Which_after   Event_Which = 2
)

func (w Event_Which) String() string {
	const s = "atbetweenafter"
	switch w {
	case Event_Which_at:
		return s[0:2]
	case Event_Which_between:
		return s[2:9]
	case Event_Which_after:
		return s[9:14]

	}
	return "Event_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xcf672ab379467704

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event(st), err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event(st), err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event(root.Struct()), err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xcf672ab379467704, capnp.Struct(s))
	return str
}

func (s Event) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event) DecodeFromPtr(p capnp.Ptr) Event {
	return Event(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event) Which() Event_Which {
	return Event_Which(capnp.Struct(s).Uint16(2))
}
func (s Event) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event) Type() Event_ExternalType {
	return Event_ExternalType(capnp.Struct(s).Uint16(0))
}

func (s Event) SetType(v Event_ExternalType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Event) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Event) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Event) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) At() Event_at { return Event_at(s) }

func (s Event) SetAt() {
	capnp.Struct(s).SetUint16(2, 0)
}

func (s Event_at) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_at) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_at) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_at) Date() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s Event_at) HasDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_at) SetDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_at) NewDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Between() Event_between { return Event_between(s) }

func (s Event) SetBetween() {
	capnp.Struct(s).SetUint16(2, 1)
}

func (s Event_between) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_between) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_between) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_between) Earliest() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s Event_between) HasEarliest() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_between) SetEarliest(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEarliest sets the earliest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_between) NewEarliest() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event_between) Latest() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common.Date(p.Struct()), err
}

func (s Event_between) HasLatest() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Event_between) SetLatest(v common.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLatest sets the latest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_between) NewLatest() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) After() Event_after { return Event_after(s) }

func (s Event) SetAfter() {
	capnp.Struct(s).SetUint16(2, 2)
}

func (s Event_after) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_after) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_after) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_after) Event() (Event_Type, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Event_Type(p.Struct()), err
}

func (s Event_after) HasEvent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_after) SetEvent(v Event_Type) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event_Type struct, preferring placement in s's segment.
func (s Event_after) NewEvent() (Event_Type, error) {
	ss, err := NewEvent_Type(capnp.Struct(s).Segment())
	if err != nil {
		return Event_Type{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event_after) Days() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s Event_after) SetDays(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s Event) Params() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(3)
}

func (s Event) HasParams() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Event) SetParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(3, v)
}
func (s Event) RunAtStartOfDay() bool {
	return capnp.Struct(s).Bit(48)
}

func (s Event) SetRunAtStartOfDay(v bool) {
	capnp.Struct(s).SetBit(48, v)
}

// Event_List is a list of Event.
type Event_List = capnp.StructList[Event]

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Event](l), err
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (f Event_Future) Struct() (Event, error) {
	p, err := f.Future.Ptr()
	return Event(p.Struct()), err
}
func (p Event_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) At() Event_at_Future { return Event_at_Future{p.Future} }

// Event_at_Future is a wrapper for a Event_at promised by a client call.
type Event_at_Future struct{ *capnp.Future }

func (f Event_at_Future) Struct() (Event_at, error) {
	p, err := f.Future.Ptr()
	return Event_at(p.Struct()), err
}
func (p Event_at_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_Future) Between() Event_between_Future { return Event_between_Future{p.Future} }

// Event_between_Future is a wrapper for a Event_between promised by a client call.
type Event_between_Future struct{ *capnp.Future }

func (f Event_between_Future) Struct() (Event_between, error) {
	p, err := f.Future.Ptr()
	return Event_between(p.Struct()), err
}
func (p Event_between_Future) Earliest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_between_Future) Latest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p Event_Future) After() Event_after_Future { return Event_after_Future{p.Future} }

// Event_after_Future is a wrapper for a Event_after promised by a client call.
type Event_after_Future struct{ *capnp.Future }

func (f Event_after_Future) Struct() (Event_after, error) {
	p, err := f.Future.Ptr()
	return Event_after(p.Struct()), err
}
func (p Event_after_Future) Event() Event_Type_Future {
	return Event_Type_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_Future) Params() *capnp.Future {
	return p.Future.Field(3, nil)
}

type Event_ExternalType uint16

// Event_ExternalType_TypeID is the unique identifier for the type Event_ExternalType.
const Event_ExternalType_TypeID = 0xe5484dc513ee11e0

// Values of Event_ExternalType.
const (
	Event_ExternalType_sowing               Event_ExternalType = 0
	Event_ExternalType_automaticSowing      Event_ExternalType = 1
	Event_ExternalType_harvest              Event_ExternalType = 2
	Event_ExternalType_automaticHarvest     Event_ExternalType = 3
	Event_ExternalType_irrigation           Event_ExternalType = 4
	Event_ExternalType_tillage              Event_ExternalType = 5
	Event_ExternalType_organicFertilization Event_ExternalType = 6
	Event_ExternalType_mineralFertilization Event_ExternalType = 7
	Event_ExternalType_nDemandFertilization Event_ExternalType = 8
	Event_ExternalType_cutting              Event_ExternalType = 9
	Event_ExternalType_setValue             Event_ExternalType = 10
	Event_ExternalType_saveState            Event_ExternalType = 11
	Event_ExternalType_weather              Event_ExternalType = 12
)

// String returns the enum's constant name.
func (c Event_ExternalType) String() string {
	switch c {
	case Event_ExternalType_sowing:
		return "sowing"
	case Event_ExternalType_automaticSowing:
		return "automaticSowing"
	case Event_ExternalType_harvest:
		return "harvest"
	case Event_ExternalType_automaticHarvest:
		return "automaticHarvest"
	case Event_ExternalType_irrigation:
		return "irrigation"
	case Event_ExternalType_tillage:
		return "tillage"
	case Event_ExternalType_organicFertilization:
		return "organicFertilization"
	case Event_ExternalType_mineralFertilization:
		return "mineralFertilization"
	case Event_ExternalType_nDemandFertilization:
		return "nDemandFertilization"
	case Event_ExternalType_cutting:
		return "cutting"
	case Event_ExternalType_setValue:
		return "setValue"
	case Event_ExternalType_saveState:
		return "saveState"
	case Event_ExternalType_weather:
		return "weather"

	default:
		return ""
	}
}

// Event_ExternalTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_ExternalTypeFromString(c string) Event_ExternalType {
	switch c {
	case "sowing":
		return Event_ExternalType_sowing
	case "automaticSowing":
		return Event_ExternalType_automaticSowing
	case "harvest":
		return Event_ExternalType_harvest
	case "automaticHarvest":
		return Event_ExternalType_automaticHarvest
	case "irrigation":
		return Event_ExternalType_irrigation
	case "tillage":
		return Event_ExternalType_tillage
	case "organicFertilization":
		return Event_ExternalType_organicFertilization
	case "mineralFertilization":
		return Event_ExternalType_mineralFertilization
	case "nDemandFertilization":
		return Event_ExternalType_nDemandFertilization
	case "cutting":
		return Event_ExternalType_cutting
	case "setValue":
		return Event_ExternalType_setValue
	case "saveState":
		return Event_ExternalType_saveState
	case "weather":
		return Event_ExternalType_weather

	default:
		return 0
	}
}

type Event_ExternalType_List = capnp.EnumList[Event_ExternalType]

func NewEvent_ExternalType_List(s *capnp.Segment, sz int32) (Event_ExternalType_List, error) {
	return capnp.NewEnumList[Event_ExternalType](s, sz)
}

type Event_PhenoStage uint16

// Event_PhenoStage_TypeID is the unique identifier for the type Event_PhenoStage.
const Event_PhenoStage_TypeID = 0xb2bf3a5557791bc1

// Values of Event_PhenoStage.
const (
	Event_PhenoStage_emergence Event_PhenoStage = 0
	Event_PhenoStage_flowering Event_PhenoStage = 1
	Event_PhenoStage_anthesis  Event_PhenoStage = 2
	Event_PhenoStage_maturity  Event_PhenoStage = 3
)

// String returns the enum's constant name.
func (c Event_PhenoStage) String() string {
	switch c {
	case Event_PhenoStage_emergence:
		return "emergence"
	case Event_PhenoStage_flowering:
		return "flowering"
	case Event_PhenoStage_anthesis:
		return "anthesis"
	case Event_PhenoStage_maturity:
		return "maturity"

	default:
		return ""
	}
}

// Event_PhenoStageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_PhenoStageFromString(c string) Event_PhenoStage {
	switch c {
	case "emergence":
		return Event_PhenoStage_emergence
	case "flowering":
		return Event_PhenoStage_flowering
	case "anthesis":
		return Event_PhenoStage_anthesis
	case "maturity":
		return Event_PhenoStage_maturity

	default:
		return 0
	}
}

type Event_PhenoStage_List = capnp.EnumList[Event_PhenoStage]

func NewEvent_PhenoStage_List(s *capnp.Segment, sz int32) (Event_PhenoStage_List, error) {
	return capnp.NewEnumList[Event_PhenoStage](s, sz)
}

type Event_Type capnp.Struct
type Event_Type_Which uint16

const (
	Event_Type_Which_external Event_Type_Which = 0
	Event_Type_Which_internal Event_Type_Which = 1
)

func (w Event_Type_Which) String() string {
	const s = "externalinternal"
	switch w {
	case Event_Type_Which_external:
		return s[0:8]
	case Event_Type_Which_internal:
		return s[8:16]

	}
	return "Event_Type_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_Type_TypeID is the unique identifier for the type Event_Type.
const Event_Type_TypeID = 0xb91010c363e568a4

func NewEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type(st), err
}

func NewRootEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type(st), err
}

func ReadRootEvent_Type(msg *capnp.Message) (Event_Type, error) {
	root, err := msg.Root()
	return Event_Type(root.Struct()), err
}

func (s Event_Type) String() string {
	str, _ := text.Marshal(0xb91010c363e568a4, capnp.Struct(s))
	return str
}

func (s Event_Type) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event_Type) DecodeFromPtr(p capnp.Ptr) Event_Type {
	return Event_Type(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event_Type) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event_Type) Which() Event_Type_Which {
	return Event_Type_Which(capnp.Struct(s).Uint16(2))
}
func (s Event_Type) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_Type) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_Type) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_Type) External() Event_ExternalType {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != external")
	}
	return Event_ExternalType(capnp.Struct(s).Uint16(0))
}

func (s Event_Type) SetExternal(v Event_ExternalType) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Event_Type) Internal() Event_PhenoStage {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != internal")
	}
	return Event_PhenoStage(capnp.Struct(s).Uint16(0))
}

func (s Event_Type) SetInternal(v Event_PhenoStage) {
	capnp.Struct(s).SetUint16(2, 1)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Event_Type_List is a list of Event_Type.
type Event_Type_List = capnp.StructList[Event_Type]

// NewEvent_Type creates a new list of Event_Type.
func NewEvent_Type_List(s *capnp.Segment, sz int32) (Event_Type_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Event_Type](l), err
}

// Event_Type_Future is a wrapper for a Event_Type promised by a client call.
type Event_Type_Future struct{ *capnp.Future }

func (f Event_Type_Future) Struct() (Event_Type, error) {
	p, err := f.Future.Ptr()
	return Event_Type(p.Struct()), err
}

type Params capnp.Struct

// Params_TypeID is the unique identifier for the type Params.
const Params_TypeID = 0xcb20e21466098705

func NewParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params(st), err
}

func NewRootParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params(st), err
}

func ReadRootParams(msg *capnp.Message) (Params, error) {
	root, err := msg.Root()
	return Params(root.Struct()), err
}

func (s Params) String() string {
	str, _ := text.Marshal(0xcb20e21466098705, capnp.Struct(s))
	return str
}

func (s Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params) DecodeFromPtr(p capnp.Ptr) Params {
	return Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Params_List is a list of Params.
type Params_List = capnp.StructList[Params]

// NewParams creates a new list of Params.
func NewParams_List(s *capnp.Segment, sz int32) (Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Params](l), err
}

// Params_Future is a wrapper for a Params promised by a client call.
type Params_Future struct{ *capnp.Future }

func (f Params_Future) Struct() (Params, error) {
	p, err := f.Future.Ptr()
	return Params(p.Struct()), err
}

type Params_DailyWeather capnp.Struct

// Params_DailyWeather_TypeID is the unique identifier for the type Params_DailyWeather.
const Params_DailyWeather_TypeID = 0xa332cfe9735a304c

func NewParams_DailyWeather(s *capnp.Segment) (Params_DailyWeather, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Params_DailyWeather(st), err
}

func NewRootParams_DailyWeather(s *capnp.Segment) (Params_DailyWeather, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Params_DailyWeather(st), err
}

func ReadRootParams_DailyWeather(msg *capnp.Message) (Params_DailyWeather, error) {
	root, err := msg.Root()
	return Params_DailyWeather(root.Struct()), err
}

func (s Params_DailyWeather) String() string {
	str, _ := text.Marshal(0xa332cfe9735a304c, capnp.Struct(s))
	return str
}

func (s Params_DailyWeather) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_DailyWeather) DecodeFromPtr(p capnp.Ptr) Params_DailyWeather {
	return Params_DailyWeather(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_DailyWeather) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_DailyWeather) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_DailyWeather) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_DailyWeather) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_DailyWeather) Data() (Params_DailyWeather_KV_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_DailyWeather_KV_List(p.List()), err
}

func (s Params_DailyWeather) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_DailyWeather) SetData(v Params_DailyWeather_KV_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated Params_DailyWeather_KV_List, preferring placement in s's segment.
func (s Params_DailyWeather) NewData(n int32) (Params_DailyWeather_KV_List, error) {
	l, err := NewParams_DailyWeather_KV_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Params_DailyWeather_KV_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Params_DailyWeather_List is a list of Params_DailyWeather.
type Params_DailyWeather_List = capnp.StructList[Params_DailyWeather]

// NewParams_DailyWeather creates a new list of Params_DailyWeather.
func NewParams_DailyWeather_List(s *capnp.Segment, sz int32) (Params_DailyWeather_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Params_DailyWeather](l), err
}

// Params_DailyWeather_Future is a wrapper for a Params_DailyWeather promised by a client call.
type Params_DailyWeather_Future struct{ *capnp.Future }

func (f Params_DailyWeather_Future) Struct() (Params_DailyWeather, error) {
	p, err := f.Future.Ptr()
	return Params_DailyWeather(p.Struct()), err
}

type Params_DailyWeather_KV capnp.Struct

// Params_DailyWeather_KV_TypeID is the unique identifier for the type Params_DailyWeather_KV.
const Params_DailyWeather_KV_TypeID = 0xa63c8017ca26718b

func NewParams_DailyWeather_KV(s *capnp.Segment) (Params_DailyWeather_KV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_DailyWeather_KV(st), err
}

func NewRootParams_DailyWeather_KV(s *capnp.Segment) (Params_DailyWeather_KV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_DailyWeather_KV(st), err
}

func ReadRootParams_DailyWeather_KV(msg *capnp.Message) (Params_DailyWeather_KV, error) {
	root, err := msg.Root()
	return Params_DailyWeather_KV(root.Struct()), err
}

func (s Params_DailyWeather_KV) String() string {
	str, _ := text.Marshal(0xa63c8017ca26718b, capnp.Struct(s))
	return str
}

func (s Params_DailyWeather_KV) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_DailyWeather_KV) DecodeFromPtr(p capnp.Ptr) Params_DailyWeather_KV {
	return Params_DailyWeather_KV(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_DailyWeather_KV) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_DailyWeather_KV) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_DailyWeather_KV) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_DailyWeather_KV) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_DailyWeather_KV) Key() climate.Element {
	return climate.Element(capnp.Struct(s).Uint16(0))
}

func (s Params_DailyWeather_KV) SetKey(v climate.Element) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Params_DailyWeather_KV) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_DailyWeather_KV) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Params_DailyWeather_KV_List is a list of Params_DailyWeather_KV.
type Params_DailyWeather_KV_List = capnp.StructList[Params_DailyWeather_KV]

// NewParams_DailyWeather_KV creates a new list of Params_DailyWeather_KV.
func NewParams_DailyWeather_KV_List(s *capnp.Segment, sz int32) (Params_DailyWeather_KV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Params_DailyWeather_KV](l), err
}

// Params_DailyWeather_KV_Future is a wrapper for a Params_DailyWeather_KV promised by a client call.
type Params_DailyWeather_KV_Future struct{ *capnp.Future }

func (f Params_DailyWeather_KV_Future) Struct() (Params_DailyWeather_KV, error) {
	p, err := f.Future.Ptr()
	return Params_DailyWeather_KV(p.Struct()), err
}

type Params_Sowing capnp.Struct

// Params_Sowing_TypeID is the unique identifier for the type Params_Sowing.
const Params_Sowing_TypeID = 0xc6880d1c13ec14dc

func NewParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing(st), err
}

func NewRootParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing(st), err
}

func ReadRootParams_Sowing(msg *capnp.Message) (Params_Sowing, error) {
	root, err := msg.Root()
	return Params_Sowing(root.Struct()), err
}

func (s Params_Sowing) String() string {
	str, _ := text.Marshal(0xc6880d1c13ec14dc, capnp.Struct(s))
	return str
}

func (s Params_Sowing) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Sowing) DecodeFromPtr(p capnp.Ptr) Params_Sowing {
	return Params_Sowing(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Sowing) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Sowing) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Sowing) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Sowing) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Sowing) Cultivar() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params_Sowing) HasCultivar() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Sowing) CultivarBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params_Sowing) SetCultivar(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params_Sowing) PlantDensity() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s Params_Sowing) SetPlantDensity(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s Params_Sowing) Crop() crop.Crop {
	p, _ := capnp.Struct(s).Ptr(1)
	return crop.Crop(p.Interface().Client())
}

func (s Params_Sowing) HasCrop() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_Sowing) SetCrop(v crop.Crop) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Params_Sowing_List is a list of Params_Sowing.
type Params_Sowing_List = capnp.StructList[Params_Sowing]

// NewParams_Sowing creates a new list of Params_Sowing.
func NewParams_Sowing_List(s *capnp.Segment, sz int32) (Params_Sowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Params_Sowing](l), err
}

// Params_Sowing_Future is a wrapper for a Params_Sowing promised by a client call.
type Params_Sowing_Future struct{ *capnp.Future }

func (f Params_Sowing_Future) Struct() (Params_Sowing, error) {
	p, err := f.Future.Ptr()
	return Params_Sowing(p.Struct()), err
}
func (p Params_Sowing_Future) Crop() crop.Crop {
	return crop.Crop(p.Future.Field(1, nil).Client())
}

type Params_AutomaticSowing capnp.Struct

// Params_AutomaticSowing_TypeID is the unique identifier for the type Params_AutomaticSowing.
const Params_AutomaticSowing_TypeID = 0xd1bfc1c9617d9453

func NewParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing(st), err
}

func NewRootParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing(st), err
}

func ReadRootParams_AutomaticSowing(msg *capnp.Message) (Params_AutomaticSowing, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing(root.Struct()), err
}

func (s Params_AutomaticSowing) String() string {
	str, _ := text.Marshal(0xd1bfc1c9617d9453, capnp.Struct(s))
	return str
}

func (s Params_AutomaticSowing) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticSowing) DecodeFromPtr(p capnp.Ptr) Params_AutomaticSowing {
	return Params_AutomaticSowing(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticSowing) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticSowing) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticSowing) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticSowing) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticSowing) Sowing() (Params_Sowing, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Params_Sowing(p.Struct()), err
}

func (s Params_AutomaticSowing) HasSowing() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_AutomaticSowing) SetSowing(v Params_Sowing) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated Params_Sowing struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewSowing() (Params_Sowing, error) {
	ss, err := NewParams_Sowing(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Sowing{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_AutomaticSowing) MinTempThreshold() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_AutomaticSowing) SetMinTempThreshold(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticSowing) DaysInTempWindow() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Params_AutomaticSowing) SetDaysInTempWindow(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Params_AutomaticSowing) MinPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticSowing) SetMinPercentASW(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4059000000000000)
}

func (s Params_AutomaticSowing) SetMaxPercentASW(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticSowing) Max3dayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_AutomaticSowing) SetMax3dayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params_AutomaticSowing) SetMaxCurrentDayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params_AutomaticSowing) TempSumAboveBaseTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Params_AutomaticSowing) SetTempSumAboveBaseTemp(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Params_AutomaticSowing) BaseTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Params_AutomaticSowing) SetBaseTemp(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Params_AutomaticSowing) AvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_AutomaticSowing_AvgSoilTemp(p.Struct()), err
}

func (s Params_AutomaticSowing) HasAvgSoilTemp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_AutomaticSowing) SetAvgSoilTemp(v Params_AutomaticSowing_AvgSoilTemp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAvgSoilTemp sets the avgSoilTemp field to a newly
// allocated Params_AutomaticSowing_AvgSoilTemp struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewAvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	ss, err := NewParams_AutomaticSowing_AvgSoilTemp(capnp.Struct(s).Segment())
	if err != nil {
		return Params_AutomaticSowing_AvgSoilTemp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_AutomaticSowing_List is a list of Params_AutomaticSowing.
type Params_AutomaticSowing_List = capnp.StructList[Params_AutomaticSowing]

// NewParams_AutomaticSowing creates a new list of Params_AutomaticSowing.
func NewParams_AutomaticSowing_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2}, sz)
	return capnp.StructList[Params_AutomaticSowing](l), err
}

// Params_AutomaticSowing_Future is a wrapper for a Params_AutomaticSowing promised by a client call.
type Params_AutomaticSowing_Future struct{ *capnp.Future }

func (f Params_AutomaticSowing_Future) Struct() (Params_AutomaticSowing, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticSowing(p.Struct()), err
}
func (p Params_AutomaticSowing_Future) Sowing() Params_Sowing_Future {
	return Params_Sowing_Future{Future: p.Future.Field(1, nil)}
}
func (p Params_AutomaticSowing_Future) AvgSoilTemp() Params_AutomaticSowing_AvgSoilTemp_Future {
	return Params_AutomaticSowing_AvgSoilTemp_Future{Future: p.Future.Field(0, nil)}
}

type Params_AutomaticSowing_AvgSoilTemp capnp.Struct

// Params_AutomaticSowing_AvgSoilTemp_TypeID is the unique identifier for the type Params_AutomaticSowing_AvgSoilTemp.
const Params_AutomaticSowing_AvgSoilTemp_TypeID = 0x846f567433b186d1

func NewParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp(st), err
}

func NewRootParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp(st), err
}

func ReadRootParams_AutomaticSowing_AvgSoilTemp(msg *capnp.Message) (Params_AutomaticSowing_AvgSoilTemp, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing_AvgSoilTemp(root.Struct()), err
}

func (s Params_AutomaticSowing_AvgSoilTemp) String() string {
	str, _ := text.Marshal(0x846f567433b186d1, capnp.Struct(s))
	return str
}

func (s Params_AutomaticSowing_AvgSoilTemp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticSowing_AvgSoilTemp) DecodeFromPtr(p capnp.Ptr) Params_AutomaticSowing_AvgSoilTemp {
	return Params_AutomaticSowing_AvgSoilTemp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticSowing_AvgSoilTemp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticSowing_AvgSoilTemp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticSowing_AvgSoilTemp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticSowing_AvgSoilTemp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticSowing_AvgSoilTemp) SoilDepthForAveraging() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSoilDepthForAveraging(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) DaysInSoilTempWindow() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetDaysInSoilTempWindow(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SowingIfAboveAvgSoilTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSowingIfAboveAvgSoilTemp(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Params_AutomaticSowing_AvgSoilTemp_List is a list of Params_AutomaticSowing_AvgSoilTemp.
type Params_AutomaticSowing_AvgSoilTemp_List = capnp.StructList[Params_AutomaticSowing_AvgSoilTemp]

// NewParams_AutomaticSowing_AvgSoilTemp creates a new list of Params_AutomaticSowing_AvgSoilTemp.
func NewParams_AutomaticSowing_AvgSoilTemp_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_AvgSoilTemp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Params_AutomaticSowing_AvgSoilTemp](l), err
}

// Params_AutomaticSowing_AvgSoilTemp_Future is a wrapper for a Params_AutomaticSowing_AvgSoilTemp promised by a client call.
type Params_AutomaticSowing_AvgSoilTemp_Future struct{ *capnp.Future }

func (f Params_AutomaticSowing_AvgSoilTemp_Future) Struct() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticSowing_AvgSoilTemp(p.Struct()), err
}

type Params_Harvest capnp.Struct

// Params_Harvest_TypeID is the unique identifier for the type Params_Harvest.
const Params_Harvest_TypeID = 0x8feb941d70f2a468

func NewParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest(st), err
}

func NewRootParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest(st), err
}

func ReadRootParams_Harvest(msg *capnp.Message) (Params_Harvest, error) {
	root, err := msg.Root()
	return Params_Harvest(root.Struct()), err
}

func (s Params_Harvest) String() string {
	str, _ := text.Marshal(0x8feb941d70f2a468, capnp.Struct(s))
	return str
}

func (s Params_Harvest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Harvest) DecodeFromPtr(p capnp.Ptr) Params_Harvest {
	return Params_Harvest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Harvest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Harvest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Harvest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Harvest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Harvest) Exported() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s Params_Harvest) SetExported(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

func (s Params_Harvest) OptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Harvest_OptCarbonMgmtData(p.Struct()), err
}

func (s Params_Harvest) HasOptCarbMgmtData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Harvest) SetOptCarbMgmtData(v Params_Harvest_OptCarbonMgmtData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOptCarbMgmtData sets the optCarbMgmtData field to a newly
// allocated Params_Harvest_OptCarbonMgmtData struct, preferring placement in s's segment.
func (s Params_Harvest) NewOptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	ss, err := NewParams_Harvest_OptCarbonMgmtData(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Harvest_OptCarbonMgmtData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_Harvest_List is a list of Params_Harvest.
type Params_Harvest_List = capnp.StructList[Params_Harvest]

// NewParams_Harvest creates a new list of Params_Harvest.
func NewParams_Harvest_List(s *capnp.Segment, sz int32) (Params_Harvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Harvest](l), err
}

// Params_Harvest_Future is a wrapper for a Params_Harvest promised by a client call.
type Params_Harvest_Future struct{ *capnp.Future }

func (f Params_Harvest_Future) Struct() (Params_Harvest, error) {
	p, err := f.Future.Ptr()
	return Params_Harvest(p.Struct()), err
}
func (p Params_Harvest_Future) OptCarbMgmtData() Params_Harvest_OptCarbonMgmtData_Future {
	return Params_Harvest_OptCarbonMgmtData_Future{Future: p.Future.Field(0, nil)}
}

type Params_Harvest_CropUsage uint16

// Params_Harvest_CropUsage_TypeID is the unique identifier for the type Params_Harvest_CropUsage.
const Params_Harvest_CropUsage_TypeID = 0xa9a9bc941e963701

// Values of Params_Harvest_CropUsage.
const (
	Params_Harvest_CropUsage_greenManure       Params_Harvest_CropUsage = 0
	Params_Harvest_CropUsage_biomassProduction Params_Harvest_CropUsage = 1
)

// String returns the enum's constant name.
func (c Params_Harvest_CropUsage) String() string {
	switch c {
	case Params_Harvest_CropUsage_greenManure:
		return "greenManure"
	case Params_Harvest_CropUsage_biomassProduction:
		return "biomassProduction"

	default:
		return ""
	}
}

// Params_Harvest_CropUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Harvest_CropUsageFromString(c string) Params_Harvest_CropUsage {
	switch c {
	case "greenManure":
		return Params_Harvest_CropUsage_greenManure
	case "biomassProduction":
		return Params_Harvest_CropUsage_biomassProduction

	default:
		return 0
	}
}

type Params_Harvest_CropUsage_List = capnp.EnumList[Params_Harvest_CropUsage]

func NewParams_Harvest_CropUsage_List(s *capnp.Segment, sz int32) (Params_Harvest_CropUsage_List, error) {
	return capnp.NewEnumList[Params_Harvest_CropUsage](s, sz)
}

type Params_Harvest_OptCarbonMgmtData capnp.Struct

// Params_Harvest_OptCarbonMgmtData_TypeID is the unique identifier for the type Params_Harvest_OptCarbonMgmtData.
const Params_Harvest_OptCarbonMgmtData_TypeID = 0xaf49ab9bbe76e375

func NewParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData(st), err
}

func NewRootParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData(st), err
}

func ReadRootParams_Harvest_OptCarbonMgmtData(msg *capnp.Message) (Params_Harvest_OptCarbonMgmtData, error) {
	root, err := msg.Root()
	return Params_Harvest_OptCarbonMgmtData(root.Struct()), err
}

func (s Params_Harvest_OptCarbonMgmtData) String() string {
	str, _ := text.Marshal(0xaf49ab9bbe76e375, capnp.Struct(s))
	return str
}

func (s Params_Harvest_OptCarbonMgmtData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Harvest_OptCarbonMgmtData) DecodeFromPtr(p capnp.Ptr) Params_Harvest_OptCarbonMgmtData {
	return Params_Harvest_OptCarbonMgmtData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Harvest_OptCarbonMgmtData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Harvest_OptCarbonMgmtData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Harvest_OptCarbonMgmtData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Harvest_OptCarbonMgmtData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Harvest_OptCarbonMgmtData) OptCarbonConservation() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Params_Harvest_OptCarbonMgmtData) SetOptCarbonConservation(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Params_Harvest_OptCarbonMgmtData) CropImpactOnHumusBalance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropImpactOnHumusBalance(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) CropUsage() Params_Harvest_CropUsage {
	return Params_Harvest_CropUsage(capnp.Struct(s).Uint16(2) ^ 1)
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropUsage(v Params_Harvest_CropUsage) {
	capnp.Struct(s).SetUint16(2, uint16(v)^1)
}

func (s Params_Harvest_OptCarbonMgmtData) ResidueHeq() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_Harvest_OptCarbonMgmtData) SetResidueHeq(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) OrganicFertilizerHeq() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_Harvest_OptCarbonMgmtData) SetOrganicFertilizerHeq(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) MaxResidueRecoverFraction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_Harvest_OptCarbonMgmtData) SetMaxResidueRecoverFraction(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

// Params_Harvest_OptCarbonMgmtData_List is a list of Params_Harvest_OptCarbonMgmtData.
type Params_Harvest_OptCarbonMgmtData_List = capnp.StructList[Params_Harvest_OptCarbonMgmtData]

// NewParams_Harvest_OptCarbonMgmtData creates a new list of Params_Harvest_OptCarbonMgmtData.
func NewParams_Harvest_OptCarbonMgmtData_List(s *capnp.Segment, sz int32) (Params_Harvest_OptCarbonMgmtData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[Params_Harvest_OptCarbonMgmtData](l), err
}

// Params_Harvest_OptCarbonMgmtData_Future is a wrapper for a Params_Harvest_OptCarbonMgmtData promised by a client call.
type Params_Harvest_OptCarbonMgmtData_Future struct{ *capnp.Future }

func (f Params_Harvest_OptCarbonMgmtData_Future) Struct() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := f.Future.Ptr()
	return Params_Harvest_OptCarbonMgmtData(p.Struct()), err
}

type Params_AutomaticHarvest capnp.Struct

// Params_AutomaticHarvest_TypeID is the unique identifier for the type Params_AutomaticHarvest.
const Params_AutomaticHarvest_TypeID = 0xf805d22fabb80702

func NewParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest(st), err
}

func NewRootParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest(st), err
}

func ReadRootParams_AutomaticHarvest(msg *capnp.Message) (Params_AutomaticHarvest, error) {
	root, err := msg.Root()
	return Params_AutomaticHarvest(root.Struct()), err
}

func (s Params_AutomaticHarvest) String() string {
	str, _ := text.Marshal(0xf805d22fabb80702, capnp.Struct(s))
	return str
}

func (s Params_AutomaticHarvest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticHarvest) DecodeFromPtr(p capnp.Ptr) Params_AutomaticHarvest {
	return Params_AutomaticHarvest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticHarvest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticHarvest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticHarvest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticHarvest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticHarvest) Harvest() (Params_Harvest, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Harvest(p.Struct()), err
}

func (s Params_AutomaticHarvest) HasHarvest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_AutomaticHarvest) SetHarvest(v Params_Harvest) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated Params_Harvest struct, preferring placement in s's segment.
func (s Params_AutomaticHarvest) NewHarvest() (Params_Harvest, error) {
	ss, err := NewParams_Harvest(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Harvest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_AutomaticHarvest) MinPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_AutomaticHarvest) SetMinPercentASW(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x4059000000000000)
}

func (s Params_AutomaticHarvest) SetMaxPercentASW(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticHarvest) Max3dayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticHarvest) SetMax3dayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_AutomaticHarvest) SetMaxCurrentDayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) HarvestTime() Event_PhenoStage {
	return Event_PhenoStage(capnp.Struct(s).Uint16(32) ^ 3)
}

func (s Params_AutomaticHarvest) SetHarvestTime(v Event_PhenoStage) {
	capnp.Struct(s).SetUint16(32, uint16(v)^3)
}

// Params_AutomaticHarvest_List is a list of Params_AutomaticHarvest.
type Params_AutomaticHarvest_List = capnp.StructList[Params_AutomaticHarvest]

// NewParams_AutomaticHarvest creates a new list of Params_AutomaticHarvest.
func NewParams_AutomaticHarvest_List(s *capnp.Segment, sz int32) (Params_AutomaticHarvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return capnp.StructList[Params_AutomaticHarvest](l), err
}

// Params_AutomaticHarvest_Future is a wrapper for a Params_AutomaticHarvest promised by a client call.
type Params_AutomaticHarvest_Future struct{ *capnp.Future }

func (f Params_AutomaticHarvest_Future) Struct() (Params_AutomaticHarvest, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticHarvest(p.Struct()), err
}
func (p Params_AutomaticHarvest_Future) Harvest() Params_Harvest_Future {
	return Params_Harvest_Future{Future: p.Future.Field(0, nil)}
}

type Params_Cutting capnp.Struct

// Params_Cutting_TypeID is the unique identifier for the type Params_Cutting.
const Params_Cutting_TypeID = 0x8460dac6abff7ed9

func NewParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting(st), err
}

func NewRootParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting(st), err
}

func ReadRootParams_Cutting(msg *capnp.Message) (Params_Cutting, error) {
	root, err := msg.Root()
	return Params_Cutting(root.Struct()), err
}

func (s Params_Cutting) String() string {
	str, _ := text.Marshal(0x8460dac6abff7ed9, capnp.Struct(s))
	return str
}

func (s Params_Cutting) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Cutting) DecodeFromPtr(p capnp.Ptr) Params_Cutting {
	return Params_Cutting(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Cutting) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Cutting) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Cutting) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Cutting) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Cutting) CuttingSpec() (Params_Cutting_Spec_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Cutting_Spec_List(p.List()), err
}

func (s Params_Cutting) HasCuttingSpec() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Cutting) SetCuttingSpec(v Params_Cutting_Spec_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCuttingSpec sets the cuttingSpec field to a newly
// allocated Params_Cutting_Spec_List, preferring placement in s's segment.
func (s Params_Cutting) NewCuttingSpec(n int32) (Params_Cutting_Spec_List, error) {
	l, err := NewParams_Cutting_Spec_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Params_Cutting_Spec_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Params_Cutting) CutMaxAssimilationRatePercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x4059000000000000)
}

func (s Params_Cutting) SetCutMaxAssimilationRatePercentage(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x4059000000000000)
}

// Params_Cutting_List is a list of Params_Cutting.
type Params_Cutting_List = capnp.StructList[Params_Cutting]

// NewParams_Cutting creates a new list of Params_Cutting.
func NewParams_Cutting_List(s *capnp.Segment, sz int32) (Params_Cutting_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Cutting](l), err
}

// Params_Cutting_Future is a wrapper for a Params_Cutting promised by a client call.
type Params_Cutting_Future struct{ *capnp.Future }

func (f Params_Cutting_Future) Struct() (Params_Cutting, error) {
	p, err := f.Future.Ptr()
	return Params_Cutting(p.Struct()), err
}

type Params_Cutting_CL uint16

// Params_Cutting_CL_TypeID is the unique identifier for the type Params_Cutting_CL.
const Params_Cutting_CL_TypeID = 0xe444f780b29541a7

// Values of Params_Cutting_CL.
const (
	Params_Cutting_CL_cut  Params_Cutting_CL = 0
	Params_Cutting_CL_left Params_Cutting_CL = 1
)

// String returns the enum's constant name.
func (c Params_Cutting_CL) String() string {
	switch c {
	case Params_Cutting_CL_cut:
		return "cut"
	case Params_Cutting_CL_left:
		return "left"

	default:
		return ""
	}
}

// Params_Cutting_CLFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_CLFromString(c string) Params_Cutting_CL {
	switch c {
	case "cut":
		return Params_Cutting_CL_cut
	case "left":
		return Params_Cutting_CL_left

	default:
		return 0
	}
}

type Params_Cutting_CL_List = capnp.EnumList[Params_Cutting_CL]

func NewParams_Cutting_CL_List(s *capnp.Segment, sz int32) (Params_Cutting_CL_List, error) {
	return capnp.NewEnumList[Params_Cutting_CL](s, sz)
}

type Params_Cutting_Unit uint16

// Params_Cutting_Unit_TypeID is the unique identifier for the type Params_Cutting_Unit.
const Params_Cutting_Unit_TypeID = 0x94d32947f136655e

// Values of Params_Cutting_Unit.
const (
	Params_Cutting_Unit_percentage Params_Cutting_Unit = 0
	Params_Cutting_Unit_biomass    Params_Cutting_Unit = 1
	Params_Cutting_Unit_lai        Params_Cutting_Unit = 2
)

// String returns the enum's constant name.
func (c Params_Cutting_Unit) String() string {
	switch c {
	case Params_Cutting_Unit_percentage:
		return "percentage"
	case Params_Cutting_Unit_biomass:
		return "biomass"
	case Params_Cutting_Unit_lai:
		return "lai"

	default:
		return ""
	}
}

// Params_Cutting_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_UnitFromString(c string) Params_Cutting_Unit {
	switch c {
	case "percentage":
		return Params_Cutting_Unit_percentage
	case "biomass":
		return Params_Cutting_Unit_biomass
	case "lai":
		return Params_Cutting_Unit_lai

	default:
		return 0
	}
}

type Params_Cutting_Unit_List = capnp.EnumList[Params_Cutting_Unit]

func NewParams_Cutting_Unit_List(s *capnp.Segment, sz int32) (Params_Cutting_Unit_List, error) {
	return capnp.NewEnumList[Params_Cutting_Unit](s, sz)
}

type Params_Cutting_Spec capnp.Struct

// Params_Cutting_Spec_TypeID is the unique identifier for the type Params_Cutting_Spec.
const Params_Cutting_Spec_TypeID = 0xfae5dcfccbb93a23

func NewParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec(st), err
}

func NewRootParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec(st), err
}

func ReadRootParams_Cutting_Spec(msg *capnp.Message) (Params_Cutting_Spec, error) {
	root, err := msg.Root()
	return Params_Cutting_Spec(root.Struct()), err
}

func (s Params_Cutting_Spec) String() string {
	str, _ := text.Marshal(0xfae5dcfccbb93a23, capnp.Struct(s))
	return str
}

func (s Params_Cutting_Spec) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Cutting_Spec) DecodeFromPtr(p capnp.Ptr) Params_Cutting_Spec {
	return Params_Cutting_Spec(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Cutting_Spec) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Cutting_Spec) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Cutting_Spec) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Cutting_Spec) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Cutting_Spec) Organ() PlantOrgan {
	return PlantOrgan(capnp.Struct(s).Uint16(0))
}

func (s Params_Cutting_Spec) SetOrgan(v PlantOrgan) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Params_Cutting_Spec) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Cutting_Spec) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_Cutting_Spec) Unit() Params_Cutting_Unit {
	return Params_Cutting_Unit(capnp.Struct(s).Uint16(2))
}

func (s Params_Cutting_Spec) SetUnit(v Params_Cutting_Unit) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s Params_Cutting_Spec) CutOrLeft() Params_Cutting_CL {
	return Params_Cutting_CL(capnp.Struct(s).Uint16(4))
}

func (s Params_Cutting_Spec) SetCutOrLeft(v Params_Cutting_CL) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s Params_Cutting_Spec) ExportPercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x4059000000000000)
}

func (s Params_Cutting_Spec) SetExportPercentage(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x4059000000000000)
}

// Params_Cutting_Spec_List is a list of Params_Cutting_Spec.
type Params_Cutting_Spec_List = capnp.StructList[Params_Cutting_Spec]

// NewParams_Cutting_Spec creates a new list of Params_Cutting_Spec.
func NewParams_Cutting_Spec_List(s *capnp.Segment, sz int32) (Params_Cutting_Spec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Params_Cutting_Spec](l), err
}

// Params_Cutting_Spec_Future is a wrapper for a Params_Cutting_Spec promised by a client call.
type Params_Cutting_Spec_Future struct{ *capnp.Future }

func (f Params_Cutting_Spec_Future) Struct() (Params_Cutting_Spec, error) {
	p, err := f.Future.Ptr()
	return Params_Cutting_Spec(p.Struct()), err
}

type Params_MineralFertilization capnp.Struct

// Params_MineralFertilization_TypeID is the unique identifier for the type Params_MineralFertilization.
const Params_MineralFertilization_TypeID = 0xa363d226e178debd

func NewParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization(st), err
}

func NewRootParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization(st), err
}

func ReadRootParams_MineralFertilization(msg *capnp.Message) (Params_MineralFertilization, error) {
	root, err := msg.Root()
	return Params_MineralFertilization(root.Struct()), err
}

func (s Params_MineralFertilization) String() string {
	str, _ := text.Marshal(0xa363d226e178debd, capnp.Struct(s))
	return str
}

func (s Params_MineralFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_MineralFertilization) DecodeFromPtr(p capnp.Ptr) Params_MineralFertilization {
	return Params_MineralFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_MineralFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_MineralFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_MineralFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_MineralFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_MineralFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s Params_MineralFertilization) HasPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_MineralFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_MineralFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_MineralFertilization) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_MineralFertilization) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// Params_MineralFertilization_List is a list of Params_MineralFertilization.
type Params_MineralFertilization_List = capnp.StructList[Params_MineralFertilization]

// NewParams_MineralFertilization creates a new list of Params_MineralFertilization.
func NewParams_MineralFertilization_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_MineralFertilization](l), err
}

// Params_MineralFertilization_Future is a wrapper for a Params_MineralFertilization promised by a client call.
type Params_MineralFertilization_Future struct{ *capnp.Future }

func (f Params_MineralFertilization_Future) Struct() (Params_MineralFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_MineralFertilization(p.Struct()), err
}
func (p Params_MineralFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_MineralFertilization_Parameters capnp.Struct

// Params_MineralFertilization_Parameters_TypeID is the unique identifier for the type Params_MineralFertilization_Parameters.
const Params_MineralFertilization_Parameters_TypeID = 0xc75b5ef2e9b05c2d

func NewParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters(st), err
}

func NewRootParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters(st), err
}

func ReadRootParams_MineralFertilization_Parameters(msg *capnp.Message) (Params_MineralFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_MineralFertilization_Parameters(root.Struct()), err
}

func (s Params_MineralFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xc75b5ef2e9b05c2d, capnp.Struct(s))
	return str
}

func (s Params_MineralFertilization_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_MineralFertilization_Parameters) DecodeFromPtr(p capnp.Ptr) Params_MineralFertilization_Parameters {
	return Params_MineralFertilization_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_MineralFertilization_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_MineralFertilization_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_MineralFertilization_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_MineralFertilization_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_MineralFertilization_Parameters) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_MineralFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params_MineralFertilization_Parameters) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_MineralFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params_MineralFertilization_Parameters) Carbamid() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_MineralFertilization_Parameters) SetCarbamid(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) Nh4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_MineralFertilization_Parameters) SetNh4(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) No3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_MineralFertilization_Parameters) SetNo3(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Params_MineralFertilization_Parameters_List is a list of Params_MineralFertilization_Parameters.
type Params_MineralFertilization_Parameters_List = capnp.StructList[Params_MineralFertilization_Parameters]

// NewParams_MineralFertilization_Parameters creates a new list of Params_MineralFertilization_Parameters.
func NewParams_MineralFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[Params_MineralFertilization_Parameters](l), err
}

// Params_MineralFertilization_Parameters_Future is a wrapper for a Params_MineralFertilization_Parameters promised by a client call.
type Params_MineralFertilization_Parameters_Future struct{ *capnp.Future }

func (f Params_MineralFertilization_Parameters_Future) Struct() (Params_MineralFertilization_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

type Params_NDemandFertilization capnp.Struct

// Params_NDemandFertilization_TypeID is the unique identifier for the type Params_NDemandFertilization.
const Params_NDemandFertilization_TypeID = 0xc7c14e92e0cd461c

func NewParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization(st), err
}

func NewRootParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization(st), err
}

func ReadRootParams_NDemandFertilization(msg *capnp.Message) (Params_NDemandFertilization, error) {
	root, err := msg.Root()
	return Params_NDemandFertilization(root.Struct()), err
}

func (s Params_NDemandFertilization) String() string {
	str, _ := text.Marshal(0xc7c14e92e0cd461c, capnp.Struct(s))
	return str
}

func (s Params_NDemandFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_NDemandFertilization) DecodeFromPtr(p capnp.Ptr) Params_NDemandFertilization {
	return Params_NDemandFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_NDemandFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_NDemandFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_NDemandFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_NDemandFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_NDemandFertilization) NDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_NDemandFertilization) SetNDemand(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s Params_NDemandFertilization) HasPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_NDemandFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_NDemandFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_NDemandFertilization) Depth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_NDemandFertilization) SetDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Stage() uint8 {
	return capnp.Struct(s).Uint8(16) ^ 1
}

func (s Params_NDemandFertilization) SetStage(v uint8) {
	capnp.Struct(s).SetUint8(16, v^1)
}

// Params_NDemandFertilization_List is a list of Params_NDemandFertilization.
type Params_NDemandFertilization_List = capnp.StructList[Params_NDemandFertilization]

// NewParams_NDemandFertilization creates a new list of Params_NDemandFertilization.
func NewParams_NDemandFertilization_List(s *capnp.Segment, sz int32) (Params_NDemandFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[Params_NDemandFertilization](l), err
}

// Params_NDemandFertilization_Future is a wrapper for a Params_NDemandFertilization promised by a client call.
type Params_NDemandFertilization_Future struct{ *capnp.Future }

func (f Params_NDemandFertilization_Future) Struct() (Params_NDemandFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_NDemandFertilization(p.Struct()), err
}
func (p Params_NDemandFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization capnp.Struct

// Params_OrganicFertilization_TypeID is the unique identifier for the type Params_OrganicFertilization.
const Params_OrganicFertilization_TypeID = 0xb492838c7fed50b0

func NewParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization(st), err
}

func NewRootParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization(st), err
}

func ReadRootParams_OrganicFertilization(msg *capnp.Message) (Params_OrganicFertilization, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization(root.Struct()), err
}

func (s Params_OrganicFertilization) String() string {
	str, _ := text.Marshal(0xb492838c7fed50b0, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization {
	return Params_OrganicFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization) Params() (Params_OrganicFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_Parameters(p.Struct()), err
}

func (s Params_OrganicFertilization) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_OrganicFertilization) SetParams(v Params_OrganicFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization) NewParams() (Params_OrganicFertilization_Parameters, error) {
	ss, err := NewParams_OrganicFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_OrganicFertilization) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization) Incorporation() bool {
	return capnp.Struct(s).Bit(64)
}

func (s Params_OrganicFertilization) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// Params_OrganicFertilization_List is a list of Params_OrganicFertilization.
type Params_OrganicFertilization_List = capnp.StructList[Params_OrganicFertilization]

// NewParams_OrganicFertilization creates a new list of Params_OrganicFertilization.
func NewParams_OrganicFertilization_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Params_OrganicFertilization](l), err
}

// Params_OrganicFertilization_Future is a wrapper for a Params_OrganicFertilization promised by a client call.
type Params_OrganicFertilization_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_Future) Struct() (Params_OrganicFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization(p.Struct()), err
}
func (p Params_OrganicFertilization_Future) Params() Params_OrganicFertilization_Parameters_Future {
	return Params_OrganicFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization_OrganicMatterParameters capnp.Struct

// Params_OrganicFertilization_OrganicMatterParameters_TypeID is the unique identifier for the type Params_OrganicFertilization_OrganicMatterParameters.
const Params_OrganicFertilization_OrganicMatterParameters_TypeID = 0x95cdc661a6600137

func NewParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters(st), err
}

func NewRootParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters(st), err
}

func ReadRootParams_OrganicFertilization_OrganicMatterParameters(msg *capnp.Message) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_OrganicMatterParameters(root.Struct()), err
}

func (s Params_OrganicFertilization_OrganicMatterParameters) String() string {
	str, _ := text.Marshal(0x95cdc661a6600137, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization_OrganicMatterParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization_OrganicMatterParameters) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization_OrganicMatterParameters {
	return Params_OrganicFertilization_OrganicMatterParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization_OrganicMatterParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization_OrganicMatterParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization_OrganicMatterParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization_OrganicMatterParameters) AomDryMatterContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomDryMatterContent(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNH4Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNH4Content(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNO3Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNO3Content(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomCarbamidContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomCarbamidContent(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMFast(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMFast(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBFast(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) NConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetNConcentration(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

// Params_OrganicFertilization_OrganicMatterParameters_List is a list of Params_OrganicFertilization_OrganicMatterParameters.
type Params_OrganicFertilization_OrganicMatterParameters_List = capnp.StructList[Params_OrganicFertilization_OrganicMatterParameters]

// NewParams_OrganicFertilization_OrganicMatterParameters creates a new list of Params_OrganicFertilization_OrganicMatterParameters.
func NewParams_OrganicFertilization_OrganicMatterParameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_OrganicMatterParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0}, sz)
	return capnp.StructList[Params_OrganicFertilization_OrganicMatterParameters](l), err
}

// Params_OrganicFertilization_OrganicMatterParameters_Future is a wrapper for a Params_OrganicFertilization_OrganicMatterParameters promised by a client call.
type Params_OrganicFertilization_OrganicMatterParameters_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_OrganicMatterParameters_Future) Struct() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

type Params_OrganicFertilization_Parameters capnp.Struct

// Params_OrganicFertilization_Parameters_TypeID is the unique identifier for the type Params_OrganicFertilization_Parameters.
const Params_OrganicFertilization_Parameters_TypeID = 0xba0c11cf818d29fd

func NewParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters(st), err
}

func NewRootParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters(st), err
}

func ReadRootParams_OrganicFertilization_Parameters(msg *capnp.Message) (Params_OrganicFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_Parameters(root.Struct()), err
}

func (s Params_OrganicFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xba0c11cf818d29fd, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization_Parameters) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization_Parameters {
	return Params_OrganicFertilization_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization_Parameters) Params() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

func (s Params_OrganicFertilization_Parameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_OrganicFertilization_Parameters) SetParams(v Params_OrganicFertilization_OrganicMatterParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_OrganicMatterParameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization_Parameters) NewParams() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	ss, err := NewParams_OrganicFertilization_OrganicMatterParameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_OrganicMatterParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization_Parameters) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_OrganicFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params_OrganicFertilization_Parameters) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Params_OrganicFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Params_OrganicFertilization_Parameters_List is a list of Params_OrganicFertilization_Parameters.
type Params_OrganicFertilization_Parameters_List = capnp.StructList[Params_OrganicFertilization_Parameters]

// NewParams_OrganicFertilization_Parameters creates a new list of Params_OrganicFertilization_Parameters.
func NewParams_OrganicFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Params_OrganicFertilization_Parameters](l), err
}

// Params_OrganicFertilization_Parameters_Future is a wrapper for a Params_OrganicFertilization_Parameters promised by a client call.
type Params_OrganicFertilization_Parameters_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_Parameters_Future) Struct() (Params_OrganicFertilization_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization_Parameters(p.Struct()), err
}
func (p Params_OrganicFertilization_Parameters_Future) Params() Params_OrganicFertilization_OrganicMatterParameters_Future {
	return Params_OrganicFertilization_OrganicMatterParameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Tillage capnp.Struct

// Params_Tillage_TypeID is the unique identifier for the type Params_Tillage.
const Params_Tillage_TypeID = 0xaa49811a4e3e2c59

func NewParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage(st), err
}

func NewRootParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage(st), err
}

func ReadRootParams_Tillage(msg *capnp.Message) (Params_Tillage, error) {
	root, err := msg.Root()
	return Params_Tillage(root.Struct()), err
}

func (s Params_Tillage) String() string {
	str, _ := text.Marshal(0xaa49811a4e3e2c59, capnp.Struct(s))
	return str
}

func (s Params_Tillage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Tillage) DecodeFromPtr(p capnp.Ptr) Params_Tillage {
	return Params_Tillage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Tillage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Tillage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Tillage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Tillage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Tillage) Depth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_Tillage) SetDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

// Params_Tillage_List is a list of Params_Tillage.
type Params_Tillage_List = capnp.StructList[Params_Tillage]

// NewParams_Tillage creates a new list of Params_Tillage.
func NewParams_Tillage_List(s *capnp.Segment, sz int32) (Params_Tillage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Params_Tillage](l), err
}

// Params_Tillage_Future is a wrapper for a Params_Tillage promised by a client call.
type Params_Tillage_Future struct{ *capnp.Future }

func (f Params_Tillage_Future) Struct() (Params_Tillage, error) {
	p, err := f.Future.Ptr()
	return Params_Tillage(p.Struct()), err
}

type Params_Irrigation capnp.Struct

// Params_Irrigation_TypeID is the unique identifier for the type Params_Irrigation.
const Params_Irrigation_TypeID = 0xd90939a58e404ff8

func NewParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation(st), err
}

func NewRootParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation(st), err
}

func ReadRootParams_Irrigation(msg *capnp.Message) (Params_Irrigation, error) {
	root, err := msg.Root()
	return Params_Irrigation(root.Struct()), err
}

func (s Params_Irrigation) String() string {
	str, _ := text.Marshal(0xd90939a58e404ff8, capnp.Struct(s))
	return str
}

func (s Params_Irrigation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Irrigation) DecodeFromPtr(p capnp.Ptr) Params_Irrigation {
	return Params_Irrigation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Irrigation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Irrigation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Irrigation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Irrigation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Irrigation) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Irrigation) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation) Params() (Params_Irrigation_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Irrigation_Parameters(p.Struct()), err
}

func (s Params_Irrigation) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Irrigation) SetParams(v Params_Irrigation_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_Irrigation_Parameters struct, preferring placement in s's segment.
func (s Params_Irrigation) NewParams() (Params_Irrigation_Parameters, error) {
	ss, err := NewParams_Irrigation_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Irrigation_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_Irrigation_List is a list of Params_Irrigation.
type Params_Irrigation_List = capnp.StructList[Params_Irrigation]

// NewParams_Irrigation creates a new list of Params_Irrigation.
func NewParams_Irrigation_List(s *capnp.Segment, sz int32) (Params_Irrigation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Irrigation](l), err
}

// Params_Irrigation_Future is a wrapper for a Params_Irrigation promised by a client call.
type Params_Irrigation_Future struct{ *capnp.Future }

func (f Params_Irrigation_Future) Struct() (Params_Irrigation, error) {
	p, err := f.Future.Ptr()
	return Params_Irrigation(p.Struct()), err
}
func (p Params_Irrigation_Future) Params() Params_Irrigation_Parameters_Future {
	return Params_Irrigation_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Irrigation_Parameters capnp.Struct

// Params_Irrigation_Parameters_TypeID is the unique identifier for the type Params_Irrigation_Parameters.
const Params_Irrigation_Parameters_TypeID = 0xaec9e089e87f1599

func NewParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters(st), err
}

func NewRootParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters(st), err
}

func ReadRootParams_Irrigation_Parameters(msg *capnp.Message) (Params_Irrigation_Parameters, error) {
	root, err := msg.Root()
	return Params_Irrigation_Parameters(root.Struct()), err
}

func (s Params_Irrigation_Parameters) String() string {
	str, _ := text.Marshal(0xaec9e089e87f1599, capnp.Struct(s))
	return str
}

func (s Params_Irrigation_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Irrigation_Parameters) DecodeFromPtr(p capnp.Ptr) Params_Irrigation_Parameters {
	return Params_Irrigation_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Irrigation_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Irrigation_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Irrigation_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Irrigation_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Irrigation_Parameters) NitrateConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Irrigation_Parameters) SetNitrateConcentration(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation_Parameters) SulfateConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Irrigation_Parameters) SetSulfateConcentration(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Params_Irrigation_Parameters_List is a list of Params_Irrigation_Parameters.
type Params_Irrigation_Parameters_List = capnp.StructList[Params_Irrigation_Parameters]

// NewParams_Irrigation_Parameters creates a new list of Params_Irrigation_Parameters.
func NewParams_Irrigation_Parameters_List(s *capnp.Segment, sz int32) (Params_Irrigation_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Params_Irrigation_Parameters](l), err
}

// Params_Irrigation_Parameters_Future is a wrapper for a Params_Irrigation_Parameters promised by a client call.
type Params_Irrigation_Parameters_Future struct{ *capnp.Future }

func (f Params_Irrigation_Parameters_Future) Struct() (Params_Irrigation_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_Irrigation_Parameters(p.Struct()), err
}

type Params_SaveState capnp.Struct

// Params_SaveState_TypeID is the unique identifier for the type Params_SaveState.
const Params_SaveState_TypeID = 0xdd84803fc87ac648

func NewParams_SaveState(s *capnp.Segment) (Params_SaveState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_SaveState(st), err
}

func NewRootParams_SaveState(s *capnp.Segment) (Params_SaveState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_SaveState(st), err
}

func ReadRootParams_SaveState(msg *capnp.Message) (Params_SaveState, error) {
	root, err := msg.Root()
	return Params_SaveState(root.Struct()), err
}

func (s Params_SaveState) String() string {
	str, _ := text.Marshal(0xdd84803fc87ac648, capnp.Struct(s))
	return str
}

func (s Params_SaveState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_SaveState) DecodeFromPtr(p capnp.Ptr) Params_SaveState {
	return Params_SaveState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_SaveState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_SaveState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_SaveState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_SaveState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_SaveState) NoOfPreviousDaysSerializedClimateData() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Params_SaveState) SetNoOfPreviousDaysSerializedClimateData(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Params_SaveState) AsJson() bool {
	return capnp.Struct(s).Bit(64)
}

func (s Params_SaveState) SetAsJson(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// Params_SaveState_List is a list of Params_SaveState.
type Params_SaveState_List = capnp.StructList[Params_SaveState]

// NewParams_SaveState creates a new list of Params_SaveState.
func NewParams_SaveState_List(s *capnp.Segment, sz int32) (Params_SaveState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Params_SaveState](l), err
}

// Params_SaveState_Future is a wrapper for a Params_SaveState promised by a client call.
type Params_SaveState_Future struct{ *capnp.Future }

func (f Params_SaveState_Future) Struct() (Params_SaveState, error) {
	p, err := f.Future.Ptr()
	return Params_SaveState(p.Struct()), err
}

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xbfda1920aff38c07

func (c Service) ManagementAt(ctx context.Context, params func(geo.LatLonCoord) error) (Service_managementAt_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfda1920aff38c07,
			MethodID:      0,
			InterfaceName: "monica_management.capnp:Service",
			MethodName:    "managementAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.LatLonCoord(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_managementAt_Results_Future{Future: ans.Future()}, release

}

func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Service) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return "Service(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	ManagementAt(context.Context, Service_managementAt) error

	Info(context.Context, common.Identifiable_info) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfda1920aff38c07,
			MethodID:      0,
			InterfaceName: "monica_management.capnp:Service",
			MethodName:    "managementAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ManagementAt(ctx, Service_managementAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Service_managementAt holds the state for a server call to Service.managementAt.
// See server.Call for documentation.
type Service_managementAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_managementAt) Args() geo.LatLonCoord {
	return geo.LatLonCoord(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_managementAt) AllocResults() (Service_managementAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService_List creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_managementAt_Results capnp.Struct

// Service_managementAt_Results_TypeID is the unique identifier for the type Service_managementAt_Results.
const Service_managementAt_Results_TypeID = 0xf32d7a3fdc567bdb

func NewService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(st), err
}

func NewRootService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(st), err
}

func ReadRootService_managementAt_Results(msg *capnp.Message) (Service_managementAt_Results, error) {
	root, err := msg.Root()
	return Service_managementAt_Results(root.Struct()), err
}

func (s Service_managementAt_Results) String() string {
	str, _ := text.Marshal(0xf32d7a3fdc567bdb, capnp.Struct(s))
	return str
}

func (s Service_managementAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_managementAt_Results) DecodeFromPtr(p capnp.Ptr) Service_managementAt_Results {
	return Service_managementAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_managementAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_managementAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_managementAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_managementAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_managementAt_Results) Mgmt() (Event_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Event_List(p.List()), err
}

func (s Service_managementAt_Results) HasMgmt() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_managementAt_Results) SetMgmt(v Event_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMgmt sets the mgmt field to a newly
// allocated Event_List, preferring placement in s's segment.
func (s Service_managementAt_Results) NewMgmt(n int32) (Event_List, error) {
	l, err := NewEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Event_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_managementAt_Results_List is a list of Service_managementAt_Results.
type Service_managementAt_Results_List = capnp.StructList[Service_managementAt_Results]

// NewService_managementAt_Results creates a new list of Service_managementAt_Results.
func NewService_managementAt_Results_List(s *capnp.Segment, sz int32) (Service_managementAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_managementAt_Results](l), err
}

// Service_managementAt_Results_Future is a wrapper for a Service_managementAt_Results promised by a client call.
type Service_managementAt_Results_Future struct{ *capnp.Future }

func (f Service_managementAt_Results_Future) Struct() (Service_managementAt_Results, error) {
	p, err := f.Future.Ptr()
	return Service_managementAt_Results(p.Struct()), err
}

const schema_93337c65a295d42f = "x\xda\xd4Z}t\x1c\xd5u\xbfwf\xd7k\xd9\x92" +
	"W\xe3Y\xa3\x0fl/\xc8\xe6\xc3:\xd8\xd8\x92\xa8\x83" +
	"N\xe8Z\x96ldc!\x8dV\xc2\xc8\xc5\xd4O\xab" +
	"\xa7\xd5\xc0\xee\xcczvV\xf6:8\xc2\xaei\xc1\xc5" +
	"%P\xbb@\x9b\xb6|\xa6E\xd0\xf2\x11\xe8\x01\x0e\x04" +
	"\x9c\xc6`\xe3p\x88\x81\x9c\xd3\xf0\xd1@\x13Z|\x9a" +
	"\xe4\x9c\xc0\xc9i\xa0\xc0\xf4\xdc\x99\xd9\x99\xd1je\xb9" +
	"\xfd\xa3\xe7\x84\x7f\xb4\xdcy\xf3\xde}\xf7\xfd\xde\xbd\xbf" +
	"\xfb\x1b\xaf\xce\xcc_\x17ZS\xa3\xd7\x83\x90\\\x8c\xe1" +
	"9\xd6O\xbei=\xfa\xca;;\x0e\x80\x12G\xb4\xc2" +
	"\x7fR5\x1a\xfb\xb7\xf3NB\x18#\x00\xadK\xaa\xdb" +
	"Q^Y\xbd\x16@\xee\xa9\xde\x05h\x9d\xfa\xe3'[" +
	"\xcdk\xf4\x03\xa0\\\x8a\xa2\x95<\xbc\x97\x9d8\xfa\xd2" +
	")\x08\xd1\xe0\xd7\xab\xdfA\xf9tu\x04@\xfe\xa8\xfa" +
	"q@k\xec\xa1OrK\x0e\xff\xe7\x1d\x15\xa7\xbe\xb7" +
	"\xa6\x1d\xe5Gj.\x02\x90O\xd4\xd0\xd4\xd7\xf3\xdf\xfb" +
	"\xf5\x95+\xde:\x0c\xd2E\x82\xef\x15`\xeb\xca\x05\xc3" +
	"(w,\xa0y\xafX\xd0\x0bh\xad\xc5\x1d\xdfa\xaf" +
	"\xbc~\x04\x946\xac\xb1\x9e\xe8\xfb\xe5\xc4\xed\x7ft\xd7" +
	"\xd3\x8e\x13\x83\x0b\x86\x05\xb9H\x83[\x0b\x0b~*\x00" +
	"Z\xdf\xba\xe0\xbe_\xb5\xfc\xedg\xf7\x83T\x8f\xd6\xa5" +
	"o\x1fy\x80\xdf\xd4\xfa\xe7\x10\x0e\xd3\x90\xe7\xa4y(" +
	"\x9f\x90\xe8\xe71)\x8e\x80\xd6\x96\xd5\xdb\xf2\xa7\xdfh" +
	"y\x10\xa4\xf84\x97?\\8\x8c\xf2o\x16\xd6\x01\xc8" +
	"_.L\x00Z/\xfe\xeb\xee\x0f/|3\xf5`\xc5" +
	"\x0d\xae\x94\x1f@y\x83L\xa3\x15\x996\xf8\xa7;/" +
	"|\xad\xee\xe6\xaf\x7f\x07\x94KP\xf0\x17\xb2\xdd~R" +
	"\xde\x83\xf21\x99\xf6x\xd4\x1e\x8ck\xffb\xe9\xe1\x17" +
	"\x1ey\xc4\x8e\x86\x17H\xc0\xd6%\xb1\x83(_\x16\xa3" +
	"\x91kbk\x01\xad\xa1K~\xff\xea\xc6}\x9b&\xcb" +
	"\x9c\xb0\xa7\xed\x88\xb5\xa3\xac\xd8\x83{b\xe4\xf1\xbd\x8b" +
	"&>\xbe\xed\x83\x13\xff\x08J3\x0a\xd6o{\xd7\xfd" +
	"\xd9\xc3\x97W\xfd\xc4\x19\x9c\x8dM\xa2|\x8b=x_" +
	"\x8c|(\xfcl\xfc{\x7f\xf5\xe8\xa6\xc7A\xb9\x08\xc3" +
	"\xbe\x13\xf6\xe0_\xc6^C\xb9j\x11\xfd\x0c/\xdaJ" +
	"\x91;znq\xeb`\xfbKO\x81\xb4T\xb0B\xbb" +
	"6\x16\xbf\xdb\x9c~\x83<\xdew\xcef\x94\x8f\x9cC" +
	"\xf3\xdeyN\x1a\xd0\xbaD\xf8\xe9\x96\xf3\xael\xfb." +
	"H\xf5\x82\x7f\"\x80\xad\xc7\xceiD\xf9\xc7\xf6\xc8S" +
	"\xe7\xdc\x0d\xe8\x9f\xad\x12G\xa1<\xc0\x8b\xea\x1e@y" +
	"e\x1d!\xa8\xa7\x8e\xf0\xf6\xd0\xd8G\xa9\x7f\xae\xad}" +
	"\x0e\x94\xa5\x88\xbe\x0b]\x11\x01\xb1\xf5t]#\xca\x9f" +
	"\xd5\xd1\xdc\xbf\xa9\xa3\xdd}\xb9\xe2\xd0\xbe7\xa4\xea\xe7" +
	"Aj\x0b,\x14\x16i\xea\xa1\xfa\xcfQ.\xd4\xd3\xe0" +
	"\x9d\xf54\xf5\xf5\xd7\xde\xb8\xe0\x1b\x8f\xfe\xd3\xf7\xca\xa6" +
	"^\x14\x8a @kUC\x13\x02\xcaR\x03\xcd\x1b\xb9" +
	"\xfd\xd3\xc7\xcfkx\xe7%\x90\xea\xc5)\xbb\xcb6\x08" +
	"(\x17\x1bh\xd2B\xc3\x95\xf2\xfd\x0du\x00\xd6{\xb1" +
	"_\xc8\x8bkn}\xa5\x1cB\x02\xb9qgC\x0b\xca" +
	"\xf7\xdbo\xfcu\x03\xb9\xb1\xf2\xba'N\x7fr\xfd\x1f" +
	"\xbcJ\xc8\x17}\xf89\xa3\xafh\xfc\x1c\xe5\xa1F\xfb" +
	"\x164\xda`^\xbc\xf1\xf5\x0f\xee\xba\xfa\xe8\xab4\xb9" +
	"X\x1e>\xf5\xdc\x07P\xdew.M\xbe\xf7\xdc\xff\x00" +
	"\xb4\xbex\xf2\x9e\xba\xe8\xdf\\y\xbc\xf2\x1e\x07\x17\xb7" +
	"\xd0\x1e\xb7/\xa6=zSM\xb9S\x04\x0c\xf9\xc5\xc5" +
	"\x9f\xcb'\x16\xbf\x0a\xa2?\x83R\x8f\x81Q\x1bB\x11" +
	"\x11Q\xe6K>\x91w.YK\x99`\xc9\x1d\xe4\xec" +
	"\x13\x9f\x9c>\xf4x\xcd\x8a\x1fMC\xc5\xa9\xa5\x0bQ" +
	"\xfep)\xf9\xfc\xfe\xd2\x8bh\xa8\x97w\x948\xce-" +
	"\x0f\xda\x93q\xbaJ\xf1:\x80\xd6S\xf1\xb5\x94\x01<" +
	"\x98W\xba\xa6\x1b\x9a\xfaQ\x1ej\xa2k\xca\x9bho" +
	"\x9f_\xb5\xe8\xd3\x93\xe6\xc6w+\x87\xe1h\xd3<\x0a" +
	"\xc3\x89&\xbaM\xdd\xaf\xec9\x9e\xb8\xf9\xc0\xfbe\xf0" +
	"\xb4/\xc8\xe9\xa6\xcd(\x7f\xd9D!\xf9\xcc\x9e\xf7\xef" +
	":\x8e<u\xf3\x7fu\xfd|Z~\xe3\xcb\xfaQ." +
	".\xb3q\xb1\x8cn\xf4\x07\xd2\xaf\xe4c=\xdd\x1fM" +
	"\xbbI\xc5e\xdbP>D#[o[\x96\xa0H\xbc" +
	"\xfb\x8dk\xdeK\xecY\xf9)H\xe7!\xb8;\xca." +
	"\x9f$\x17\xf7.'\x17\x85\xc8\xb3\x8f^\xfaf\xf8\xb7" +
	"\xe4b\xb8|\xef\xff\xb0|?\xcaG\x97\xd3\xcf\x17\x97" +
	"\xdb\x97xY\xfbs'\xbfx\xef\xa3\xcf\xe9\xca\x8b\xbe" +
	"\x97\xf6\x8e.\xb8p\x18\xe5\xcb/\xa4\x9f\x97]\x18G" +
	"\xb0`\xbf\x95\xd555\xc5\xfe0+2\x8d\xa5y\x96" +
	"k\xe6\xaa\x14\xcbi\xb9\xf6>f\xb0l~Ug\xa2" +
	"`\x9a\xaa\x96V\xaa1\x18\x01\xa91\x90\xeek\x9a\xfd" +
	"e\xa5\xaaf\xb1sKtPS\xcdh2\xc7S\xca" +
	"\\1\x04\x10B\x00i\xc50\x80r\xb1\x88J\x97\x80" +
	"\x881D\xc45\x1d\xf3\x10@\xd9\"\xa2r\xad\x80V" +
	"\xcaY+\x09\x91\x1cO\xe1\x02\xc0>\x11\xb1\xd6\x9f\x1c" +
	"\x90\x8c4\xac\x87\xed\xee\xc8\x8by5\xabf\x98\xa9\xea" +
	"Z?3y\x1f7R\\3Y\x9a\x03\xe0|\x10p" +
	"\xfe\xcbC\xeb\x00\xbc-\xce\x99a\x8b\x1d\x05S\xcf2" +
	"SM%\xf5]\xaa\x96^\xd51\x9eN\xeajf\x80" +
	"\x8b\xd9\\\x1f\xa2R\xed\xec\x00Q\xda\xf0\x14\x80\xd2-" +
	"\xa22 \xa0\x84\xa1\x18\xd2\xb6\x94I\x00e@De" +
	"\x87\x80\x92 \xc4P\x00\x90\xb6\xbf\x06\xa0\x8c\x88\xa8\xe4" +
	"\x04\xb4\xf2\xba\x9a\xe9\xe29\x13\xc76\xeaF\xc787" +
	"\xe2,\xadji\xc7G\xab\xd5\xfe\xef\xad\x04\x00X#" +
	"\xac\x98\xdf\xa4%u\xa4\xe5\xb3\xb9\xadjT\x1b\xd1w" +
	"a\x04\x04\x8c\x00MD\x0en\x1a\x15:\x86\xf5q\xee" +
	"\xf9\x99\xcd\x956\x0c8\xeb\x81v'\x981\xce\xf3\xa6" +
	"2\x17\x83E\xaa\xaa\xdf\xaf\x16R\xd5]V\xa7\xa1\xe7" +
	"\x06\xf3,\x0d\xc8\xad\xde\x9c\xd9\xc9\x8ca\x1d\xb5\x9et" +
	"\xd6\xecb&\xb2\xd2\xb1\"J+6\xbb\xc7\xda\xe6\x1e" +
	"+\x80\xb4f?\x80\xb2ZD\xe5\xeb\x02Z|wN" +
	"7L>\x02t~ \x84\x91p\xaa;s\xf6\xa03" +
	"#\x03\xac\xf5\x1d\x00\xc4\xda\xc0VB3a\xd3\x81\xcb" +
	"\xaa\xc1\x88\xa6\x9a\xf6I\xd9\xb1_\xb2\x8d&\x90\x1a\xd6" +
	"\x03\xa0 IM\x00V\xce\x85\x06\x88i>1\xac\xea" +
	"Y\x96\xcfG2L\xf5\x96\x98;\xc3\x12\xbdF\x9ai" +
	"jj#7L5\xa3\xee\xb1\xb1V2\xf60\xd3\xe4" +
	"\x86=\x90\x9b\x11n\xe4\xc9\x85\xb6\x12\xdc\xe5\xed\xf8\x00" +
	"@r\x07\x8a\x98\xcc \xe1\xc5\x89\x8d\xac\xa2\x01\x90\x1c" +
	"#\xbb\x89>d\xe4\x9d\xb6=G\xf6\x9b\xc8.\x8a1" +
	"\x14\x01\xe4\"\xfe%@\xf2&\xb2\xdfJ\xf6P(\x86" +
	"!\x00\xf9\x16\xfc>@\xf2V\xb2\x1f&{8\x1c\xc3" +
	"0\x95h\xdb~\x98\xec\xf7\x91}\xce\x9c\x18\xce\xa1\x02" +
	"\x84\x07\x01\x92\xf7\x91\xfd1\xb2G\"1\xca!\xf2#" +
	"\xb6\xfd1\xb2?K\xf6\xb9sc8\x17@~\x06\xf7" +
	"\x00$\x9f&\xfb\xcbd\xaf\xaa\x8aa\x15\xd5\x07\xdb\xfe" +
	"\x02\xd9\x8f\x93}\xde\xbc\x18\xce\x03\x90\x8f\xe1$@\xf2" +
	"8\xd9\xdf&\xfb\xfc\xf91\x9cOD\xc0\xb6\xbfM\xf6" +
	"\x0f\xc8^]\x1d\xc3j\x00\xf9}{\x9e\xf7\xc8\xfe1" +
	"\x0ah1=\xdbe\x14{\x18RT;u\xcd\x8cp" +
	"\xcd\xf4`\xcd\xf4\xec\xd5\xddm\x9d:\xc45\xb3\xdc\xde" +
	"\xdbZ\xd1N\xf8b\x98UGh2.N}\x98\xcc" +
	"\xe8\xbb\xba\x04\x9e\xea\xd4\xf9\xe8h\xd2d\xda\x083F" +
	" 8b#\xcb\x9bg\x18\x91c\x86\xd9\xd1\xdb3\x80" +
	"zGo\x0f\xcd\x063<\xa3y\x02\xcfR\x94\xabT" +
	"\xbd\x03\x12\xcek\x15\x1f\xd0;\xe5\xb3%1\xa3\xef\x1a" +
	"\xd0\x93=\xeb\xa3S\xde\x9b\xfex\xca\xdbZ\xa7\xae\x11" +
	"\xf6!a\xd8\xe8\x9d=Ql\xda\xd2\xdf\xc5L\x9e\x07" +
	" @\xc7\xbc\xfc\xbd\xb7\x1d@\xd9-\xa2r\xc0G\xb3" +
	"\xb4o\x0f\x80r\xb3\x88\xca\xed\x81\xecw\xdb\x0d\x00\xca" +
	"\xad\"*\x87}\x1cKw\xae\x07Pn\x17Q\xb9\xc7" +
	"\x07\xb1t\xc4\x00P\x0e\x8b\xa8\xdc'`\xc2IoX" +
	"k\x1d\x92\x9a\xc4\xc7\xbe\xfa\xf7\xbbK\x89\x803#\xa3" +
	"\xf2\xbc\x09\x89\xe4LC2\xe4\xb1\x99\xd4!Zy\xc0" +
	"\xc4\x98\x93\xf6f|\xb5\x9bA|\xa6\x11\xb3%\xa2." +
	"\xa6f\x8a[93#c\xdcPB\x18h\x15$l" +
	"\x14\xaf\xbaF\x09yQ\xaci\x06P\xe6\x8a\xa8,\x17" +
	"0:\xc2L\xe6\xd79\xef%\xb7\xce\x95\x96\x0d\xcf\xb0" +
	"l\x8f\xaaq\x83e\xfc\xe4\x14Qu\xcd^\xde\xa3\x99" +
	"\x12n\xb3\xdc\x0c\xc5A4\xf2\xc1r\xdc_!o\xd3" +
	"\x11_\"\xa2\xf25\xc1\x01\x96j\xaa:\xa0\x86\xb5\xfe" +
	"\x94NL\x12,\xab\x17\x02W\xea\xacC\x94\x18\xe3\xc6" +
	"\xaa\xab\xae!h\x05|i\x02P\x96\x8b\xa8\xac\x0e@" +
	"ke\x8b\xef`\xe4F^\xc4\xa85\xf2\xcc\xb6w\x9f" +
	"\xde\xb1\xf5g\xe4D\x140>\xce2\x05>\xcd\x87\x99" +
	"\xe2\xd5\xed@`U\xa9\xb6q\x07\xe1sm\xccJ\xc3" +
	"v\xd5\xa8\xb9\x0b\xc0J\x1b\x9ck=L\x83H\xc1\xe0" +
	"\x96[/\xfa\xd0\xd0G\x0a)S\xd5Q\x9b\xb5\xca\x0e" +
	"$\xd4L\x86\xa59\xcd\x1f\xf2JeM\x8b{\xf61" +
	"\x01\xe3#<g\x8eU\xe0\x00\xb3\xedb\x93a\xa8i" +
	"\xa7\x109'\x1b5\xdd\xda\x13\x88\xe7\xa4\x7f\x8e^<" +
	"/#\xe3\xd7\x1c\xfeei\xaai0\x93w\xa2\x93\x1d" +
	"\x0c\x16\x9d\x92\x1c\xf2\x85\xcc\xe8\x19\x1e\xcfF\xa9J\x91" +
	".1\x87\x12q`N\xc4\xeb\xbd\x88\xdcK\x8c\xea\xdb" +
	"\"*\x7f_r\x14Qz\x98\xc8\xd3c\"*\xcfR" +
	"N\xc1\x18\x0a\x88\xd23\x04\xd7\xa7ET^\xa6\x9c\"" +
	"\xc4PD\x94^\xdc\x06\xa0\xbc \xa2r\x9cr\x8a\x18" +
	"\xc3\x10\xa2t\x8c\xf6y\\D\xe5m\xaa\x8a\xa1\x18\x86" +
	"\x11\xa5So\x02(\xff\"\xa2\xf2s\xc1#\x1f:R" +
	"r\xccsc<\xee\xa4F\x04\xc1&')C\xcfm" +
	"\xca\xe6\x98\x902{\xb5\xeeB\xb6\x90_\xcf2LK" +
	"\xf1`\x1e\xf7\x09\x12F}\"\x05\x18\x8e\xd2\x14\x06\xcf" +
	"\xab#\x05\xde\x0d\"\xdf\xe9\xbd\xa3\xbbl\x02\xdd\x1b\xcb" +
	"\xa3Fw\xe0q\x96\xed\xee\xa7\xd7\x84\x02\xef\xe7)}" +
	"\x9c\x1b\x1b\x0d\xe6\x00n\xf6{\xb6a\x9c~\xf7\x8dq" +
	"MO\x9a\x1e\xb6kml\xd3UG\x94.\xe8\xb7\x19" +
	"\xd1\xf9\x9b\x01P\x94\x96l\x06\xb0x\x96\x1bi\xae\xa5" +
	"\x88\xe6\x8df\xf4]\xdcP5\xc0\xb4\xc54s\x8c\xe7" +
	"\xd5\xbc\x0dHf\x16\x0c\xd5,\x06\xc19\x1d\xf7\x19\xa6" +
	"\x99\xbdFZd\x9a}\xc2\xf6\xba\x1d\xcd\xf6\xba\x977" +
	"\xdb\xeb\xaei\xb1\xd7]A\x7fB\xd2\xf9\xed\x14+\xa9" +
	"\xa1\x05 j\xe8\xba\x19\xcdp6\x1a\xcf\x8f\xe9\xba\x19" +
	"\x1f5\x0a\xaa\x99\xc8\x9bF\xe1F3\x9e/\xa4\x991" +
	"\xeb\xad\x98F\xd4\xec\\H\x1c\xd7\x13\x9b\xa4\xaa\xef\x07" +
	"4\x83\x9amV\x89\xc7\x89A\"\xc7\x8d<\x94~R" +
	"\xc2\xac\xf6.\xd5\x06J\x8e\xebDT\xb6\xf8\x09s\x13" +
	"\xd9\xbaDT\xfa\x08\xaa\xeb\x1c\xa8\xf6\x18~O\x93\xc8" +
	"\xd9\xfea\xad\xbft\xe5\x04\xaaj)\xdd\xc8\xe9\x06\x94" +
	"aq\xc6\x88;\x07>P\x14s\xdc\xbd\xfc\xd5\x96\xe5" +
	"\xdc\xfe\x00#\xaf\xc1\xaf,7\xb7o\x9e\xc2\xc9Mn" +
	"h,C\x9c<\xea\xf7\xabNZ\xb5T-\xf8\xd4\xd3" +
	"\x85\xdc\xa7\xb3]\xfe\x8a\x9c\x99\x9e%\x9c\xf0\x06z\xaa" +
	"\xb2\xa8z\xa9jSc0\xac.\xab\xe8i\xf6\xbb/" +
	"?\xac\xde\xf1:a\x15\xd5\x11\xac\x06\x01\xab\x01\xa3\x1a" +
	"\xcb\xf2\xd2\xff\xcc\x16G6\x1a1\xb9AQ\xacE\x9b" +
	"G\xdb8\xf5k\x92`\x93hie\xb3\x1f\xda8\xa7" +
	"7\xb1\xd6\x97\xad\x1c\x17\xa2\xd4\xc5y=\xdb\x8c\xeb&" +
	"\xb91\xae\xa688%\"\x0c`\xfd\xf7\x1d?\xbc|" +
	"\xf5\x17\xbf\xfe\x05\x96D\x01I\xba\x01\x04\xa9*be" +
	"\xdd\x97!\xaa\x99\x1d\xe6:\xb4\x8b\xfc\x8f\xbb\xbf=t" +
	"\xf2\xd4\xe3O\x9d\xf9^:g\x92\x8c\xdb\xc4\xa9,\xf4" +
	"\x9b\xfd(\x97ro\xcf\x0d>v\x9d\xdc\x0b \x0d\xd2" +
	"\xae\xfbDT\xae\xb3\x9b\xf4\x8c\xa9\x8e3\x83\xc0Q\x0a" +
	"n\x8en\x7f\x17\xd7 \x9aW\xcdbi\xefQ\xca\x91" +
	"(Y\x07\xae{i\xf9\x83w\x1f\xfa\xd8N\x06g\x01" +
	"\xa0i\xbc\xa6\x02\x80\x02\xb4\xb4\xb1\x12-%\x8fo\x12" +
	"Q\xb9U@t\xf1s\x0bm\xf7\x80\x88\xca\xb7\xa8\x82" +
	"\xa0\xc3J\x0f5\x05\xa8jHpX\xe9\x9dM>U" +
	"\x9d\x11P)j/\xb2\xaa\xdd\xd6\xba\x978\xa2\x8d\xb5" +
	"\xf9\xbf\xf5\xd6\xb3f&Ww\xf1,\xd3F\xa6f/" +
	";\x7f{\xdbdD\x9f\xaf\x13Q\x19\xf3\xb3\x0f\xef\xf7" +
	"U\x06\xef\xb0\xb2\x84\xdb1\x11\x15\x93\xb6Y\xeb\x14\xca" +
	"\x9dd\xcc\x88\xa8\xec\x16pBsV\x9b\xd2A\xccH" +
	"\xf4\x82<\x050\x9e\xa7\xda\x82s@\x08\xcf9\x8b\xec" +
	"4\xcc\xe3\xe6.\xce\xb5\xd2\xbd\x12\xcb\xb2\x93}\xafB" +
	"\xe5\xc4\xd3\xa3\xfb\x00\xd3\xc9x\xc2\xa1\xebg`\xe9B" +
	"\xb9/\x09'\xca\xcaj\x0c~\x1e\x18\xba\xc1\xd7n\xa5" +
	"\xa1v_\x93\x94\x06\xf7\xfbZ\xb94\xb8\xde\x97\xe0$" +
	"\xe5\xa0/\xa9\xd1\x13O\xc0\x95\x94I_\xac\x95\x06'" +
	"}=Z\x1a\x9a\xf4\x15~i\xfbz_\xcc\x94\x86\xb6" +
	"\xf9\x02\xa44\xd4o\x9582D\xcd1n\xb8\xbd\x8e" +
	"U\x92\xa7B\xae>\x05.\xb9\x02O\xb7*\x19`\xc2" +
	"UD\xac\xd2\x0d*\x11\x0d\x87\xbeY%\x98\x95\x99{" +
	"\xcbh\x89c\x9e\x18p(\xacU\"\x9c \xea\x9a\x95" +
	"d\xe3<i2\x93\x08\xc3\x8c\x01\x8f\xdb\xa7oK\x86" +
	"\xbe\x14*\xdd\x10\xf8\xc2 m\xf3\xb3\xa6$5[\x1b" +
	"J\xf5(:P\xccq\xabDc@Ls\xdb\xa2," +
	"\xf6.\xc23t\xb5\x9f\x10Qy\xc1\xbf\x08\xcf5\xfb" +
	"\xe4\xb0F\xb0,\x0c\xa8\xc0\xd2\x8b\x8d \xd4\x88_\x91" +
	"\xd1S\xc8\xa5\x87\xd7\x83P\x13\xfa\x92\x8c\xde\xa7\x01\xe9" +
	"P\x0b\x08RX\xb4u\x11\xa9@\x90\xcc\x89\xa8\xdc$" +
	"\xa04g\xb5-\x8aH\xc5\xfd~\xb2\x89\x9a\xc5\x1c\x9f" +
	"^=\xa3\xaa6\xaac\xad\xf5\xd6;\xe2W'\xbfy" +
	"\xf2\xedRab\xe6\xc40\xb7oC\x9c\x8d\x9a\xdc(" +
	"\x95\xb0\x85 \xe0Bb\x8c\x05\xad\xc3L\x9a\x0c\x0d\xb3" +
	"w\xb4\x8b\x15\xe1,)\xc0@1\x876\x03X\xed\xf4" +
	"\xde\xedv\x9a\xdd\xb7\xdf\xe6\\{\xd7\xdb\x9c\xabp\xd0" +
	"\xe6\\\x85m6\xe7\xdaI\xc69\x92:\x09\x80\x11\xe7" +
	"\xcf\\\xe7O\x95\xa4\xd2\xb3y\x12#\x8e8_\xda\xde" +
	"\x0f\xe0\xb6\xe5\x16+\xc7\xa1\xdbQ\x03\x9b\x86CK\x0d" +
	"@f\xc2tq\xa4W\x84\x99\x95\xad\x8cU\xad\"V" +
	"'\\\x89\xd8\xcas\xf3\x1aj\xfe\xa8\xf8\xe5+`2" +
	"4\x9b\xd8\xeb^/\xbb\x92z\x1fE%\x1c\xb6J\xb2" +
	"*Dx6\xa7\\,\x86\x10m=\xaf\xca\xd6\xc9\xaa" +
	"Q\xc4d\xbd\xad\xdb9\xfa\xaf\xbc\xc8\xb6\xd7\x93}9" +
	"\xba\xbd\x89\x80(\x9fo\xeby\xe7\x91\xfd\x12t\xdb\x13" +
	"\x11Q^a\xdb/&{\x1b\xba\x1dJ\x08@^c" +
	"\xcf\xd3F\xf6u\xb6n\xe7\xeayW\xe0\xf3\x00\xc9u" +
	"d\xdfb\xebv\xae\x9e\xb7\xc9\xd6\xd5\xb6\x90\xfdZ[" +
	"\xb7s\xf5\xbcA\xdc\x0c\x90\x1c \xfb\x0er\xa4\xca\x91" +
	"\xf3\xb6\xe30@\xf2:2\x8f\xa1\x80\x94\x8d\xab\x00d" +
	"\x8e\xedA\x95\x92Nc\x80gs\x038f\xf0\xfc\x98" +
	"\x9e\x19\x09\xb4<\x8e:=\xc01\x9b\xdb\xaaj#\xb6" +
	"\xe4\xe5\xd1\x1cU\xb3\xf5w\x88kfGrk\xb0\xa7" +
	"\x99nwuy\xb6\xbbu\x84\x15\xfb\xd0\xe0)5\x97" +
	",d\x83*6\xdb\xddY0\x0c\x8e\x9a\xd9\xc5\x8a}" +
	"\x06O8C\xbc\x01&\xcf\xd2\xffw\xe0\xb0>\xce\xd7" +
	"\xb3<\x8f\x92\xdb\xde\xe3a\x96\xe7\x8e0\x1e\xd0\xf4\x82" +
	"\x07\x8b\xb5\xfe\xa9\xbb\x85\xc5\x93\x9f\xbc\xb2p\x96\xf2\x8f" +
	"\xd7\x91\xa3\xa3\xbex\xdfh\xcf\xa4\xbe\xb4\xfb\xec\xd2\x13" +
	"<\xda\xfd\xcaX\xd6\x1e\xf8|\xd7\x9b\xbc\xcc\xb9\x99x" +
	"\xad\x09\xa0\x84\x9c\xea+\x04\xe5\xa7\x98#?\xf1\xff\x83" +
	"\xdcU\xaa\x01%\xfd\xa4\xb4\xa95+Z\x10@i\x13" +
	"QYG\xb5}\x9dC)\xafh\x0f\xea\x0ez\xefh" +
	"\x9f\xc1\xc7EU/\xe4\xbbX1\x9f\xe4\x86\xca\xa8\x17" +
	"\x1e\xe9\xcc\xa8Yf\xc6y\x173\x19V\x81\x80U\xd4" +
	"%\xe57\xe7+tC\xb3}\x12\xe8\xc4-\x01i\xa7" +
	"\xc9N\x89U\xcd\x00\x91T\x81:\xcdQs\xb6F\xba" +
	"T\x90\xbc\xfe\xaa\xcd\x9e\xea\x88\x93]\x0f9\xd9\xf56" +
	"'\xbb\xees\xb2\xeb>'\xbb\xeeu\xb2k\xc1\xc9\xae" +
	"\x05'\xbb\x16\x9c\xecZp\xb2k\xd6\xc9\xae*\xf5\xe3" +
	"\xd5\x12_\xff;\x96d'vqF\x0cefZ\xeb" +
	"\xf66\xab\xb2\xde\x83\x0esy?\xcfG\x0b\x193?" +
	"\x93\x18\x9aMgM_\x0c\x0d|6=+1t\x1a" +
	"\x1br\x85&'{K\xf7RO~\x8f\x88\xcaC." +
	"U&d\xdeO\xc6\xfbDT\x1e+\xe5m\x00\xe9\x91" +
	"\x83\x01\xf5)\xe4\x8a\xd7\xcf<\x0f\xa0<+\xa2\xf2\x03" +
	"\xca\xd8\xb5\x8e\xd0tt\x18@yYD\xe5\x87\x02\x02" +
	"8]\xe3\x09\xa2\xe9?\x10Q\xf9\x91\xf0\xff\x9f\x14]" +
	"\xb0\x0c@D\xcd\xf2\xa9\x9d{8*N\x11\xc1\x03\xff" +
	"\"\xe5\x7f\xf5\xad-\x19\xc9\xf1TY\x03\xd6R\xa9\x01" +
	"k\xf1\x1b0O\xc3\xbb\xa59\xf0\xb1\xa0\xa4\xe1\xdd\xd6" +
	"_\xde\x81!Jw\x1e\xf4\xbf\x0b\xc4mLc\xd4\xff" +
	"g'\x95\xd4\xdfhASM\x8c\xfa\x9f\xa5]\xb5\"" +
	"U0{\x8d-|\x14\x90\x9ez_\xb0\xdd\xa7\xce\xb7" +
	"\xc9>\x8e\x15?\x1d\xffO\x00\x00\x00\xff\xff\xd2\xc7\\" +
	"]"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_93337c65a295d42f,
		Nodes: []uint64{
			0x8460dac6abff7ed9,
			0x846f567433b186d1,
			0x8feb941d70f2a468,
			0x94d32947f136655e,
			0x95cdc661a6600137,
			0xa1f99f32eea02590,
			0xa332cfe9735a304c,
			0xa363d226e178debd,
			0xa63c8017ca26718b,
			0xa9a9bc941e963701,
			0xaa49811a4e3e2c59,
			0xaec9e089e87f1599,
			0xaf49ab9bbe76e375,
			0xb2bf3a5557791bc1,
			0xb33447204cdf022c,
			0xb492838c7fed50b0,
			0xb91010c363e568a4,
			0xba0c11cf818d29fd,
			0xbeb6ab7b0e6b585e,
			0xbfda1920aff38c07,
			0xc6880d1c13ec14dc,
			0xc75b5ef2e9b05c2d,
			0xc7c14e92e0cd461c,
			0xc8479e0f1798b1fc,
			0xcb20e21466098705,
			0xcf672ab379467704,
			0xd0290daf8de9f2b0,
			0xd1bfc1c9617d9453,
			0xd90939a58e404ff8,
			0xdb4674cbf3154bfa,
			0xdd84803fc87ac648,
			0xe444f780b29541a7,
			0xe5484dc513ee11e0,
			0xf32d7a3fdc567bdb,
			0xf805d22fabb80702,
			0xfae5dcfccbb93a23,
		},
		Compressed: true,
	})
}
