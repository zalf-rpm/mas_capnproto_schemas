// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	climate "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/climate"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	math "math"
)

type CropSpec capnp.Struct

// CropSpec_TypeID is the unique identifier for the type CropSpec.
const CropSpec_TypeID = 0xa74f5574681f9d55

func NewCropSpec(s *capnp.Segment) (CropSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropSpec(st), err
}

func NewRootCropSpec(s *capnp.Segment) (CropSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropSpec(st), err
}

func ReadRootCropSpec(msg *capnp.Message) (CropSpec, error) {
	root, err := msg.Root()
	return CropSpec(root.Struct()), err
}

func (s CropSpec) String() string {
	str, _ := text.Marshal(0xa74f5574681f9d55, capnp.Struct(s))
	return str
}

func (s CropSpec) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropSpec) DecodeFromPtr(p capnp.Ptr) CropSpec {
	return CropSpec(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropSpec) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropSpec) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropSpec) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropSpec) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropSpec) CropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CropParameters(p.Struct()), err
}

func (s CropSpec) HasCropParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropSpec) SetCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCropParams sets the cropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropSpec) NewCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropSpec) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CropResidueParameters(p.Struct()), err
}

func (s CropSpec) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropSpec) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropSpec) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CropSpec_List is a list of CropSpec.
type CropSpec_List = capnp.StructList[CropSpec]

// NewCropSpec creates a new list of CropSpec.
func NewCropSpec_List(s *capnp.Segment, sz int32) (CropSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CropSpec](l), err
}

// CropSpec_Future is a wrapper for a CropSpec promised by a client call.
type CropSpec_Future struct{ *capnp.Future }

func (f CropSpec_Future) Struct() (CropSpec, error) {
	p, err := f.Future.Ptr()
	return CropSpec(p.Struct()), err
}
func (p CropSpec_Future) CropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(0, nil)}
}
func (p CropSpec_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(1, nil)}
}

type CropParameters capnp.Struct

// CropParameters_TypeID is the unique identifier for the type CropParameters.
const CropParameters_TypeID = 0x8ac5cfb21988c168

func NewCropParameters(s *capnp.Segment) (CropParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropParameters(st), err
}

func NewRootCropParameters(s *capnp.Segment) (CropParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropParameters(st), err
}

func ReadRootCropParameters(msg *capnp.Message) (CropParameters, error) {
	root, err := msg.Root()
	return CropParameters(root.Struct()), err
}

func (s CropParameters) String() string {
	str, _ := text.Marshal(0x8ac5cfb21988c168, capnp.Struct(s))
	return str
}

func (s CropParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropParameters) DecodeFromPtr(p capnp.Ptr) CropParameters {
	return CropParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropParameters) SpeciesParams() (SpeciesParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SpeciesParameters(p.Struct()), err
}

func (s CropParameters) HasSpeciesParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropParameters) SetSpeciesParams(v SpeciesParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSpeciesParams sets the speciesParams field to a newly
// allocated SpeciesParameters struct, preferring placement in s's segment.
func (s CropParameters) NewSpeciesParams() (SpeciesParameters, error) {
	ss, err := NewSpeciesParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SpeciesParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropParameters) CultivarParams() (CultivarParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CultivarParameters(p.Struct()), err
}

func (s CropParameters) HasCultivarParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropParameters) SetCultivarParams(v CultivarParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCultivarParams sets the cultivarParams field to a newly
// allocated CultivarParameters struct, preferring placement in s's segment.
func (s CropParameters) NewCultivarParams() (CultivarParameters, error) {
	ss, err := NewCultivarParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CultivarParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CropParameters_List is a list of CropParameters.
type CropParameters_List = capnp.StructList[CropParameters]

// NewCropParameters creates a new list of CropParameters.
func NewCropParameters_List(s *capnp.Segment, sz int32) (CropParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CropParameters](l), err
}

// CropParameters_Future is a wrapper for a CropParameters promised by a client call.
type CropParameters_Future struct{ *capnp.Future }

func (f CropParameters_Future) Struct() (CropParameters, error) {
	p, err := f.Future.Ptr()
	return CropParameters(p.Struct()), err
}
func (p CropParameters_Future) SpeciesParams() SpeciesParameters_Future {
	return SpeciesParameters_Future{Future: p.Future.Field(0, nil)}
}
func (p CropParameters_Future) CultivarParams() CultivarParameters_Future {
	return CultivarParameters_Future{Future: p.Future.Field(1, nil)}
}

type SpeciesParameters capnp.Struct

// SpeciesParameters_TypeID is the unique identifier for the type SpeciesParameters.
const SpeciesParameters_TypeID = 0xd2d587c796186e8b

func NewSpeciesParameters(s *capnp.Segment) (SpeciesParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10})
	return SpeciesParameters(st), err
}

func NewRootSpeciesParameters(s *capnp.Segment) (SpeciesParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10})
	return SpeciesParameters(st), err
}

func ReadRootSpeciesParameters(msg *capnp.Message) (SpeciesParameters, error) {
	root, err := msg.Root()
	return SpeciesParameters(root.Struct()), err
}

func (s SpeciesParameters) String() string {
	str, _ := text.Marshal(0xd2d587c796186e8b, capnp.Struct(s))
	return str
}

func (s SpeciesParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpeciesParameters) DecodeFromPtr(p capnp.Ptr) SpeciesParameters {
	return SpeciesParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpeciesParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpeciesParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpeciesParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpeciesParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpeciesParameters) SpeciesId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SpeciesParameters) HasSpeciesId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SpeciesParameters) SpeciesIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SpeciesParameters) SetSpeciesId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SpeciesParameters) CarboxylationPathway() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s SpeciesParameters) SetCarboxylationPathway(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s SpeciesParameters) DefaultRadiationUseEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SpeciesParameters) SetDefaultRadiationUseEfficiency(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SpeciesParameters) PartBiologicalNFixation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SpeciesParameters) SetPartBiologicalNFixation(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SpeciesParameters) InitialKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SpeciesParameters) SetInitialKcFactor(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SpeciesParameters) LuxuryNCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SpeciesParameters) SetLuxuryNCoeff(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SpeciesParameters) MaxCropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SpeciesParameters) SetMaxCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SpeciesParameters) StageAtMaxHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SpeciesParameters) SetStageAtMaxHeight(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SpeciesParameters) StageAtMaxDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SpeciesParameters) SetStageAtMaxDiameter(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SpeciesParameters) SetMinimumNConcentration(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SpeciesParameters) SetMinimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SpeciesParameters) OptimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SpeciesParameters) SetOptimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SpeciesParameters) MaximumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SpeciesParameters) SetMaximumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SpeciesParameters) SetNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationB0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SpeciesParameters) SetNConcentrationB0(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationPN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SpeciesParameters) SetNConcentrationPN(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SpeciesParameters) SetNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SpeciesParameters) DevelopmentAccelerationByNitrogenStress() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s SpeciesParameters) SetDevelopmentAccelerationByNitrogenStress(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s SpeciesParameters) FieldConditionModifier() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x3ff0000000000000)
}

func (s SpeciesParameters) SetFieldConditionModifier(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SpeciesParameters) AssimilateReallocation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SpeciesParameters) SetAssimilateReallocation(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SpeciesParameters) BaseTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasBaseTemperature() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SpeciesParameters) SetBaseTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewBaseTemperature sets the baseTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewBaseTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) OrganMaintenanceRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasOrganMaintenanceRespiration() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SpeciesParameters) SetOrganMaintenanceRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewOrganMaintenanceRespiration sets the organMaintenanceRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewOrganMaintenanceRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) OrganGrowthRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasOrganGrowthRespiration() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SpeciesParameters) SetOrganGrowthRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewOrganGrowthRespiration sets the organGrowthRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewOrganGrowthRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) StageMaxRootNConcentration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasStageMaxRootNConcentration() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SpeciesParameters) SetStageMaxRootNConcentration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewStageMaxRootNConcentration sets the stageMaxRootNConcentration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewStageMaxRootNConcentration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) InitialOrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasInitialOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SpeciesParameters) SetInitialOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewInitialOrganBiomass sets the initialOrganBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewInitialOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) CriticalOxygenContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasCriticalOxygenContent() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SpeciesParameters) SetCriticalOxygenContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCriticalOxygenContent sets the criticalOxygenContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewCriticalOxygenContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) StageMobilFromStorageCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasStageMobilFromStorageCoeff() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SpeciesParameters) SetStageMobilFromStorageCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewStageMobilFromStorageCoeff sets the stageMobilFromStorageCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewStageMobilFromStorageCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) AbovegroundOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.BitList(p.List()), err
}

func (s SpeciesParameters) HasAbovegroundOrgan() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SpeciesParameters) SetAbovegroundOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewAbovegroundOrgan sets the abovegroundOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SpeciesParameters) NewAbovegroundOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) StorageOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.BitList(p.List()), err
}

func (s SpeciesParameters) HasStorageOrgan() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SpeciesParameters) SetStorageOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewStorageOrgan sets the storageOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SpeciesParameters) NewStorageOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) SamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SpeciesParameters) SetSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SpeciesParameters) TargetNSamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SpeciesParameters) SetTargetNSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SpeciesParameters) TargetN30() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s SpeciesParameters) SetTargetN30(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s SpeciesParameters) MaxNUptakeParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s SpeciesParameters) SetMaxNUptakeParam(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s SpeciesParameters) RootDistributionParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s SpeciesParameters) SetRootDistributionParam(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s SpeciesParameters) PlantDensity() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s SpeciesParameters) SetPlantDensity(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s SpeciesParameters) RootGrowthLag() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s SpeciesParameters) SetRootGrowthLag(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumTemperatureRootGrowth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s SpeciesParameters) SetMinimumTemperatureRootGrowth(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s SpeciesParameters) InitialRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s SpeciesParameters) SetInitialRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s SpeciesParameters) RootPenetrationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s SpeciesParameters) SetRootPenetrationRate(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s SpeciesParameters) RootFormFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s SpeciesParameters) SetRootFormFactor(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s SpeciesParameters) SpecificRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s SpeciesParameters) SetSpecificRootLength(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s SpeciesParameters) StageAfterCut() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s SpeciesParameters) SetStageAfterCut(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s SpeciesParameters) LimitingTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s SpeciesParameters) SetLimitingTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s SpeciesParameters) CuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(240)
}

func (s SpeciesParameters) SetCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(240, v)
}

func (s SpeciesParameters) DroughtImpactOnFertilityFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s SpeciesParameters) SetDroughtImpactOnFertilityFactor(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s SpeciesParameters) EfMono() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256) ^ 0x3fe0000000000000)
}

func (s SpeciesParameters) SetEfMono(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SpeciesParameters) EfMonos() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264) ^ 0x3fe0000000000000)
}

func (s SpeciesParameters) SetEfMonos(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SpeciesParameters) EfIso() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(272))
}

func (s SpeciesParameters) SetEfIso(v float64) {
	capnp.Struct(s).SetUint64(272, math.Float64bits(v))
}

func (s SpeciesParameters) VcMax25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(280))
}

func (s SpeciesParameters) SetVcMax25(v float64) {
	capnp.Struct(s).SetUint64(280, math.Float64bits(v))
}

func (s SpeciesParameters) Aekc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288) ^ 0x40f0108000000000)
}

func (s SpeciesParameters) SetAekc(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v)^0x40f0108000000000)
}

func (s SpeciesParameters) Aeko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296) ^ 0x4095e00000000000)
}

func (s SpeciesParameters) SetAeko(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v)^0x4095e00000000000)
}

func (s SpeciesParameters) Aevc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304) ^ 0x40f0cc0000000000)
}

func (s SpeciesParameters) SetAevc(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v)^0x40f0cc0000000000)
}

func (s SpeciesParameters) Kc25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312) ^ 0x407cc00000000000)
}

func (s SpeciesParameters) SetKc25(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v)^0x407cc00000000000)
}

func (s SpeciesParameters) Ko25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(320) ^ 0x4074a00000000000)
}

func (s SpeciesParameters) SetKo25(v float64) {
	capnp.Struct(s).SetUint64(320, math.Float64bits(v)^0x4074a00000000000)
}

func (s SpeciesParameters) TransitionStageLeafExp() int16 {
	return int16(capnp.Struct(s).Uint16(242) ^ 65535)
}

func (s SpeciesParameters) SetTransitionStageLeafExp(v int16) {
	capnp.Struct(s).SetUint16(242, uint16(v)^65535)
}

// SpeciesParameters_List is a list of SpeciesParameters.
type SpeciesParameters_List = capnp.StructList[SpeciesParameters]

// NewSpeciesParameters creates a new list of SpeciesParameters.
func NewSpeciesParameters_List(s *capnp.Segment, sz int32) (SpeciesParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10}, sz)
	return capnp.StructList[SpeciesParameters](l), err
}

// SpeciesParameters_Future is a wrapper for a SpeciesParameters promised by a client call.
type SpeciesParameters_Future struct{ *capnp.Future }

func (f SpeciesParameters_Future) Struct() (SpeciesParameters, error) {
	p, err := f.Future.Ptr()
	return SpeciesParameters(p.Struct()), err
}

type CultivarParameters capnp.Struct

// CultivarParameters_TypeID is the unique identifier for the type CultivarParameters.
const CultivarParameters_TypeID = 0xf206f12e39ab7f9b

func NewCultivarParameters(s *capnp.Segment) (CultivarParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15})
	return CultivarParameters(st), err
}

func NewRootCultivarParameters(s *capnp.Segment) (CultivarParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15})
	return CultivarParameters(st), err
}

func ReadRootCultivarParameters(msg *capnp.Message) (CultivarParameters, error) {
	root, err := msg.Root()
	return CultivarParameters(root.Struct()), err
}

func (s CultivarParameters) String() string {
	str, _ := text.Marshal(0xf206f12e39ab7f9b, capnp.Struct(s))
	return str
}

func (s CultivarParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CultivarParameters) DecodeFromPtr(p capnp.Ptr) CultivarParameters {
	return CultivarParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CultivarParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CultivarParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CultivarParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CultivarParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CultivarParameters) CultivarId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CultivarParameters) HasCultivarId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CultivarParameters) CultivarIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CultivarParameters) SetCultivarId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CultivarParameters) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CultivarParameters) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CultivarParameters) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CultivarParameters) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CultivarParameters) Perennial() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CultivarParameters) SetPerennial(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CultivarParameters) MaxAssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CultivarParameters) SetMaxAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s CultivarParameters) MaxCropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s CultivarParameters) SetMaxCropHeight(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s CultivarParameters) ResidueNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s CultivarParameters) SetResidueNRatio(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s CultivarParameters) Lt50cultivar() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s CultivarParameters) SetLt50cultivar(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s CultivarParameters) CropHeightP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s CultivarParameters) SetCropHeightP1(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s CultivarParameters) CropHeightP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s CultivarParameters) SetCropHeightP2(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s CultivarParameters) CropSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s CultivarParameters) SetCropSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s CultivarParameters) AssimilatePartitioningCoeff() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.PointerList(p.List()), err
}

func (s CultivarParameters) HasAssimilatePartitioningCoeff() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CultivarParameters) SetAssimilatePartitioningCoeff(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAssimilatePartitioningCoeff sets the assimilatePartitioningCoeff field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CultivarParameters) NewAssimilatePartitioningCoeff(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OrganSenescenceRate() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.PointerList(p.List()), err
}

func (s CultivarParameters) HasOrganSenescenceRate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CultivarParameters) SetOrganSenescenceRate(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewOrganSenescenceRate sets the organSenescenceRate field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CultivarParameters) NewOrganSenescenceRate(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CultivarParameters) BaseDaylength() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasBaseDaylength() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CultivarParameters) SetBaseDaylength(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewBaseDaylength sets the baseDaylength field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewBaseDaylength(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OptimumTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasOptimumTemperature() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CultivarParameters) SetOptimumTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewOptimumTemperature sets the optimumTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewOptimumTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s CultivarParameters) DaylengthRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasDaylengthRequirement() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CultivarParameters) SetDaylengthRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewDaylengthRequirement sets the daylengthRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewDaylengthRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s CultivarParameters) DroughtStressThreshold() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasDroughtStressThreshold() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CultivarParameters) SetDroughtStressThreshold(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewDroughtStressThreshold sets the droughtStressThreshold field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewDroughtStressThreshold(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CultivarParameters) SpecificLeafArea() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasSpecificLeafArea() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CultivarParameters) SetSpecificLeafArea(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewSpecificLeafArea sets the specificLeafArea field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewSpecificLeafArea(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s CultivarParameters) StageKcFactor() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasStageKcFactor() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CultivarParameters) SetStageKcFactor(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewStageKcFactor sets the stageKcFactor field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewStageKcFactor(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s CultivarParameters) StageTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasStageTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CultivarParameters) SetStageTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewStageTemperatureSum sets the stageTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewStageTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s CultivarParameters) VernalisationRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasVernalisationRequirement() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s CultivarParameters) SetVernalisationRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewVernalisationRequirement sets the vernalisationRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewVernalisationRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s CultivarParameters) HeatSumIrrigationStart() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s CultivarParameters) SetHeatSumIrrigationStart(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s CultivarParameters) HeatSumIrrigationEnd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s CultivarParameters) SetHeatSumIrrigationEnd(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s CultivarParameters) CriticalTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s CultivarParameters) SetCriticalTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s CultivarParameters) BeginSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s CultivarParameters) SetBeginSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s CultivarParameters) EndSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s CultivarParameters) SetEndSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s CultivarParameters) FrostHardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s CultivarParameters) SetFrostHardening(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s CultivarParameters) FrostDehardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s CultivarParameters) SetFrostDehardening(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s CultivarParameters) LowTemperatureExposure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s CultivarParameters) SetLowTemperatureExposure(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s CultivarParameters) RespiratoryStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s CultivarParameters) SetRespiratoryStress(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s CultivarParameters) LatestHarvestDoy() int16 {
	return int16(capnp.Struct(s).Uint16(2) ^ 65535)
}

func (s CultivarParameters) SetLatestHarvestDoy(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v)^65535)
}

func (s CultivarParameters) OrganIdsForPrimaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return YieldComponent_List(p.List()), err
}

func (s CultivarParameters) HasOrganIdsForPrimaryYield() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s CultivarParameters) SetOrganIdsForPrimaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewOrganIdsForPrimaryYield sets the organIdsForPrimaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForPrimaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OrganIdsForSecondaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return YieldComponent_List(p.List()), err
}

func (s CultivarParameters) HasOrganIdsForSecondaryYield() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s CultivarParameters) SetOrganIdsForSecondaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewOrganIdsForSecondaryYield sets the organIdsForSecondaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForSecondaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OrganIdsForCutting() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return YieldComponent_List(p.List()), err
}

func (s CultivarParameters) HasOrganIdsForCutting() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s CultivarParameters) SetOrganIdsForCutting(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewOrganIdsForCutting sets the organIdsForCutting field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForCutting(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s CultivarParameters) EarlyRefLeafExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x4028000000000000)
}

func (s CultivarParameters) SetEarlyRefLeafExp(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x4028000000000000)
}

func (s CultivarParameters) RefLeafExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x4034000000000000)
}

func (s CultivarParameters) SetRefLeafExp(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x4034000000000000)
}

func (s CultivarParameters) MinTempDevWE() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s CultivarParameters) SetMinTempDevWE(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s CultivarParameters) OptTempDevWE() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s CultivarParameters) SetOptTempDevWE(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s CultivarParameters) MaxTempDevWE() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s CultivarParameters) SetMaxTempDevWE(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s CultivarParameters) WinterCrop() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CultivarParameters) SetWinterCrop(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// CultivarParameters_List is a list of CultivarParameters.
type CultivarParameters_List = capnp.StructList[CultivarParameters]

// NewCultivarParameters creates a new list of CultivarParameters.
func NewCultivarParameters_List(s *capnp.Segment, sz int32) (CultivarParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15}, sz)
	return capnp.StructList[CultivarParameters](l), err
}

// CultivarParameters_Future is a wrapper for a CultivarParameters promised by a client call.
type CultivarParameters_Future struct{ *capnp.Future }

func (f CultivarParameters_Future) Struct() (CultivarParameters, error) {
	p, err := f.Future.Ptr()
	return CultivarParameters(p.Struct()), err
}

type YieldComponent capnp.Struct

// YieldComponent_TypeID is the unique identifier for the type YieldComponent.
const YieldComponent_TypeID = 0xdbfe301c0ddefe4e

func NewYieldComponent(s *capnp.Segment) (YieldComponent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return YieldComponent(st), err
}

func NewRootYieldComponent(s *capnp.Segment) (YieldComponent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return YieldComponent(st), err
}

func ReadRootYieldComponent(msg *capnp.Message) (YieldComponent, error) {
	root, err := msg.Root()
	return YieldComponent(root.Struct()), err
}

func (s YieldComponent) String() string {
	str, _ := text.Marshal(0xdbfe301c0ddefe4e, capnp.Struct(s))
	return str
}

func (s YieldComponent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (YieldComponent) DecodeFromPtr(p capnp.Ptr) YieldComponent {
	return YieldComponent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s YieldComponent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s YieldComponent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s YieldComponent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s YieldComponent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s YieldComponent) OrganId() int64 {
	return int64(capnp.Struct(s).Uint64(0) ^ 18446744073709551615)
}

func (s YieldComponent) SetOrganId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v)^18446744073709551615)
}

func (s YieldComponent) YieldPercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s YieldComponent) SetYieldPercentage(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s YieldComponent) YieldDryMatter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s YieldComponent) SetYieldDryMatter(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// YieldComponent_List is a list of YieldComponent.
type YieldComponent_List = capnp.StructList[YieldComponent]

// NewYieldComponent creates a new list of YieldComponent.
func NewYieldComponent_List(s *capnp.Segment, sz int32) (YieldComponent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[YieldComponent](l), err
}

// YieldComponent_Future is a wrapper for a YieldComponent promised by a client call.
type YieldComponent_Future struct{ *capnp.Future }

func (f YieldComponent_Future) Struct() (YieldComponent, error) {
	p, err := f.Future.Ptr()
	return YieldComponent(p.Struct()), err
}

type AutomaticHarvestParameters capnp.Struct

// AutomaticHarvestParameters_TypeID is the unique identifier for the type AutomaticHarvestParameters.
const AutomaticHarvestParameters_TypeID = 0xc5f724bd00c2f628

func NewAutomaticHarvestParameters(s *capnp.Segment) (AutomaticHarvestParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AutomaticHarvestParameters(st), err
}

func NewRootAutomaticHarvestParameters(s *capnp.Segment) (AutomaticHarvestParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AutomaticHarvestParameters(st), err
}

func ReadRootAutomaticHarvestParameters(msg *capnp.Message) (AutomaticHarvestParameters, error) {
	root, err := msg.Root()
	return AutomaticHarvestParameters(root.Struct()), err
}

func (s AutomaticHarvestParameters) String() string {
	str, _ := text.Marshal(0xc5f724bd00c2f628, capnp.Struct(s))
	return str
}

func (s AutomaticHarvestParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AutomaticHarvestParameters) DecodeFromPtr(p capnp.Ptr) AutomaticHarvestParameters {
	return AutomaticHarvestParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AutomaticHarvestParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AutomaticHarvestParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AutomaticHarvestParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AutomaticHarvestParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AutomaticHarvestParameters) HarvestTime() AutomaticHarvestParameters_HarvestTime {
	return AutomaticHarvestParameters_HarvestTime(capnp.Struct(s).Uint16(0) ^ 1)
}

func (s AutomaticHarvestParameters) SetHarvestTime(v AutomaticHarvestParameters_HarvestTime) {
	capnp.Struct(s).SetUint16(0, uint16(v)^1)
}

func (s AutomaticHarvestParameters) LatestHarvestDOY() int16 {
	return int16(capnp.Struct(s).Uint16(2) ^ 65535)
}

func (s AutomaticHarvestParameters) SetLatestHarvestDOY(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v)^65535)
}

// AutomaticHarvestParameters_List is a list of AutomaticHarvestParameters.
type AutomaticHarvestParameters_List = capnp.StructList[AutomaticHarvestParameters]

// NewAutomaticHarvestParameters creates a new list of AutomaticHarvestParameters.
func NewAutomaticHarvestParameters_List(s *capnp.Segment, sz int32) (AutomaticHarvestParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AutomaticHarvestParameters](l), err
}

// AutomaticHarvestParameters_Future is a wrapper for a AutomaticHarvestParameters promised by a client call.
type AutomaticHarvestParameters_Future struct{ *capnp.Future }

func (f AutomaticHarvestParameters_Future) Struct() (AutomaticHarvestParameters, error) {
	p, err := f.Future.Ptr()
	return AutomaticHarvestParameters(p.Struct()), err
}

type AutomaticHarvestParameters_HarvestTime uint16

// AutomaticHarvestParameters_HarvestTime_TypeID is the unique identifier for the type AutomaticHarvestParameters_HarvestTime.
const AutomaticHarvestParameters_HarvestTime_TypeID = 0x990bdcf2be83b604

// Values of AutomaticHarvestParameters_HarvestTime.
const (
	AutomaticHarvestParameters_HarvestTime_maturity AutomaticHarvestParameters_HarvestTime = 0
	AutomaticHarvestParameters_HarvestTime_unknown  AutomaticHarvestParameters_HarvestTime = 1
)

// String returns the enum's constant name.
func (c AutomaticHarvestParameters_HarvestTime) String() string {
	switch c {
	case AutomaticHarvestParameters_HarvestTime_maturity:
		return "maturity"
	case AutomaticHarvestParameters_HarvestTime_unknown:
		return "unknown"

	default:
		return ""
	}
}

// AutomaticHarvestParameters_HarvestTimeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AutomaticHarvestParameters_HarvestTimeFromString(c string) AutomaticHarvestParameters_HarvestTime {
	switch c {
	case "maturity":
		return AutomaticHarvestParameters_HarvestTime_maturity
	case "unknown":
		return AutomaticHarvestParameters_HarvestTime_unknown

	default:
		return 0
	}
}

type AutomaticHarvestParameters_HarvestTime_List = capnp.EnumList[AutomaticHarvestParameters_HarvestTime]

func NewAutomaticHarvestParameters_HarvestTime_List(s *capnp.Segment, sz int32) (AutomaticHarvestParameters_HarvestTime_List, error) {
	return capnp.NewEnumList[AutomaticHarvestParameters_HarvestTime](s, sz)
}

type NMinCropParameters capnp.Struct

// NMinCropParameters_TypeID is the unique identifier for the type NMinCropParameters.
const NMinCropParameters_TypeID = 0xea9236083718fdc2

func NewNMinCropParameters(s *capnp.Segment) (NMinCropParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinCropParameters(st), err
}

func NewRootNMinCropParameters(s *capnp.Segment) (NMinCropParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinCropParameters(st), err
}

func ReadRootNMinCropParameters(msg *capnp.Message) (NMinCropParameters, error) {
	root, err := msg.Root()
	return NMinCropParameters(root.Struct()), err
}

func (s NMinCropParameters) String() string {
	str, _ := text.Marshal(0xea9236083718fdc2, capnp.Struct(s))
	return str
}

func (s NMinCropParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NMinCropParameters) DecodeFromPtr(p capnp.Ptr) NMinCropParameters {
	return NMinCropParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NMinCropParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NMinCropParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NMinCropParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NMinCropParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NMinCropParameters) SamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s NMinCropParameters) SetSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s NMinCropParameters) NTarget() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s NMinCropParameters) SetNTarget(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s NMinCropParameters) NTarget30() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s NMinCropParameters) SetNTarget30(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// NMinCropParameters_List is a list of NMinCropParameters.
type NMinCropParameters_List = capnp.StructList[NMinCropParameters]

// NewNMinCropParameters creates a new list of NMinCropParameters.
func NewNMinCropParameters_List(s *capnp.Segment, sz int32) (NMinCropParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[NMinCropParameters](l), err
}

// NMinCropParameters_Future is a wrapper for a NMinCropParameters promised by a client call.
type NMinCropParameters_Future struct{ *capnp.Future }

func (f NMinCropParameters_Future) Struct() (NMinCropParameters, error) {
	p, err := f.Future.Ptr()
	return NMinCropParameters(p.Struct()), err
}

type NMinApplicationParameters capnp.Struct

// NMinApplicationParameters_TypeID is the unique identifier for the type NMinApplicationParameters.
const NMinApplicationParameters_TypeID = 0xde7576c640b5ad18

func NewNMinApplicationParameters(s *capnp.Segment) (NMinApplicationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinApplicationParameters(st), err
}

func NewRootNMinApplicationParameters(s *capnp.Segment) (NMinApplicationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinApplicationParameters(st), err
}

func ReadRootNMinApplicationParameters(msg *capnp.Message) (NMinApplicationParameters, error) {
	root, err := msg.Root()
	return NMinApplicationParameters(root.Struct()), err
}

func (s NMinApplicationParameters) String() string {
	str, _ := text.Marshal(0xde7576c640b5ad18, capnp.Struct(s))
	return str
}

func (s NMinApplicationParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NMinApplicationParameters) DecodeFromPtr(p capnp.Ptr) NMinApplicationParameters {
	return NMinApplicationParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NMinApplicationParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NMinApplicationParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NMinApplicationParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NMinApplicationParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NMinApplicationParameters) Min() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s NMinApplicationParameters) SetMin(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s NMinApplicationParameters) Max() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s NMinApplicationParameters) SetMax(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s NMinApplicationParameters) DelayInDays() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s NMinApplicationParameters) SetDelayInDays(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

// NMinApplicationParameters_List is a list of NMinApplicationParameters.
type NMinApplicationParameters_List = capnp.StructList[NMinApplicationParameters]

// NewNMinApplicationParameters creates a new list of NMinApplicationParameters.
func NewNMinApplicationParameters_List(s *capnp.Segment, sz int32) (NMinApplicationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[NMinApplicationParameters](l), err
}

// NMinApplicationParameters_Future is a wrapper for a NMinApplicationParameters promised by a client call.
type NMinApplicationParameters_Future struct{ *capnp.Future }

func (f NMinApplicationParameters_Future) Struct() (NMinApplicationParameters, error) {
	p, err := f.Future.Ptr()
	return NMinApplicationParameters(p.Struct()), err
}

type CropResidueParameters capnp.Struct

// CropResidueParameters_TypeID is the unique identifier for the type CropResidueParameters.
const CropResidueParameters_TypeID = 0x8491dc2c2f94f1d1

func NewCropResidueParameters(s *capnp.Segment) (CropResidueParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CropResidueParameters(st), err
}

func NewRootCropResidueParameters(s *capnp.Segment) (CropResidueParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CropResidueParameters(st), err
}

func ReadRootCropResidueParameters(msg *capnp.Message) (CropResidueParameters, error) {
	root, err := msg.Root()
	return CropResidueParameters(root.Struct()), err
}

func (s CropResidueParameters) String() string {
	str, _ := text.Marshal(0x8491dc2c2f94f1d1, capnp.Struct(s))
	return str
}

func (s CropResidueParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropResidueParameters) DecodeFromPtr(p capnp.Ptr) CropResidueParameters {
	return CropResidueParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropResidueParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropResidueParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropResidueParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropResidueParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropResidueParameters) Params() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

func (s CropResidueParameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropResidueParameters) SetParams(v Params_OrganicFertilization_OrganicMatterParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_OrganicMatterParameters struct, preferring placement in s's segment.
func (s CropResidueParameters) NewParams() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	ss, err := NewParams_OrganicFertilization_OrganicMatterParameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_OrganicMatterParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropResidueParameters) Species() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CropResidueParameters) HasSpecies() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropResidueParameters) SpeciesBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CropResidueParameters) SetSpecies(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CropResidueParameters) ResidueType() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CropResidueParameters) HasResidueType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropResidueParameters) ResidueTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CropResidueParameters) SetResidueType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// CropResidueParameters_List is a list of CropResidueParameters.
type CropResidueParameters_List = capnp.StructList[CropResidueParameters]

// NewCropResidueParameters creates a new list of CropResidueParameters.
func NewCropResidueParameters_List(s *capnp.Segment, sz int32) (CropResidueParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CropResidueParameters](l), err
}

// CropResidueParameters_Future is a wrapper for a CropResidueParameters promised by a client call.
type CropResidueParameters_Future struct{ *capnp.Future }

func (f CropResidueParameters_Future) Struct() (CropResidueParameters, error) {
	p, err := f.Future.Ptr()
	return CropResidueParameters(p.Struct()), err
}
func (p CropResidueParameters_Future) Params() Params_OrganicFertilization_OrganicMatterParameters_Future {
	return Params_OrganicFertilization_OrganicMatterParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilParameters capnp.Struct

// SoilParameters_TypeID is the unique identifier for the type SoilParameters.
const SoilParameters_TypeID = 0xb42137d4b8ba3ef6

func NewSoilParameters(s *capnp.Segment) (SoilParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1})
	return SoilParameters(st), err
}

func NewRootSoilParameters(s *capnp.Segment) (SoilParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1})
	return SoilParameters(st), err
}

func ReadRootSoilParameters(msg *capnp.Message) (SoilParameters, error) {
	root, err := msg.Root()
	return SoilParameters(root.Struct()), err
}

func (s SoilParameters) String() string {
	str, _ := text.Marshal(0xb42137d4b8ba3ef6, capnp.Struct(s))
	return str
}

func (s SoilParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilParameters) DecodeFromPtr(p capnp.Ptr) SoilParameters {
	return SoilParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilParameters) SoilSandContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilSandContent(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilClayContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilClayContent(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilpH() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x401b99999999999a)
}

func (s SoilParameters) SetSoilpH(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x401b99999999999a)
}

func (s SoilParameters) SoilStoneContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilParameters) SetSoilStoneContent(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilParameters) Lambda() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetLambda(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) FieldCapacity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetFieldCapacity(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) Saturation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSaturation(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) PermanentWiltingPoint() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetPermanentWiltingPoint(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilTexture() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SoilParameters) HasSoilTexture() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilParameters) SoilTextureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SoilParameters) SetSoilTexture(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SoilParameters) SoilAmmonium() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3f40624dd2f1a9fc)
}

func (s SoilParameters) SetSoilAmmonium(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3f40624dd2f1a9fc)
}

func (s SoilParameters) SoilNitrate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3f747ae147ae147b)
}

func (s SoilParameters) SetSoilNitrate(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3f747ae147ae147b)
}

func (s SoilParameters) SoilCNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80) ^ 0x4024000000000000)
}

func (s SoilParameters) SetSoilCNRatio(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v)^0x4024000000000000)
}

func (s SoilParameters) SoilMoisturePercentFC() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x4059000000000000)
}

func (s SoilParameters) SetSoilMoisturePercentFC(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x4059000000000000)
}

func (s SoilParameters) SoilRawDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilRawDensity(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilBulkDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilBulkDensity(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilOrganicCarbon() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilOrganicCarbon(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilOrganicMatter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilOrganicMatter(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0xbff0000000000000)
}

// SoilParameters_List is a list of SoilParameters.
type SoilParameters_List = capnp.StructList[SoilParameters]

// NewSoilParameters creates a new list of SoilParameters.
func NewSoilParameters_List(s *capnp.Segment, sz int32) (SoilParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1}, sz)
	return capnp.StructList[SoilParameters](l), err
}

// SoilParameters_Future is a wrapper for a SoilParameters promised by a client call.
type SoilParameters_Future struct{ *capnp.Future }

func (f SoilParameters_Future) Struct() (SoilParameters, error) {
	p, err := f.Future.Ptr()
	return SoilParameters(p.Struct()), err
}

type AutomaticIrrigationParameters capnp.Struct

// AutomaticIrrigationParameters_TypeID is the unique identifier for the type AutomaticIrrigationParameters.
const AutomaticIrrigationParameters_TypeID = 0x8890f17a143c6896

func NewAutomaticIrrigationParameters(s *capnp.Segment) (AutomaticIrrigationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return AutomaticIrrigationParameters(st), err
}

func NewRootAutomaticIrrigationParameters(s *capnp.Segment) (AutomaticIrrigationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return AutomaticIrrigationParameters(st), err
}

func ReadRootAutomaticIrrigationParameters(msg *capnp.Message) (AutomaticIrrigationParameters, error) {
	root, err := msg.Root()
	return AutomaticIrrigationParameters(root.Struct()), err
}

func (s AutomaticIrrigationParameters) String() string {
	str, _ := text.Marshal(0x8890f17a143c6896, capnp.Struct(s))
	return str
}

func (s AutomaticIrrigationParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AutomaticIrrigationParameters) DecodeFromPtr(p capnp.Ptr) AutomaticIrrigationParameters {
	return AutomaticIrrigationParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AutomaticIrrigationParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AutomaticIrrigationParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AutomaticIrrigationParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AutomaticIrrigationParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AutomaticIrrigationParameters) Params() (Params_Irrigation_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Irrigation_Parameters(p.Struct()), err
}

func (s AutomaticIrrigationParameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AutomaticIrrigationParameters) SetParams(v Params_Irrigation_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_Irrigation_Parameters struct, preferring placement in s's segment.
func (s AutomaticIrrigationParameters) NewParams() (Params_Irrigation_Parameters, error) {
	ss, err := NewParams_Irrigation_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Irrigation_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AutomaticIrrigationParameters) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x4031000000000000)
}

func (s AutomaticIrrigationParameters) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x4031000000000000)
}

func (s AutomaticIrrigationParameters) Threshold() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fd6666666666666)
}

func (s AutomaticIrrigationParameters) SetThreshold(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fd6666666666666)
}

// AutomaticIrrigationParameters_List is a list of AutomaticIrrigationParameters.
type AutomaticIrrigationParameters_List = capnp.StructList[AutomaticIrrigationParameters]

// NewAutomaticIrrigationParameters creates a new list of AutomaticIrrigationParameters.
func NewAutomaticIrrigationParameters_List(s *capnp.Segment, sz int32) (AutomaticIrrigationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[AutomaticIrrigationParameters](l), err
}

// AutomaticIrrigationParameters_Future is a wrapper for a AutomaticIrrigationParameters promised by a client call.
type AutomaticIrrigationParameters_Future struct{ *capnp.Future }

func (f AutomaticIrrigationParameters_Future) Struct() (AutomaticIrrigationParameters, error) {
	p, err := f.Future.Ptr()
	return AutomaticIrrigationParameters(p.Struct()), err
}
func (p AutomaticIrrigationParameters_Future) Params() Params_Irrigation_Parameters_Future {
	return Params_Irrigation_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type SiteParameters capnp.Struct

// SiteParameters_TypeID is the unique identifier for the type SiteParameters.
const SiteParameters_TypeID = 0xb599bbd2f1465f9c

func NewSiteParameters(s *capnp.Segment) (SiteParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return SiteParameters(st), err
}

func NewRootSiteParameters(s *capnp.Segment) (SiteParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return SiteParameters(st), err
}

func ReadRootSiteParameters(msg *capnp.Message) (SiteParameters, error) {
	root, err := msg.Root()
	return SiteParameters(root.Struct()), err
}

func (s SiteParameters) String() string {
	str, _ := text.Marshal(0xb599bbd2f1465f9c, capnp.Struct(s))
	return str
}

func (s SiteParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SiteParameters) DecodeFromPtr(p capnp.Ptr) SiteParameters {
	return SiteParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SiteParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SiteParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SiteParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SiteParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SiteParameters) Latitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x404a400000000000)
}

func (s SiteParameters) SetLatitude(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x404a400000000000)
}

func (s SiteParameters) Slope() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3f847ae147ae147b)
}

func (s SiteParameters) SetSlope(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SiteParameters) HeightNN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x4049000000000000)
}

func (s SiteParameters) SetHeightNN(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x4049000000000000)
}

func (s SiteParameters) GroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4051800000000000)
}

func (s SiteParameters) SetGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4051800000000000)
}

func (s SiteParameters) SoilCNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x4024000000000000)
}

func (s SiteParameters) SetSoilCNRatio(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x4024000000000000)
}

func (s SiteParameters) DrainageCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s SiteParameters) SetDrainageCoeff(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SiteParameters) VqNDeposition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x403e000000000000)
}

func (s SiteParameters) SetVqNDeposition(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x403e000000000000)
}

func (s SiteParameters) MaxEffectiveRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x4000000000000000)
}

func (s SiteParameters) SetMaxEffectiveRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x4000000000000000)
}

func (s SiteParameters) ImpenetrableLayerDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0xbff0000000000000)
}

func (s SiteParameters) SetImpenetrableLayerDepth(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0xbff0000000000000)
}

func (s SiteParameters) SoilSpecificHumusBalanceCorrection() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SiteParameters) SetSoilSpecificHumusBalanceCorrection(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SiteParameters) SoilParameters() (SoilParameters_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilParameters_List(p.List()), err
}

func (s SiteParameters) HasSoilParameters() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SiteParameters) SetSoilParameters(v SoilParameters_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSoilParameters sets the soilParameters field to a newly
// allocated SoilParameters_List, preferring placement in s's segment.
func (s SiteParameters) NewSoilParameters(n int32) (SoilParameters_List, error) {
	l, err := NewSoilParameters_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilParameters_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SiteParameters_List is a list of SiteParameters.
type SiteParameters_List = capnp.StructList[SiteParameters]

// NewSiteParameters creates a new list of SiteParameters.
func NewSiteParameters_List(s *capnp.Segment, sz int32) (SiteParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[SiteParameters](l), err
}

// SiteParameters_Future is a wrapper for a SiteParameters promised by a client call.
type SiteParameters_Future struct{ *capnp.Future }

func (f SiteParameters_Future) Struct() (SiteParameters, error) {
	p, err := f.Future.Ptr()
	return SiteParameters(p.Struct()), err
}

type EnvironmentParameters capnp.Struct

// EnvironmentParameters_TypeID is the unique identifier for the type EnvironmentParameters.
const EnvironmentParameters_TypeID = 0xc0ff4a277ca4be0a

func NewEnvironmentParameters(s *capnp.Segment) (EnvironmentParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2})
	return EnvironmentParameters(st), err
}

func NewRootEnvironmentParameters(s *capnp.Segment) (EnvironmentParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2})
	return EnvironmentParameters(st), err
}

func ReadRootEnvironmentParameters(msg *capnp.Message) (EnvironmentParameters, error) {
	root, err := msg.Root()
	return EnvironmentParameters(root.Struct()), err
}

func (s EnvironmentParameters) String() string {
	str, _ := text.Marshal(0xc0ff4a277ca4be0a, capnp.Struct(s))
	return str
}

func (s EnvironmentParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvironmentParameters) DecodeFromPtr(p capnp.Ptr) EnvironmentParameters {
	return EnvironmentParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvironmentParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvironmentParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvironmentParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvironmentParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvironmentParameters) Albedo() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fcd70a3d70a3d71)
}

func (s EnvironmentParameters) SetAlbedo(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fcd70a3d70a3d71)
}

func (s EnvironmentParameters) Rcp() climate.RCP {
	return climate.RCP(capnp.Struct(s).Uint16(66))
}

func (s EnvironmentParameters) SetRcp(v climate.RCP) {
	capnp.Struct(s).SetUint16(66, uint16(v))
}

func (s EnvironmentParameters) AtmosphericCO2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s EnvironmentParameters) SetAtmosphericCO2(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s EnvironmentParameters) AtmosphericCO2s() (EnvironmentParameters_YearToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EnvironmentParameters_YearToValue_List(p.List()), err
}

func (s EnvironmentParameters) HasAtmosphericCO2s() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EnvironmentParameters) SetAtmosphericCO2s(v EnvironmentParameters_YearToValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAtmosphericCO2s sets the atmosphericCO2s field to a newly
// allocated EnvironmentParameters_YearToValue_List, preferring placement in s's segment.
func (s EnvironmentParameters) NewAtmosphericCO2s(n int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := NewEnvironmentParameters_YearToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EnvironmentParameters_YearToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s EnvironmentParameters) AtmosphericO3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s EnvironmentParameters) SetAtmosphericO3(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s EnvironmentParameters) AtmosphericO3s() (EnvironmentParameters_YearToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return EnvironmentParameters_YearToValue_List(p.List()), err
}

func (s EnvironmentParameters) HasAtmosphericO3s() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s EnvironmentParameters) SetAtmosphericO3s(v EnvironmentParameters_YearToValue_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAtmosphericO3s sets the atmosphericO3s field to a newly
// allocated EnvironmentParameters_YearToValue_List, preferring placement in s's segment.
func (s EnvironmentParameters) NewAtmosphericO3s(n int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := NewEnvironmentParameters_YearToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EnvironmentParameters_YearToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s EnvironmentParameters) WindSpeedHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4000000000000000)
}

func (s EnvironmentParameters) SetWindSpeedHeight(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4000000000000000)
}

func (s EnvironmentParameters) LeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s EnvironmentParameters) SetLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s EnvironmentParameters) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s EnvironmentParameters) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s EnvironmentParameters) MaxGroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x4032000000000000)
}

func (s EnvironmentParameters) SetMaxGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x4032000000000000)
}

func (s EnvironmentParameters) MinGroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x4034000000000000)
}

func (s EnvironmentParameters) SetMinGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x4034000000000000)
}

func (s EnvironmentParameters) MinGroundwaterDepthMonth() uint8 {
	return capnp.Struct(s).Uint8(64) ^ 3
}

func (s EnvironmentParameters) SetMinGroundwaterDepthMonth(v uint8) {
	capnp.Struct(s).SetUint8(64, v^3)
}

// EnvironmentParameters_List is a list of EnvironmentParameters.
type EnvironmentParameters_List = capnp.StructList[EnvironmentParameters]

// NewEnvironmentParameters creates a new list of EnvironmentParameters.
func NewEnvironmentParameters_List(s *capnp.Segment, sz int32) (EnvironmentParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2}, sz)
	return capnp.StructList[EnvironmentParameters](l), err
}

// EnvironmentParameters_Future is a wrapper for a EnvironmentParameters promised by a client call.
type EnvironmentParameters_Future struct{ *capnp.Future }

func (f EnvironmentParameters_Future) Struct() (EnvironmentParameters, error) {
	p, err := f.Future.Ptr()
	return EnvironmentParameters(p.Struct()), err
}

type EnvironmentParameters_YearToValue capnp.Struct

// EnvironmentParameters_YearToValue_TypeID is the unique identifier for the type EnvironmentParameters_YearToValue.
const EnvironmentParameters_YearToValue_TypeID = 0xe68d439455fd9cce

func NewEnvironmentParameters_YearToValue(s *capnp.Segment) (EnvironmentParameters_YearToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvironmentParameters_YearToValue(st), err
}

func NewRootEnvironmentParameters_YearToValue(s *capnp.Segment) (EnvironmentParameters_YearToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvironmentParameters_YearToValue(st), err
}

func ReadRootEnvironmentParameters_YearToValue(msg *capnp.Message) (EnvironmentParameters_YearToValue, error) {
	root, err := msg.Root()
	return EnvironmentParameters_YearToValue(root.Struct()), err
}

func (s EnvironmentParameters_YearToValue) String() string {
	str, _ := text.Marshal(0xe68d439455fd9cce, capnp.Struct(s))
	return str
}

func (s EnvironmentParameters_YearToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvironmentParameters_YearToValue) DecodeFromPtr(p capnp.Ptr) EnvironmentParameters_YearToValue {
	return EnvironmentParameters_YearToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvironmentParameters_YearToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvironmentParameters_YearToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvironmentParameters_YearToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvironmentParameters_YearToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvironmentParameters_YearToValue) Year() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s EnvironmentParameters_YearToValue) SetYear(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s EnvironmentParameters_YearToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s EnvironmentParameters_YearToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// EnvironmentParameters_YearToValue_List is a list of EnvironmentParameters_YearToValue.
type EnvironmentParameters_YearToValue_List = capnp.StructList[EnvironmentParameters_YearToValue]

// NewEnvironmentParameters_YearToValue creates a new list of EnvironmentParameters_YearToValue.
func NewEnvironmentParameters_YearToValue_List(s *capnp.Segment, sz int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[EnvironmentParameters_YearToValue](l), err
}

// EnvironmentParameters_YearToValue_Future is a wrapper for a EnvironmentParameters_YearToValue promised by a client call.
type EnvironmentParameters_YearToValue_Future struct{ *capnp.Future }

func (f EnvironmentParameters_YearToValue_Future) Struct() (EnvironmentParameters_YearToValue, error) {
	p, err := f.Future.Ptr()
	return EnvironmentParameters_YearToValue(p.Struct()), err
}

type MeasuredGroundwaterTableInformation capnp.Struct

// MeasuredGroundwaterTableInformation_TypeID is the unique identifier for the type MeasuredGroundwaterTableInformation.
const MeasuredGroundwaterTableInformation_TypeID = 0xc1092d6c4c110e29

func NewMeasuredGroundwaterTableInformation(s *capnp.Segment) (MeasuredGroundwaterTableInformation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation(st), err
}

func NewRootMeasuredGroundwaterTableInformation(s *capnp.Segment) (MeasuredGroundwaterTableInformation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation(st), err
}

func ReadRootMeasuredGroundwaterTableInformation(msg *capnp.Message) (MeasuredGroundwaterTableInformation, error) {
	root, err := msg.Root()
	return MeasuredGroundwaterTableInformation(root.Struct()), err
}

func (s MeasuredGroundwaterTableInformation) String() string {
	str, _ := text.Marshal(0xc1092d6c4c110e29, capnp.Struct(s))
	return str
}

func (s MeasuredGroundwaterTableInformation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MeasuredGroundwaterTableInformation) DecodeFromPtr(p capnp.Ptr) MeasuredGroundwaterTableInformation {
	return MeasuredGroundwaterTableInformation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MeasuredGroundwaterTableInformation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MeasuredGroundwaterTableInformation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MeasuredGroundwaterTableInformation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MeasuredGroundwaterTableInformation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MeasuredGroundwaterTableInformation) GroundwaterInformationAvailable() bool {
	return capnp.Struct(s).Bit(0)
}

func (s MeasuredGroundwaterTableInformation) SetGroundwaterInformationAvailable(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s MeasuredGroundwaterTableInformation) GroundwaterInfo() (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MeasuredGroundwaterTableInformation_DateToValue_List(p.List()), err
}

func (s MeasuredGroundwaterTableInformation) HasGroundwaterInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MeasuredGroundwaterTableInformation) SetGroundwaterInfo(v MeasuredGroundwaterTableInformation_DateToValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewGroundwaterInfo sets the groundwaterInfo field to a newly
// allocated MeasuredGroundwaterTableInformation_DateToValue_List, preferring placement in s's segment.
func (s MeasuredGroundwaterTableInformation) NewGroundwaterInfo(n int32) (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	l, err := NewMeasuredGroundwaterTableInformation_DateToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MeasuredGroundwaterTableInformation_DateToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MeasuredGroundwaterTableInformation_List is a list of MeasuredGroundwaterTableInformation.
type MeasuredGroundwaterTableInformation_List = capnp.StructList[MeasuredGroundwaterTableInformation]

// NewMeasuredGroundwaterTableInformation creates a new list of MeasuredGroundwaterTableInformation.
func NewMeasuredGroundwaterTableInformation_List(s *capnp.Segment, sz int32) (MeasuredGroundwaterTableInformation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MeasuredGroundwaterTableInformation](l), err
}

// MeasuredGroundwaterTableInformation_Future is a wrapper for a MeasuredGroundwaterTableInformation promised by a client call.
type MeasuredGroundwaterTableInformation_Future struct{ *capnp.Future }

func (f MeasuredGroundwaterTableInformation_Future) Struct() (MeasuredGroundwaterTableInformation, error) {
	p, err := f.Future.Ptr()
	return MeasuredGroundwaterTableInformation(p.Struct()), err
}

type MeasuredGroundwaterTableInformation_DateToValue capnp.Struct

// MeasuredGroundwaterTableInformation_DateToValue_TypeID is the unique identifier for the type MeasuredGroundwaterTableInformation_DateToValue.
const MeasuredGroundwaterTableInformation_DateToValue_TypeID = 0x81b8ffeeb01d76f7

func NewMeasuredGroundwaterTableInformation_DateToValue(s *capnp.Segment) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation_DateToValue(st), err
}

func NewRootMeasuredGroundwaterTableInformation_DateToValue(s *capnp.Segment) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation_DateToValue(st), err
}

func ReadRootMeasuredGroundwaterTableInformation_DateToValue(msg *capnp.Message) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	root, err := msg.Root()
	return MeasuredGroundwaterTableInformation_DateToValue(root.Struct()), err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) String() string {
	str, _ := text.Marshal(0x81b8ffeeb01d76f7, capnp.Struct(s))
	return str
}

func (s MeasuredGroundwaterTableInformation_DateToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MeasuredGroundwaterTableInformation_DateToValue) DecodeFromPtr(p capnp.Ptr) MeasuredGroundwaterTableInformation_DateToValue {
	return MeasuredGroundwaterTableInformation_DateToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MeasuredGroundwaterTableInformation_DateToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MeasuredGroundwaterTableInformation_DateToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MeasuredGroundwaterTableInformation_DateToValue) Date() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) HasDate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MeasuredGroundwaterTableInformation_DateToValue) SetDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s MeasuredGroundwaterTableInformation_DateToValue) NewDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s MeasuredGroundwaterTableInformation_DateToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// MeasuredGroundwaterTableInformation_DateToValue_List is a list of MeasuredGroundwaterTableInformation_DateToValue.
type MeasuredGroundwaterTableInformation_DateToValue_List = capnp.StructList[MeasuredGroundwaterTableInformation_DateToValue]

// NewMeasuredGroundwaterTableInformation_DateToValue creates a new list of MeasuredGroundwaterTableInformation_DateToValue.
func NewMeasuredGroundwaterTableInformation_DateToValue_List(s *capnp.Segment, sz int32) (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MeasuredGroundwaterTableInformation_DateToValue](l), err
}

// MeasuredGroundwaterTableInformation_DateToValue_Future is a wrapper for a MeasuredGroundwaterTableInformation_DateToValue promised by a client call.
type MeasuredGroundwaterTableInformation_DateToValue_Future struct{ *capnp.Future }

func (f MeasuredGroundwaterTableInformation_DateToValue_Future) Struct() (MeasuredGroundwaterTableInformation_DateToValue, error) {
	p, err := f.Future.Ptr()
	return MeasuredGroundwaterTableInformation_DateToValue(p.Struct()), err
}
func (p MeasuredGroundwaterTableInformation_DateToValue_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

type SimulationParameters capnp.Struct

// SimulationParameters_TypeID is the unique identifier for the type SimulationParameters.
const SimulationParameters_TypeID = 0xffac0fa5c7156a5d

func NewSimulationParameters(s *capnp.Segment) (SimulationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return SimulationParameters(st), err
}

func NewRootSimulationParameters(s *capnp.Segment) (SimulationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return SimulationParameters(st), err
}

func ReadRootSimulationParameters(msg *capnp.Message) (SimulationParameters, error) {
	root, err := msg.Root()
	return SimulationParameters(root.Struct()), err
}

func (s SimulationParameters) String() string {
	str, _ := text.Marshal(0xffac0fa5c7156a5d, capnp.Struct(s))
	return str
}

func (s SimulationParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimulationParameters) DecodeFromPtr(p capnp.Ptr) SimulationParameters {
	return SimulationParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimulationParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimulationParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimulationParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimulationParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SimulationParameters) StartDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s SimulationParameters) HasStartDate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SimulationParameters) SetStartDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s SimulationParameters) NewStartDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) EndDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s SimulationParameters) HasEndDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SimulationParameters) SetEndDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s SimulationParameters) NewEndDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) NitrogenResponseOn() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s SimulationParameters) SetNitrogenResponseOn(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

func (s SimulationParameters) WaterDeficitResponseOn() bool {
	return !capnp.Struct(s).Bit(1)
}

func (s SimulationParameters) SetWaterDeficitResponseOn(v bool) {
	capnp.Struct(s).SetBit(1, !v)
}

func (s SimulationParameters) EmergenceFloodingControlOn() bool {
	return !capnp.Struct(s).Bit(2)
}

func (s SimulationParameters) SetEmergenceFloodingControlOn(v bool) {
	capnp.Struct(s).SetBit(2, !v)
}

func (s SimulationParameters) EmergenceMoistureControlOn() bool {
	return !capnp.Struct(s).Bit(3)
}

func (s SimulationParameters) SetEmergenceMoistureControlOn(v bool) {
	capnp.Struct(s).SetBit(3, !v)
}

func (s SimulationParameters) FrostKillOn() bool {
	return !capnp.Struct(s).Bit(4)
}

func (s SimulationParameters) SetFrostKillOn(v bool) {
	capnp.Struct(s).SetBit(4, !v)
}

func (s SimulationParameters) UseAutomaticIrrigation() bool {
	return capnp.Struct(s).Bit(5)
}

func (s SimulationParameters) SetUseAutomaticIrrigation(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s SimulationParameters) AutoIrrigationParams() (AutomaticIrrigationParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return AutomaticIrrigationParameters(p.Struct()), err
}

func (s SimulationParameters) HasAutoIrrigationParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SimulationParameters) SetAutoIrrigationParams(v AutomaticIrrigationParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewAutoIrrigationParams sets the autoIrrigationParams field to a newly
// allocated AutomaticIrrigationParameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewAutoIrrigationParams() (AutomaticIrrigationParameters, error) {
	ss, err := NewAutomaticIrrigationParameters(capnp.Struct(s).Segment())
	if err != nil {
		return AutomaticIrrigationParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) UseNMinMineralFertilisingMethod() bool {
	return capnp.Struct(s).Bit(6)
}

func (s SimulationParameters) SetUseNMinMineralFertilisingMethod(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s SimulationParameters) NMinFertiliserPartition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SimulationParameters) HasNMinFertiliserPartition() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SimulationParameters) SetNMinFertiliserPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewNMinFertiliserPartition sets the nMinFertiliserPartition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewNMinFertiliserPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) NMinApplicationParams() (NMinApplicationParameters, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return NMinApplicationParameters(p.Struct()), err
}

func (s SimulationParameters) HasNMinApplicationParams() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SimulationParameters) SetNMinApplicationParams(v NMinApplicationParameters) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewNMinApplicationParams sets the nMinApplicationParams field to a newly
// allocated NMinApplicationParameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewNMinApplicationParams() (NMinApplicationParameters, error) {
	ss, err := NewNMinApplicationParameters(capnp.Struct(s).Segment())
	if err != nil {
		return NMinApplicationParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) UseSecondaryYields() bool {
	return !capnp.Struct(s).Bit(7)
}

func (s SimulationParameters) SetUseSecondaryYields(v bool) {
	capnp.Struct(s).SetBit(7, !v)
}

func (s SimulationParameters) UseAutomaticHarvestTrigger() bool {
	return capnp.Struct(s).Bit(8)
}

func (s SimulationParameters) SetUseAutomaticHarvestTrigger(v bool) {
	capnp.Struct(s).SetBit(8, v)
}

func (s SimulationParameters) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(2) ^ 20
}

func (s SimulationParameters) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(2, v^20)
}

func (s SimulationParameters) LayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fb999999999999a)
}

func (s SimulationParameters) SetLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SimulationParameters) StartPVIndex() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s SimulationParameters) SetStartPVIndex(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s SimulationParameters) JulianDayAutomaticFertilising() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s SimulationParameters) SetJulianDayAutomaticFertilising(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

// SimulationParameters_List is a list of SimulationParameters.
type SimulationParameters_List = capnp.StructList[SimulationParameters]

// NewSimulationParameters creates a new list of SimulationParameters.
func NewSimulationParameters_List(s *capnp.Segment, sz int32) (SimulationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return capnp.StructList[SimulationParameters](l), err
}

// SimulationParameters_Future is a wrapper for a SimulationParameters promised by a client call.
type SimulationParameters_Future struct{ *capnp.Future }

func (f SimulationParameters_Future) Struct() (SimulationParameters, error) {
	p, err := f.Future.Ptr()
	return SimulationParameters(p.Struct()), err
}
func (p SimulationParameters_Future) StartDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p SimulationParameters_Future) EndDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p SimulationParameters_Future) AutoIrrigationParams() AutomaticIrrigationParameters_Future {
	return AutomaticIrrigationParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p SimulationParameters_Future) NMinFertiliserPartition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(3, nil)}
}
func (p SimulationParameters_Future) NMinApplicationParams() NMinApplicationParameters_Future {
	return NMinApplicationParameters_Future{Future: p.Future.Field(4, nil)}
}

type CropModuleParameters capnp.Struct

// CropModuleParameters_TypeID is the unique identifier for the type CropModuleParameters.
const CropModuleParameters_TypeID = 0xe4d6d0d9ae1553da

func NewCropModuleParameters(s *capnp.Segment) (CropModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0})
	return CropModuleParameters(st), err
}

func NewRootCropModuleParameters(s *capnp.Segment) (CropModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0})
	return CropModuleParameters(st), err
}

func ReadRootCropModuleParameters(msg *capnp.Message) (CropModuleParameters, error) {
	root, err := msg.Root()
	return CropModuleParameters(root.Struct()), err
}

func (s CropModuleParameters) String() string {
	str, _ := text.Marshal(0xe4d6d0d9ae1553da, capnp.Struct(s))
	return str
}

func (s CropModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropModuleParameters) DecodeFromPtr(p capnp.Ptr) CropModuleParameters {
	return CropModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropModuleParameters) CanopyReflectionCoefficient() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s CropModuleParameters) SetCanopyReflectionCoefficient(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceMaxAssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CropModuleParameters) SetReferenceMaxAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceLeafAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s CropModuleParameters) SetReferenceLeafAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s CropModuleParameters) MaintenanceRespirationParameter1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s CropModuleParameters) SetMaintenanceRespirationParameter1(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s CropModuleParameters) MaintenanceRespirationParameter2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s CropModuleParameters) SetMaintenanceRespirationParameter2(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s CropModuleParameters) MinimumNConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s CropModuleParameters) SetMinimumNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s CropModuleParameters) MinimumAvailableN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s CropModuleParameters) SetMinimumAvailableN(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceAlbedo() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s CropModuleParameters) SetReferenceAlbedo(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s CropModuleParameters) StomataConductanceAlpha() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s CropModuleParameters) SetStomataConductanceAlpha(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s CropModuleParameters) SaturationBeta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s CropModuleParameters) SetSaturationBeta(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s CropModuleParameters) SetGrowthRespirationRedux(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s CropModuleParameters) MaxCropNDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s CropModuleParameters) SetMaxCropNDemand(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationParameter1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s CropModuleParameters) SetGrowthRespirationParameter1(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationParameter2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s CropModuleParameters) SetGrowthRespirationParameter2(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s CropModuleParameters) Tortuosity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s CropModuleParameters) SetTortuosity(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s CropModuleParameters) AdjustRootDepthForSoilProps() bool {
	return capnp.Struct(s).Bit(960)
}

func (s CropModuleParameters) SetAdjustRootDepthForSoilProps(v bool) {
	capnp.Struct(s).SetBit(960, v)
}

func (s CropModuleParameters) ExperimentalEnablePhenologyWangEngelTemperatureResponse() bool {
	return capnp.Struct(s).Bit(961)
}

func (s CropModuleParameters) SetExperimentalEnablePhenologyWangEngelTemperatureResponse(v bool) {
	capnp.Struct(s).SetBit(961, v)
}

func (s CropModuleParameters) ExperimentalEnablePhotosynthesisWangEngelTemperatureResponse() bool {
	return capnp.Struct(s).Bit(962)
}

func (s CropModuleParameters) SetExperimentalEnablePhotosynthesisWangEngelTemperatureResponse(v bool) {
	capnp.Struct(s).SetBit(962, v)
}

func (s CropModuleParameters) ExperimentalEnableHourlyFvCBPhotosynthesis() bool {
	return capnp.Struct(s).Bit(963)
}

func (s CropModuleParameters) SetExperimentalEnableHourlyFvCBPhotosynthesis(v bool) {
	capnp.Struct(s).SetBit(963, v)
}

func (s CropModuleParameters) ExperimentalEnableTResponseLeafExpansion() bool {
	return capnp.Struct(s).Bit(964)
}

func (s CropModuleParameters) SetExperimentalEnableTResponseLeafExpansion(v bool) {
	capnp.Struct(s).SetBit(964, v)
}

func (s CropModuleParameters) ExperimentalDisableDailyRootBiomassToSoil() bool {
	return capnp.Struct(s).Bit(965)
}

func (s CropModuleParameters) SetExperimentalDisableDailyRootBiomassToSoil(v bool) {
	capnp.Struct(s).SetBit(965, v)
}

func (s CropModuleParameters) EnableVernalisationFactorFix() bool {
	return capnp.Struct(s).Bit(966)
}

func (s CropModuleParameters) SetEnableVernalisationFactorFix(v bool) {
	capnp.Struct(s).SetBit(966, v)
}

// CropModuleParameters_List is a list of CropModuleParameters.
type CropModuleParameters_List = capnp.StructList[CropModuleParameters]

// NewCropModuleParameters creates a new list of CropModuleParameters.
func NewCropModuleParameters_List(s *capnp.Segment, sz int32) (CropModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0}, sz)
	return capnp.StructList[CropModuleParameters](l), err
}

// CropModuleParameters_Future is a wrapper for a CropModuleParameters promised by a client call.
type CropModuleParameters_Future struct{ *capnp.Future }

func (f CropModuleParameters_Future) Struct() (CropModuleParameters, error) {
	p, err := f.Future.Ptr()
	return CropModuleParameters(p.Struct()), err
}

type SoilMoistureModuleParameters capnp.Struct

// SoilMoistureModuleParameters_TypeID is the unique identifier for the type SoilMoistureModuleParameters.
const SoilMoistureModuleParameters_TypeID = 0xcdff1b0306ea58cf

func NewSoilMoistureModuleParameters(s *capnp.Segment) (SoilMoistureModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0})
	return SoilMoistureModuleParameters(st), err
}

func NewRootSoilMoistureModuleParameters(s *capnp.Segment) (SoilMoistureModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0})
	return SoilMoistureModuleParameters(st), err
}

func ReadRootSoilMoistureModuleParameters(msg *capnp.Message) (SoilMoistureModuleParameters, error) {
	root, err := msg.Root()
	return SoilMoistureModuleParameters(root.Struct()), err
}

func (s SoilMoistureModuleParameters) String() string {
	str, _ := text.Marshal(0xcdff1b0306ea58cf, capnp.Struct(s))
	return str
}

func (s SoilMoistureModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilMoistureModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilMoistureModuleParameters {
	return SoilMoistureModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilMoistureModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilMoistureModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilMoistureModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilMoistureModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilMoistureModuleParameters) CriticalMoistureDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilMoistureModuleParameters) SetCriticalMoistureDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SaturatedHydraulicConductivity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilMoistureModuleParameters) SetSaturatedHydraulicConductivity(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SurfaceRoughness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilMoistureModuleParameters) SetSurfaceRoughness(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) GroundwaterDischarge() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilMoistureModuleParameters) SetGroundwaterDischarge(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilMoistureModuleParameters) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowAccumulationTresholdTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilMoistureModuleParameters) SetSnowAccumulationTresholdTemperature(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) KcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilMoistureModuleParameters) SetKcFactor(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) TemperatureLimitForLiquidWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilMoistureModuleParameters) SetTemperatureLimitForLiquidWater(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) CorrectionSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilMoistureModuleParameters) SetCorrectionSnow(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) CorrectionRain() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilMoistureModuleParameters) SetCorrectionRain(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowMaxAdditionalDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilMoistureModuleParameters) SetSnowMaxAdditionalDensity(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) NewSnowDensityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilMoistureModuleParameters) SetNewSnowDensityMin(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowRetentionCapacityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilMoistureModuleParameters) SetSnowRetentionCapacityMin(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeParameter1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilMoistureModuleParameters) SetRefreezeParameter1(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeParameter2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilMoistureModuleParameters) SetRefreezeParameter2(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SoilMoistureModuleParameters) SetRefreezeTemperature(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowMeltTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SoilMoistureModuleParameters) SetSnowMeltTemperature(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowPacking() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SoilMoistureModuleParameters) SetSnowPacking(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowRetentionCapacityMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SoilMoistureModuleParameters) SetSnowRetentionCapacityMax(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) EvaporationZeta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SoilMoistureModuleParameters) SetEvaporationZeta(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) XsaCriticalSoilMoisture() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s SoilMoistureModuleParameters) SetXsaCriticalSoilMoisture(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MaximumEvaporationImpactDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s SoilMoistureModuleParameters) SetMaximumEvaporationImpactDepth(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MaxPercolationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s SoilMoistureModuleParameters) SetMaxPercolationRate(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MoistureInitValue() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s SoilMoistureModuleParameters) SetMoistureInitValue(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

// SoilMoistureModuleParameters_List is a list of SoilMoistureModuleParameters.
type SoilMoistureModuleParameters_List = capnp.StructList[SoilMoistureModuleParameters]

// NewSoilMoistureModuleParameters creates a new list of SoilMoistureModuleParameters.
func NewSoilMoistureModuleParameters_List(s *capnp.Segment, sz int32) (SoilMoistureModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0}, sz)
	return capnp.StructList[SoilMoistureModuleParameters](l), err
}

// SoilMoistureModuleParameters_Future is a wrapper for a SoilMoistureModuleParameters promised by a client call.
type SoilMoistureModuleParameters_Future struct{ *capnp.Future }

func (f SoilMoistureModuleParameters_Future) Struct() (SoilMoistureModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilMoistureModuleParameters(p.Struct()), err
}

type SoilOrganicModuleParameters capnp.Struct

// SoilOrganicModuleParameters_TypeID is the unique identifier for the type SoilOrganicModuleParameters.
const SoilOrganicModuleParameters_TypeID = 0xb3e73f8c19afd787

func NewSoilOrganicModuleParameters(s *capnp.Segment) (SoilOrganicModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1})
	return SoilOrganicModuleParameters(st), err
}

func NewRootSoilOrganicModuleParameters(s *capnp.Segment) (SoilOrganicModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1})
	return SoilOrganicModuleParameters(st), err
}

func ReadRootSoilOrganicModuleParameters(msg *capnp.Message) (SoilOrganicModuleParameters, error) {
	root, err := msg.Root()
	return SoilOrganicModuleParameters(root.Struct()), err
}

func (s SoilOrganicModuleParameters) String() string {
	str, _ := text.Marshal(0xb3e73f8c19afd787, capnp.Struct(s))
	return str
}

func (s SoilOrganicModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilOrganicModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilOrganicModuleParameters {
	return SoilOrganicModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilOrganicModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilOrganicModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilOrganicModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilOrganicModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilOrganicModuleParameters) SomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3f068b5cbff47736)
}

func (s SoilOrganicModuleParameters) SetSomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3f068b5cbff47736)
}

func (s SoilOrganicModuleParameters) SomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3f22599ed7c6fbd2)
}

func (s SoilOrganicModuleParameters) SetSomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3f22599ed7c6fbd2)
}

func (s SoilOrganicModuleParameters) SmbSlowMaintRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SetSmbSlowMaintRateStandard(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SmbFastMaintRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetSmbFastMaintRateStandard(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SmbSlowDeathRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SetSmbSlowDeathRateStandard(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SmbFastDeathRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetSmbFastDeathRateStandard(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SmbUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetSmbUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SomSlowUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetSomSlowUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SomFastUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetSomFastUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) AomSlowUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetAomSlowUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) AomFastUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetAomFastUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) AomFastMaxCtoN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x408f400000000000)
}

func (s SoilOrganicModuleParameters) SetAomFastMaxCtoN(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x408f400000000000)
}

func (s SoilOrganicModuleParameters) PartSOMFastToSOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x3fd3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSOMFastToSOMSlow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x3fd3333333333333)
}

func (s SoilOrganicModuleParameters) PartSMBSlowToSOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSMBSlowToSOMFast(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) PartSMBFastToSOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSMBFastToSOMFast(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) PartSOMToSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x3f8eb851eb851eb8)
}

func (s SoilOrganicModuleParameters) SetPartSOMToSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x3f8eb851eb851eb8)
}

func (s SoilOrganicModuleParameters) PartSOMToSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x3f2a36e2eb1c432d)
}

func (s SoilOrganicModuleParameters) SetPartSOMToSMBFast(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x3f2a36e2eb1c432d)
}

func (s SoilOrganicModuleParameters) CnRatioSMB() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x401acccccccccccd)
}

func (s SoilOrganicModuleParameters) SetCnRatioSMB(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x401acccccccccccd)
}

func (s SoilOrganicModuleParameters) LimitClayEffect() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x3fd0000000000000)
}

func (s SoilOrganicModuleParameters) SetLimitClayEffect(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x3fd0000000000000)
}

func (s SoilOrganicModuleParameters) AmmoniaOxidationRateCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetAmmoniaOxidationRateCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) NitriteOxidationRateCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160) ^ 0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) SetNitriteOxidationRateCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) TransportRateCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetTransportRateCoeff(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SpecAnaerobDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetSpecAnaerobDenitrification(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) ImmobilisationRateCoeffNO3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetImmobilisationRateCoeffNO3(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) ImmobilisationRateCoeffNH4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetImmobilisationRateCoeffNH4(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) Denit1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200) ^ 0x3fc999999999999a)
}

func (s SoilOrganicModuleParameters) SetDenit1(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v)^0x3fc999999999999a)
}

func (s SoilOrganicModuleParameters) Denit2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208) ^ 0x3fe999999999999a)
}

func (s SoilOrganicModuleParameters) SetDenit2(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v)^0x3fe999999999999a)
}

func (s SoilOrganicModuleParameters) Denit3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216) ^ 0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) SetDenit3(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) HydrolysisKM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224) ^ 0x3f6b5c7cd898b2ea)
}

func (s SoilOrganicModuleParameters) SetHydrolysisKM(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v)^0x3f6b5c7cd898b2ea)
}

func (s SoilOrganicModuleParameters) ActivationEnergy() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232) ^ 0x40e4050000000000)
}

func (s SoilOrganicModuleParameters) SetActivationEnergy(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v)^0x40e4050000000000)
}

func (s SoilOrganicModuleParameters) HydrolysisP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240) ^ 0x3d92bb352c0a2ad3)
}

func (s SoilOrganicModuleParameters) SetHydrolysisP1(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v)^0x3d92bb352c0a2ad3)
}

func (s SoilOrganicModuleParameters) HydrolysisP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248) ^ 0x3d78c5117a7e165e)
}

func (s SoilOrganicModuleParameters) SetHydrolysisP2(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v)^0x3d78c5117a7e165e)
}

func (s SoilOrganicModuleParameters) AtmosphericResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256) ^ 0x3f647ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetAtmosphericResistance(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v)^0x3f647ae147ae147b)
}

func (s SoilOrganicModuleParameters) N2oProductionRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetN2oProductionRate(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) InhibitorNH3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(272) ^ 0x3ff0000000000000)
}

func (s SoilOrganicModuleParameters) SetInhibitorNH3(v float64) {
	capnp.Struct(s).SetUint64(272, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SoilOrganicModuleParameters) PsMaxMineralisationDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(280) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetPsMaxMineralisationDepth(v float64) {
	capnp.Struct(s).SetUint64(280, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SticsParams() (SticsParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SticsParameters(p.Struct()), err
}

func (s SoilOrganicModuleParameters) HasSticsParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilOrganicModuleParameters) SetSticsParams(v SticsParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSticsParams sets the sticsParams field to a newly
// allocated SticsParameters struct, preferring placement in s's segment.
func (s SoilOrganicModuleParameters) NewSticsParams() (SticsParameters, error) {
	ss, err := NewSticsParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SticsParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SoilOrganicModuleParameters_List is a list of SoilOrganicModuleParameters.
type SoilOrganicModuleParameters_List = capnp.StructList[SoilOrganicModuleParameters]

// NewSoilOrganicModuleParameters creates a new list of SoilOrganicModuleParameters.
func NewSoilOrganicModuleParameters_List(s *capnp.Segment, sz int32) (SoilOrganicModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1}, sz)
	return capnp.StructList[SoilOrganicModuleParameters](l), err
}

// SoilOrganicModuleParameters_Future is a wrapper for a SoilOrganicModuleParameters promised by a client call.
type SoilOrganicModuleParameters_Future struct{ *capnp.Future }

func (f SoilOrganicModuleParameters_Future) Struct() (SoilOrganicModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilOrganicModuleParameters(p.Struct()), err
}
func (p SoilOrganicModuleParameters_Future) SticsParams() SticsParameters_Future {
	return SticsParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTemperatureModuleParameters capnp.Struct

// SoilTemperatureModuleParameters_TypeID is the unique identifier for the type SoilTemperatureModuleParameters.
const SoilTemperatureModuleParameters_TypeID = 0xf0c41d021228d929

func NewSoilTemperatureModuleParameters(s *capnp.Segment) (SoilTemperatureModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return SoilTemperatureModuleParameters(st), err
}

func NewRootSoilTemperatureModuleParameters(s *capnp.Segment) (SoilTemperatureModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return SoilTemperatureModuleParameters(st), err
}

func ReadRootSoilTemperatureModuleParameters(msg *capnp.Message) (SoilTemperatureModuleParameters, error) {
	root, err := msg.Root()
	return SoilTemperatureModuleParameters(root.Struct()), err
}

func (s SoilTemperatureModuleParameters) String() string {
	str, _ := text.Marshal(0xf0c41d021228d929, capnp.Struct(s))
	return str
}

func (s SoilTemperatureModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTemperatureModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilTemperatureModuleParameters {
	return SoilTemperatureModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTemperatureModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTemperatureModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTemperatureModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTemperatureModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTemperatureModuleParameters) NTau() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTemperatureModuleParameters) SetNTau(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) InitialSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilTemperatureModuleParameters) SetInitialSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) BaseTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilTemperatureModuleParameters) SetBaseTemperature(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) QuartzRawDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTemperatureModuleParameters) SetQuartzRawDensity(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityAir() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilTemperatureModuleParameters) SetDensityAir(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilTemperatureModuleParameters) SetDensityWater(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityHumus() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilTemperatureModuleParameters) SetDensityHumus(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityAir() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityAir(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityQuartz() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityQuartz(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityWater(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityHumus() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityHumus(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SoilAlbedo() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilTemperatureModuleParameters) SetSoilAlbedo(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SoilMoisture() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x3fd0000000000000)
}

func (s SoilTemperatureModuleParameters) SetSoilMoisture(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x3fd0000000000000)
}

// SoilTemperatureModuleParameters_List is a list of SoilTemperatureModuleParameters.
type SoilTemperatureModuleParameters_List = capnp.StructList[SoilTemperatureModuleParameters]

// NewSoilTemperatureModuleParameters creates a new list of SoilTemperatureModuleParameters.
func NewSoilTemperatureModuleParameters_List(s *capnp.Segment, sz int32) (SoilTemperatureModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0}, sz)
	return capnp.StructList[SoilTemperatureModuleParameters](l), err
}

// SoilTemperatureModuleParameters_Future is a wrapper for a SoilTemperatureModuleParameters promised by a client call.
type SoilTemperatureModuleParameters_Future struct{ *capnp.Future }

func (f SoilTemperatureModuleParameters_Future) Struct() (SoilTemperatureModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilTemperatureModuleParameters(p.Struct()), err
}

type SoilTransportModuleParameters capnp.Struct

// SoilTransportModuleParameters_TypeID is the unique identifier for the type SoilTransportModuleParameters.
const SoilTransportModuleParameters_TypeID = 0xc5cb65e585742338

func NewSoilTransportModuleParameters(s *capnp.Segment) (SoilTransportModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SoilTransportModuleParameters(st), err
}

func NewRootSoilTransportModuleParameters(s *capnp.Segment) (SoilTransportModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SoilTransportModuleParameters(st), err
}

func ReadRootSoilTransportModuleParameters(msg *capnp.Message) (SoilTransportModuleParameters, error) {
	root, err := msg.Root()
	return SoilTransportModuleParameters(root.Struct()), err
}

func (s SoilTransportModuleParameters) String() string {
	str, _ := text.Marshal(0xc5cb65e585742338, capnp.Struct(s))
	return str
}

func (s SoilTransportModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTransportModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilTransportModuleParameters {
	return SoilTransportModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTransportModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTransportModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTransportModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTransportModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTransportModuleParameters) DispersionLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTransportModuleParameters) SetDispersionLength(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) Ad() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilTransportModuleParameters) SetAd(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) DiffusionCoefficientStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilTransportModuleParameters) SetDiffusionCoefficientStandard(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) NDeposition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTransportModuleParameters) SetNDeposition(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

// SoilTransportModuleParameters_List is a list of SoilTransportModuleParameters.
type SoilTransportModuleParameters_List = capnp.StructList[SoilTransportModuleParameters]

// NewSoilTransportModuleParameters creates a new list of SoilTransportModuleParameters.
func NewSoilTransportModuleParameters_List(s *capnp.Segment, sz int32) (SoilTransportModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[SoilTransportModuleParameters](l), err
}

// SoilTransportModuleParameters_Future is a wrapper for a SoilTransportModuleParameters promised by a client call.
type SoilTransportModuleParameters_Future struct{ *capnp.Future }

func (f SoilTransportModuleParameters_Future) Struct() (SoilTransportModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilTransportModuleParameters(p.Struct()), err
}

type Voc capnp.Struct

// Voc_TypeID is the unique identifier for the type Voc.
const Voc_TypeID = 0xb87956e2953771db

func NewVoc(s *capnp.Segment) (Voc, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Voc(st), err
}

func NewRootVoc(s *capnp.Segment) (Voc, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Voc(st), err
}

func ReadRootVoc(msg *capnp.Message) (Voc, error) {
	root, err := msg.Root()
	return Voc(root.Struct()), err
}

func (s Voc) String() string {
	str, _ := text.Marshal(0xb87956e2953771db, capnp.Struct(s))
	return str
}

func (s Voc) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc) DecodeFromPtr(p capnp.Ptr) Voc {
	return Voc(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Voc_List is a list of Voc.
type Voc_List = capnp.StructList[Voc]

// NewVoc creates a new list of Voc.
func NewVoc_List(s *capnp.Segment, sz int32) (Voc_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Voc](l), err
}

// Voc_Future is a wrapper for a Voc promised by a client call.
type Voc_Future struct{ *capnp.Future }

func (f Voc_Future) Struct() (Voc, error) {
	p, err := f.Future.Ptr()
	return Voc(p.Struct()), err
}

type Voc_Emissions capnp.Struct

// Voc_Emissions_TypeID is the unique identifier for the type Voc_Emissions.
const Voc_Emissions_TypeID = 0xd9ed2c1c754d683e

func NewVoc_Emissions(s *capnp.Segment) (Voc_Emissions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Voc_Emissions(st), err
}

func NewRootVoc_Emissions(s *capnp.Segment) (Voc_Emissions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Voc_Emissions(st), err
}

func ReadRootVoc_Emissions(msg *capnp.Message) (Voc_Emissions, error) {
	root, err := msg.Root()
	return Voc_Emissions(root.Struct()), err
}

func (s Voc_Emissions) String() string {
	str, _ := text.Marshal(0xd9ed2c1c754d683e, capnp.Struct(s))
	return str
}

func (s Voc_Emissions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_Emissions) DecodeFromPtr(p capnp.Ptr) Voc_Emissions {
	return Voc_Emissions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_Emissions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_Emissions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_Emissions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_Emissions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_Emissions) SpeciesIdToIsopreneEmission() (Voc_Emissions_SpeciesIdToEmission_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Voc_Emissions_SpeciesIdToEmission_List(p.List()), err
}

func (s Voc_Emissions) HasSpeciesIdToIsopreneEmission() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Voc_Emissions) SetSpeciesIdToIsopreneEmission(v Voc_Emissions_SpeciesIdToEmission_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpeciesIdToIsopreneEmission sets the speciesIdToIsopreneEmission field to a newly
// allocated Voc_Emissions_SpeciesIdToEmission_List, preferring placement in s's segment.
func (s Voc_Emissions) NewSpeciesIdToIsopreneEmission(n int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := NewVoc_Emissions_SpeciesIdToEmission_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Voc_Emissions_SpeciesIdToEmission_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Voc_Emissions) SpeciesIdToMonoterpeneEmission() (Voc_Emissions_SpeciesIdToEmission_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Voc_Emissions_SpeciesIdToEmission_List(p.List()), err
}

func (s Voc_Emissions) HasSpeciesIdToMonoterpeneEmission() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Voc_Emissions) SetSpeciesIdToMonoterpeneEmission(v Voc_Emissions_SpeciesIdToEmission_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewSpeciesIdToMonoterpeneEmission sets the speciesIdToMonoterpeneEmission field to a newly
// allocated Voc_Emissions_SpeciesIdToEmission_List, preferring placement in s's segment.
func (s Voc_Emissions) NewSpeciesIdToMonoterpeneEmission(n int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := NewVoc_Emissions_SpeciesIdToEmission_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Voc_Emissions_SpeciesIdToEmission_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Voc_Emissions) IsopreneEmission() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_Emissions) SetIsopreneEmission(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_Emissions) MonoterpeneEmission() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_Emissions) SetMonoterpeneEmission(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_Emissions_List is a list of Voc_Emissions.
type Voc_Emissions_List = capnp.StructList[Voc_Emissions]

// NewVoc_Emissions creates a new list of Voc_Emissions.
func NewVoc_Emissions_List(s *capnp.Segment, sz int32) (Voc_Emissions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Voc_Emissions](l), err
}

// Voc_Emissions_Future is a wrapper for a Voc_Emissions promised by a client call.
type Voc_Emissions_Future struct{ *capnp.Future }

func (f Voc_Emissions_Future) Struct() (Voc_Emissions, error) {
	p, err := f.Future.Ptr()
	return Voc_Emissions(p.Struct()), err
}

type Voc_Emissions_SpeciesIdToEmission capnp.Struct

// Voc_Emissions_SpeciesIdToEmission_TypeID is the unique identifier for the type Voc_Emissions_SpeciesIdToEmission.
const Voc_Emissions_SpeciesIdToEmission_TypeID = 0xd11f8d1479e2f010

func NewVoc_Emissions_SpeciesIdToEmission(s *capnp.Segment) (Voc_Emissions_SpeciesIdToEmission, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_Emissions_SpeciesIdToEmission(st), err
}

func NewRootVoc_Emissions_SpeciesIdToEmission(s *capnp.Segment) (Voc_Emissions_SpeciesIdToEmission, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_Emissions_SpeciesIdToEmission(st), err
}

func ReadRootVoc_Emissions_SpeciesIdToEmission(msg *capnp.Message) (Voc_Emissions_SpeciesIdToEmission, error) {
	root, err := msg.Root()
	return Voc_Emissions_SpeciesIdToEmission(root.Struct()), err
}

func (s Voc_Emissions_SpeciesIdToEmission) String() string {
	str, _ := text.Marshal(0xd11f8d1479e2f010, capnp.Struct(s))
	return str
}

func (s Voc_Emissions_SpeciesIdToEmission) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_Emissions_SpeciesIdToEmission) DecodeFromPtr(p capnp.Ptr) Voc_Emissions_SpeciesIdToEmission {
	return Voc_Emissions_SpeciesIdToEmission(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_Emissions_SpeciesIdToEmission) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_Emissions_SpeciesIdToEmission) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_Emissions_SpeciesIdToEmission) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_Emissions_SpeciesIdToEmission) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_Emissions_SpeciesIdToEmission) SpeciesId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Voc_Emissions_SpeciesIdToEmission) SetSpeciesId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Voc_Emissions_SpeciesIdToEmission) Emission() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_Emissions_SpeciesIdToEmission) SetEmission(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_Emissions_SpeciesIdToEmission_List is a list of Voc_Emissions_SpeciesIdToEmission.
type Voc_Emissions_SpeciesIdToEmission_List = capnp.StructList[Voc_Emissions_SpeciesIdToEmission]

// NewVoc_Emissions_SpeciesIdToEmission creates a new list of Voc_Emissions_SpeciesIdToEmission.
func NewVoc_Emissions_SpeciesIdToEmission_List(s *capnp.Segment, sz int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Voc_Emissions_SpeciesIdToEmission](l), err
}

// Voc_Emissions_SpeciesIdToEmission_Future is a wrapper for a Voc_Emissions_SpeciesIdToEmission promised by a client call.
type Voc_Emissions_SpeciesIdToEmission_Future struct{ *capnp.Future }

func (f Voc_Emissions_SpeciesIdToEmission_Future) Struct() (Voc_Emissions_SpeciesIdToEmission, error) {
	p, err := f.Future.Ptr()
	return Voc_Emissions_SpeciesIdToEmission(p.Struct()), err
}

type Voc_SpeciesData capnp.Struct

// Voc_SpeciesData_TypeID is the unique identifier for the type Voc_SpeciesData.
const Voc_SpeciesData_TypeID = 0x80d5a7b782142e87

func NewVoc_SpeciesData(s *capnp.Segment) (Voc_SpeciesData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return Voc_SpeciesData(st), err
}

func NewRootVoc_SpeciesData(s *capnp.Segment) (Voc_SpeciesData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return Voc_SpeciesData(st), err
}

func ReadRootVoc_SpeciesData(msg *capnp.Message) (Voc_SpeciesData, error) {
	root, err := msg.Root()
	return Voc_SpeciesData(root.Struct()), err
}

func (s Voc_SpeciesData) String() string {
	str, _ := text.Marshal(0x80d5a7b782142e87, capnp.Struct(s))
	return str
}

func (s Voc_SpeciesData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_SpeciesData) DecodeFromPtr(p capnp.Ptr) Voc_SpeciesData {
	return Voc_SpeciesData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_SpeciesData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_SpeciesData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_SpeciesData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_SpeciesData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_SpeciesData) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Voc_SpeciesData) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Voc_SpeciesData) EfMonos() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_SpeciesData) SetEfMonos(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_SpeciesData) EfMono() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_SpeciesData) SetEfMono(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Voc_SpeciesData) EfIso() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Voc_SpeciesData) SetEfIso(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Voc_SpeciesData) Theta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x3feccccccccccccd)
}

func (s Voc_SpeciesData) SetTheta(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s Voc_SpeciesData) Fage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetFage(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) CtIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Voc_SpeciesData) SetCtIs(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Voc_SpeciesData) CtMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Voc_SpeciesData) SetCtMt(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Voc_SpeciesData) HaIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Voc_SpeciesData) SetHaIs(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Voc_SpeciesData) HaMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Voc_SpeciesData) SetHaMt(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s Voc_SpeciesData) DsIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s Voc_SpeciesData) SetDsIs(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s Voc_SpeciesData) DsMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s Voc_SpeciesData) SetDsMt(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s Voc_SpeciesData) HdIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x41115ee000000000)
}

func (s Voc_SpeciesData) SetHdIs(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x41115ee000000000)
}

func (s Voc_SpeciesData) HdMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x41115ee000000000)
}

func (s Voc_SpeciesData) SetHdMt(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x41115ee000000000)
}

func (s Voc_SpeciesData) Hdj() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0x410adb0000000000)
}

func (s Voc_SpeciesData) SetHdj(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0x410adb0000000000)
}

func (s Voc_SpeciesData) Sdj() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x4085f80000000000)
}

func (s Voc_SpeciesData) SetSdj(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x4085f80000000000)
}

func (s Voc_SpeciesData) Kc25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x4070400000000000)
}

func (s Voc_SpeciesData) SetKc25(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x4070400000000000)
}

func (s Voc_SpeciesData) Ko25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x4066600000000000)
}

func (s Voc_SpeciesData) SetKo25(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x4066600000000000)
}

func (s Voc_SpeciesData) VcMax25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x4054000000000000)
}

func (s Voc_SpeciesData) SetVcMax25(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x4054000000000000)
}

func (s Voc_SpeciesData) Qjvc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152) ^ 0x4000000000000000)
}

func (s Voc_SpeciesData) SetQjvc(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v)^0x4000000000000000)
}

func (s Voc_SpeciesData) Aekc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160) ^ 0x40ecfb8000000000)
}

func (s Voc_SpeciesData) SetAekc(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v)^0x40ecfb8000000000)
}

func (s Voc_SpeciesData) Aeko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x40e18d8000000000)
}

func (s Voc_SpeciesData) SetAeko(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x40e18d8000000000)
}

func (s Voc_SpeciesData) Aejm() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x40e2110000000000)
}

func (s Voc_SpeciesData) SetAejm(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x40e2110000000000)
}

func (s Voc_SpeciesData) Aevc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184) ^ 0x40ec930000000000)
}

func (s Voc_SpeciesData) SetAevc(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v)^0x40ec930000000000)
}

func (s Voc_SpeciesData) SlaMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192) ^ 0x4034000000000000)
}

func (s Voc_SpeciesData) SetSlaMin(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v)^0x4034000000000000)
}

func (s Voc_SpeciesData) ScaleI() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetScaleI(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) ScaleM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetScaleM(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) MFol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s Voc_SpeciesData) SetMFol(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s Voc_SpeciesData) Lai() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s Voc_SpeciesData) SetLai(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s Voc_SpeciesData) Sla() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s Voc_SpeciesData) SetSla(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

// Voc_SpeciesData_List is a list of Voc_SpeciesData.
type Voc_SpeciesData_List = capnp.StructList[Voc_SpeciesData]

// NewVoc_SpeciesData creates a new list of Voc_SpeciesData.
func NewVoc_SpeciesData_List(s *capnp.Segment, sz int32) (Voc_SpeciesData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0}, sz)
	return capnp.StructList[Voc_SpeciesData](l), err
}

// Voc_SpeciesData_Future is a wrapper for a Voc_SpeciesData promised by a client call.
type Voc_SpeciesData_Future struct{ *capnp.Future }

func (f Voc_SpeciesData_Future) Struct() (Voc_SpeciesData, error) {
	p, err := f.Future.Ptr()
	return Voc_SpeciesData(p.Struct()), err
}

type Voc_CPData capnp.Struct

// Voc_CPData_TypeID is the unique identifier for the type Voc_CPData.
const Voc_CPData_TypeID = 0xcf0f425c8bd69fa2

func NewVoc_CPData(s *capnp.Segment) (Voc_CPData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0})
	return Voc_CPData(st), err
}

func NewRootVoc_CPData(s *capnp.Segment) (Voc_CPData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0})
	return Voc_CPData(st), err
}

func ReadRootVoc_CPData(msg *capnp.Message) (Voc_CPData, error) {
	root, err := msg.Root()
	return Voc_CPData(root.Struct()), err
}

func (s Voc_CPData) String() string {
	str, _ := text.Marshal(0xcf0f425c8bd69fa2, capnp.Struct(s))
	return str
}

func (s Voc_CPData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_CPData) DecodeFromPtr(p capnp.Ptr) Voc_CPData {
	return Voc_CPData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_CPData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_CPData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_CPData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_CPData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_CPData) Kc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_CPData) SetKc(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_CPData) Ko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_CPData) SetKo(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_CPData) Oi() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_CPData) SetOi(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Voc_CPData) Ci() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Voc_CPData) SetCi(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Voc_CPData) Comp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Voc_CPData) SetComp(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Voc_CPData) VcMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Voc_CPData) SetVcMax(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Voc_CPData) JMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Voc_CPData) SetJMax(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Voc_CPData) Jj() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Voc_CPData) SetJj(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Voc_CPData) Jj1000() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Voc_CPData) SetJj1000(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Voc_CPData) Jv() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Voc_CPData) SetJv(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

// Voc_CPData_List is a list of Voc_CPData.
type Voc_CPData_List = capnp.StructList[Voc_CPData]

// NewVoc_CPData creates a new list of Voc_CPData.
func NewVoc_CPData_List(s *capnp.Segment, sz int32) (Voc_CPData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0}, sz)
	return capnp.StructList[Voc_CPData](l), err
}

// Voc_CPData_Future is a wrapper for a Voc_CPData promised by a client call.
type Voc_CPData_Future struct{ *capnp.Future }

func (f Voc_CPData_Future) Struct() (Voc_CPData, error) {
	p, err := f.Future.Ptr()
	return Voc_CPData(p.Struct()), err
}

type Voc_MicroClimateData capnp.Struct

// Voc_MicroClimateData_TypeID is the unique identifier for the type Voc_MicroClimateData.
const Voc_MicroClimateData_TypeID = 0xf246442c7aee0af5

func NewVoc_MicroClimateData(s *capnp.Segment) (Voc_MicroClimateData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0})
	return Voc_MicroClimateData(st), err
}

func NewRootVoc_MicroClimateData(s *capnp.Segment) (Voc_MicroClimateData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0})
	return Voc_MicroClimateData(st), err
}

func ReadRootVoc_MicroClimateData(msg *capnp.Message) (Voc_MicroClimateData, error) {
	root, err := msg.Root()
	return Voc_MicroClimateData(root.Struct()), err
}

func (s Voc_MicroClimateData) String() string {
	str, _ := text.Marshal(0xf246442c7aee0af5, capnp.Struct(s))
	return str
}

func (s Voc_MicroClimateData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_MicroClimateData) DecodeFromPtr(p capnp.Ptr) Voc_MicroClimateData {
	return Voc_MicroClimateData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_MicroClimateData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_MicroClimateData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_MicroClimateData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_MicroClimateData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_MicroClimateData) Rad() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_MicroClimateData) SetRad(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Rad24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_MicroClimateData) SetRad24(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Rad240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_MicroClimateData) SetRad240(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Voc_MicroClimateData) SetTFol(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Voc_MicroClimateData) SetTFol24(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Voc_MicroClimateData) SetTFol240(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Sunlitfoliagefraction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Voc_MicroClimateData) SetSunlitfoliagefraction(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Sunlitfoliagefraction24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Voc_MicroClimateData) SetSunlitfoliagefraction24(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Co2concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Voc_MicroClimateData) SetCo2concentration(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

// Voc_MicroClimateData_List is a list of Voc_MicroClimateData.
type Voc_MicroClimateData_List = capnp.StructList[Voc_MicroClimateData]

// NewVoc_MicroClimateData creates a new list of Voc_MicroClimateData.
func NewVoc_MicroClimateData_List(s *capnp.Segment, sz int32) (Voc_MicroClimateData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0}, sz)
	return capnp.StructList[Voc_MicroClimateData](l), err
}

// Voc_MicroClimateData_Future is a wrapper for a Voc_MicroClimateData promised by a client call.
type Voc_MicroClimateData_Future struct{ *capnp.Future }

func (f Voc_MicroClimateData_Future) Struct() (Voc_MicroClimateData, error) {
	p, err := f.Future.Ptr()
	return Voc_MicroClimateData(p.Struct()), err
}

type Voc_PhotosynthT capnp.Struct

// Voc_PhotosynthT_TypeID is the unique identifier for the type Voc_PhotosynthT.
const Voc_PhotosynthT_TypeID = 0xf95db11410e33efc

func NewVoc_PhotosynthT(s *capnp.Segment) (Voc_PhotosynthT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_PhotosynthT(st), err
}

func NewRootVoc_PhotosynthT(s *capnp.Segment) (Voc_PhotosynthT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_PhotosynthT(st), err
}

func ReadRootVoc_PhotosynthT(msg *capnp.Message) (Voc_PhotosynthT, error) {
	root, err := msg.Root()
	return Voc_PhotosynthT(root.Struct()), err
}

func (s Voc_PhotosynthT) String() string {
	str, _ := text.Marshal(0xf95db11410e33efc, capnp.Struct(s))
	return str
}

func (s Voc_PhotosynthT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_PhotosynthT) DecodeFromPtr(p capnp.Ptr) Voc_PhotosynthT {
	return Voc_PhotosynthT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_PhotosynthT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_PhotosynthT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_PhotosynthT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_PhotosynthT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_PhotosynthT) Par() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_PhotosynthT) SetPar(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_PhotosynthT) Par24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_PhotosynthT) SetPar24(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_PhotosynthT) Par240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_PhotosynthT) SetPar240(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Voc_PhotosynthT_List is a list of Voc_PhotosynthT.
type Voc_PhotosynthT_List = capnp.StructList[Voc_PhotosynthT]

// NewVoc_PhotosynthT creates a new list of Voc_PhotosynthT.
func NewVoc_PhotosynthT_List(s *capnp.Segment, sz int32) (Voc_PhotosynthT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Voc_PhotosynthT](l), err
}

// Voc_PhotosynthT_Future is a wrapper for a Voc_PhotosynthT promised by a client call.
type Voc_PhotosynthT_Future struct{ *capnp.Future }

func (f Voc_PhotosynthT_Future) Struct() (Voc_PhotosynthT, error) {
	p, err := f.Future.Ptr()
	return Voc_PhotosynthT(p.Struct()), err
}

type Voc_FoliageT capnp.Struct

// Voc_FoliageT_TypeID is the unique identifier for the type Voc_FoliageT.
const Voc_FoliageT_TypeID = 0xee0b04cc3f52f33c

func NewVoc_FoliageT(s *capnp.Segment) (Voc_FoliageT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_FoliageT(st), err
}

func NewRootVoc_FoliageT(s *capnp.Segment) (Voc_FoliageT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_FoliageT(st), err
}

func ReadRootVoc_FoliageT(msg *capnp.Message) (Voc_FoliageT, error) {
	root, err := msg.Root()
	return Voc_FoliageT(root.Struct()), err
}

func (s Voc_FoliageT) String() string {
	str, _ := text.Marshal(0xee0b04cc3f52f33c, capnp.Struct(s))
	return str
}

func (s Voc_FoliageT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_FoliageT) DecodeFromPtr(p capnp.Ptr) Voc_FoliageT {
	return Voc_FoliageT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_FoliageT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_FoliageT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_FoliageT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_FoliageT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_FoliageT) TempK() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_FoliageT) SetTempK(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_FoliageT) TempK24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_FoliageT) SetTempK24(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_FoliageT) TempK240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_FoliageT) SetTempK240(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Voc_FoliageT_List is a list of Voc_FoliageT.
type Voc_FoliageT_List = capnp.StructList[Voc_FoliageT]

// NewVoc_FoliageT creates a new list of Voc_FoliageT.
func NewVoc_FoliageT_List(s *capnp.Segment, sz int32) (Voc_FoliageT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Voc_FoliageT](l), err
}

// Voc_FoliageT_Future is a wrapper for a Voc_FoliageT promised by a client call.
type Voc_FoliageT_Future struct{ *capnp.Future }

func (f Voc_FoliageT_Future) Struct() (Voc_FoliageT, error) {
	p, err := f.Future.Ptr()
	return Voc_FoliageT(p.Struct()), err
}

type Voc_EnzymeActivityT capnp.Struct

// Voc_EnzymeActivityT_TypeID is the unique identifier for the type Voc_EnzymeActivityT.
const Voc_EnzymeActivityT_TypeID = 0xc281c6e5be483337

func NewVoc_EnzymeActivityT(s *capnp.Segment) (Voc_EnzymeActivityT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_EnzymeActivityT(st), err
}

func NewRootVoc_EnzymeActivityT(s *capnp.Segment) (Voc_EnzymeActivityT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_EnzymeActivityT(st), err
}

func ReadRootVoc_EnzymeActivityT(msg *capnp.Message) (Voc_EnzymeActivityT, error) {
	root, err := msg.Root()
	return Voc_EnzymeActivityT(root.Struct()), err
}

func (s Voc_EnzymeActivityT) String() string {
	str, _ := text.Marshal(0xc281c6e5be483337, capnp.Struct(s))
	return str
}

func (s Voc_EnzymeActivityT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_EnzymeActivityT) DecodeFromPtr(p capnp.Ptr) Voc_EnzymeActivityT {
	return Voc_EnzymeActivityT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_EnzymeActivityT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_EnzymeActivityT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_EnzymeActivityT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_EnzymeActivityT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_EnzymeActivityT) EfIso() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_EnzymeActivityT) SetEfIso(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_EnzymeActivityT) EfMono() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_EnzymeActivityT) SetEfMono(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_EnzymeActivityT_List is a list of Voc_EnzymeActivityT.
type Voc_EnzymeActivityT_List = capnp.StructList[Voc_EnzymeActivityT]

// NewVoc_EnzymeActivityT creates a new list of Voc_EnzymeActivityT.
func NewVoc_EnzymeActivityT_List(s *capnp.Segment, sz int32) (Voc_EnzymeActivityT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Voc_EnzymeActivityT](l), err
}

// Voc_EnzymeActivityT_Future is a wrapper for a Voc_EnzymeActivityT promised by a client call.
type Voc_EnzymeActivityT_Future struct{ *capnp.Future }

func (f Voc_EnzymeActivityT_Future) Struct() (Voc_EnzymeActivityT, error) {
	p, err := f.Future.Ptr()
	return Voc_EnzymeActivityT(p.Struct()), err
}

type Voc_LeafEmissionT capnp.Struct

// Voc_LeafEmissionT_TypeID is the unique identifier for the type Voc_LeafEmissionT.
const Voc_LeafEmissionT_TypeID = 0xe82d760b257daddb

func NewVoc_LeafEmissionT(s *capnp.Segment) (Voc_LeafEmissionT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Voc_LeafEmissionT(st), err
}

func NewRootVoc_LeafEmissionT(s *capnp.Segment) (Voc_LeafEmissionT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Voc_LeafEmissionT(st), err
}

func ReadRootVoc_LeafEmissionT(msg *capnp.Message) (Voc_LeafEmissionT, error) {
	root, err := msg.Root()
	return Voc_LeafEmissionT(root.Struct()), err
}

func (s Voc_LeafEmissionT) String() string {
	str, _ := text.Marshal(0xe82d760b257daddb, capnp.Struct(s))
	return str
}

func (s Voc_LeafEmissionT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_LeafEmissionT) DecodeFromPtr(p capnp.Ptr) Voc_LeafEmissionT {
	return Voc_LeafEmissionT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_LeafEmissionT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_LeafEmissionT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_LeafEmissionT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_LeafEmissionT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_LeafEmissionT) FoliageLayer() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s Voc_LeafEmissionT) SetFoliageLayer(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s Voc_LeafEmissionT) Pho() (Voc_PhotosynthT, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Voc_PhotosynthT(p.Struct()), err
}

func (s Voc_LeafEmissionT) HasPho() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Voc_LeafEmissionT) SetPho(v Voc_PhotosynthT) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPho sets the pho field to a newly
// allocated Voc_PhotosynthT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewPho() (Voc_PhotosynthT, error) {
	ss, err := NewVoc_PhotosynthT(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_PhotosynthT{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Voc_LeafEmissionT) Fol() (Voc_FoliageT, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Voc_FoliageT(p.Struct()), err
}

func (s Voc_LeafEmissionT) HasFol() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Voc_LeafEmissionT) SetFol(v Voc_FoliageT) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewFol sets the fol field to a newly
// allocated Voc_FoliageT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewFol() (Voc_FoliageT, error) {
	ss, err := NewVoc_FoliageT(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_FoliageT{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Voc_LeafEmissionT) EnzAct() (Voc_EnzymeActivityT, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Voc_EnzymeActivityT(p.Struct()), err
}

func (s Voc_LeafEmissionT) HasEnzAct() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Voc_LeafEmissionT) SetEnzAct(v Voc_EnzymeActivityT) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewEnzAct sets the enzAct field to a newly
// allocated Voc_EnzymeActivityT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewEnzAct() (Voc_EnzymeActivityT, error) {
	ss, err := NewVoc_EnzymeActivityT(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_EnzymeActivityT{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Voc_LeafEmissionT_List is a list of Voc_LeafEmissionT.
type Voc_LeafEmissionT_List = capnp.StructList[Voc_LeafEmissionT]

// NewVoc_LeafEmissionT creates a new list of Voc_LeafEmissionT.
func NewVoc_LeafEmissionT_List(s *capnp.Segment, sz int32) (Voc_LeafEmissionT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Voc_LeafEmissionT](l), err
}

// Voc_LeafEmissionT_Future is a wrapper for a Voc_LeafEmissionT promised by a client call.
type Voc_LeafEmissionT_Future struct{ *capnp.Future }

func (f Voc_LeafEmissionT_Future) Struct() (Voc_LeafEmissionT, error) {
	p, err := f.Future.Ptr()
	return Voc_LeafEmissionT(p.Struct()), err
}
func (p Voc_LeafEmissionT_Future) Pho() Voc_PhotosynthT_Future {
	return Voc_PhotosynthT_Future{Future: p.Future.Field(0, nil)}
}
func (p Voc_LeafEmissionT_Future) Fol() Voc_FoliageT_Future {
	return Voc_FoliageT_Future{Future: p.Future.Field(1, nil)}
}
func (p Voc_LeafEmissionT_Future) EnzAct() Voc_EnzymeActivityT_Future {
	return Voc_EnzymeActivityT_Future{Future: p.Future.Field(2, nil)}
}

type Voc_LeafEmissions capnp.Struct

// Voc_LeafEmissions_TypeID is the unique identifier for the type Voc_LeafEmissions.
const Voc_LeafEmissions_TypeID = 0xc8aeb5222ac5ef40

func NewVoc_LeafEmissions(s *capnp.Segment) (Voc_LeafEmissions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_LeafEmissions(st), err
}

func NewRootVoc_LeafEmissions(s *capnp.Segment) (Voc_LeafEmissions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_LeafEmissions(st), err
}

func ReadRootVoc_LeafEmissions(msg *capnp.Message) (Voc_LeafEmissions, error) {
	root, err := msg.Root()
	return Voc_LeafEmissions(root.Struct()), err
}

func (s Voc_LeafEmissions) String() string {
	str, _ := text.Marshal(0xc8aeb5222ac5ef40, capnp.Struct(s))
	return str
}

func (s Voc_LeafEmissions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_LeafEmissions) DecodeFromPtr(p capnp.Ptr) Voc_LeafEmissions {
	return Voc_LeafEmissions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_LeafEmissions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_LeafEmissions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_LeafEmissions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_LeafEmissions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_LeafEmissions) Isoprene() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_LeafEmissions) SetIsoprene(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_LeafEmissions) Monoterp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_LeafEmissions) SetMonoterp(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_LeafEmissions_List is a list of Voc_LeafEmissions.
type Voc_LeafEmissions_List = capnp.StructList[Voc_LeafEmissions]

// NewVoc_LeafEmissions creates a new list of Voc_LeafEmissions.
func NewVoc_LeafEmissions_List(s *capnp.Segment, sz int32) (Voc_LeafEmissions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Voc_LeafEmissions](l), err
}

// Voc_LeafEmissions_Future is a wrapper for a Voc_LeafEmissions promised by a client call.
type Voc_LeafEmissions_Future struct{ *capnp.Future }

func (f Voc_LeafEmissions_Future) Struct() (Voc_LeafEmissions, error) {
	p, err := f.Future.Ptr()
	return Voc_LeafEmissions(p.Struct()), err
}

type SticsParameters capnp.Struct

// SticsParameters_TypeID is the unique identifier for the type SticsParameters.
const SticsParameters_TypeID = 0xce5b0091fd9acb21

func NewSticsParameters(s *capnp.Segment) (SticsParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return SticsParameters(st), err
}

func NewRootSticsParameters(s *capnp.Segment) (SticsParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return SticsParameters(st), err
}

func ReadRootSticsParameters(msg *capnp.Message) (SticsParameters, error) {
	root, err := msg.Root()
	return SticsParameters(root.Struct()), err
}

func (s SticsParameters) String() string {
	str, _ := text.Marshal(0xce5b0091fd9acb21, capnp.Struct(s))
	return str
}

func (s SticsParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SticsParameters) DecodeFromPtr(p capnp.Ptr) SticsParameters {
	return SticsParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SticsParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SticsParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SticsParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SticsParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SticsParameters) UseN2O() bool {
	return capnp.Struct(s).Bit(0)
}

func (s SticsParameters) SetUseN2O(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s SticsParameters) UseNit() bool {
	return capnp.Struct(s).Bit(1)
}

func (s SticsParameters) SetUseNit(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s SticsParameters) UseDenit() bool {
	return capnp.Struct(s).Bit(2)
}

func (s SticsParameters) SetUseDenit(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s SticsParameters) CodeVnit() uint8 {
	return capnp.Struct(s).Uint8(1) ^ 1
}

func (s SticsParameters) SetCodeVnit(v uint8) {
	capnp.Struct(s).SetUint8(1, v^1)
}

func (s SticsParameters) CodeTnit() uint8 {
	return capnp.Struct(s).Uint8(2) ^ 2
}

func (s SticsParameters) SetCodeTnit(v uint8) {
	capnp.Struct(s).SetUint8(2, v^2)
}

func (s SticsParameters) CodeRationit() uint8 {
	return capnp.Struct(s).Uint8(3) ^ 2
}

func (s SticsParameters) SetCodeRationit(v uint8) {
	capnp.Struct(s).SetUint8(3, v^2)
}

func (s SticsParameters) CodeHourlyWfpsNit() uint8 {
	return capnp.Struct(s).Uint8(4) ^ 2
}

func (s SticsParameters) SetCodeHourlyWfpsNit(v uint8) {
	capnp.Struct(s).SetUint8(4, v^2)
}

func (s SticsParameters) CodePdenit() uint8 {
	return capnp.Struct(s).Uint8(5) ^ 1
}

func (s SticsParameters) SetCodePdenit(v uint8) {
	capnp.Struct(s).SetUint8(5, v^1)
}

func (s SticsParameters) CodeRatiodenit() uint8 {
	return capnp.Struct(s).Uint8(6) ^ 2
}

func (s SticsParameters) SetCodeRatiodenit(v uint8) {
	capnp.Struct(s).SetUint8(6, v^2)
}

func (s SticsParameters) CodeHourlyWfpsDenit() uint8 {
	return capnp.Struct(s).Uint8(7) ^ 2
}

func (s SticsParameters) SetCodeHourlyWfpsDenit(v uint8) {
	capnp.Struct(s).SetUint8(7, v^2)
}

func (s SticsParameters) Hminn() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fd3333333333333)
}

func (s SticsParameters) SetHminn(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fd3333333333333)
}

func (s SticsParameters) Hoptn() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x3feccccccccccccd)
}

func (s SticsParameters) SetHoptn(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SticsParameters) PHminnit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4010000000000000)
}

func (s SticsParameters) SetPHminnit(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4010000000000000)
}

func (s SticsParameters) PHmaxnit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x401ccccccccccccd)
}

func (s SticsParameters) SetPHmaxnit(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x401ccccccccccccd)
}

func (s SticsParameters) Nh4Min() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetNh4Min(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) PHminden() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x401ccccccccccccd)
}

func (s SticsParameters) SetPHminden(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x401ccccccccccccd)
}

func (s SticsParameters) PHmaxden() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x4022666666666666)
}

func (s SticsParameters) SetPHmaxden(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x4022666666666666)
}

func (s SticsParameters) Wfpsc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3fe3d70a3d70a3d7)
}

func (s SticsParameters) SetWfpsc(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3fe3d70a3d70a3d7)
}

func (s SticsParameters) TdenitoptGauss() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x4047800000000000)
}

func (s SticsParameters) SetTdenitoptGauss(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x4047800000000000)
}

func (s SticsParameters) ScaleTdenitopt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80) ^ 0x4039000000000000)
}

func (s SticsParameters) SetScaleTdenitopt(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v)^0x4039000000000000)
}

func (s SticsParameters) Kd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x4062800000000000)
}

func (s SticsParameters) SetKd(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x4062800000000000)
}

func (s SticsParameters) KDesat() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x4008000000000000)
}

func (s SticsParameters) SetKDesat(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x4008000000000000)
}

func (s SticsParameters) Fnx() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x3fe999999999999a)
}

func (s SticsParameters) SetFnx(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x3fe999999999999a)
}

func (s SticsParameters) Vnitmax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0x403b4ccccccccccd)
}

func (s SticsParameters) SetVnitmax(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0x403b4ccccccccccd)
}

func (s SticsParameters) Kamm() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x4038000000000000)
}

func (s SticsParameters) SetKamm(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x4038000000000000)
}

func (s SticsParameters) Tnitmin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x4014000000000000)
}

func (s SticsParameters) SetTnitmin(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x4014000000000000)
}

func (s SticsParameters) Tnitopt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x403e000000000000)
}

func (s SticsParameters) SetTnitopt(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x403e000000000000)
}

func (s SticsParameters) Tnitop2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x4041800000000000)
}

func (s SticsParameters) SetTnitop2(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x4041800000000000)
}

func (s SticsParameters) Tnitmax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152) ^ 0x404d000000000000)
}

func (s SticsParameters) SetTnitmax(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v)^0x404d000000000000)
}

func (s SticsParameters) TnitoptGauss() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160) ^ 0x4040400000000000)
}

func (s SticsParameters) SetTnitoptGauss(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v)^0x4040400000000000)
}

func (s SticsParameters) ScaleTnitopt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x4030000000000000)
}

func (s SticsParameters) SetScaleTnitopt(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x4030000000000000)
}

func (s SticsParameters) Rationit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x3f5a36e2eb1c432d)
}

func (s SticsParameters) SetRationit(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x3f5a36e2eb1c432d)
}

func (s SticsParameters) CminPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetCminPdenit(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) CmaxPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192) ^ 0x4018000000000000)
}

func (s SticsParameters) SetCmaxPdenit(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v)^0x4018000000000000)
}

func (s SticsParameters) MinPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetMinPdenit(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) MaxPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208) ^ 0x4034000000000000)
}

func (s SticsParameters) SetMaxPdenit(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v)^0x4034000000000000)
}

func (s SticsParameters) Ratiodenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216) ^ 0x3fc999999999999a)
}

func (s SticsParameters) SetRatiodenit(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v)^0x3fc999999999999a)
}

func (s SticsParameters) Profdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224) ^ 0x4034000000000000)
}

func (s SticsParameters) SetProfdenit(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v)^0x4034000000000000)
}

func (s SticsParameters) Vpotdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232) ^ 0x4000000000000000)
}

func (s SticsParameters) SetVpotdenit(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v)^0x4000000000000000)
}

// SticsParameters_List is a list of SticsParameters.
type SticsParameters_List = capnp.StructList[SticsParameters]

// NewSticsParameters creates a new list of SticsParameters.
func NewSticsParameters_List(s *capnp.Segment, sz int32) (SticsParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0}, sz)
	return capnp.StructList[SticsParameters](l), err
}

// SticsParameters_Future is a wrapper for a SticsParameters promised by a client call.
type SticsParameters_Future struct{ *capnp.Future }

func (f SticsParameters_Future) Struct() (SticsParameters, error) {
	p, err := f.Future.Ptr()
	return SticsParameters(p.Struct()), err
}

const schema_eef9ddc7a345de6d = "x\xda\x94\x9d}\x98\x14E\x9a\xe0\xe3\xcd\xac\x8fn>" +
	"\xac.\xb2@@\xb0\x04\xc1\x01\x17\xb0?p\x06=\x9d" +
	"\xea\xa6\x0b\xecf\xa8\xa6\xab\xabA`e\x86\xe8\xaa\xe8" +
	"\xae\x84\xaa\xcc\"+\x0b\xba9\\\xd0\x85g\xd0\x95]" +
	"uqG\xe7\xf4N\x1d\xe6V]\x9de\xe6\xf4\x0eg" +
	"\x9d\x1d\xf4\xc4\xc1[\xdcQWw\xd4\xd1Yt\x9d]" +
	"uu\x0e\\gG]\xdd\xba\xe7\x8d\xc8\x8f\xa8\xeaj" +
	"\xf4\xf8\xab\xeb\x17oFFFFF\xbc_\x11\xb4\xae" +
	"\x8dw\x06\xda\xa6~g\x1aQ\xd2\xaf\x04C\xd5o/" +
	"\x8b\xdd\xf8\xbf\xfe\xfc\xe5}$=\x13.\xac\xfer\xc7" +
	"\xd7\xeexk\xc3\xd81\x12\x08\x13\xd2\xd1\xd6<\x1f\xb4" +
	"\xaef\xfc\xf3\xea\xe6\xef\x84\x08T\x7f\xb7s\xee\xd1\xdf" +
	"T\x8f\xdd@\xd2+\x00\xaa\x8b\xcf\x8b\xae-,m~" +
	"\x92\x04\x01e\x16\xb7\xccW\xb4\xde\x960!\xda\xaa\x96" +
	"]\x04\xaa/\x9c=|\xd9\x92\xd7o\xdbO\xa21\xa8" +
	"\x16\x7f\xb5\xea{?{\xe3\x93\xdf\x90\xa0\x8a\xc2\xf7\xb5" +
	"\x0c\x80\xf6\x18\x17\xfea\xcb_\x12\xa8\xfeY\xfe\xaa\xd8" +
	"\xee\xb3\xb7\x1e$\xe9\x18(\x924\xaf:\x15\xbd\x1d4" +
	"\x16Ei\x1aE\xe9\xfc\x93\x07g\xfd\xe8\xe7'n\xae" +
	"\xabZA\xe1\xcf\xa3\xb3A\x9b:\x0d\x85\x9b\xa7a;" +
	"\xbe\x06[\xff;}\xe6\xb9;Hz9L\xad\x1e\xed" +
	"\xff`\xef-\x7fx\xfb\xa3\xe2\x19\x8b\xd3\x86\x14\xed6" +
	"\x14\xee84\xed\x1f\x14\x02\xd5\xc0\xff\xfc\xc3\xbf\xfe\xf0" +
	"\xf5\xc9w\x91\xe8e\xca\xef\x16\xfd\xdbS?Y\xf0\xbb" +
	"\x13\x04:^\x98\xfe\x1ah\x1fL\xc7Z\xdf\x9d\xfe5" +
	"\x02\xd5\x9f\xfcj\xf4\xcdK^\xcc~\x8f\xa4\xe3\x00\xd5" +
	"\xe0\xb7\x9b\x87co]\xf47N\x83\xcfN\xbf\x1f\xb4" +
	"\xe6\x19\xe7\x13\xa2M\x9f\x81mX\x7fO<o\xaf_" +
	"\xf7\xe7\x0d\x1a\xacUf\xbc\xa7\xdd0\x03\xff\xba\x9e\xcb" +
	"\xde5}\xef;7\x9d~\xf6\x07$})(\xd5\x8f" +
	"\xd7u\xfe\xf1\xf7\xafh~U\xb4\xf7\xcd\x19\x0f\x81\xf6" +
	"\x09\x17\xfe-\x17\xfe\xf6/\xfer\xd6-\x89\x7f\xfe\x1f" +
	"\xd8o\x0b\xea\xfb\x8d\x9e\x7f#h\x95\xf3\xf1\xcf\x1d\xe7" +
	"\xc7\x9b\x08T\xff\xed\xeb?>\xf6\xd2\xd7\xe6=\x8a\xe2" +
	"-\xf5\xe2\x97\xcf\x9b\x0d\xda\xaay\xf8g\xd7\xbc\x9f\xaa" +
	"\x04\xfc\xceJ\xc7A\xa9\x7f\xc8\x1d\x0b\xef\x07\xed\xa6\x85" +
	"_!D{p!\xbe\x95\xbb\xbf\xb5\xfa\xec\x8b\x7fu" +
	"\xd7cX\xf9\xa4\xfa\xcaW]2\x1b\xb4\xf5\x97\xe0\x9f" +
	"\xe9KL\xecio\xb4\xd5\xf4\x09>\xa66w\xf1S" +
	"\xda\xc2\xc5\xdf!j\xf5\xf3\xc5\x87n\xf8yt\xca\x8f" +
	"It\xb9\xd4\x1c1\x88n[\xfc)h\x8f,\xc6\x0b" +
	"\x1e\\\x8c\x0d\x98\xf4\xd7G\xf6|eM\xf586\xa0" +
	"\xb9~\\t]:\x00\xda\xfaK\xcf\xc7~\xb9\xf4\xcf" +
	"\xb1\x01\xde\x00N\xc7\x00\xea\xdb[\\\xfa\x14h\x07\x96" +
	"\xe2+\xbcm)\x1fF\x1d=\x7f\xfd\xebgnx\x0a" +
	"?\x15\xa5\xeeS\x99\xbal%hs\x97aKf-" +
	"C\xe1\x15\x17\xdb\x07~\xcd\xfe\xe6\x04V\x1d\xa8}\xb8" +
	"\x8e\xca\xb2\xdbA;\xc4\x85oZ\xf6\xcf\x04\xdcQV" +
	"\xdb\x0a!z\xd9n\xd0n\xba\x0c\x1bq\xc7eX\xef" +
	"\xd2\xeb\x8e\xbe\xfb\xe17\x7f\xffg8\x96U\x7f\x0c:" +
	"#\xff\xb2OA\x9b\xd5\x8a\x7fNo\x8d\x03\x81j\xe7" +
	"\xff=q\xe9\xfc\xc7~p\xb2Q\x9b\x17\xb7\xb5\x83v" +
	"E\x1b6\xe3\xf26\xac\xdb{\xbd\xd1\x99P\xbd\xec\xa5" +
	";\xeeg{:\xfeT\xbc\x8f\xbb\xda>\xd5\xbe\xdf\xf6" +
	"3\xa2V\x7f\xbe\xf1\xbd\x90zA\xf59|\xb0\x99u" +
	"\xad\xedj\xbf\x19\xb4M\xed\xf8\xe7\xfa\xf6k\x82\x04\xfe" +
	"a\xde\xdf|\xf7\xf3\xdb~\xffo\xd31\xb8\xb0N\xf6" +
	"\xc1\x15\xf3A{|\x05\xfe\xf9\xd8\x8a?\xc1\xa1y\xff" +
	"\x7f\xfb\xfb?\xbane\xe4\xe7\xd8\xd6I\xb5m\xd5\x16" +
	"\xae\xfcTk[\x89\xc2KW~\x0d_]\xcb\x99\xb7" +
	"\xc6b\x87\xe2/\x90\xf4|P\xaa_\xcf\xa7*s\x96" +
	"|\xe0|#z\xf2G\xa0\xdd\x90\xe4\x1fT\x12\x1f\xec" +
	"\x8f\x8c\x99\x7f\xf6\xb3o\xbf\xfc\"\xb6y\xb1\xf4\x9e'" +
	"\xf1/*\xd9\x0e\xdaY\x94\xee\xf8 \x19\x99B\xc0\xff" +
	"\xe2\x1a}\xd9'2\x03\xa0\xbd\x9a\xc17\xf2\xeb\x0cV" +
	"\xee\xdd\xbb\xb6\x8b\x9d178\x0d\xb4\xf4 J\xd3\xc1" +
	"\x7f&P\xed\xfb\x8f_M\x9d\xd3\xfa\x1f\xbf\xc4\xa6\xa8" +
	"u]r\xfd\xfa\xd9\xa0\x1dZ\xcf\xc7\xc5z\x1c\xce3" +
	"\x1fy\xac\xf3\x99\x9d\x95_5\x12^\xbc\xc1\x02\xed\xea" +
	"\x0d(|\xc5\x06\x14~-3\xfd\x07\xaf>\xff\xf7o" +
	"\xd7}\xd9\\\xf8\xe5\x0dk@{\x17\x85;~\xbd\xe1" +
	"\x17\x01\x02\xd5\xbf\xbd\xfb\xf3\xf5\x87\xbb\x0f\xfd\x93\x98c" +
	"\xbc\xef\x86K\x07\xb7\xfc\x08\xb4\xb9[\xf8`\xde\x82\x8f" +
	"\xf8\xcbG\xae_8y\xe7\xd2w\xf0\x11\xa5\xcfV|" +
	"\x84\x95-\xed\xa0\x1d\xe0\xd27l\xc1G|\xea\xf3\x99" +
	"_k\xfa\xea\xed\xef5j\xf5\xa6o^\x09\x9a\xfeM" +
	"\x14f\xdf\xc4V_\xf5\xaf\x03\x89S\x81\xc9\xbf\xc1\xaa" +
	"\xd5\xba\x01\x1a\xfc\xd6$\xd0\xa6\x7f\x0b\x85\xa3\xdfB\xe1" +
	"\xc5\xaf.\x9a\xa6\xcc}\xfa\x0c\xd6<\xb5\xae\xe6G\xbe" +
	"u?h'P\xb8\xe3\xc9o\xf1\x89\xfc\xbf\xec\xfd\x8b" +
	"+\x96\x9d\x0d}\x88\xd23\xa4\xb7\x1eA\x99\xe6\xec\x95" +
	"\xa0\xcd\xca\xf2O%\xcb\x87\xdfo'\xfdf\xf7\x92\xe4" +
	"\xea\x0f\xb1%\xcdu-\x99k\xac\x01\xad\xcd\xe0\xe3\xcf" +
	"\xa8\xe2\x87\xf5\xd9\xd7\xff\xb1%\xf6\xc3-\x9f4j\xf7" +
	"\xaa\xd2|\xd0\xd6\x97\xb0\xdd\xe9\x12\xb6{\xcb\xb6\xe9?" +
	"\xfb~\xe4\xe1j\xfd\xda\x16D\xe9wKk@\xfb\x1c" +
	"\xa5;>)\xfdN%\xbb\xabE\xd3\xd0\xb3\xf4[%" +
	"\x95Z\xb4X^\x96\xa5%\xa3t\xe5\x063\xbb,S" +
	"bY\x9d\x95\x93aj\xd3~\x80\xf4\xa8\x1a $\x00" +
	"8\x04\xd4\xd9\x84d\x96\xab*d:U\x05\xa2\x001" +
	"@~\xb5\xba\x92\x90\xcc\x0a\xe4I\xe4\x8a\x12\x03\x85\x10" +
	"\xadK\xbd\x92\x90\xccU\xc8{\x90\xabj\x0cT\\\xb8" +
	"\xd5vB2\x9d\xc8\xd7\"\x0f\x04b\x10\x00\xd0z9" +
	"O\"\xefG\x1e\x0c\xc6 \x08\xa0\xa5\xd4K\x09\xc9\xf4" +
	" \x1fD\x1e\x0a\xc5 \x84\xcf\xcd\xf9Z\xe4\x1b\x91\x87" +
	"\xc31\xfcz\xb4\xf5\x9c\xf7#\xbf\x0eySS\x0c\x9a" +
	"\x08\xd16q>\x88|+\xf2\xe6\xe6\x184\x13\xa2m" +
	"\xe1|#\xf2\x1c\xf2I\x93b0\x09?&\xce\xafC" +
	"\x9eG>yr\x0c&\xe3\xa0\xe2|+\xf2\x02\xf2)" +
	"Sb0\x05@\xd39\xcf!/!\x9f:5\x06S" +
	"\x01\xb4\"\xe7y\xe46\xf2\xf3\xce\x8b\xc1y\x00\xda\x0e" +
	"u>!\x99\x02\xf2Q\xe4\x91H\x0c\"\x00Z\x85\xf3" +
	"\x12\xf2=\xc8[Zb\xd0\x02\xa0\x8d\xf1zl\xe4\xfb" +
	"\x90G\xa31|\x09\xda\xf5\x9c\x8f\"\xdf\x8f|\xda\xb4" +
	"\x18L\x03\xd0n\xe0\xefe\x0f\xf2\x83\xc85-\x06\x1a" +
	"\x80v\x80\xcb\xefC~\x0b\xf2X,\x86oR\xbb\x89" +
	"\xf3\xfd\xc8oE>}z\x0c\xa6\x03h\x878?\x88" +
	"\xfc0\xf2\x193b0\x03@\xbb\x8d\xf3[\x90\xdf\x89" +
	"\xfc\xfc\xf3cp>\x80v\x07\xe7\xb7\"\xbf\x1b\xf9\xcc" +
	"\x991\x98\x09\xa0\xdd\xc5\xc7\xc3a\xe4\xf7\"\x9f5+" +
	"\x06\xb3\x00\xb4{8\xbf\x13\xf9\x11\xe4\xb3g\xc7`6" +
	"\x80v\x1f\xe7w#\x7f\x00\xf9\x05\x17\xc4\xe0\x02B\xb4" +
	"\xef\xf3\xfa\xefE\xfe0\xf29sb0\x07\x97g\xde" +
	"oG\x90\x1fE>wn\x0c\xe6\x12\xa2=\xc2\xf9\x03" +
	"\xc8\x1fU\x15P\xf5\x1c4\x13\x05\x9a\x09\xece\xc3)" +
	"\xd30\xcb0\x99(0\x99@B\xfcv\x7f\xc6\xd9p" +
	"o\xd9\xffe\xe7\x99M\xc5\xaf\xeas\xa7\xf0\xdf\xfb\x09" +
	"BHd\x98\x8e0\x81\x8f\x9fI\x10\x12\xc9\xda\xbd^" +
	"\x8d\x91\xac\x9d\xb2\xbd\x1fy*\x95\xe4\xa9T\x92+K" +
	"%\xb9\xb2|M\xce-9s\xfa\x9b\xd1.B\"\xf9" +
	"\x9c[\xec\x90p>\xb7M\x80\xd3\xbf\x9c\x84\xbf\xcb\xde" +
	"\xef\x8f\x0ft\x12\x12\xd9\x9em\xbf\xdc\x01\x9d%\x0eL" +
	"\x0fl\x1d\xee$d\xef\xcel\x8a\x8e\xba\xec\xf8 \xca" +
	"\xec\xd8\xb63+~\xef\xc3\x9f\x94mw~\x9e\xd9\xf7" +
	"\xef\xef;\xc4t\xc9\xa17\x05\xd9Vt\xaa\x8d\xbe%" +
	"\x80[\xc7\xe9?\xc5k\x12\xe5\x02M\xe9\x86s\x9b\xe5" +
	"\x9cdi\x81\xf5J\xfd'HJ\xee\xd1\xe2j\xb3\xe0" +
	"vH\xb8@u\xef\xefr\x81\xba\x7f{3ZX\x9e" +
	"\xd1R\x8c\x96+\x16\xcb]c\x99\x15#\xb7\x8b\xda\xcc" +
	"\x1a\xa4C\x05\xd6k\x0c\x9bV\x91\xda\xbai,KR" +
	"\x9b\x0d\x9a\x1bh\xb8Pa8\xe35\xb93^t\xf1" +
	"\xa5\x84\xa4\x17\xa8\x90nU\xc0\x99\xed\xa2K\xdb\x09I" +
	"/R!\xbd\\\x81H\x8e\xda\x0cZ\xaa\x87\xa2\xf3\xd5" +
	"\x87\xff\xe3\x9f\xbeC\x08@\x0b\x81\xf8NZ\xa8\xb0q" +
	"\x0d\x0b\xc8\x0d\xeb\xb6\xcc\xd2\x00+\xeb\xb9\x0a\xebG\xce" +
	"lfA\x19o?\xc5\xbb\xfd\xaa+\x09Iw\xaa\x90" +
	"^\xeb\xcf\xb6\xd1\xde\x95\x84\xa4\x93*\xa4\xfb\xfd\xa96" +
	"\x9a\x1a\"$\xbdV\x85\xf4F\x05\x12%~\x1fh\xf1" +
	"m\x12\xd1\xac\xbde1\xb5\xc3\x14\xa2\x00\xea \x96\xb8" +
	"\xff \x09\x8f\x95\x98G\xdd\xe6\x06\xe5\xe6vUl\x13" +
	"\xbb+\xdbkY\xfa\x08\xef\xb7/\xd5l\xdej\x80h" +
	"\xef\x95r\xab!\x06\x0a@45\xd0\xa8\xd5\x9ee\"" +
	"Z\x9d\xa0E\xb3b8\x03\xfex['!U;o" +
	"\xb1r\xde,\x10\xc89\x9f\xe30\xff\xf7\xf7\xf896" +
	"^\xd9\xb0\xbb\xdd\x06\xabV\xb9\xee5[\xfe+\xf5\xfa" +
	"\xb9m7!\xe9V\x15\xd2W)Puz\xae\x9f\xc4" +
	"\xddVz\xea\x9ehe5[)\xd8\xfaNj\x91D" +
	"\xbf+\xe2\xe9\x06\x8e\x88\xd3\xb0b\x135\xe8\x08+2" +
	"\xc3v\x1a'\xaeX\xb6\xce\x1a\xa1\x86\x9e]\xcd,[" +
	"/\xe8\xbb\xc5\xe0t`\x8a\xda6\xb3\x9c'\x083\xf1" +
	"\x04\xcb\xbd\xa5y\x0b\xdc\x8fK\x12\xe0\x92\x04\xd2\xd2\xac" +
	"\x83\x85K\x0fr\x1b\xa4\xa5y\x07\xe7%\xe4{@Z" +
	"\x9a\xc7\xe0\xbb\xb8d ?\x08\xee\xd2L\x88v\x00\x9e" +
	"\xc2%\x00\xf9ap\x97f4Z8?\x8c\xfc^\x90" +
	"\x96\xe6{\xe0f\x9c\xa2\x91?\x0c\xd2\xd2\xfc \xe7\x0f" +
	"#?\x06\xd2\xd2\xfc\x18\xec&$\xf3(\xf2\xe3 -" +
	"\xcd?\xe1\xfc\x09\xe4'AZ\x9aO\xc0C\x84dN" +
	"\"\x7f\x09\xa4\xa5\xf9\x05\xce_B~\x1a\xdc\xa5\x99\x10" +
	"\xed\x0d^\xcf\xeb\xc8\xdf\x01\x05\xaa\xd4,&\xad\xb1\x14" +
	"\x05\xec\xd5n\xd3\xb0\xc3\xcc\xf0\xa6\\,\xed\xebY\xde" +
	"m\x92\xb8a\xd7\xf3u\x1d\x0dy7\xb5\x86(\x14\xf5" +
	"\x1cV\xc6\xd4\xda\xc2L\xc1\xdc\x95TX\xb6\xdbd\xc3" +
	"\xc3\x19\x9b\x1a9j\xe5\x88,\xb1\x9a\x96\xedsH\x94" +
	"\xa8ew\xadK\x0d\x82\xd9\xb5.\x85\xb5\x91\x09\xca\xb0" +
	"\x1e\xa9,k\x0c\xe0(\xea\"\x09qY\xc3\x02\xbc\xa6" +
	"\xbe\xb6\x0c\x14\xcc]\x83f&\xb52Rs\xdd\xf8\xe2" +
	"\x9a\xab\x8dn\xd3\xc82\xc3&\x09\x8b\x8f\xdeqS`" +
	"\xa8\xe1\x9c\xd2C\xad\x9d\xacl{\x13Jy\x99C\x06" +
	"u\xb5(\xa6d>\xcbE\xd7\xe0\xa7\x14\x9d\xba\x12\xbf" +
	"rjW,\xdd\x1e#\x84\xec\xad\x18\xdb\x0ds\x97\xe1" +
	"}`\xc1\x09>\xb0\x94n0\x8b\x16\xfc\x0f,\xac\x9b" +
	"F:\x00\x92\xc5\x1b\x85\xcdU\xb7\x1dD\xb5\xca\xf2," +
	"1\xe0\xcf\x12\xde$\x81\xd3\xda\x12\x15\xd2+\x14\xd19" +
	"\xba\xad\x9b\x04\x0ch\xf1\xabl0\x8dI=\xa2\xd4\xcf" +
	"R\x11T\xc0\xeb\xe6\xa7\xcd\x8d\xe6'K\x9a\x9f\xb2\xce" +
	"\xf4FT>\xf3x\x9e+g\xe6q&zi\xfa\xf2" +
	"\xdcfus\xd3D]\xe7O\xfb\xcbD\xf7Dl6" +
	"n\x1a}\xc8\xef\x0c\xaf\x99\x97#\\\xa1B:\xa9@" +
	"\xd5\xd0m\x8b\xda\xac\x1b\xc40\xb1h\xa4f\x94\x94+" +
	"\x85\xe1s\x147\\\x982\xa6^p\xe7H3W)" +
	"\xf8\xabi\x99`\xf3\x0e\x8b\xe6\x01h\x9f\xabO\x112" +
	"\x10P!3%\xe06\x10@k\x0e\xe0\x146\x05\xf9" +
	"\xcc\x80;E\x02h\xd3\x03\xff\x87\x90\xcc\x1c\xe4\x8b\x02" +
	"\xee\x14\x09\xa0-\xe4|\x09\xf2\x15\x01\xc9z\xb9\x9c\xf3" +
	"\xab\x90\xf7\x04$\xebe\x15\xe7k\x91o\x0c\xb8S$" +
	"\x80\xb6\x9e\xf3\xeb\x90\xe7\x03\xee\x14\x09\xa0\xb1\xc0{h" +
	"\x15 \x1f\x0d\xb8S$Z\x05\x9c\xefA~0\xe0N" +
	"\x91\xa8\xcds~\x0b\xf2;\x03\xee\x14\x89Z8\xe7w" +
	"#\x7f \xe0N\x91\x00\xda\xf7\x038\x15\x1eA~4" +
	" Y/\x8f\x04p\xea<\x8a\xfc\x89\x80d\xbd<\xce" +
	"\xf9\x13\xc8O\x06$\xeb\xe5\x04\xe7'\x91\xbf\x14\x90\xac" +
	"\x97\x17\x028\xc5\xbf\x84\xfct@\xb2^\xde\xe0\xfc4" +
	"\xf2\xf7\x03\x92\xf5\xf2n`3!\x99w\x90\x7f\x14\x90" +
	"\xac\x97\xb3\x81\x1b\x09\xc9\x9cA\xfeY\xc0\xb7^:>" +
	"\x09L\x03B2\x81\xa0\x0a\x99\x96\xa0o\xbetL\x0d" +
	"\xf2\x82\x99X\xb0 (\xd9/\xf3\x82\xb8\xa8-@\xde" +
	"\x1a\x94\xec\x97\xa5\xc1\xd7\xd0\x9eE\xde\x19\x94\xec\x97\xab" +
	"9O\"\xef\x0fJ\xf6K\x8a\xf3A\xe4[\x83\x92\xfd" +
	"\xb2%\x88v\xcaF\xe4\xb9\xa0d\xbfP\xce\xafC\x9e" +
	"\x0f\xba\xf6\x0b\xbea\xce\xb7\"/\x04]\xfb\x05\xed\xc7" +
	"\xe06\\\xac\x91\xdbA\xd7~A;1\x88=g#" +
	"\xdf\x87\xfc\xc2\x0bcp!\xda}\\~\x0f\xf2\x83\xc8" +
	"\xe3\xf1\x18\xc4qDp\xbe\x1f\xf9\xad\xc8/\xba(\x06" +
	"\x17\xa1\x1d\x17\xfc\x11\xdae\xc8\xefF>o^\x0c\xe6" +
	"\xa1]\x16\xbc\x1dG\x0a\xf2\x07\x90\xcf\x9f\x1f\x83\xf98" +
	"Rx=G\x90\x1fE~\xf1\xc51\xb8\x18GJ\x10" +
	"G\xee\xa3\xc8\x8f\x07\x15\x80\x051X\x80kup\x08" +
	"\x07\x0a\xe2\x93A\xd4\x99\xce\xbd\xf0U\xbf\xba\xeb\xa3\x9f" +
	"^\xf7G!\xae\xb3\x95\xcf\xbd\x04V_\xfc\xf7g~" +
	"\xf1_7\xcd\x17\xb2\xc5!\xac7\xa5P\xdd\xb0\x07\xa8" +
	"\xcd<aW\xfa\xb3\x07\xcf\xbe\x98\x1a\xeaw\xa5\xb1\xe6" +
	"sH\xff\xe7\xd8\x0f\xaeys\xf7~\xb9\xee\xa4\xc2\xa8" +
	"\x9d\xff\xb2u\x9fC\xba\xae\xee\xf5\xb8\xee(B\xb3[" +
	"5<\xacgufd\xc7<\xe9\x0e\xfe\xef\x1f\xdd\x1e" +
	"\xc1\x96\xacW|]P\\\x11\xc1K\x9c\x0b\xbe{\x17" +
	"\xfe{U\xee\xc2s^p\xfct\x82\x10W#\xf9\xf2" +
	"U\xd3/Q\xb5s\xc1\xe3\xf2\x05)\x92\xa0\xa3\xdd\xb6" +
	"\xd9\xe7\xda\x9e\x7f\x82\xda;.\x93\x99u\xa9\xd5@\xcb" +
	"\xf6\xa0\x99Y\x97\x92T\x0c\xa7\x0b\xfe\x8e\xd7\xc2\x05S" +
	"+]ec]JR6j\xfa\xca\x11\x94j<\x97" +
	" \xd7\x95\xb0^I\x8f\xaa\x1e\xbb\xf0\xc0\xbf\xa4\x8f\xfd" +
	"\xf1x)Y\xa3\xaa.\xed\x9e\xf3/o}\xf5R." +
	"\xe5\xa8P\x19\xa2\xa6V\xd68\x05fwbqA/" +
	"\xeavw\x81\xc2\xd8\xaa\xe1a\x96\xb5\x9d*\x8e?\xcf" +
	"\xdf@\x11\xd72\xbaN\x1d\xd5s\xbc;q\xf0\xc8\x03" +
	"\xdf3l\xe4^\xc5\xd5S\xb7\xd9\x97\xb8J\xf2NT" +
	"m\x8b\x1a\xe5\x92i\x81\xed\x88\xab\xc3\xc3\x0d*G\x0b" +
	"\xa7\xcb\xa0L\xb1\xcc\xa1$\xe3\xb7\x1a\xd6\xb3\xd4\xd6U" +
	"w\x05\xae\x11\xd7\x8bEs\x08\x07s\xb9\xb6%}\xea" +
	"\xba\x0ey\xacM,\xd7\xb3\\\x92K\xe4\xf0\x96m5" +
	"7z\x16o$\x0a\xdak\x0a\xde\xf5\x0b:\x1a<p" +
	"~,g\x99\x85\xb12\x89\xe8\xe5o8n\x84\xea{" +
	"?\xba\xf3\x95=\xd7m\x17\xa33\x8b\x96\x9a\xad\x83i" +
	"\xac2\x985\xe2}\x80\xa7\x83ow\xd6U\xd0\xef\xb6" +
	"\xe9\xef.\x9d\xb4\xe4\xf2\xbf\xba\xfd\xea\xfa;\xf4\xbbm" +
	"\xfb\xe6\x8c?\xd8\x1d=1\xca\x05\xa8]4\xcb\xa5<" +
	"\x03K\xcf\xa2\x91_\x8e\xdb\xd4\xc8\xb2\x9aI!'\xde" +
	"i\xbb\xd9o\x99\xb9\x0ad\x9d\xee\x01V\xd3}F^" +
	"\x1f\xd2m\x93D\xac\xbe\x9e\x0e\xc9%R-\x95St" +
	"4\xa5\x1b\x0aj\xb4\xba\xe8\xdd$+\xd9yo\xb0\xd6" +
	"L\x0e\xb6\x9e-\xf7S\x8b\x84\xb9\xfa\xe7\x86Lj\x95" +
	"\xbfZ\x8b\x19\x15\xab:\x8b9\xe9\xe9R\xcf\x01.\xce" +
	"\xa7\xd0\x9ez\x05$e\xeae\xce}\xfb\xcbU\xa6\xde" +
	"\x00\\\xf2^A\xfe\xb6lo\xbe\xc9\xed\xc1\xb7\x91\x9f" +
	"\x01I\x99\xfa\x80\xcb\xbf\x83\xfc#\x90\x94\xa9\xb3\xdcn" +
	"=\x83\xfc3\x90\x94\xa9O\x00\x95\x88\x8f\x91\x07\x14I" +
	"\x99\x02\x05\x97\xbc\x80\x82\xba\x82\xa2\x008\xe6\xe6T\x05" +
	"\x97\xaa)\x88g\xa2xs\x93\xd0\xa5\xa6+\xb8\xe2\xc5" +
	"\x90_\x84|R\xb3\xd0\xa5\xe6r\xf99\xc8\x17!\x9f" +
	"<I\xe8R\x0b9_\x80\xbc\x15\xf9\x94\xc9B\x97Z" +
	"\xcao\xdb\x8a\xfc*\xe4S\xa7\x08]\xea\x0a\x05u\xaf" +
	"\x15\xc8\x93\xc8\xcf\x9b*t\xa9.\x05\xbb\xad\x13\xf9Z" +
	"\xe4\x91\xf3\x84.\xd5\xab\xe0\xca\xbc\x16\xf9F\xe4-\x11" +
	"\xa1K\xad\xe7|#\xf2\x9c\xc2\x97Z\xbd\x90\xa1F\x0e" +
	"\xb8\xf5ix\x93\xcd\x99\x9f\xf2\x85A/t\x17\xe8X" +
	"\xa3\xc2\x04\x16\x96zjF\xcc\x05\x9d\xc4\xb9*c\x9b" +
	"\x060\xf72\xcf\xacL\x14hq(G\xe5{\x0c\xeb" +
	"\xac\x90\xeb\xa6%\x12\xa7Y\xdd\x1e\xab\xb9=\x1aj\xd4" +
	"\xd6\x897\x91\x08^bV\x91\x1a\xcc\x00\xfbZ\xbd`" +
	"\xeb\xc6H\xbc\xdf\xd4=?\x8f\xd7\xf2A6j\x93p" +
	"\xc5\xf2\xfdSH\xbb\x8aE\x93D\x0c\xbdR\xacY\x96" +
	";\x13n\xd3\xfbt\x1b\x07\xbb]\xfb\xcd\xd9^yw" +
	"\xdf\x00%a[w\x1c\x98\xc7\x17t:\x05)S/" +
	"\x83]\xb1X?\xb3\xb2qf\xd8\xab\xbb\x1d\x91M\xae" +
	"\xc8\x00\xdd\x95$\x09f\x94\xeb\x9f\xd4\xd4\x0b++\x85" +
	"\xed\x90\x14e\xe3\xde\x02\xda)`\xe8\xd9nj\x0d\x99" +
	"`LT\xcc}=`\xc9\xc5_d\x9e\x8ds\x1dq" +
	"\xcb\xb6\x09\xa4\xbc\x84h\xf3SR\x9c{\xea\xe6\xaak" +
	"5\xa9\xb2k\x89\x9bM\xfeW\x7f.\xaf\x1e!u^" +
	"\xbdN\xc7\xabg5\xf2\xeay\xb7nl\x0e\xebF\xd6" +
	"\xb4J\xa6E\xe2\xc2q\x00D\x01\x98pj\xd2mV" +
	"75-\xf1\xa6\xa6\x85\xb0\x06\xbfI\x9c\x0aZ\xe5\xa9" +
	"i)\xb4\x13\x92Y\x84|\xb9<5\xb5q\xf9V\xe4" +
	"W\x81d\xe7]\xc1\xa7\xa6\xab\x90\xf7\xc8S\xd3*\xc0" +
	"o>\x89\xbc_\x9e\x9aR|jZ\x8b|\xa3<5" +
	"\xad\xe7|\x10\xf9V\x90\xa6\xa6-\x80Zt\x0ey\x09" +
	"$;\xaf\x08?\xaeq\xcd9\xae\xb0\x8e1\x98\x8d\xe6" +
	"\xcd~,\xb8\x15[\xee\xb8\xc2\x0eq\xd7\xd6-\x88\x1f" +
	"\x00\x05\xaa\x05j\xebv%\xc7\x88\xb7\xaau\xae\xe9$" +
	"$^.\x98%\xd6@-\xcd3}$o\xf7\xf5y" +
	"\xf2\xc7{q\xa0\x8f8\x0es\xb0\x99U\xb3\xae\x9c\xde" +
	"\x97\xee<\xd7G\x94\xb3\xa8\x8e\x83\x94\xc4\xf9B/\xaf" +
	"Y;w\xf4%Y\xc9,\x93\xb8\xee\x1b\xf6\xc7\xbf\xde" +
	"\xc9\xdd9\xa3\\ORl}'\x1b0M\x9c\x10j" +
	"n\xbb\xaf\x93k\x13%f0\xdb\x02:T`k\xe9" +
	"\x18K\x88\xb6\xd5\x7fI\x99\x12\xcb\xaa\xa8\xbf\xf4T\x8a" +
	"\x95\xf2JZ\xc0\xd5\xb7\xdb\xb4,\x96\x95\x14\x1ag." +
	"\xe1~\x93\x84\x18\xfbp\x1e\x81~\x15\xa0\xc5\xcfa!" +
	"\x80\xb0\xb1\xbff\x83\x99%\xe9\x05 \xc5\xe7\xa3]\x03" +
	"~\xbaS\xb4k\xc8O8\x88v]\xe9\x87\x7f\xa3W" +
	"\xdf\xecGwQ\xcc\x0bQG\xbb\xd6\xf8I \xd1\xae" +
	"\x1b\xfd\xb8x\xb4\xcb\xf2S-\xf0\xc7\xaa\xa2^.\xeb" +
	"\xa6A\xa0\\u\xa3\xb68\xe7\xd1Dw\x7f\x92\xda\xb4" +
	"\x9a\xd2\xb3\x96\xd9]\xd0\xa1Hm\x86\x84\x90j\x7f\xde" +
	"\xb4\xcd\xf2\x98A\xc2v~\xb0\xba\xda,\xe8t\x84\x0d" +
	"\xe2@Xe\xec\x1e+\xb2.\xfe\x0at{l\x90\xac" +
	"et\x18\xef\x11\xc7\x9b\x0cV\xdd\x9f\x84\xff.{s" +
	"R\xe8\xff\xc7\x9d\x8deN_\x7f\x99X\xc7\xecF\xb1" +
	"\x8eK\x09I\xf7\xa8\x90\x1e<G\xacC\xd5s\xee\x82" +
	"\x111hq|t\xa3&\x18\xb3\xca\xd8\xa9[\xa6\x81" +
	"\xcf E5\xb8g\xd0\xcba\x88\xc2Pu\x13\xa3\xd6" +
	"\xa0\xb9\x81\x92p\xa1\xc2\xd2\xad\xde\x9c\xd3\xc5\xd5\x15\x7f" +
	"\xaeP\x1c\xf7\xfb*\xfemzs\x05\xa8\xc2\xfb\x9e\xe2" +
	"Z\x12\x9f*\xf2|jQ\x846\xc4\xf8T\xe1O\x09" +
	"A\x10\xde\xf7\"\xaf\xa6\xe0y\xe5C\xaa\x98r\x0e\xf0" +
	"z\xbc\x19!\x1a\x0e\x08\xef\xfb!^\x0f\x9f\x12\xee\xe4" +
	"SKPx\xdf\xef\xe0S\x9d\xef\xado\x0e\x89)\xe7" +
	"\x1e\x1e=\xf0\xbd\xf5\x93\xc2B\x1dz\x90s\xdf[?" +
	"\xb9S\xa8C\x8f\xf1\xa9\xcb\xf7\xca\xc3<\xe1}?\x01" +
	"\xf3\x09\xc9\x1cG~\x0a\x14H\xd0\xc2\x10\xcb9\x93C" +
	"u\xc7\xd5\x93~\xf1\xbd\xd2s\x09Y?&\x09K\xcf" +
	"v\xafk\xf7]\xe1\x92\xe2\xdc\xbd\xae\xbdL\xfc\x0f\xd2" +
	"{\x11\xce\x07\xe9\xd5\x11\xb7\xf4\xackt\xc8<\xc1y" +
	"y\xe2\x1av\xe9F.Sb\x0cr=|\x0e\x94g" +
	"\x9a\x02\xa3\xd9\xbcn\x8c\x90\xb84\xc1\x10\xa8\xdaz\x91" +
	"elV\"\x92\x97\xbdHGyx\x11D|1\xc9" +
	"\xc2\xfe\x94\xd4\xce'7\xdd\x98P`\xb9,\xa0\xb8\x02" +
	"%;\x9f2\x0d>\xfb\x85\x88\x12\x0c\xa9\x04\xc2V\xb6" +
	"\x04\x91\xea\xa9\xc3S\xdaF\xc3\xff\xfa\xc7\xf8\x10\x91\x89" +
	"<\xeb_\"\xeaI\xf8\xe8\xf6r-qt\xbbqP" +
	"1\xba=\xbfn\xdbb\x05|W\xb3\xfbi^q\xa3" +
	"\xe3\xd7\x1dT\xc0[,T\x9bY\xd2=\xbavR\xbd" +
	"\x80\xf7%\xdez./+()\xbd`\xaf-u3" +
	"n\xa0>C\xc5\x9d\xa8\xdcy\xaa\xce\x0b\xdd\xee\xc7l" +
	"\xbd\x89d\xe9\x95\xbe\x07\xbd6\xaa_\x17\xf2\x9f\xd8\xc9" +
	"<\xe8\xd8\xd1v\x9d\x9bYD?[\xbc\xfb\xd3\x9b\x09" +
	"I\xe7TH\x97\xa4\xfb\x17q\"\xcb\xab\x90\xb6\xa5\x89" +
	"l\xc7{\x84\xa4GUH\xef\xf7-\xa2\xe8\x0dC\x84" +
	"\xa4\xf7\xa9\x90\xbeE\x81jN/\x97\x98UFKu" +
	"-3F\xfc\xd5\x90\x80Js^\x9bs\xfa\xf0p\xa5" +
	"\xac\x9b\x8a\xc1\x97\\\xeeV\xb2365\"9j\xf9" +
	"b\x06_|u\x9b\x84\x1by\xd5\x03_\x14\x9aq\xa6" +
	"m>n\xfc\xfcU\x18\xaa\xba\xc1\x1a\x12\xd6\x8b\xde\xb8" +
	"\x01\x88.\x1e\xaa\x0f[\x00D\xdb\xb0{\x96\xab\x90\xee" +
	"T\xa0\x9a\x97\xaf\x84\x88_-\x81`\x04\x87K\x81\xda" +
	"\xacl\xf7P\xe0r\xc9u\x9b\x08\x01\x95(S\xd5j" +
	"U\x0aZ\x84\xbel\xbc\xa7\xc1\x0a\x14\xf3^\xdc\xf5\xb3" +
	"\xa5\xd7\xe1\xbe\xb8\x1bp\xb1\xd9\xa3B\xfa\xa0\x02\xe0\xbc" +
	"\xb7\x03k\x08I\xefW!}+\xbe7\x10\xef\xed\xd0" +
	"|B\xd2\x07UH\x1fv&\xf4\x00!\xd1\xdb\x10\xde" +
	"\xa2B\xfaNe\xe2\x15)K\xad!Z\xd4s\xd2\x94" +
	"\x126\xf2\xcb\xfd\xbf\xcd\x8eq/k\\\xd6V\xcdZ" +
	"]\x1f\x97Y\xd3(|\xb4F\x0a\x1f\xe9e\xb3d1" +
	"\x83\xd5\xccj\xa6a\xda\xcc*\xd51\xde\xe1J}\x87" +
	";A\xeft+@um\xeb\xe6\xf2\xbb?o\xff\x1e" +
	"\x89n\xdaV}=\xf6\xbe6g\xea\xc1gHt\xd3" +
	"\x95\xd5\xcc\xe1\xeb\xe9\xb3O\xfe\xf4\x05\x12]\x7fc5" +
	"\x7f\xe4\xc3\xd2\xdc\xc3\xff\xf2'$\xba~eU\x09\x1f" +
	"\xfb\x8b\xcb^\x0c~L\xa2\xe9\x9b\xab\xaf\xfeA\xf5/" +
	"\x9eym\xeb~^\xe2e\x9fF\xd3\x0fU\xe7\xac~" +
	"\xee\xf4\xed}O\xfe\x8cD\xd7?\xe4\xe7\xe9F7=" +
	"T\xdd\xb4\xe4\xeb}\xb3o\xe8}\x88D\xb7\xac\xf4s" +
	"+\xa3\x9b6W{\x9e\xd9}2\xb1o\xff\x1b$\xba" +
	"i\xa0\x9a\xa4za\xecZFI\xc4\xce3+\x911" +
	"w\xe9\xc6H\xd5\x1d\xed\x81\xac\x00\xc4\x19\xd1\xa4\xfe3" +
	" dow\xc5F\xdd\xb4\xea\x8e-p\x07\x17\x8fU" +
	"U\xfb\x92\xacH\x8d\\=vu\xa1Z\xbcwP/" +
	"\x14\xe8\x08\xab\xba\xd15\xb4\x91\xab\x19\xba\x93elj" +
	"\x13`\x13\xcfFh\xa6\xa2\x95:.\xe6\xc5g\xc3\xad" +
	"^b\xc0m\xdc\x13qX\xc1%_\x91\x12\x03\xeeQ" +
	">%$s\x04\xf9QEJ\x0cxDA\xab\xe7(" +
	"\xf2'\x14\xc9Q\xf3\xb8\xc2\xa3@\xc8O*Rb\xc0" +
	"\x09\xe55B2\xa7\x90\xbf\xa2\xf8\x89\x01\x1d/+\xf3" +
	"\xd1Z9\x8d\x05\xef+Rf\xc0\xbb\x0a\xea \xef " +
	"\xffH\x912\x03\xce\xf2\x06}\x8c< '\xed\x81\xba" +
	"\x9b\x90\x01U\x85\xcc\x149g\xaf\x19q\xa6\x09yL" +
	"\xce\xd9\x8b\xaa\xa8\x9a\xccD\xbe@\xce\xd9\x9b\xa7\xde\x8e" +
	"V!\xf2VUJ\x0cX\xca\xe5\xfd\x9cF\x1e\xf5\xe2" +
	"9\x8d\xdf\xad\xc9Q\xe4Q/B\xb4^\xce\xfd\x9cC" +
	"\x1e\xf5\xe29\x87\xf7\xd7\xe4\x10\xf2\xa8\x17\xcf!\xbc\xbf" +
	"&'\x90G\xbdP\xa5S\x87jr\xffx\xd4\x8b\x10" +
	"\xad\xc2\xdbS\x97\xb3G\x88v@\xbd\xb1&7\x8f\x07" +
	"\xbdP\xd5S\x9f\xaa\xc9\xb5\xe31/B\xb4\xbb\xd4\x0f" +
	"kr\xe4x\xcc\x8b\xe7\xc8a\xfb\x1fF~\xcc\xcb\xd9" +
	"#D{\x8c\xf7\xcf1\xe4O\xab<\xa0\xac\xdbz\x96" +
	"\x16\xc0\x1dhuz\x90\xe3\xd5aJ\xaeg,g\xd1" +
	"JA\xcfv\x9bF\xae\x92M\x88UY\x8a\xe9Z\xc3" +
	"4\xcb\x06\xc0\xac\x8c\xe4\x0dV.K\xd3I\x8d\x8d\xa9" +
	"\x97\xb3\xf9\x08\xb5F\xfc\xbc\xa9\xbcS\xb3\xe2T-j" +
	"\x1e`9\xb52\xea\xd7o\x98\xbb\xba\xb2\xd9\x8aZ\xac" +
	"\x14\xf8\x04?(r\x83r\x83\xacXb\x16\xb5\xb9\xef" +
	"\xc8\x95\xde\x9e]M\xb3\xb6i\xc9\x93\x9a\xed\x08*\x15" +
	"\x8b\xad\xd5\x8b\xba\xbd\xda\xb4\xd6\xea;*z\"w-" +
	"jN~\xd2\x84c@\x92\x84id\x0c9\x9bB*" +
	"\x18\xa0\xbaQ\xd3\xb8\x14\x1d\xedRr9n\xf1\xd2\x82" +
	"\xeb\x1a\xf2oo\xb0]XY\x12DIJ\x87\xda\xeb" +
	"\x07\x98\xcd\x14\x03\xaf\xee\xa6%\xee]K\xe9\x86t\xbd" +
	"\xc5\x86-\xc6v3\xf0=\"m\xe7*l\x1f_\xd8" +
	"\xb0\xabx\xdbY\xc1\x9e\xb8\xb4\x9ff\xb7\x93\xb0n\x8c" +
	"|Q{\xe9\xa8\xd4^\xb6\x93\x96L\x8b\xda\xa0\x9b\xc6" +
	"ffS\xbfd\xb4L\xbbq\xd8)YZ\x90\xe7\xb8" +
	"\x1aM[/V\x8a\xab\x14\xa7\x0e\xdd4z\x8b%\x9a" +
	"\xb5\xebFg\x91\x8e\xf63+kB\xc1\x89:\xa8\xb6" +
	"\x9c\x8e'\xaa\x85^C\xb77\xd0B\x05\xd8\xb9\xd7\xd7" +
	"\x8c\xe3<\x97S\xaf\xee\xf6f\xd8\xcb\x03h\xfb\xb5\x06" +
	"T\xc8\\\x15\x90f\xd8+8_\x8e\xbc3 \xcd\xb0" +
	"W\x07\xd6\xd4\xe4\x09p\x05\x82\xe7\x09 O\"\xef\x0f" +
	"\xb8:\x04\x80\x96\xe2\xdc\xcf\x1f\x08:\xc6\xdf\xfa\xc06" +
	"B2\x83\xc8\xb7\xf2\xbc\x82\x80\xf07m\x09\xe0\x97\xbc" +
	"\x15y\x81\xe7\x15\x04\x85\xbfI\xe7q\xf6<r\x9b\xe7" +
	"\x158\xc6\xdf\x0e\x9e\x0fPB\xbe\x87\xe7\x158\xc6\xdf" +
	"X\xe0\xfe\x9a|\x83I \x8c\xbf\x03\x81vB2\xfb" +
	"\x90\xdf\xc2\xf3\x0a\x14\xe1\x0b\xbf\x89\xf3\xfd\xc8o\xe5y" +
	"\x05\xaa\xf0\x85\x1f\xe2\xed\xf7\xf3\x13\xa6\x06\x84/\xfc\x0e" +
	"\xce\x0f#\xbf\x97\xe7\x15\x04\x85/\xfc\x1e\xdeow\"" +
	"?\xc2\xf3\x0aB\xc2\x17~\x1f\x97\xbf\x17\xf9\xc3<\xaf" +
	" ,|\xe1\x0fr\xfe\x00\xf2Gy^A\x93\xc8+" +
	"\xf8!o\xcf\xc3\xc8\x8f\xf1\xbc\x82f\x91W\xf0\x18\x7f" +
	"\xdeG\x91\x1f\xe7y\x05\x93DV\xf4O8\xf7\xf3\x1c" +
	"b\x93EV\xf4\x89\xc0l4j\x91\x9fB>}\x8a" +
	"\xc8*x\x96\xb7\xf3i\xe4\xcf#\x9f1Ud\x15<" +
	"\x17\x98_\x93\x17q\xfey\"\xab\xe0\x85\xc0J\\)" +
	"\x91\xbf\x82|fDd\x15\xbc\x1c\xb8\x94\x90\xcc\xf3\xc8" +
	"_G>\xabEd\x15\xbc\xca\xe5\xfd<\x8a\xd9Q\x91" +
	"U\xf0\x06\xe7\xaf \x7f\x1b\xf9\x05\xd3DV\xc1\x9b\x9c" +
	"\xbf\x8e\xfc\x1d\xe4s4\x91U\xf0k\xce\xfd\xbc\x8b\xb9" +
	"1\x91U\xf0.\x1f?~\xde\xc5\x85\xd3EV\xc1Y" +
	"\xce\xfd\xbc\x8b\xf8\x0c\x91U\xf0\x09\xef\xe7\x8f\x91\x07x" +
	"V\xc1\xf9\"\xab\x00\x82\x9b\x09\x19\x08\xe2\x02\xcd\x93\x0a" +
	"f\x8a\xa4\x82f\xc4\x99&\xe41\x9eT0K$\x15" +
	"D\x83\x03\x84dZ\x90\xcf\xe1I\x05\xb3ER\xc1," +
	"\xce\xfd\xe4\x8d\x05\x17\xc4`\x01O\xde\xc0z.B\xbe" +
	"\x04\xf9\xc291X\x08\xa0-\xe6\xf2\x8b\x90/G~" +
	"\xc9\xdc\x18\\\x02\xa0\xb5q\xde\x8a\xfc\xaa\xa0\x02\x89J" +
	"\x99\xf5\xb5\xafs\xedO\xfeS\xb7=s\xb4Rf<" +
	"\xd8\x89\xeb\x81\xcb\xb2f\x8emp\x187\xbe]8(" +
	"C\xc5\x81\x03\xa8\xb6ELC\xb7ky\x8fY\xb1\xa0" +
	"0v\xedp\xa9\xdc\xa7C]a\x7f\x8e\x19Du/" +
	"\x01\xb9\xaa\x84\xc9\x03\x9b\x13V\x96da\xb98\x9e/" +
	"\xea\x861>x\x1e\xcf\x9b%\xdbh\x10\x1d-\xf5\xe0" +
	"\x05\xe2A\x84\x07\xa2\xa5S`:*c\xe7\xa29\x9d" +
	"\x84\x90\x84\x91_\xeegm\x8b\xf0#V\x83O\xd1H" +
	"^\xd4VS*\x12t\xe7ci|\xd7p\xa9\xecd" +
	"\x85W\x7f\xf1\xbd\xd2\xd5\x93~!\xa2\xf36\x7fr\xb3" +
	"D\x12\xf65\xb4R.\xbb\xfe\xe6k\xb8\xbf9K\x0b" +
	"l0\xc7H\x82\xcb\xb8q\xa2+:\x09Q\xb7\xe7\\" +
	"\xd1\xa1NB\x12\xdb\x93\xacL]\x81\xa6NB\xc2\xc3" +
	"\xc6\xe8\xf8\x08\xf2\xde\x9d\x86n\x17\xe9\xa8\xdc\xfe\xb5\xff" +
	"\x09[\x18\xd9N\x8bN`\xe9\xf8\x8aNB\xf6\xda(" +
	"\xe9u@\xccE~3\xbe\xee\xa3v\xb7-]\xde\x95" +
	"\xee=\x8e\xa7x\xf6\xb2\xb8\xf2\x1a\x12\x91\x1e\xb2\xb3\xd3" +
	"\x7fHC'\x11\xa9\xeeV,\x11\x8b\x9d\xfc~D." +
	"\xc2f\x91\x8bP\xd4\x0doLIo)\x8b\x0ba-" +
	"\x9f\xe9\xf8\x9b\x10\xeb\x04j\xc4\x1di\x09/\xf7\xee]" +
	"S\x8b\x1c\xa1\xaf\x96,s\xb8\xc1U;K\xa6]\x83" +
	"\xb9_m\"7\xfa2\xc7g\x8dk\xeb\"omm" +
	"\x06\x9c{\x03\xa0B\xa6ENk\x9e\xcay\x13\xf2\x98" +
	"\x9c\xd6\x1c\xe5|\x0a\xf2\x99r\x98y:\xe7-\xc8\xe7" +
	"\xc8i\xcd\xb3\x00\xe7^\\\x7f3\x17\xc9i\xcdsy" +
	"\xach&\xf2\x05rZ\xf3<.?\x07\xf9\"9\xad" +
	"y!\xaf\xff\"\xe4K\xe4\xb4\xe6\xc5\xdc/\xec\xc7\xa2" +
	"\\\xebe)\x97\xf7bQ\xaa\xbb\xb3\x82\x80\xba\xdds" +
	"E\xa9\xa6\xb7\xcfA\xcd\xea\xfe\x86\x12\xb3X\xf2\xb6\xa4" +
	"\xf0m\x1b^\xd16\xe9\x87\xbam\x9b\xe7\xe2\xda\xb6\xad" +
	"\xad\xb5\xb5\xd5/\xd9yno\x17\xf7\xb19\xb1\x85\xb2" +
	"\xbb\x1f\xac77h\xae*\xeaqN\xeb\xfc\x0b\x03_" +
	"\xe4_p\xd2\xe7{\x09x[o\xaa\xcc\x8d^\x8c\xf7" +
	"/\xd4\xa9_N\xee=\xb2\xb8\xe7\xb7y\xdd\x1b$\xbf" +
	"\xe53\xfeGA\x15\x06B\x9e\x7fR\xfb<\xf8\x10!" +
	"\x03!\\\x96B\xee\x96\x03\x1cQ!\xb4\x8bZ\x90\xcf" +
	"A\xae:\xae\xf7Y!\xb4\xa3\xe6 _\x84<\xa0\x8a" +
	"\x11\xb20\x84v\xd7\x02\xe4\xad\xc8\x83\x011B\x96\x86" +
	"p\x95\\\x82|\x05\xf2PP\x8c\x90\xcb\xb9\xfcr\xe4" +
	"\x9d\xc8\xc3!1B\xae\x0e\xa1]\xdd\x89|-\xf2\xa6" +
	"\xb0\x18!\xbd!nO\"\xdf\x18r3\x11\xd0\x9e\x0c" +
	"\xa1\xdd\xbe\x11y.\xe4f\"\x10\xd2AC<\xc9\xb1" +
	"\x80\x05\xa3!7\x15\x81\x90\x8e\x8a(\xd8\x87\x05\xb7\x84" +
	"\xdc\\\x04B:n\x12\x05\x87\xb1\xe0\xde\x90\x9b\x8c@" +
	"H\xc7=\xa1IX\xf0\x00\x16<\x1ar\xb3\x11\x08\xd1" +
	"~\xc8\xdb\xfa(\xf2\xe3!7\x1b\x81\x10\xed'\x9c\x1f" +
	"G~*\xe4f#\x10\xa2=\xcb\x9f\xe1\x14\xf2W\x90" +
	"G\x81\xdb\xb8\x1d/\x87Vr\x1f\x00\x16\xbc\x8f\x05\xd3" +
	"Z\x84\x0a\xf6n\xe8\xc7\x84d\xdeG\xfe1r-*" +
	"\x8c\xdc\xdfr\xfe1\xf2@\x18U0\x10F.\x84o" +
	"$d \x8c\xef\x0c\xf1tE\xd8\xb8\xb3\xc2o\xe1W" +
	"\x87\xfc*\xe43Ta\xe3^\x11\xc6j\xaeB\xbe\x11" +
	"\xf9\xf9\x01a\xe3\xae\x0f\xbfFH\xe6:\xe4\xa3\xc8g" +
	"\x06c0\x13m\xee0j\xba\xa3\xc8\x0f#\x9f\x15\x8a" +
	"\xc1,B\xb4\xdb\xc2\xdcw\x82\xfc(\xf2\xd9\xe1\x18~" +
	"\xb7\xda#\xbc\x9eG\x91?\x8f\xfc\x82&\xb1/\xed\xb9" +
	"0\xf6\xcf\xf3\xc8\xdfG>\xa7Y\xecK{7\xcc5" +
	"-\xe4\x81&\xd4\xc0\xa6\x89}i\xd0d\x112\xd0\x84" +
	"C\x14\xf1\x85Z\x0c.\xc4!\xda\xf4\x10Nb\xc8g" +
	"\"\x8f\xc7b\x10\xc7I\xac\x09\xc7y\x0c\xf9E\xc8/" +
	"\x9a\x1e\x83\x8bp\xb2j\xc2!7\x07\xf9\"\xe4\xf3f" +
	"\xc4`\x1e\x0e\xdd&l\xfe\"\xe4\xcb\x91\xcfWb0" +
	"\x9f\x10\xad\xad\x09\x9b\xd3\x8a\xfc*\xe4\x17\x9f\x1f\x83\x8b" +
	"\xb1\xdb\xb09\x99\x15\xc8\x93\xc8\x17\xcc\x14y\x9d]M" +
	"\xef\x11\x92\xe9A>\x88|\xe1\xac\x18,$DK7" +
	"a\xb7\x0d\"\xdf\x8a\xfc\x92\xd91\xb8\x84\x10m\x0b\xe7" +
	"[\x91\x17\x90\x7f\xe5\x82\x18|\x85\x10MoB\x05;" +
	"\x8f\xdcF\xbehN\x0c\x16\x11\xa2\xedh\xc2\xe1c#" +
	"\xdf\x87|\xb1\x1a\x83\xc5\x84h\xd7\xf3\xf6\xecA~\x10" +
	"\xf9\xa5sc8\xfdj\x07\x9a\xf0\x13\xbe\x05\xf9\x9d\xc8" +
	"\x7fo4\x06\xbfG\x88vG\x13v\xff\x9d\xc8\x8f " +
	"_\x12\x8f\xc1\x12B\xb4\xfb\x9a>\xc5a\x8e\xfcQ\xe4" +
	"K/\x8a\xc1R4\x10\x9apr~\x18\xf91\xe4\xcb" +
	"\xe6\xc5`\x19\x1a\x08M\xa80\x1fE\xfe\x04\xf2\xcb\xe6" +
	"\xc7\xe02B\xb4\xc7\x9bpQx\x14\xf9q\xe4\xad\x17" +
	"\xc7\xa0\x15?\x0b.\x7f\x0c\xf9\xd3\xc8\xdb\x16\xc4\xa0\x0d" +
	"@{\xb2\x09\x17\x8b'\x90\x9fD\xde\xbe0\x06\xedh" +
	"Pp~\x1c\xf9)\xe4\x1d\x97\xc4\xa0\x03\x0d\x0a\xce\x9f" +
	"F\xfe<\xf2\xe5_\x89\xc1r4(8?\x89\xfc%" +
	"\xe4\x97/\x8a\xc1\xe5hPp~\x0a\xf9+\xc8\xbf:" +
	"\x16\x83\xaf\xa2A\xd1\x84\xc3\xff\x15\xe4o7\xd5M\xbe" +
	"\xb2\xcf\xd9\x1c\x1d+\x80\xb3\x93\xcb\x8e\xe4w\xd11\xd4" +
	"*!D\xa0\x9ac\xc3\xb4R\xb0\x07\x14\x9a\xd3\xb9\xc4" +
	"\xfa2\xe3\x19\x9fq\xdd\xcf\xf8t\xb6\x83\xac\xd4\xcd\x82" +
	"b\x8e\xe8YZ\xe8[\xad\x8f\x8a\xe0\x92\x94\xd7\xa1\xdb" +
	":-|\x03\\\xc7\x8bWR\xa8\x8cV\xac\xb1\xben" +
	"\x12\xf1\xd3\x04\x84\xe9\xdem\x99\xa5$\xe8\xc2\xa3\xe9_" +
	"P\xb6\xe9\x08\xeb\xb2S@G\x9dx]\xc3\xb2$\xbf" +
	"P\x95\xfc6E\xdd\xd0\x8b\x95b\x1f8\xbbS\xacx" +
	"\xdd\xe6\x14Q>\xa8:\x8e\x8e\x8a\xc5V\x9bVW\xb9" +
	"\xac\x17u\xee@\x90<2f\xc9\xfe\xd2\xb2\x8e\xb7\xe2" +
	"K\xc9\xba;gT\xa1\xe8u\x0d\x99;\x99p\x8f\xad" +
	"\xd4\xcd\"\xadq\x9b\xb9\xb2 dW\xb6N\\\xd6\xdf" +
	"7q\xd9\x80\xa9\x9a~\x02N\x8e\xedd\x05\xb3T\x0c" +
	"0\xc3\xee\xcafY\x819\xb5\x8f\xf5\xe9\xb6e\x8e0" +
	"#c[\xac\\&\x10&\x0a\x84\x0989_\xa6\x01" +
	"\xc2\xb7\x952\x139}Xg\x96\xacQR\xe7a\xc1" +
	"f\x03\x8c\x16\x0af\"[\xdb\xf7C\xb4\xcc\x06Y\xb1" +
	"\x04N\x07y\xf1@\x148\x0f;\xdc\x1a\xa1F\x8a\xea" +
	"\x8aa3\x83\x1aY6\xc0\xca%\xdd\x12\x19N\x0d\x85" +
	"\xaf\xb1L\xd8e\xe7\xb9\x9c\xbb\x0f\xa9N\x8e\x0f\x97\x14" +
	"\x1dU\x06L\xd3\xees\x87\x85\x93\xecZ'\xeb\x8c\xe0" +
	"u\x80u\xe3\xcb\x08\xd3r\xb9^\xc8s\x97\xae\x1b\x1d" +
	"\x1baF\xb7\xe9\xec\x10kx_sH\xd1\x0b\xab-" +
	"\xb3\x98\xb1M\x8b\x8e\xb89\xb9u\xb2\xd4\x19\x02P1" +
	"r<|@\xbc\xbe\x01\xaf:~\xfd:\x12\xc1\xf2q" +
	"\xa5\xb4X*4\x0aaSk\x84\xd9}\x19p\xca\x93" +
	"\x91F\xc5\x1d\x04Z\xe5\x91\xdc\xb7\xbedS\xd8.B" +
	"\x0d\x92\xf7\xd14\xed\xa4^\xb6\xc1\xd2\x87*\xd8\xd5q" +
	".\xe0\xcf\x10\x05j\xd8If\x90\x08\xcf\x96s\xc7\x0e" +
	"^v\x8de\xee\"q;\xbf\x96\x8e\x8c\xfb\x14\x15\xff" +
	"\x93\x19\xe0\xa2\x11s\x97\xd4F\xe7\x9d\x0c\x80\x9b(\x14" +
	"\x96\x9f\x00+\xefg\x06\x03\xdb\x19\xe8~\x1e\xa0S\xba" +
	"\xda\xb4\x8a$!f$\x7f\x0e\xc1yrX\xcf\x02\xde" +
	"q-3FT\xd9\xdf\xcd'\x98a\x9b\xc4\x99\xd5]" +
	"\xb1\xbd\x07\xe1i\xde\xba1\xa2\x0c\xfa-\xeea\xd4\xce" +
	"\xc4\xf9\xd7\xe2\xbb\x88E\xd8(\x09\xac@\xc7\x92t\x0c" +
	"\xbfg\xb7\x8e\x9ceVF\xf2v\xaf\xc2]\x99\xeb\x0c" +
	"'^i\x8f\xd5\xb5\xb0&T\xcd\xf3\x83k\xf7\xafs" +
	"T\x1b\xdd\xae\xdd\xd7M\xa0f\x17w\xcb\x99\xda]\xdc" +
	"\xa7O\xdfQ\xb7g\xfb\xd4\x99\xba\xdd\xe3\xc7\xf7\xd4\xed" +
	"\x1e\xbf\xd7\xeets\xccu\x9eQ\x9d\xc1\x8eZ\x9b`" +
	"tx\xd5h\xa9A\xac6\xf0E\x1b\xcc@\xec\xc8\xf3" +
	"v\x01\x9fkG\xde\x95\x0d\xb6gK\x91\xfe\xba$\xc3" +
	"\x09\xb7\x18O\x1cVu\xcd '\x19\xc8;\x10&\x0a" +
	"\xf7\xbb)W\xbd ,\xa3r\x99\xe7\\J\x89\x00o" +
	"91\xff\x9ax\xf2\xa7N\x98\xf8\x88\x1fO\xbe\xeff" +
	"B\xd2GTH\x1f\x95\xe2\xc9\x8f\xdcOH\xfa\xa8\x0a" +
	"\xe9'\xa4%\\\xc9\x0d\x9a\xbdN\xac\xd6\xbb\xa5\x9fA" +
	"\xe15\xcf\xc9\xa0\x90/K9\xe1\\~e\xc2y\xaa" +
	"\x09\xaft\x03\xc2\xe0\xe5\x98\x8d\x0f\x0cCM#\xcei" +
	"\xc2m\x12KE\xb1d\x1aL5l)\xf3\x0b \xba" +
	"je\xa3\xcc\xaf\x1b\xfd$//a\"\xbd\x9b\x90t" +
	"\xbf\x0a\xe9\xeb\x14\xd8\xcb\xe7\xfa\xde\x1c\x04\x89\x02\xc1\xaa" +
	"\xfb\x8f\x10R\x1d\xc3\xbb\xf53\x0bpV\xa7#R\xfc" +
	"\x80\x97$\xad1\x92\x10\xfb\xa9\xcf\x9d\x04\xd1\x97\xd2\x8d" +
	"\xaeR\xa9\xa0g\xfd\xfd\xee\xf1F\xa9k\xf3\x1b=\xc0" +
	"|9u\xadi\xfc6\xfdp\xd1\x0f\x14\x85\x8b\xbe\xe1" +
	"^\xcd\xe1\x14\xd1k$I\x98\x8e\x95\xbdIb\xc2C" +
	"\x04\x1aG\x807z\xe6\xf1&\x05\xad\xa4\xad\x0a\xaa\xe3" +
	"r\x04XWP\xad/!\xdf#G\x80\xc7\x14T\x1f" +
	"\xf7 ?(E\x80;\x0e(\xdc\\\xbc\x15\x0b\xee\x96" +
	"B\xc0\x1dw\x89\x02?\x96\xeczQ\x1eQ^D\x85" +
	"\x19\xf9q9\x04\xfc\x13\x9e\xbd~\x1c\xf9)9\x04\xfc" +
	",\xcf\x82?\x89\xfc%E\xf2\xa2\xbc\xa0\xa0m\xfe\x12" +
	"\xf2\xd3\x8a\xe4Ey\x83g\xd3\xbf\x8e\xfc\x1dE\x8a\x01" +
	"\xff\x9a?\x81\x1fbvc\xc0g\xb9\xfc\x19\xe4\x9f)" +
	"R\x0c\xf8\x13\xec!?\xc4\xec\x86\x80\x9bU\xec\xb8\x16" +
	"\xe4s\xe4\x10\xf0,u\xb3\x1cbn\x8b\x1cW\x85}" +
	"<\x8f_\xb0\x08\x0b\x96cA\xcb\x93*7\x90;\xda" +
	"\xd4\xa7@>\xd9\xa6-\xfa\x94*L\xe4\x94\xfa\x1e\xc8" +
	"\xf1\xe1\xb6i\xff[\xe5\x81\xe0\x8e\xa2\xba\x19\xe4Hp" +
	"\x9b\xf6\xb4\xca\xad\xe4\x8e\x03\xea\x1a\x90\xcfQi\x8b\x9d" +
	"P\xb9\x9d\xdcq\x8f:\x00rt\xb7m\xfa3\xaa0" +
	"\x95\x1fS\xf1e?\x81\x05'yx\x97\x1afil" +
	"\x80)\xc3\x05\xc6w\x9e\xb8\x89C5\xfb\xe0-6\xcc" +
	",fd\x15\xd4\x95$\xbd\xd5\x88\x0c\xd4\xac\xa8\x8e\x18" +
	"\xb0\xb5\x8c\x0ewY,A{\x8d\x1c\x1b\x95\xd4\x07\x9d" +
	"ko\xaa\xa4\xbe\xc9\x07H\xb4\xd5$\xd3\x9d[\xb6]" +
	"\x96u\x14{E\xd2\xe0P\xaf5\xc1\xae\x97\xe9\x027" +
	"\x17\x0d\xfa\x1a4\xbc\x8bg*\xca\xf6\x84Y\xa46\xed" +
	"VD\xe0\x19\xf5\xce\xaeB)/\x05+\xbdm\x0d\x09" +
	"\xd3X\xe9\x9d\x0b#\x82\xda\\\xfb\x04\xb7\xed\x09c\x80" +
	"\xe5*\xa3\xf5\x16N\x1fI\x88\\\x91qW*\xf5O" +
	"\x1dfRH\xf7\\R~l\xd76-\xbbb\x96u" +
	"\xa2J\xb1x\x9a\xdbV)\xdb\x03\xa6b\xda\\%\\" +
	"mZ|\x97\x8f\x156Ke/\xfe\xc1FK\xcc\xd2" +
	"\x8b,d\xd8\xb4\xb0\xca\xc0>\xeb\xcf3\xc3,\x98#" +
	"c\xd7Rcd\x951\xc2\x0a\x92\xba\x83o\xc94\xca" +
	"R\x92_\xc3\x1aD\xda\xb1\x9dge\xbd<Q5\x11" +
	"\xacg\\5\x01\xbf\x9a\x1e\xb3b\x15\xc6V\xef\xec^" +
	")W\xa8\xea\xe5s]4\xe8\xb6p\xad\xd0JPW" +
	"\xe1+Z\xc3k\x92z\x19/\xe2\x99B\xa8\x09:\xf6" +
	"\xd7\xa0\x991u(\xf8\xd7\xf0\xaa70\xc52\xbc\xfd" +
	"W\\]\x8bX\xab\xf5\xd1q\xfb\x17\x82_\x94n\\" +
	"^&\x92\x8b\xe3\x1b\xe89\x8f\xa1\x896<\x87f\x8c" +
	"Q\xcb]*&8}\xe6\xdc)c\x83uI\x8c\xdb" +
	"\x08IoU!]\xf05+}\xbe\x94\xd8\xe8\xf8S" +
	"\xa3\xc5\xf9Rb\xa3\xe3L\x8d\xee@\x1d\xac\xa0Bz" +
	"T\x81\xea\xb0H1_K\"t\x8cy\x8d\x0c\x97\xf2" +
	"&\xb4\xf89\xf0B\x11\x0b\x0f\x9b\x05h\xf1\x93\xe1\x9d" +
	"\xbd\"\xcc\xd8\xdd\x95\xb5\xa1\xc5O\x8c?\x97\xde\x86\xcb" +
	"\xb6{\xdcK\xe3TsKZ\x9a\xdd\xa7K\xadl\xa4" +
	"p\x0c\xf8\x0a\xc7D\xf6\xd4^c\x90[L\xbe\x99-" +
	"~\xd7\x1aP\x13\xbd\x04?\x01\xbf\xae\x8d\xed_\xfa\xe8" +
	"\x9f5\xbeN\x11\xb7Y\xb1\xf4\x0d\xafe\xfcW\xfb\xf2" +
	"\x9aL\x97o\xb4/om\xe4r\x1f\x9f\xef\xea\x7f\x9a" +
	"5*F\xa3\xc3g\xf8\xf9i\xa0B&'Gi(" +
	"\xbc8\xc1\xe137Np\xf8\xcc\xcd\x13\x1c>\xb3\xb9" +
	"&\xcd\xdd\xd5/\x0e\xc1\xb6\x9a4wW\xbf\xb8\x83s" +
	"?\xcd\xdd\xd5/\xee\xe1\x87\xd5\xf8i\xee\xae~\xf1 " +
	"\xbcFH\xe6(\xf2'\xe4(\xcd\xe3\xbc\xfd^:\xbb" +
	"\xa7_<\xcb\xf9\xf3\xc8_\x97\x0f\x9fy\x95\xb7\xd3\xdf" +
	"\xe4\xe8\x9e\xac\xf0&o\xcfi\xe4\xef\x83\x02\x11c\x90" +
	"V\xeaM\xd9\x8c\"\xf2\xa4\xfc^\x97\xb2R\xc6;I" +
	"\xdc\x92\x1d\x15j\xd9\xbb\x07(\xec\x1a\x9fX\x94\x13\xa4" +
	"\x8b\xa8\xbaU\x0f\xaf%\x91\x9a\xd4&\x07\xf7\x90H\xa5" +
	"X)\x8f3\x89\x154i\xddt\x9e.]v\xca5" +
	"\x92HW\xa8\xa5\xda\xbb\xcf-t-\xf57\xb9M$" +
	"\xd3S)V\xa0\\\xb3[\x07Wj\xa2\xe6\xcc\x1a\x98" +
	"2\xf52\x89\xd8^\x82\x92\xd8e\xdd\xf8 (\xe7\x9c" +
	"\xa6\xba\xd9A\xce\xe7\xd9\\\x93\xb7\xe3\x9dr\x18\x18\x92" +
	"\xf3v\x1c\xe3M[\x15\x18\xa8I\xdbq\xec7-\xc5" +
	"\xd3g\xfa\x91_\x17\xf0S\x82\xb5M\x01\x0b?\x16\xe4" +
	"9/\x9d\x07?\x16\xce\xfd\xb4\x9d\x90\xb3\x97C\xe7\xe9" +
	"\x18~\xdaN\xd8\xd9\xcb\xb1\x83s?m\x87\xa7\xf3\xe0" +
	"G\xc4\xf9(\xf2\xfd^:\x0f!\xda\x0d\x01TN\x0f" +
	"\"?\xcc\xd3y\x141\x98o\xe3\x9c\xa7\xdb<\xcd\xd3" +
	"yT1\x98\x9f\xe4\xed\xe7\xe9-gx:O@(" +
	"\xcb\x1f\xf0v\xbe\x8f\xbc)\x88\xdarPh\xcbA~" +
	"\xc8F\x93\x97\xbfq^Hh\xcb\xf3\x82\x0f\xb9\x87o" +
	"\xf0C6\"a\xa1,_\x1dD%\xbd\x13\xf9u\xc8" +
	"[\x9aD0i\x13?\xec\x82\x1f\x9a1\x8a<\xda," +
	"\x12&+A\xcb=\x04\x83\x1fj1m\x92H\x98<" +
	"\x14\xbc\xdf=\xd4\xe2a\xe4\xdad\x11Kz\x90\x1fR" +
	"q\x14\xf9)~JH\x93\x88%=\xcb\xef{\x0a\xf9" +
	"+\xfc\x90\x90f\xa1!\xbf\xcc\xdb\xf9\x0a\xf2\xb7\xf9!" +
	"!\x93D0\xe9\xcd\xe0\x87hL \xff\x88\x1f\x122" +
	"Y\x04\x93\xcer\xfe1\xf2@H\x81\xe8\xcc)\"\x98" +
	"\x04!\xec\xcf\xa6\x90\x0a\x99\x18\xf2YSE0)\x1a" +
	"\xda]\x13x\x9c}\x9e\x08&\xcd\xe2A5?\xf0x" +
	"AD\x04\x93\x16\xf2X\xd8\"\xe4\xcb\x91\xcfi\x11\xc1" +
	"\xa4\xb6\xd0\xed5\x01\xc6\xb9 \xd2y\xea\x03\x8c\x17N" +
	"\x11\xd1\xa4^\x1e\xd8\xe4\x01\xc6<\xf2\xf8T\x11Mb" +
	"\xa1\x17\xdd8\xe2A\xe4\x17\x9d'\xa2I\x07x0\xef" +
	" \xf2#\xc8\xe7EE>\xcf}<\xb0y/\xf2\x87" +
	"\x91\xcf\x9f&\xf2y\x1e\x0cm\xae\x09\"^\xac\x89h" +
	"\xd2\x0fy\x80\xf4(\xf2'\x90/\x88\x89h\xd2\xe3\x9c" +
	"\x1fC\xfe4\xf2\x85\xd3E4\xe9I\xce\xfd\xe0\xe2%" +
	" \xa2I\xcf\xf2\xfaO\"\x7f)\xa4H\xe7\xac\xa9\xbd" +
	"~8#\xc7\xcaYK/9;\x1b\\ZB\xe5\xde" +
	"\xd0)\x91\xd4\xb6\xa2c\xc8\x80c\xc9\xd4\xfa\x06\x1d\xd5" +
	"\xbc\x87\xc4y\x80A2\x14\xf8\xf9I}$\xce\xcf|" +
	"\xf0c\x18\xf6\xe5\xad\xd8 \x12\xc1&\xf9\xce>\xac\x83" +
	"\xe9#$\x92\xb7\xfb\xdb\x1a\xe3\xf6\x1a\x9c)\xb1\xac\x82" +
	"\xd3_\x8a\x8e\x0e4tj\xba\x9et\x85o}\xe5\xe7" +
	"L\x19\xba1\xd2m\x86\x99\xef;n\xe4\x0e\xcf0\x03" +
	"X9\xcb\xd0\x9e\xe2\x0f\xdbX\x16\xd7\x98$\x1d+\x90" +
	"8\xdfh2\xae*'\xee\x01\xee\xfa\xa4Z\xac^&" +
	"G\xc7\x0ax1\xe4\x07\xd8\x8e\x8an\xb1H\xb1\x81\x0f" +
	"\xdc\xf1vf\x80;H\x07\xf3VB\xe4\xeb\x8e\xf3\x95" +
	"\xbb\xeeX\xc7\xa8\xa4\x844t\xa7\x7f#\xbb\x9a\xc4\x85" +
	"\x9f\xb4Q\xf1 +\x82\xab\xc7\x843\x95b\xbd\xd0N" +
	"&\x14xE\x0c\x07\xd1\xf0\xa2\xd8\xef^'\x9ag\xd4" +
	"\xceT\x8a\xbd\xe0\xba*\x13F\xc6\xa6\x96?L\xc6\x09" +
	"D\x8cU\x92}\xe7\x06\x09\xbe\xc8W<\xc4Ft|" +
	"mJY\xb7\xf5\x9d\xac?O\xcb\x0d\xe5\x98\x91\xcb\xe0" +
	"\xba\xad\xd4J\xd9VX\x96\x1a\xb6\xcc\xb2\xddC-q" +
	"b\x86\x94\xac\xcb\x0b\x92,\x0f\xd4\x12%\x92\xeeP0" +
	"w\xf1F\x82h\xe5\xaa\xd1D\xc9,\xcb\xf9\xbf\x96c" +
	"\x9a\x83i\x8d\xf1\xc0\x90\xb4L\xd7m\xda1\xc7j6" +
	"\xed8~\xbb\xb2\xb2\xda\xb4\xfa-\xbdH\xad1\xee\x1e" +
	"\x94v\x82y\xe7W;\xdeH\xf9\x92\x0c\xcb\x9aF\xce" +
	"\xb9\x08r_|\x11\xac6-\xbeiC5F&\x96" +
	"f\xd4*\x8c\x0d\xb0aplD79n\x11O\x80" +
	"b\xc3\x1c\x13u\xb4T\xb7m\x0f{)I\"l\xe7" +
	"\xb5\xab\xe4\x18a#\\\xa4\xa3\x8d\xf0.\xdd\xb0\x99\xd5" +
	"m\x11\xd5,\x8d3\x1b\xc7\xed}s\xb7\xf4\xfa;z" +
	"Q{Y\xe0\xd9\x0d\x1f\xa0=\xf6\x8e\x0a\xe9\x8f$\xbb" +
	"\xe1,\x1a\x13\xef\xab\x90\xfeX\xb2\x1b~\x8bF\xda\x19" +
	"\x15\xd2\x9fI\xbb\xcf>AK\xf3#\x15\x06$\xfd;" +
	"\xfa9J~\x8c\x0b\x9d\xac}\x03\xa05\xf2\x19\xea\x01" +
	"\xb2\xf2\x1d\x84\x1f\xd5\xa4f\xb9\xcaw\x94+\xdf~\xaa" +
	"\x95\xab|\xcf\xe5J\xbf\x97:\x15\xb6\xfc}mq\x8b" +
	"\xe6|\xeb%\xc1\x7fy&U\xc4\x96\xce\x84M\xe0\x0f" +
	"_t\xaf\xf8\xd9*mB0\x0a\xba=l\x027\xb6" +
	"\x86-\x1a\xcf\xd6\x1d<'\xca\x15\xb7\x9c\x17\xb7/\x97" +
	"NR4\xdb\xb3\xa6\x91e\xe0z\x99\xbe(k\x09_" +
	"\x96\xeb\xa3\x08\xdb\xf9\xc1/\xe32nod\xde]\xe9" +
	"\xdb\xa5\xe1\x92\xbf\xc8\xc4K\xd4\x92:\x87\xffj=\xb7" +
	"?;\xa3\xbb{$\xea\xbd\xc5=\x9e\xf6\xfb.\x0c\xd4" +
	"\x1c\xbc\xe2j\xbfg\xf1mg\xdeG\xfe18\xda/" +
	"\x80\xf6[~^\xa8\x7f\xee\x8a\x9b\xcc\x0e\xdc\x05\xeb\x9d" +
	"\xbb\xe2%\xb3O\xe5\xdb\x85\xfc\x03V\xdcd\xf6\xb9\x9c" +
	"\xfb\x07\xa9\xb8\xc9\xecK\xf9\x01+K\x90\xafP$\xed" +
	"\xf7r^\xbf\x7f\x90J\x93\"FS\x17\xdf\xa6\x94D" +
	"\xde\xaf8;\x9c\x9b\x09\xe9H)\x0a\x10\x92\x19\xc4\x82" +
	"\xad\xdcW\xac\x0a\xf5w\x0b\xf7-\xfb\xde\xf1\xc9\x01\xa1" +
	"\xfe\xea|\xdfT\x01\xf9(\xf7\x15\x87\x85-WQ\xf0" +
	"\x81G\x91\xef\xe7'\xbb4\x09\xf5\xf7\x06\xfe\x00\x07\x91" +
	"\x1f\xe6'\xbb\x80\xc8f\xbf\x8d\xfb\x9c}\xa7y\x04D" +
	"6\xfb]\x9c\xdf\x89\xfc\x08?\xd9E\x11\xea\xef}\xfc" +
	"\x04\x9a{\x91?\x8c<*\x1c\xc5\xda\x83\xca\x87\xf2\xbe" +
	",\\\xdb,;\xc97\x89\x8d?\x7fx/3r\xc9" +
	"\x86'\x13\xf33\xa4\xcc\x11f\x80\xeb\x13S\xd7\xf1\xc3" +
	"6\x82|\xdaqv\x1f\x0f\x83\x9e\xd5m\x94H\xa0\x88" +
	",\xc1\x8a\xcc\x1a\xe1.\xe1\xd5\x05\xd3\xccq\x0d\xc4\xb0" +
	"-\xb3\xa06\x96r\xf7p4\x92\xe2\x0b\xd07\xf4\x02" +
	"\x09\x17d\\)3\xbe\xef\x0e\xdc\xe3\x86\x13#\xb5g" +
	"\x82\xd0\x8am\"\x07\xf7\x1c\xe2\x88\x13\xd6\xf3\xfe{\x17" +
	"\xe7a+e\xd6\x97\xd2\x8d\x94Z\xb3\x0f\xb4\xac\x1b#" +
	")f\xe7\xcd\x9c\xef\x014R:\x0f\xbb*X\xce\x0f" +
	"C\x11\x1a\x16\x19\x7f\x90'\x97\xed*\x95\x0a\xe0\xc6\x85" +
	"\xbcC5\xbd\xffJ\xc1\xbf?_\xae\xc0]\xaf\xd4\\" +
	"y\xfcs*\xd2\x06\xc3AK\x1f\x19Q\x99\xe57\xac" +
	"R\x1cb\xd6\xbaa\x92XK\xc7\x98\xc5\xe3A\xc1p" +
	"\x8c\xaf\xb2c\xcc\x1a\xcc\xeb$\x91\xddnx\x0b~\xed" +
	"\x99^8H\xfa7\xf4\x92\x08w\xc7\xbb\xa1\xa4m\x95" +
	"\x82N\x8d$U\xc6\xbc\xfd\x8d\xa2k\xe2\xbco\\\xb9" +
	"\xff\x17\x00\x00\xff\xff\xb0\x1f\x15\xb2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_eef9ddc7a345de6d,
		Nodes: []uint64{
			0x80d5a7b782142e87,
			0x81b8ffeeb01d76f7,
			0x8491dc2c2f94f1d1,
			0x8890f17a143c6896,
			0x8ac5cfb21988c168,
			0x95cdc661a6600137,
			0x990bdcf2be83b604,
			0xa363d226e178debd,
			0xa74f5574681f9d55,
			0xaec9e089e87f1599,
			0xb3e73f8c19afd787,
			0xb42137d4b8ba3ef6,
			0xb492838c7fed50b0,
			0xb599bbd2f1465f9c,
			0xb87956e2953771db,
			0xba0c11cf818d29fd,
			0xc0ff4a277ca4be0a,
			0xc1092d6c4c110e29,
			0xc281c6e5be483337,
			0xc5cb65e585742338,
			0xc5f724bd00c2f628,
			0xc75b5ef2e9b05c2d,
			0xc8aeb5222ac5ef40,
			0xcb20e21466098705,
			0xcdff1b0306ea58cf,
			0xce5b0091fd9acb21,
			0xcf0f425c8bd69fa2,
			0xd11f8d1479e2f010,
			0xd2d587c796186e8b,
			0xd90939a58e404ff8,
			0xd9ed2c1c754d683e,
			0xdbfe301c0ddefe4e,
			0xde7576c640b5ad18,
			0xe4d6d0d9ae1553da,
			0xe68d439455fd9cce,
			0xe82d760b257daddb,
			0xea9236083718fdc2,
			0xee0b04cc3f52f33c,
			0xf0c41d021228d929,
			0xf206f12e39ab7f9b,
			0xf246442c7aee0af5,
			0xf95db11410e33efc,
			0xffac0fa5c7156a5d,
		},
		Compressed: true,
	})
}
