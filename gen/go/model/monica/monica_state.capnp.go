// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	math "math"
	strconv "strconv"
)

type MaybeBool capnp.Struct

// MaybeBool_TypeID is the unique identifier for the type MaybeBool.
const MaybeBool_TypeID = 0xd8af9210839bc071

func NewMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool(st), err
}

func NewRootMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool(st), err
}

func ReadRootMaybeBool(msg *capnp.Message) (MaybeBool, error) {
	root, err := msg.Root()
	return MaybeBool(root.Struct()), err
}

func (s MaybeBool) String() string {
	str, _ := text.Marshal(0xd8af9210839bc071, capnp.Struct(s))
	return str
}

func (s MaybeBool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MaybeBool) DecodeFromPtr(p capnp.Ptr) MaybeBool {
	return MaybeBool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MaybeBool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MaybeBool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MaybeBool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MaybeBool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MaybeBool) Value() bool {
	return capnp.Struct(s).Bit(0)
}

func (s MaybeBool) SetValue(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// MaybeBool_List is a list of MaybeBool.
type MaybeBool_List = capnp.StructList[MaybeBool]

// NewMaybeBool creates a new list of MaybeBool.
func NewMaybeBool_List(s *capnp.Segment, sz int32) (MaybeBool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MaybeBool](l), err
}

// MaybeBool_Future is a wrapper for a MaybeBool promised by a client call.
type MaybeBool_Future struct{ *capnp.Future }

func (f MaybeBool_Future) Struct() (MaybeBool, error) {
	p, err := f.Future.Ptr()
	return MaybeBool(p.Struct()), err
}

type RuntimeState capnp.Struct

// RuntimeState_TypeID is the unique identifier for the type RuntimeState.
const RuntimeState_TypeID = 0xd599d06dc405571a

func NewRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState(st), err
}

func NewRootRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState(st), err
}

func ReadRootRuntimeState(msg *capnp.Message) (RuntimeState, error) {
	root, err := msg.Root()
	return RuntimeState(root.Struct()), err
}

func (s RuntimeState) String() string {
	str, _ := text.Marshal(0xd599d06dc405571a, capnp.Struct(s))
	return str
}

func (s RuntimeState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RuntimeState) DecodeFromPtr(p capnp.Ptr) RuntimeState {
	return RuntimeState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RuntimeState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RuntimeState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RuntimeState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RuntimeState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RuntimeState) ModelState() (MonicaModelState, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MonicaModelState(p.Struct()), err
}

func (s RuntimeState) HasModelState() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RuntimeState) SetModelState(v MonicaModelState) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModelState sets the modelState field to a newly
// allocated MonicaModelState struct, preferring placement in s's segment.
func (s RuntimeState) NewModelState() (MonicaModelState, error) {
	ss, err := NewMonicaModelState(capnp.Struct(s).Segment())
	if err != nil {
		return MonicaModelState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RuntimeState_List is a list of RuntimeState.
type RuntimeState_List = capnp.StructList[RuntimeState]

// NewRuntimeState creates a new list of RuntimeState.
func NewRuntimeState_List(s *capnp.Segment, sz int32) (RuntimeState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RuntimeState](l), err
}

// RuntimeState_Future is a wrapper for a RuntimeState promised by a client call.
type RuntimeState_Future struct{ *capnp.Future }

func (f RuntimeState_Future) Struct() (RuntimeState, error) {
	p, err := f.Future.Ptr()
	return RuntimeState(p.Struct()), err
}
func (p RuntimeState_Future) ModelState() MonicaModelState_Future {
	return MonicaModelState_Future{Future: p.Future.Field(0, nil)}
}

type CropState capnp.Struct

// CropState_TypeID is the unique identifier for the type CropState.
const CropState_TypeID = 0x8b008567c93f7c7d

func NewCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState(st), err
}

func NewRootCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState(st), err
}

func ReadRootCropState(msg *capnp.Message) (CropState, error) {
	root, err := msg.Root()
	return CropState(root.Struct()), err
}

func (s CropState) String() string {
	str, _ := text.Marshal(0x8b008567c93f7c7d, capnp.Struct(s))
	return str
}

func (s CropState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropState) DecodeFromPtr(p capnp.Ptr) CropState {
	return CropState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropState) SpeciesName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CropState) HasSpeciesName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropState) SpeciesNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CropState) SetSpeciesName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CropState) CultivarName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CropState) HasCultivarName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropState) CultivarNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CropState) SetCultivarName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CropState) SeedDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common.Date(p.Struct()), err
}

func (s CropState) HasSeedDate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CropState) SetSeedDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewSeedDate sets the seedDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s CropState) NewSeedDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) HarvestDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return common.Date(p.Struct()), err
}

func (s CropState) HasHarvestDate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CropState) SetHarvestDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewHarvestDate sets the harvestDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s CropState) NewHarvestDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) IsWinterCrop() (MaybeBool, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return MaybeBool(p.Struct()), err
}

func (s CropState) HasIsWinterCrop() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CropState) SetIsWinterCrop(v MaybeBool) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewIsWinterCrop sets the isWinterCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsWinterCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(capnp.Struct(s).Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) IsPerennialCrop() (MaybeBool, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return MaybeBool(p.Struct()), err
}

func (s CropState) HasIsPerennialCrop() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CropState) SetIsPerennialCrop(v MaybeBool) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewIsPerennialCrop sets the isPerennialCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsPerennialCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(capnp.Struct(s).Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) CuttingDates() (common.Date_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return common.Date_List(p.List()), err
}

func (s CropState) HasCuttingDates() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CropState) SetCuttingDates(v common.Date_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewCuttingDates sets the cuttingDates field to a newly
// allocated common.Date_List, preferring placement in s's segment.
func (s CropState) NewCuttingDates(n int32) (common.Date_List, error) {
	l, err := common.NewDate_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Date_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CropState) CropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return CropParameters(p.Struct()), err
}

func (s CropState) HasCropParams() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CropState) SetCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewCropParams sets the cropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) PerennialCropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return CropParameters(p.Struct()), err
}

func (s CropState) HasPerennialCropParams() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CropState) SetPerennialCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewPerennialCropParams sets the perennialCropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewPerennialCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return CropResidueParameters(p.Struct()), err
}

func (s CropState) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CropState) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) CrossCropAdaptionFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3ff0000000000000)
}

func (s CropState) SetCrossCropAdaptionFactor(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropState) AutomaticHarvest() bool {
	return capnp.Struct(s).Bit(64)
}

func (s CropState) SetAutomaticHarvest(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

func (s CropState) AutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AutomaticHarvestParameters(p.Struct()), err
}

func (s CropState) HasAutomaticHarvestParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropState) SetAutomaticHarvestParams(v AutomaticHarvestParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAutomaticHarvestParams sets the automaticHarvestParams field to a newly
// allocated AutomaticHarvestParameters struct, preferring placement in s's segment.
func (s CropState) NewAutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	ss, err := NewAutomaticHarvestParameters(capnp.Struct(s).Segment())
	if err != nil {
		return AutomaticHarvestParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CropState_List is a list of CropState.
type CropState_List = capnp.StructList[CropState]

// NewCropState creates a new list of CropState.
func NewCropState_List(s *capnp.Segment, sz int32) (CropState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11}, sz)
	return capnp.StructList[CropState](l), err
}

// CropState_Future is a wrapper for a CropState promised by a client call.
type CropState_Future struct{ *capnp.Future }

func (f CropState_Future) Struct() (CropState, error) {
	p, err := f.Future.Ptr()
	return CropState(p.Struct()), err
}
func (p CropState_Future) SeedDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(3, nil)}
}
func (p CropState_Future) HarvestDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(4, nil)}
}
func (p CropState_Future) IsWinterCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(5, nil)}
}
func (p CropState_Future) IsPerennialCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(6, nil)}
}
func (p CropState_Future) CropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(8, nil)}
}
func (p CropState_Future) PerennialCropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(9, nil)}
}
func (p CropState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(10, nil)}
}
func (p CropState_Future) AutomaticHarvestParams() AutomaticHarvestParameters_Future {
	return AutomaticHarvestParameters_Future{Future: p.Future.Field(0, nil)}
}

type AOMProperties capnp.Struct

// AOMProperties_TypeID is the unique identifier for the type AOMProperties.
const AOMProperties_TypeID = 0xe3512e62df901c18

func NewAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties(st), err
}

func NewRootAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties(st), err
}

func ReadRootAOMProperties(msg *capnp.Message) (AOMProperties, error) {
	root, err := msg.Root()
	return AOMProperties(root.Struct()), err
}

func (s AOMProperties) String() string {
	str, _ := text.Marshal(0xe3512e62df901c18, capnp.Struct(s))
	return str
}

func (s AOMProperties) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AOMProperties) DecodeFromPtr(p capnp.Ptr) AOMProperties {
	return AOMProperties(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AOMProperties) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AOMProperties) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AOMProperties) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AOMProperties) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AOMProperties) AomSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s AOMProperties) SetAomSlow(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s AOMProperties) AomFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s AOMProperties) SetAomFast(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s AOMProperties) SetAomFastDecRatetoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s AOMProperties) SetAomFastDecRatetoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s AOMProperties) SetAomSlowDecCoeff(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s AOMProperties) SetAomFastDecCoeff(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) PartAOMSlowtoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s AOMProperties) SetPartAOMSlowtoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s AOMProperties) PartAOMSlowtoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s AOMProperties) SetPartAOMSlowtoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s AOMProperties) CnRatioAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) CnRatioAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMFast(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) DaysAfterApplication() uint16 {
	return capnp.Struct(s).Uint16(112)
}

func (s AOMProperties) SetDaysAfterApplication(v uint16) {
	capnp.Struct(s).SetUint16(112, v)
}

func (s AOMProperties) AomDryMatterContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s AOMProperties) SetAomDryMatterContent(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s AOMProperties) AomNH4Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s AOMProperties) SetAomNH4Content(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDelta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s AOMProperties) SetAomSlowDelta(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s AOMProperties) AomFastDelta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s AOMProperties) SetAomFastDelta(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s AOMProperties) Incorporation() bool {
	return capnp.Struct(s).Bit(912)
}

func (s AOMProperties) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(912, v)
}

func (s AOMProperties) NoVolatilization() bool {
	return !capnp.Struct(s).Bit(913)
}

func (s AOMProperties) SetNoVolatilization(v bool) {
	capnp.Struct(s).SetBit(913, !v)
}

// AOMProperties_List is a list of AOMProperties.
type AOMProperties_List = capnp.StructList[AOMProperties]

// NewAOMProperties creates a new list of AOMProperties.
func NewAOMProperties_List(s *capnp.Segment, sz int32) (AOMProperties_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0}, sz)
	return capnp.StructList[AOMProperties](l), err
}

// AOMProperties_Future is a wrapper for a AOMProperties promised by a client call.
type AOMProperties_Future struct{ *capnp.Future }

func (f AOMProperties_Future) Struct() (AOMProperties, error) {
	p, err := f.Future.Ptr()
	return AOMProperties(p.Struct()), err
}

type SoilColumnState capnp.Struct

// SoilColumnState_TypeID is the unique identifier for the type SoilColumnState.
const SoilColumnState_TypeID = 0xef3e4198d3e35596

func NewSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState(st), err
}

func NewRootSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState(st), err
}

func ReadRootSoilColumnState(msg *capnp.Message) (SoilColumnState, error) {
	root, err := msg.Root()
	return SoilColumnState(root.Struct()), err
}

func (s SoilColumnState) String() string {
	str, _ := text.Marshal(0xef3e4198d3e35596, capnp.Struct(s))
	return str
}

func (s SoilColumnState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilColumnState) DecodeFromPtr(p capnp.Ptr) SoilColumnState {
	return SoilColumnState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilColumnState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilColumnState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilColumnState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilColumnState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilColumnState) VsSurfaceWaterStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilColumnState) SetVsSurfaceWaterStorage(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState) VsInterceptionStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilColumnState) SetVsInterceptionStorage(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState) VmGroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s SoilColumnState) SetVmGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

func (s SoilColumnState) VsFluxAtLowerBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilColumnState) SetVsFluxAtLowerBoundary(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState) VqCropNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilColumnState) SetVqCropNUptake(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState) VtSoilSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilColumnState) SetVtSoilSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilColumnState) VmSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilColumnState) SetVmSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilColumnState) PsMaxMineralisationDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3fd999999999999a)
}

func (s SoilColumnState) SetPsMaxMineralisationDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilColumnState) VsNumberOfOrganicLayers() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilColumnState) SetVsNumberOfOrganicLayers(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressing() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilColumnState) SetVfTopDressing(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressingPartition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SoilColumnState) HasVfTopDressingPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilColumnState) SetVfTopDressingPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewVfTopDressingPartition sets the vfTopDressingPartition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState) NewVfTopDressingPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState) VfTopDressingDelay() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s SoilColumnState) SetVfTopDressingDelay(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s SoilColumnState) CropModule() (CropModuleState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CropModuleState(p.Struct()), err
}

func (s SoilColumnState) HasCropModule() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilColumnState) SetCropModule(v CropModuleState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCropModule sets the cropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s SoilColumnState) NewCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState) DelayedNMinApplications() (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilColumnState_DelayedNMinApplicationParams_List(p.List()), err
}

func (s SoilColumnState) HasDelayedNMinApplications() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilColumnState) SetDelayedNMinApplications(v SoilColumnState_DelayedNMinApplicationParams_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDelayedNMinApplications sets the delayedNMinApplications field to a newly
// allocated SoilColumnState_DelayedNMinApplicationParams_List, preferring placement in s's segment.
func (s SoilColumnState) NewDelayedNMinApplications(n int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := NewSoilColumnState_DelayedNMinApplicationParams_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilColumnState_DelayedNMinApplicationParams_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilColumnState) PmCriticalMoistureDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilColumnState) SetPmCriticalMoistureDepth(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilColumnState) Layers() (SoilLayerState_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return SoilLayerState_List(p.List()), err
}

func (s SoilColumnState) HasLayers() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilColumnState) SetLayers(v SoilLayerState_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated SoilLayerState_List, preferring placement in s's segment.
func (s SoilColumnState) NewLayers(n int32) (SoilLayerState_List, error) {
	l, err := NewSoilLayerState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilLayerState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// SoilColumnState_List is a list of SoilColumnState.
type SoilColumnState_List = capnp.StructList[SoilColumnState]

// NewSoilColumnState creates a new list of SoilColumnState.
func NewSoilColumnState_List(s *capnp.Segment, sz int32) (SoilColumnState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4}, sz)
	return capnp.StructList[SoilColumnState](l), err
}

// SoilColumnState_Future is a wrapper for a SoilColumnState promised by a client call.
type SoilColumnState_Future struct{ *capnp.Future }

func (f SoilColumnState_Future) Struct() (SoilColumnState, error) {
	p, err := f.Future.Ptr()
	return SoilColumnState(p.Struct()), err
}
func (p SoilColumnState_Future) VfTopDressingPartition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}
func (p SoilColumnState_Future) CropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(1, nil)}
}

type SoilColumnState_DelayedNMinApplicationParams capnp.Struct

// SoilColumnState_DelayedNMinApplicationParams_TypeID is the unique identifier for the type SoilColumnState_DelayedNMinApplicationParams.
const SoilColumnState_DelayedNMinApplicationParams_TypeID = 0xd1edcf54f4edf638

func NewSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams(st), err
}

func NewRootSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams(st), err
}

func ReadRootSoilColumnState_DelayedNMinApplicationParams(msg *capnp.Message) (SoilColumnState_DelayedNMinApplicationParams, error) {
	root, err := msg.Root()
	return SoilColumnState_DelayedNMinApplicationParams(root.Struct()), err
}

func (s SoilColumnState_DelayedNMinApplicationParams) String() string {
	str, _ := text.Marshal(0xd1edcf54f4edf638, capnp.Struct(s))
	return str
}

func (s SoilColumnState_DelayedNMinApplicationParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilColumnState_DelayedNMinApplicationParams) DecodeFromPtr(p capnp.Ptr) SoilColumnState_DelayedNMinApplicationParams {
	return SoilColumnState_DelayedNMinApplicationParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilColumnState_DelayedNMinApplicationParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilColumnState_DelayedNMinApplicationParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilColumnState_DelayedNMinApplicationParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilColumnState_DelayedNMinApplicationParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilColumnState_DelayedNMinApplicationParams) Fp() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SoilColumnState_DelayedNMinApplicationParams) HasFp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFp(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFp sets the fp field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState_DelayedNMinApplicationParams) NewFp() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState_DelayedNMinApplicationParams) SamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget30() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget30(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMinApplication() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMinApplication(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMaxApplication() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMaxApplication(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) TopDressingDelay() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetTopDressingDelay(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

// SoilColumnState_DelayedNMinApplicationParams_List is a list of SoilColumnState_DelayedNMinApplicationParams.
type SoilColumnState_DelayedNMinApplicationParams_List = capnp.StructList[SoilColumnState_DelayedNMinApplicationParams]

// NewSoilColumnState_DelayedNMinApplicationParams creates a new list of SoilColumnState_DelayedNMinApplicationParams.
func NewSoilColumnState_DelayedNMinApplicationParams_List(s *capnp.Segment, sz int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[SoilColumnState_DelayedNMinApplicationParams](l), err
}

// SoilColumnState_DelayedNMinApplicationParams_Future is a wrapper for a SoilColumnState_DelayedNMinApplicationParams promised by a client call.
type SoilColumnState_DelayedNMinApplicationParams_Future struct{ *capnp.Future }

func (f SoilColumnState_DelayedNMinApplicationParams_Future) Struct() (SoilColumnState_DelayedNMinApplicationParams, error) {
	p, err := f.Future.Ptr()
	return SoilColumnState_DelayedNMinApplicationParams(p.Struct()), err
}
func (p SoilColumnState_DelayedNMinApplicationParams_Future) Fp() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilLayerState capnp.Struct

// SoilLayerState_TypeID is the unique identifier for the type SoilLayerState.
const SoilLayerState_TypeID = 0xdd1e0c7c94dc4211

func NewSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState(st), err
}

func NewRootSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState(st), err
}

func ReadRootSoilLayerState(msg *capnp.Message) (SoilLayerState, error) {
	root, err := msg.Root()
	return SoilLayerState(root.Struct()), err
}

func (s SoilLayerState) String() string {
	str, _ := text.Marshal(0xdd1e0c7c94dc4211, capnp.Struct(s))
	return str
}

func (s SoilLayerState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilLayerState) DecodeFromPtr(p capnp.Ptr) SoilLayerState {
	return SoilLayerState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilLayerState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilLayerState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilLayerState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilLayerState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilLayerState) LayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fb999999999999a)
}

func (s SoilLayerState) SetLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilLayerState) SoilWaterFlux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilLayerState) SetSoilWaterFlux(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilLayerState) VoAOMPool() (AOMProperties_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AOMProperties_List(p.List()), err
}

func (s SoilLayerState) HasVoAOMPool() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilLayerState) SetVoAOMPool(v AOMProperties_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVoAOMPool sets the voAOMPool field to a newly
// allocated AOMProperties_List, preferring placement in s's segment.
func (s SoilLayerState) NewVoAOMPool(n int32) (AOMProperties_List, error) {
	l, err := NewAOMProperties_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AOMProperties_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s SoilLayerState) SomSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilLayerState) SetSomSlow(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilLayerState) SomFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilLayerState) SetSomFast(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilLayerState) SmbSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilLayerState) SetSmbSlow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilLayerState) SmbFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilLayerState) SetSmbFast(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilLayerState) SoilCarbamid() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilLayerState) SetSoilCarbamid(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilLayerState) SoilNH4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNH4(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilNO2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SetSoilNO2(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SoilNO3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNO3(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilFrozen() bool {
	return capnp.Struct(s).Bit(640)
}

func (s SoilLayerState) SetSoilFrozen(v bool) {
	capnp.Struct(s).SetBit(640, v)
}

func (s SoilLayerState) Sps() (SoilParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SoilParameters(p.Struct()), err
}

func (s SoilLayerState) HasSps() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilLayerState) SetSps(v SoilParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSps sets the sps field to a newly
// allocated SoilParameters struct, preferring placement in s's segment.
func (s SoilLayerState) NewSps() (SoilParameters, error) {
	ss, err := NewSoilParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilLayerState) SoilMoistureM3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x3fd0000000000000)
}

func (s SoilLayerState) SetSoilMoistureM3(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x3fd0000000000000)
}

func (s SoilLayerState) SoilTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilLayerState) SetSoilTemperature(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

// SoilLayerState_List is a list of SoilLayerState.
type SoilLayerState_List = capnp.StructList[SoilLayerState]

// NewSoilLayerState creates a new list of SoilLayerState.
func NewSoilLayerState_List(s *capnp.Segment, sz int32) (SoilLayerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2}, sz)
	return capnp.StructList[SoilLayerState](l), err
}

// SoilLayerState_Future is a wrapper for a SoilLayerState promised by a client call.
type SoilLayerState_Future struct{ *capnp.Future }

func (f SoilLayerState_Future) Struct() (SoilLayerState, error) {
	p, err := f.Future.Ptr()
	return SoilLayerState(p.Struct()), err
}
func (p SoilLayerState_Future) Sps() SoilParameters_Future {
	return SoilParameters_Future{Future: p.Future.Field(1, nil)}
}

type MonicaModelState capnp.Struct

// MonicaModelState_TypeID is the unique identifier for the type MonicaModelState.
const MonicaModelState_TypeID = 0xab56969492d293b3

func NewMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState(st), err
}

func NewRootMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState(st), err
}

func ReadRootMonicaModelState(msg *capnp.Message) (MonicaModelState, error) {
	root, err := msg.Root()
	return MonicaModelState(root.Struct()), err
}

func (s MonicaModelState) String() string {
	str, _ := text.Marshal(0xab56969492d293b3, capnp.Struct(s))
	return str
}

func (s MonicaModelState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MonicaModelState) DecodeFromPtr(p capnp.Ptr) MonicaModelState {
	return MonicaModelState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MonicaModelState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MonicaModelState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MonicaModelState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MonicaModelState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MonicaModelState) SitePs() (SiteParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SiteParameters(p.Struct()), err
}

func (s MonicaModelState) HasSitePs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MonicaModelState) SetSitePs(v SiteParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSitePs sets the sitePs field to a newly
// allocated SiteParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSitePs() (SiteParameters, error) {
	ss, err := NewSiteParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SiteParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) EnvPs() (EnvironmentParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return EnvironmentParameters(p.Struct()), err
}

func (s MonicaModelState) HasEnvPs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MonicaModelState) SetEnvPs(v EnvironmentParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEnvPs sets the envPs field to a newly
// allocated EnvironmentParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewEnvPs() (EnvironmentParameters, error) {
	ss, err := NewEnvironmentParameters(capnp.Struct(s).Segment())
	if err != nil {
		return EnvironmentParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) CropPs() (CropModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return CropModuleParameters(p.Struct()), err
}

func (s MonicaModelState) HasCropPs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s MonicaModelState) SetCropPs(v CropModuleParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCropPs sets the cropPs field to a newly
// allocated CropModuleParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewCropPs() (CropModuleParameters, error) {
	ss, err := NewCropModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SimPs() (SimulationParameters, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return SimulationParameters(p.Struct()), err
}

func (s MonicaModelState) HasSimPs() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s MonicaModelState) SetSimPs(v SimulationParameters) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewSimPs sets the simPs field to a newly
// allocated SimulationParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSimPs() (SimulationParameters, error) {
	ss, err := NewSimulationParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SimulationParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) GroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return MeasuredGroundwaterTableInformation(p.Struct()), err
}

func (s MonicaModelState) HasGroundwaterInformation() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s MonicaModelState) SetGroundwaterInformation(v MeasuredGroundwaterTableInformation) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewGroundwaterInformation sets the groundwaterInformation field to a newly
// allocated MeasuredGroundwaterTableInformation struct, preferring placement in s's segment.
func (s MonicaModelState) NewGroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	ss, err := NewMeasuredGroundwaterTableInformation(capnp.Struct(s).Segment())
	if err != nil {
		return MeasuredGroundwaterTableInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilColumn() (SoilColumnState, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return SoilColumnState(p.Struct()), err
}

func (s MonicaModelState) HasSoilColumn() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s MonicaModelState) SetSoilColumn(v SoilColumnState) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewSoilColumn sets the soilColumn field to a newly
// allocated SoilColumnState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilColumn() (SoilColumnState, error) {
	ss, err := NewSoilColumnState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilColumnState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTemperature() (SoilTemperatureModuleState, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return SoilTemperatureModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilTemperature() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s MonicaModelState) SetSoilTemperature(v SoilTemperatureModuleState) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated SoilTemperatureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTemperature() (SoilTemperatureModuleState, error) {
	ss, err := NewSoilTemperatureModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTemperatureModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilMoisture() (SoilMoistureModuleState, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return SoilMoistureModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilMoisture() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s MonicaModelState) SetSoilMoisture(v SoilMoistureModuleState) error {
	return capnp.Struct(s).SetPtr(7, capnp.Struct(v).ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated SoilMoistureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilMoisture() (SoilMoistureModuleState, error) {
	ss, err := NewSoilMoistureModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilMoistureModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(7, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilOrganic() (SoilOrganicModuleState, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return SoilOrganicModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilOrganic() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s MonicaModelState) SetSoilOrganic(v SoilOrganicModuleState) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewSoilOrganic sets the soilOrganic field to a newly
// allocated SoilOrganicModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilOrganic() (SoilOrganicModuleState, error) {
	ss, err := NewSoilOrganicModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilOrganicModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTransport() (SoilTransportModuleState, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return SoilTransportModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilTransport() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s MonicaModelState) SetSoilTransport(v SoilTransportModuleState) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewSoilTransport sets the soilTransport field to a newly
// allocated SoilTransportModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTransport() (SoilTransportModuleState, error) {
	ss, err := NewSoilTransportModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTransportModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) CurrentCropModule() (CropModuleState, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return CropModuleState(p.Struct()), err
}

func (s MonicaModelState) HasCurrentCropModule() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s MonicaModelState) SetCurrentCropModule(v CropModuleState) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewCurrentCropModule sets the currentCropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SumFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s MonicaModelState) SetSumFertiliser(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s MonicaModelState) SumOrgFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s MonicaModelState) SetSumOrgFertiliser(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s MonicaModelState) DailySumFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s MonicaModelState) SetDailySumFertiliser(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrgFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s MonicaModelState) SetDailySumOrgFertiliser(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrganicFertilizerDM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s MonicaModelState) SetDailySumOrganicFertilizerDM(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s MonicaModelState) SumOrganicFertilizerDM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s MonicaModelState) SetSumOrganicFertilizerDM(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s MonicaModelState) HumusBalanceCarryOver() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s MonicaModelState) SetHumusBalanceCarryOver(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s MonicaModelState) DailySumIrrigationWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s MonicaModelState) SetDailySumIrrigationWater(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonExportedResidues() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s MonicaModelState) SetOptCarbonExportedResidues(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonReturnedResidues() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s MonicaModelState) SetOptCarbonReturnedResidues(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s MonicaModelState) CurrentStepDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return common.Date(p.Struct()), err
}

func (s MonicaModelState) HasCurrentStepDate() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s MonicaModelState) SetCurrentStepDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(11, capnp.Struct(v).ToPtr())
}

// NewCurrentStepDate sets the currentStepDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentStepDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(11, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) ClimateData() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.PointerList(p.List()), err
}

func (s MonicaModelState) HasClimateData() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s MonicaModelState) SetClimateData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewClimateData sets the climateData field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s MonicaModelState) NewClimateData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s MonicaModelState) CurrentEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.TextList(p.List()), err
}

func (s MonicaModelState) HasCurrentEvents() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s MonicaModelState) SetCurrentEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewCurrentEvents sets the currentEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s MonicaModelState) PreviousDaysEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.TextList(p.List()), err
}

func (s MonicaModelState) HasPreviousDaysEvents() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s MonicaModelState) SetPreviousDaysEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewPreviousDaysEvents sets the previousDaysEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewPreviousDaysEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s MonicaModelState) ClearCropUponNextDay() bool {
	return capnp.Struct(s).Bit(16)
}

func (s MonicaModelState) SetClearCropUponNextDay(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s MonicaModelState) DaysWithCrop() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s MonicaModelState) SetDaysWithCrop(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s MonicaModelState) AccuNStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s MonicaModelState) SetAccuNStress(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s MonicaModelState) AccuWaterStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s MonicaModelState) SetAccuWaterStress(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s MonicaModelState) AccuHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s MonicaModelState) SetAccuHeatStress(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s MonicaModelState) AccuOxygenStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s MonicaModelState) SetAccuOxygenStress(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericCO2Concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s MonicaModelState) SetVwAtmosphericCO2Concentration(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericO3Concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s MonicaModelState) SetVwAtmosphericO3Concentration(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s MonicaModelState) VsGroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s MonicaModelState) SetVsGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s MonicaModelState) CultivationMethodCount() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s MonicaModelState) SetCultivationMethodCount(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

// MonicaModelState_List is a list of MonicaModelState.
type MonicaModelState_List = capnp.StructList[MonicaModelState]

// NewMonicaModelState creates a new list of MonicaModelState.
func NewMonicaModelState_List(s *capnp.Segment, sz int32) (MonicaModelState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15}, sz)
	return capnp.StructList[MonicaModelState](l), err
}

// MonicaModelState_Future is a wrapper for a MonicaModelState promised by a client call.
type MonicaModelState_Future struct{ *capnp.Future }

func (f MonicaModelState_Future) Struct() (MonicaModelState, error) {
	p, err := f.Future.Ptr()
	return MonicaModelState(p.Struct()), err
}
func (p MonicaModelState_Future) SitePs() SiteParameters_Future {
	return SiteParameters_Future{Future: p.Future.Field(0, nil)}
}
func (p MonicaModelState_Future) EnvPs() EnvironmentParameters_Future {
	return EnvironmentParameters_Future{Future: p.Future.Field(1, nil)}
}
func (p MonicaModelState_Future) CropPs() CropModuleParameters_Future {
	return CropModuleParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p MonicaModelState_Future) SimPs() SimulationParameters_Future {
	return SimulationParameters_Future{Future: p.Future.Field(3, nil)}
}
func (p MonicaModelState_Future) GroundwaterInformation() MeasuredGroundwaterTableInformation_Future {
	return MeasuredGroundwaterTableInformation_Future{Future: p.Future.Field(4, nil)}
}
func (p MonicaModelState_Future) SoilColumn() SoilColumnState_Future {
	return SoilColumnState_Future{Future: p.Future.Field(5, nil)}
}
func (p MonicaModelState_Future) SoilTemperature() SoilTemperatureModuleState_Future {
	return SoilTemperatureModuleState_Future{Future: p.Future.Field(6, nil)}
}
func (p MonicaModelState_Future) SoilMoisture() SoilMoistureModuleState_Future {
	return SoilMoistureModuleState_Future{Future: p.Future.Field(7, nil)}
}
func (p MonicaModelState_Future) SoilOrganic() SoilOrganicModuleState_Future {
	return SoilOrganicModuleState_Future{Future: p.Future.Field(8, nil)}
}
func (p MonicaModelState_Future) SoilTransport() SoilTransportModuleState_Future {
	return SoilTransportModuleState_Future{Future: p.Future.Field(9, nil)}
}
func (p MonicaModelState_Future) CurrentCropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(10, nil)}
}
func (p MonicaModelState_Future) CurrentStepDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(11, nil)}
}

type MonicaModelState_ACDToValue capnp.Struct

// MonicaModelState_ACDToValue_TypeID is the unique identifier for the type MonicaModelState_ACDToValue.
const MonicaModelState_ACDToValue_TypeID = 0x98e203c76f83d365

func NewMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue(st), err
}

func NewRootMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue(st), err
}

func ReadRootMonicaModelState_ACDToValue(msg *capnp.Message) (MonicaModelState_ACDToValue, error) {
	root, err := msg.Root()
	return MonicaModelState_ACDToValue(root.Struct()), err
}

func (s MonicaModelState_ACDToValue) String() string {
	str, _ := text.Marshal(0x98e203c76f83d365, capnp.Struct(s))
	return str
}

func (s MonicaModelState_ACDToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MonicaModelState_ACDToValue) DecodeFromPtr(p capnp.Ptr) MonicaModelState_ACDToValue {
	return MonicaModelState_ACDToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MonicaModelState_ACDToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MonicaModelState_ACDToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MonicaModelState_ACDToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MonicaModelState_ACDToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MonicaModelState_ACDToValue) Acd() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s MonicaModelState_ACDToValue) SetAcd(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s MonicaModelState_ACDToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s MonicaModelState_ACDToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// MonicaModelState_ACDToValue_List is a list of MonicaModelState_ACDToValue.
type MonicaModelState_ACDToValue_List = capnp.StructList[MonicaModelState_ACDToValue]

// NewMonicaModelState_ACDToValue creates a new list of MonicaModelState_ACDToValue.
func NewMonicaModelState_ACDToValue_List(s *capnp.Segment, sz int32) (MonicaModelState_ACDToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MonicaModelState_ACDToValue](l), err
}

// MonicaModelState_ACDToValue_Future is a wrapper for a MonicaModelState_ACDToValue promised by a client call.
type MonicaModelState_ACDToValue_Future struct{ *capnp.Future }

func (f MonicaModelState_ACDToValue_Future) Struct() (MonicaModelState_ACDToValue, error) {
	p, err := f.Future.Ptr()
	return MonicaModelState_ACDToValue(p.Struct()), err
}

type CropModuleState capnp.Struct

// CropModuleState_TypeID is the unique identifier for the type CropModuleState.
const CropModuleState_TypeID = 0x811d54ac7debc21e

func NewCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState(st), err
}

func NewRootCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState(st), err
}

func ReadRootCropModuleState(msg *capnp.Message) (CropModuleState, error) {
	root, err := msg.Root()
	return CropModuleState(root.Struct()), err
}

func (s CropModuleState) String() string {
	str, _ := text.Marshal(0x811d54ac7debc21e, capnp.Struct(s))
	return str
}

func (s CropModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropModuleState) DecodeFromPtr(p capnp.Ptr) CropModuleState {
	return CropModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropModuleState) FrostKillOn() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CropModuleState) SetFrostKillOn(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CropModuleState) SpeciesParams() (SpeciesParameters, error) {
	p, err := capnp.Struct(s).Ptr(47)
	return SpeciesParameters(p.Struct()), err
}

func (s CropModuleState) HasSpeciesParams() bool {
	return capnp.Struct(s).HasPtr(47)
}

func (s CropModuleState) SetSpeciesParams(v SpeciesParameters) error {
	return capnp.Struct(s).SetPtr(47, capnp.Struct(v).ToPtr())
}

// NewSpeciesParams sets the speciesParams field to a newly
// allocated SpeciesParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewSpeciesParams() (SpeciesParameters, error) {
	ss, err := NewSpeciesParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SpeciesParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(47, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) CultivarParams() (CultivarParameters, error) {
	p, err := capnp.Struct(s).Ptr(48)
	return CultivarParameters(p.Struct()), err
}

func (s CropModuleState) HasCultivarParams() bool {
	return capnp.Struct(s).HasPtr(48)
}

func (s CropModuleState) SetCultivarParams(v CultivarParameters) error {
	return capnp.Struct(s).SetPtr(48, capnp.Struct(v).ToPtr())
}

// NewCultivarParams sets the cultivarParams field to a newly
// allocated CultivarParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewCultivarParams() (CultivarParameters, error) {
	ss, err := NewCultivarParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CultivarParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(48, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(49)
	return CropResidueParameters(p.Struct()), err
}

func (s CropModuleState) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(49)
}

func (s CropModuleState) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(49, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(49, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) IsWinterCrop() bool {
	return capnp.Struct(s).Bit(7285)
}

func (s CropModuleState) SetIsWinterCrop(v bool) {
	capnp.Struct(s).SetBit(7285, v)
}

func (s CropModuleState) VsLatitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s CropModuleState) SetVsLatitude(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s CropModuleState) SetAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s CropModuleState) SetAbovegroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s CropModuleState) PcAbovegroundOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.BitList(p.List()), err
}

func (s CropModuleState) HasPcAbovegroundOrgan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropModuleState) SetPcAbovegroundOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPcAbovegroundOrgan sets the pcAbovegroundOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcAbovegroundOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CropModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s CropModuleState) SetActualTranspiration(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s CropModuleState) PcAssimilatePartitioningCoeff() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.PointerList(p.List()), err
}

func (s CropModuleState) HasPcAssimilatePartitioningCoeff() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropModuleState) SetPcAssimilatePartitioningCoeff(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPcAssimilatePartitioningCoeff sets the pcAssimilatePartitioningCoeff field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcAssimilatePartitioningCoeff(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcAssimilateReallocation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s CropModuleState) SetPcAssimilateReallocation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s CropModuleState) Assimilates() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s CropModuleState) SetAssimilates(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s CropModuleState) AssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s CropModuleState) SetAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s CropModuleState) AstronomicDayLenght() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s CropModuleState) SetAstronomicDayLenght(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s CropModuleState) PcBaseDaylength() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcBaseDaylength() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropModuleState) SetPcBaseDaylength(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPcBaseDaylength sets the pcBaseDaylength field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseDaylength(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcBaseTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcBaseTemperature() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CropModuleState) SetPcBaseTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPcBaseTemperature sets the pcBaseTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcBeginSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s CropModuleState) SetPcBeginSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s CropModuleState) SetBelowgroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s CropModuleState) SetBelowgroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s CropModuleState) PcCarboxylationPathway() int64 {
	return int64(capnp.Struct(s).Uint64(128))
}

func (s CropModuleState) SetPcCarboxylationPathway(v int64) {
	capnp.Struct(s).SetUint64(128, uint64(v))
}

func (s CropModuleState) ClearDayRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s CropModuleState) SetClearDayRadiation(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s CropModuleState) PcCo2Method() uint8 {
	return capnp.Struct(s).Uint8(1) ^ 3
}

func (s CropModuleState) SetPcCo2Method(v uint8) {
	capnp.Struct(s).SetUint8(1, v^3)
}

func (s CropModuleState) CriticalNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s CropModuleState) SetCriticalNConcentration(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s CropModuleState) PcCriticalOxygenContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcCriticalOxygenContent() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CropModuleState) SetPcCriticalOxygenContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewPcCriticalOxygenContent sets the pcCriticalOxygenContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcCriticalOxygenContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcCriticalTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s CropModuleState) SetPcCriticalTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s CropModuleState) CropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s CropModuleState) SetCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s CropModuleState) CropFrostRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropFrostRedux(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeatRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropHeatRedux(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s CropModuleState) SetCropHeight(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s CropModuleState) SetPcCropHeightP1(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s CropModuleState) SetPcCropHeightP2(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s CropModuleState) PcCropName() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s CropModuleState) HasPcCropName() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CropModuleState) PcCropNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s CropModuleState) SetPcCropName(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s CropModuleState) CropNDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s CropModuleState) SetCropNDemand(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s CropModuleState) CropNRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropNRedux(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcCropSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s CropModuleState) SetPcCropSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s CropModuleState) CropWaterUptake() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasCropWaterUptake() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CropModuleState) SetCropWaterUptake(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCropWaterUptake sets the cropWaterUptake field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCropWaterUptake(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s CropModuleState) CurrentTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasCurrentTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CropModuleState) SetCurrentTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewCurrentTemperatureSum sets the currentTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCurrentTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CropModuleState) CurrentTotalTemperatureSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s CropModuleState) SetCurrentTotalTemperatureSum(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s CropModuleState) CurrentTotalTemperatureSumRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240))
}

func (s CropModuleState) SetCurrentTotalTemperatureSumRoot(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v))
}

func (s CropModuleState) PcCuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s CropModuleState) SetPcCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s CropModuleState) DaylengthFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s CropModuleState) SetDaylengthFactor(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s CropModuleState) PcDaylengthRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcDaylengthRequirement() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CropModuleState) SetPcDaylengthRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewPcDaylengthRequirement sets the pcDaylengthRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDaylengthRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s CropModuleState) DaysAfterBeginFlowering() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s CropModuleState) SetDaysAfterBeginFlowering(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s CropModuleState) Declination() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256))
}

func (s CropModuleState) SetDeclination(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v))
}

func (s CropModuleState) PcDefaultRadiationUseEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264))
}

func (s CropModuleState) SetPcDefaultRadiationUseEfficiency(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v))
}

func (s CropModuleState) VmDepthGroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s CropModuleState) SetVmDepthGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s CropModuleState) PcDevelopmentAccelerationByNitrogenStress() uint64 {
	return capnp.Struct(s).Uint64(272)
}

func (s CropModuleState) SetPcDevelopmentAccelerationByNitrogenStress(v uint64) {
	capnp.Struct(s).SetUint64(272, v)
}

func (s CropModuleState) DevelopmentalStage() uint16 {
	return capnp.Struct(s).Uint16(280)
}

func (s CropModuleState) SetDevelopmentalStage(v uint16) {
	capnp.Struct(s).SetUint16(280, v)
}

func (s CropModuleState) NoOfCropSteps() uint16 {
	return capnp.Struct(s).Uint16(282)
}

func (s CropModuleState) SetNoOfCropSteps(v uint16) {
	capnp.Struct(s).SetUint16(282, v)
}

func (s CropModuleState) DroughtImpactOnFertility() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetDroughtImpactOnFertility(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcDroughtImpactOnFertilityFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296))
}

func (s CropModuleState) SetPcDroughtImpactOnFertilityFactor(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v))
}

func (s CropModuleState) PcDroughtStressThreshold() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcDroughtStressThreshold() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CropModuleState) SetPcDroughtStressThreshold(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewPcDroughtStressThreshold sets the pcDroughtStressThreshold field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDroughtStressThreshold(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcEmergenceFloodingControlOn() bool {
	return capnp.Struct(s).Bit(2)
}

func (s CropModuleState) SetPcEmergenceFloodingControlOn(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s CropModuleState) PcEmergenceMoistureControlOn() bool {
	return capnp.Struct(s).Bit(3)
}

func (s CropModuleState) SetPcEmergenceMoistureControlOn(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s CropModuleState) PcEndSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304))
}

func (s CropModuleState) SetPcEndSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v))
}

func (s CropModuleState) EffectiveDayLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312))
}

func (s CropModuleState) SetEffectiveDayLength(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v))
}

func (s CropModuleState) ErrorStatus() bool {
	return capnp.Struct(s).Bit(4)
}

func (s CropModuleState) SetErrorStatus(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s CropModuleState) ErrorMessage() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s CropModuleState) HasErrorMessage() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CropModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s CropModuleState) SetErrorMessage(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

func (s CropModuleState) EvaporatedFromIntercept() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(320))
}

func (s CropModuleState) SetEvaporatedFromIntercept(v float64) {
	capnp.Struct(s).SetUint64(320, math.Float64bits(v))
}

func (s CropModuleState) ExtraterrestrialRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(328))
}

func (s CropModuleState) SetExtraterrestrialRadiation(v float64) {
	capnp.Struct(s).SetUint64(328, math.Float64bits(v))
}

func (s CropModuleState) PcFieldConditionModifier() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(336))
}

func (s CropModuleState) SetPcFieldConditionModifier(v float64) {
	capnp.Struct(s).SetUint64(336, math.Float64bits(v))
}

func (s CropModuleState) FinalDevelopmentalStage() uint16 {
	return capnp.Struct(s).Uint16(284)
}

func (s CropModuleState) SetFinalDevelopmentalStage(v uint16) {
	capnp.Struct(s).SetUint16(284, v)
}

func (s CropModuleState) FixedN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(344))
}

func (s CropModuleState) SetFixedN(v float64) {
	capnp.Struct(s).SetUint64(344, math.Float64bits(v))
}

func (s CropModuleState) PcFrostDehardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(352))
}

func (s CropModuleState) SetPcFrostDehardening(v float64) {
	capnp.Struct(s).SetUint64(352, math.Float64bits(v))
}

func (s CropModuleState) PcFrostHardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(360))
}

func (s CropModuleState) SetPcFrostHardening(v float64) {
	capnp.Struct(s).SetUint64(360, math.Float64bits(v))
}

func (s CropModuleState) GlobalRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(368))
}

func (s CropModuleState) SetGlobalRadiation(v float64) {
	capnp.Struct(s).SetUint64(368, math.Float64bits(v))
}

func (s CropModuleState) GreenAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(376))
}

func (s CropModuleState) SetGreenAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(376, math.Float64bits(v))
}

func (s CropModuleState) GrossAssimilates() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(384))
}

func (s CropModuleState) SetGrossAssimilates(v float64) {
	capnp.Struct(s).SetUint64(384, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(392))
}

func (s CropModuleState) SetGrossPhotosynthesis(v float64) {
	capnp.Struct(s).SetUint64(392, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisMol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(400))
}

func (s CropModuleState) SetGrossPhotosynthesisMol(v float64) {
	capnp.Struct(s).SetUint64(400, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisReferenceMol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(408))
}

func (s CropModuleState) SetGrossPhotosynthesisReferenceMol(v float64) {
	capnp.Struct(s).SetUint64(408, math.Float64bits(v))
}

func (s CropModuleState) GrossPrimaryProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(416))
}

func (s CropModuleState) SetGrossPrimaryProduction(v float64) {
	capnp.Struct(s).SetUint64(416, math.Float64bits(v))
}

func (s CropModuleState) GrowthCycleEnded() bool {
	return capnp.Struct(s).Bit(5)
}

func (s CropModuleState) SetGrowthCycleEnded(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s CropModuleState) GrowthRespirationAS() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(424))
}

func (s CropModuleState) SetGrowthRespirationAS(v float64) {
	capnp.Struct(s).SetUint64(424, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationStart() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(432))
}

func (s CropModuleState) SetPcHeatSumIrrigationStart(v float64) {
	capnp.Struct(s).SetUint64(432, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationEnd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(440))
}

func (s CropModuleState) SetPcHeatSumIrrigationEnd(v float64) {
	capnp.Struct(s).SetUint64(440, math.Float64bits(v))
}

func (s CropModuleState) VsHeightNN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(448))
}

func (s CropModuleState) SetVsHeightNN(v float64) {
	capnp.Struct(s).SetUint64(448, math.Float64bits(v))
}

func (s CropModuleState) PcInitialKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(456))
}

func (s CropModuleState) SetPcInitialKcFactor(v float64) {
	capnp.Struct(s).SetUint64(456, math.Float64bits(v))
}

func (s CropModuleState) PcInitialOrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcInitialOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s CropModuleState) SetPcInitialOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewPcInitialOrganBiomass sets the pcInitialOrganBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcInitialOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcInitialRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(464))
}

func (s CropModuleState) SetPcInitialRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(464, math.Float64bits(v))
}

func (s CropModuleState) InterceptionStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(472))
}

func (s CropModuleState) SetInterceptionStorage(v float64) {
	capnp.Struct(s).SetUint64(472, math.Float64bits(v))
}

func (s CropModuleState) KcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(480) ^ 0x3fe3333333333333)
}

func (s CropModuleState) SetKcFactor(v float64) {
	capnp.Struct(s).SetUint64(480, math.Float64bits(v)^0x3fe3333333333333)
}

func (s CropModuleState) LeafAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(488))
}

func (s CropModuleState) SetLeafAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(488, math.Float64bits(v))
}

func (s CropModuleState) SunlitLeafAreaIndex() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasSunlitLeafAreaIndex() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s CropModuleState) SetSunlitLeafAreaIndex(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewSunlitLeafAreaIndex sets the sunlitLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewSunlitLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s CropModuleState) ShadedLeafAreaIndex() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasShadedLeafAreaIndex() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s CropModuleState) SetShadedLeafAreaIndex(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewShadedLeafAreaIndex sets the shadedLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewShadedLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcLowTemperatureExposure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(496))
}

func (s CropModuleState) SetPcLowTemperatureExposure(v float64) {
	capnp.Struct(s).SetUint64(496, math.Float64bits(v))
}

func (s CropModuleState) PcLimitingTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(504))
}

func (s CropModuleState) SetPcLimitingTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(504, math.Float64bits(v))
}

func (s CropModuleState) Lt50() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(512) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50(v float64) {
	capnp.Struct(s).SetUint64(512, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) Lt50m() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1240) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50m(v float64) {
	capnp.Struct(s).SetUint64(1240, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) PcLt50cultivar() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(520))
}

func (s CropModuleState) SetPcLt50cultivar(v float64) {
	capnp.Struct(s).SetUint64(520, math.Float64bits(v))
}

func (s CropModuleState) PcLuxuryNCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(528))
}

func (s CropModuleState) SetPcLuxuryNCoeff(v float64) {
	capnp.Struct(s).SetUint64(528, math.Float64bits(v))
}

func (s CropModuleState) MaintenanceRespirationAS() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(536))
}

func (s CropModuleState) SetMaintenanceRespirationAS(v float64) {
	capnp.Struct(s).SetUint64(536, math.Float64bits(v))
}

func (s CropModuleState) PcMaxAssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(544))
}

func (s CropModuleState) SetPcMaxAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(544, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(552))
}

func (s CropModuleState) SetPcMaxCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(552, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(560))
}

func (s CropModuleState) SetPcMaxCropHeight(v float64) {
	capnp.Struct(s).SetUint64(560, math.Float64bits(v))
}

func (s CropModuleState) MaxNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(568))
}

func (s CropModuleState) SetMaxNUptake(v float64) {
	capnp.Struct(s).SetUint64(568, math.Float64bits(v))
}

func (s CropModuleState) PcMaxNUptakeParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(576))
}

func (s CropModuleState) SetPcMaxNUptakeParam(v float64) {
	capnp.Struct(s).SetUint64(576, math.Float64bits(v))
}

func (s CropModuleState) PcMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(584))
}

func (s CropModuleState) SetPcMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(584, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(592))
}

func (s CropModuleState) SetPcMinimumNConcentration(v float64) {
	capnp.Struct(s).SetUint64(592, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(600))
}

func (s CropModuleState) SetPcMinimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(600, math.Float64bits(v))
}

func (s CropModuleState) PcOptimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(608))
}

func (s CropModuleState) SetPcOptimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(608, math.Float64bits(v))
}

func (s CropModuleState) PcMaximumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(616))
}

func (s CropModuleState) SetPcMaximumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(616, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureRootGrowth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(624))
}

func (s CropModuleState) SetPcMinimumTemperatureRootGrowth(v float64) {
	capnp.Struct(s).SetUint64(624, math.Float64bits(v))
}

func (s CropModuleState) NetMaintenanceRespiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(632))
}

func (s CropModuleState) SetNetMaintenanceRespiration(v float64) {
	capnp.Struct(s).SetUint64(632, math.Float64bits(v))
}

func (s CropModuleState) NetPhotosynthesis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(640))
}

func (s CropModuleState) SetNetPhotosynthesis(v float64) {
	capnp.Struct(s).SetUint64(640, math.Float64bits(v))
}

func (s CropModuleState) NetPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(648))
}

func (s CropModuleState) SetNetPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(648, math.Float64bits(v))
}

func (s CropModuleState) NetPrimaryProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(656))
}

func (s CropModuleState) SetNetPrimaryProduction(v float64) {
	capnp.Struct(s).SetUint64(656, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(664))
}

func (s CropModuleState) SetPcNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(664, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(672))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(672, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(680))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(680, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationB0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(688))
}

func (s CropModuleState) SetPcNConcentrationB0(v float64) {
	capnp.Struct(s).SetUint64(688, math.Float64bits(v))
}

func (s CropModuleState) NContentDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(696))
}

func (s CropModuleState) SetNContentDeficit(v float64) {
	capnp.Struct(s).SetUint64(696, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationPN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(704))
}

func (s CropModuleState) SetPcNConcentrationPN(v float64) {
	capnp.Struct(s).SetUint64(704, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(712))
}

func (s CropModuleState) SetPcNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(712, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(720))
}

func (s CropModuleState) SetNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(720, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRootOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(728))
}

func (s CropModuleState) SetNConcentrationRootOld(v float64) {
	capnp.Struct(s).SetUint64(728, math.Float64bits(v))
}

func (s CropModuleState) PcNitrogenResponseOn() bool {
	return capnp.Struct(s).Bit(6)
}

func (s CropModuleState) SetPcNitrogenResponseOn(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s CropModuleState) PcNumberOfDevelopmentalStages() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(736))
}

func (s CropModuleState) SetPcNumberOfDevelopmentalStages(v float64) {
	capnp.Struct(s).SetUint64(736, math.Float64bits(v))
}

func (s CropModuleState) PcNumberOfOrgans() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(744))
}

func (s CropModuleState) SetPcNumberOfOrgans(v float64) {
	capnp.Struct(s).SetUint64(744, math.Float64bits(v))
}

func (s CropModuleState) NUptakeFromLayer() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasNUptakeFromLayer() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s CropModuleState) SetNUptakeFromLayer(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewNUptakeFromLayer sets the nUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOptimumTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOptimumTemperature() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s CropModuleState) SetPcOptimumTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewPcOptimumTemperature sets the pcOptimumTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOptimumTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s CropModuleState) SetOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewOrganBiomass sets the organBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganDeadBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganDeadBiomass() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s CropModuleState) SetOrganDeadBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewOrganDeadBiomass sets the organDeadBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganDeadBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganGreenBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganGreenBiomass() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s CropModuleState) SetOrganGreenBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewOrganGreenBiomass sets the organGreenBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGreenBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganGrowthIncrement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganGrowthIncrement() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s CropModuleState) SetOrganGrowthIncrement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewOrganGrowthIncrement sets the organGrowthIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGrowthIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganGrowthRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOrganGrowthRespiration() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s CropModuleState) SetPcOrganGrowthRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewPcOrganGrowthRespiration sets the pcOrganGrowthRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganGrowthRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForPrimaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForPrimaryYield() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s CropModuleState) SetPcOrganIdsForPrimaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewPcOrganIdsForPrimaryYield sets the pcOrganIdsForPrimaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForPrimaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForSecondaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(22)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForSecondaryYield() bool {
	return capnp.Struct(s).HasPtr(22)
}

func (s CropModuleState) SetPcOrganIdsForSecondaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(22, v.ToPtr())
}

// NewPcOrganIdsForSecondaryYield sets the pcOrganIdsForSecondaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForSecondaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(22, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForCutting() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(23)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForCutting() bool {
	return capnp.Struct(s).HasPtr(23)
}

func (s CropModuleState) SetPcOrganIdsForCutting(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(23, v.ToPtr())
}

// NewPcOrganIdsForCutting sets the pcOrganIdsForCutting field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForCutting(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(23, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganMaintenanceRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(24)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOrganMaintenanceRespiration() bool {
	return capnp.Struct(s).HasPtr(24)
}

func (s CropModuleState) SetPcOrganMaintenanceRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(24, v.ToPtr())
}

// NewPcOrganMaintenanceRespiration sets the pcOrganMaintenanceRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganMaintenanceRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(24, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganSenescenceIncrement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(25)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganSenescenceIncrement() bool {
	return capnp.Struct(s).HasPtr(25)
}

func (s CropModuleState) SetOrganSenescenceIncrement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(25, v.ToPtr())
}

// NewOrganSenescenceIncrement sets the organSenescenceIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganSenescenceIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(25, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganSenescenceRate() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(26)
	return capnp.PointerList(p.List()), err
}

func (s CropModuleState) HasPcOrganSenescenceRate() bool {
	return capnp.Struct(s).HasPtr(26)
}

func (s CropModuleState) SetPcOrganSenescenceRate(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(26, v.ToPtr())
}

// NewPcOrganSenescenceRate sets the pcOrganSenescenceRate field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganSenescenceRate(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(26, l.ToPtr())
	return l, err
}
func (s CropModuleState) OvercastDayRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(752))
}

func (s CropModuleState) SetOvercastDayRadiation(v float64) {
	capnp.Struct(s).SetUint64(752, math.Float64bits(v))
}

func (s CropModuleState) OxygenDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(760))
}

func (s CropModuleState) SetOxygenDeficit(v float64) {
	capnp.Struct(s).SetUint64(760, math.Float64bits(v))
}

func (s CropModuleState) PcPartBiologicalNFixation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(768))
}

func (s CropModuleState) SetPcPartBiologicalNFixation(v float64) {
	capnp.Struct(s).SetUint64(768, math.Float64bits(v))
}

func (s CropModuleState) PcPerennial() bool {
	return capnp.Struct(s).Bit(7)
}

func (s CropModuleState) SetPcPerennial(v bool) {
	capnp.Struct(s).SetBit(7, v)
}

func (s CropModuleState) PhotoperiodicDaylength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(776))
}

func (s CropModuleState) SetPhotoperiodicDaylength(v float64) {
	capnp.Struct(s).SetUint64(776, math.Float64bits(v))
}

func (s CropModuleState) PhotActRadiationMean() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(784))
}

func (s CropModuleState) SetPhotActRadiationMean(v float64) {
	capnp.Struct(s).SetUint64(784, math.Float64bits(v))
}

func (s CropModuleState) PcPlantDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(792))
}

func (s CropModuleState) SetPcPlantDensity(v float64) {
	capnp.Struct(s).SetUint64(792, math.Float64bits(v))
}

func (s CropModuleState) PotentialTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(800))
}

func (s CropModuleState) SetPotentialTranspiration(v float64) {
	capnp.Struct(s).SetUint64(800, math.Float64bits(v))
}

func (s CropModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(808))
}

func (s CropModuleState) SetReferenceEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(808, math.Float64bits(v))
}

func (s CropModuleState) RelativeTotalDevelopment() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(816))
}

func (s CropModuleState) SetRelativeTotalDevelopment(v float64) {
	capnp.Struct(s).SetUint64(816, math.Float64bits(v))
}

func (s CropModuleState) RemainingEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(824))
}

func (s CropModuleState) SetRemainingEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(824, math.Float64bits(v))
}

func (s CropModuleState) ReserveAssimilatePool() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(832))
}

func (s CropModuleState) SetReserveAssimilatePool(v float64) {
	capnp.Struct(s).SetUint64(832, math.Float64bits(v))
}

func (s CropModuleState) PcResidueNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(840))
}

func (s CropModuleState) SetPcResidueNRatio(v float64) {
	capnp.Struct(s).SetUint64(840, math.Float64bits(v))
}

func (s CropModuleState) PcRespiratoryStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(848))
}

func (s CropModuleState) SetPcRespiratoryStress(v float64) {
	capnp.Struct(s).SetUint64(848, math.Float64bits(v))
}

func (s CropModuleState) RootBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(856))
}

func (s CropModuleState) SetRootBiomass(v float64) {
	capnp.Struct(s).SetUint64(856, math.Float64bits(v))
}

func (s CropModuleState) RootBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(864))
}

func (s CropModuleState) SetRootBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(864, math.Float64bits(v))
}

func (s CropModuleState) RootDensity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(27)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootDensity() bool {
	return capnp.Struct(s).HasPtr(27)
}

func (s CropModuleState) SetRootDensity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(27, v.ToPtr())
}

// NewRootDensity sets the rootDensity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDensity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(27, l.ToPtr())
	return l, err
}
func (s CropModuleState) RootDiameter() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(28)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootDiameter() bool {
	return capnp.Struct(s).HasPtr(28)
}

func (s CropModuleState) SetRootDiameter(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(28, v.ToPtr())
}

// NewRootDiameter sets the rootDiameter field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDiameter(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(28, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcRootDistributionParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(872))
}

func (s CropModuleState) SetPcRootDistributionParam(v float64) {
	capnp.Struct(s).SetUint64(872, math.Float64bits(v))
}

func (s CropModuleState) RootEffectivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(29)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootEffectivity() bool {
	return capnp.Struct(s).HasPtr(29)
}

func (s CropModuleState) SetRootEffectivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(29, v.ToPtr())
}

// NewRootEffectivity sets the rootEffectivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootEffectivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(29, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcRootFormFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(880))
}

func (s CropModuleState) SetPcRootFormFactor(v float64) {
	capnp.Struct(s).SetUint64(880, math.Float64bits(v))
}

func (s CropModuleState) PcRootGrowthLag() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(888))
}

func (s CropModuleState) SetPcRootGrowthLag(v float64) {
	capnp.Struct(s).SetUint64(888, math.Float64bits(v))
}

func (s CropModuleState) RootingDepth() uint16 {
	return capnp.Struct(s).Uint16(286)
}

func (s CropModuleState) SetRootingDepth(v uint16) {
	capnp.Struct(s).SetUint16(286, v)
}

func (s CropModuleState) RootingDepthM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(896))
}

func (s CropModuleState) SetRootingDepthM(v float64) {
	capnp.Struct(s).SetUint64(896, math.Float64bits(v))
}

func (s CropModuleState) RootingZone() uint16 {
	return capnp.Struct(s).Uint16(904)
}

func (s CropModuleState) SetRootingZone(v uint16) {
	capnp.Struct(s).SetUint16(904, v)
}

func (s CropModuleState) PcRootPenetrationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(912))
}

func (s CropModuleState) SetPcRootPenetrationRate(v float64) {
	capnp.Struct(s).SetUint64(912, math.Float64bits(v))
}

func (s CropModuleState) VmSaturationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(920))
}

func (s CropModuleState) SetVmSaturationDeficit(v float64) {
	capnp.Struct(s).SetUint64(920, math.Float64bits(v))
}

func (s CropModuleState) SoilCoverage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(928))
}

func (s CropModuleState) SetSoilCoverage(v float64) {
	capnp.Struct(s).SetUint64(928, math.Float64bits(v))
}

func (s CropModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(30)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(30)
}

func (s CropModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(30, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(30, l.ToPtr())
	return l, err
}
func (s CropModuleState) SoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(936))
}

func (s CropModuleState) SetSoilSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(936, math.Float64bits(v))
}

func (s CropModuleState) VsSoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(944))
}

func (s CropModuleState) SetVsSoilSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(944, math.Float64bits(v))
}

func (s CropModuleState) PcSpecificLeafArea() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(31)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcSpecificLeafArea() bool {
	return capnp.Struct(s).HasPtr(31)
}

func (s CropModuleState) SetPcSpecificLeafArea(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(31, v.ToPtr())
}

// NewPcSpecificLeafArea sets the pcSpecificLeafArea field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcSpecificLeafArea(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(31, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcSpecificRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(952))
}

func (s CropModuleState) SetPcSpecificRootLength(v float64) {
	capnp.Struct(s).SetUint64(952, math.Float64bits(v))
}

func (s CropModuleState) PcStageAfterCut() uint16 {
	return capnp.Struct(s).Uint16(906)
}

func (s CropModuleState) SetPcStageAfterCut(v uint16) {
	capnp.Struct(s).SetUint16(906, v)
}

func (s CropModuleState) PcStageAtMaxDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(960))
}

func (s CropModuleState) SetPcStageAtMaxDiameter(v float64) {
	capnp.Struct(s).SetUint64(960, math.Float64bits(v))
}

func (s CropModuleState) PcStageAtMaxHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(968))
}

func (s CropModuleState) SetPcStageAtMaxHeight(v float64) {
	capnp.Struct(s).SetUint64(968, math.Float64bits(v))
}

func (s CropModuleState) PcStageMaxRootNConcentration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(32)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageMaxRootNConcentration() bool {
	return capnp.Struct(s).HasPtr(32)
}

func (s CropModuleState) SetPcStageMaxRootNConcentration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(32, v.ToPtr())
}

// NewPcStageMaxRootNConcentration sets the pcStageMaxRootNConcentration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageMaxRootNConcentration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(32, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcStageKcFactor() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(33)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageKcFactor() bool {
	return capnp.Struct(s).HasPtr(33)
}

func (s CropModuleState) SetPcStageKcFactor(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(33, v.ToPtr())
}

// NewPcStageKcFactor sets the pcStageKcFactor field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageKcFactor(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(33, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcStageTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(34)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(34)
}

func (s CropModuleState) SetPcStageTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(34, v.ToPtr())
}

// NewPcStageTemperatureSum sets the pcStageTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(34, l.ToPtr())
	return l, err
}
func (s CropModuleState) StomataResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(976))
}

func (s CropModuleState) SetStomataResistance(v float64) {
	capnp.Struct(s).SetUint64(976, math.Float64bits(v))
}

func (s CropModuleState) PcStorageOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(35)
	return capnp.BitList(p.List()), err
}

func (s CropModuleState) HasPcStorageOrgan() bool {
	return capnp.Struct(s).HasPtr(35)
}

func (s CropModuleState) SetPcStorageOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(35, v.ToPtr())
}

// NewPcStorageOrgan sets the pcStorageOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcStorageOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(35, l.ToPtr())
	return l, err
}
func (s CropModuleState) StorageOrgan() uint16 {
	return capnp.Struct(s).Uint16(908) ^ 4
}

func (s CropModuleState) SetStorageOrgan(v uint16) {
	capnp.Struct(s).SetUint16(908, v^4)
}

func (s CropModuleState) TargetNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(984))
}

func (s CropModuleState) SetTargetNConcentration(v float64) {
	capnp.Struct(s).SetUint64(984, math.Float64bits(v))
}

func (s CropModuleState) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(992) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(992, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) TimeUnderAnoxia() uint64 {
	return capnp.Struct(s).Uint64(1000)
}

func (s CropModuleState) SetTimeUnderAnoxia(v uint64) {
	capnp.Struct(s).SetUint64(1000, v)
}

func (s CropModuleState) VsTortuosity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1008))
}

func (s CropModuleState) SetVsTortuosity(v float64) {
	capnp.Struct(s).SetUint64(1008, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1016))
}

func (s CropModuleState) SetTotalBiomass(v float64) {
	capnp.Struct(s).SetUint64(1016, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomassNContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1024))
}

func (s CropModuleState) SetTotalBiomassNContent(v float64) {
	capnp.Struct(s).SetUint64(1024, math.Float64bits(v))
}

func (s CropModuleState) TotalCropHeatImpact() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1032))
}

func (s CropModuleState) SetTotalCropHeatImpact(v float64) {
	capnp.Struct(s).SetUint64(1032, math.Float64bits(v))
}

func (s CropModuleState) TotalNInput() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1040))
}

func (s CropModuleState) SetTotalNInput(v float64) {
	capnp.Struct(s).SetUint64(1040, math.Float64bits(v))
}

func (s CropModuleState) TotalNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1048))
}

func (s CropModuleState) SetTotalNUptake(v float64) {
	capnp.Struct(s).SetUint64(1048, math.Float64bits(v))
}

func (s CropModuleState) TotalRespired() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1056))
}

func (s CropModuleState) SetTotalRespired(v float64) {
	capnp.Struct(s).SetUint64(1056, math.Float64bits(v))
}

func (s CropModuleState) Respiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1064))
}

func (s CropModuleState) SetRespiration(v float64) {
	capnp.Struct(s).SetUint64(1064, math.Float64bits(v))
}

func (s CropModuleState) SumTotalNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1072))
}

func (s CropModuleState) SetSumTotalNUptake(v float64) {
	capnp.Struct(s).SetUint64(1072, math.Float64bits(v))
}

func (s CropModuleState) TotalRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1080))
}

func (s CropModuleState) SetTotalRootLength(v float64) {
	capnp.Struct(s).SetUint64(1080, math.Float64bits(v))
}

func (s CropModuleState) TotalTemperatureSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1088))
}

func (s CropModuleState) SetTotalTemperatureSum(v float64) {
	capnp.Struct(s).SetUint64(1088, math.Float64bits(v))
}

func (s CropModuleState) TemperatureSumToFlowering() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1096))
}

func (s CropModuleState) SetTemperatureSumToFlowering(v float64) {
	capnp.Struct(s).SetUint64(1096, math.Float64bits(v))
}

func (s CropModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(36)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTranspiration() bool {
	return capnp.Struct(s).HasPtr(36)
}

func (s CropModuleState) SetTranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(36, v.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(36, l.ToPtr())
	return l, err
}
func (s CropModuleState) TranspirationRedux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(37)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTranspirationRedux() bool {
	return capnp.Struct(s).HasPtr(37)
}

func (s CropModuleState) SetTranspirationRedux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(37, v.ToPtr())
}

// NewTranspirationRedux sets the transpirationRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspirationRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(37, l.ToPtr())
	return l, err
}
func (s CropModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1104) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTranspirationDeficit(v float64) {
	capnp.Struct(s).SetUint64(1104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) VernalisationDays() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1112))
}

func (s CropModuleState) SetVernalisationDays(v float64) {
	capnp.Struct(s).SetUint64(1112, math.Float64bits(v))
}

func (s CropModuleState) VernalisationFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1120))
}

func (s CropModuleState) SetVernalisationFactor(v float64) {
	capnp.Struct(s).SetUint64(1120, math.Float64bits(v))
}

func (s CropModuleState) PcVernalisationRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(38)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcVernalisationRequirement() bool {
	return capnp.Struct(s).HasPtr(38)
}

func (s CropModuleState) SetPcVernalisationRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(38, v.ToPtr())
}

// NewPcVernalisationRequirement sets the pcVernalisationRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcVernalisationRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(38, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcWaterDeficitResponseOn() bool {
	return capnp.Struct(s).Bit(7280)
}

func (s CropModuleState) SetPcWaterDeficitResponseOn(v bool) {
	capnp.Struct(s).SetBit(7280, v)
}

func (s CropModuleState) DyingOut() bool {
	return capnp.Struct(s).Bit(7281)
}

func (s CropModuleState) SetDyingOut(v bool) {
	capnp.Struct(s).SetBit(7281, v)
}

func (s CropModuleState) AccumulatedETa() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1152))
}

func (s CropModuleState) SetAccumulatedETa(v float64) {
	capnp.Struct(s).SetUint64(1152, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1160))
}

func (s CropModuleState) SetAccumulatedTranspiration(v float64) {
	capnp.Struct(s).SetUint64(1160, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedPrimaryCropYield() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1168))
}

func (s CropModuleState) SetAccumulatedPrimaryCropYield(v float64) {
	capnp.Struct(s).SetUint64(1168, math.Float64bits(v))
}

func (s CropModuleState) SumExportedCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1176))
}

func (s CropModuleState) SetSumExportedCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1176, math.Float64bits(v))
}

func (s CropModuleState) ExportedCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1184))
}

func (s CropModuleState) SetExportedCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1184, math.Float64bits(v))
}

func (s CropModuleState) SumResidueCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1192))
}

func (s CropModuleState) SetSumResidueCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1192, math.Float64bits(v))
}

func (s CropModuleState) ResidueCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1200))
}

func (s CropModuleState) SetResidueCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1200, math.Float64bits(v))
}

func (s CropModuleState) CuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(1208)
}

func (s CropModuleState) SetCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(1208, v)
}

func (s CropModuleState) VsMaxEffectiveRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1216))
}

func (s CropModuleState) SetVsMaxEffectiveRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(1216, math.Float64bits(v))
}

func (s CropModuleState) VsImpenetrableLayerDept() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1224))
}

func (s CropModuleState) SetVsImpenetrableLayerDept(v float64) {
	capnp.Struct(s).SetUint64(1224, math.Float64bits(v))
}

func (s CropModuleState) AnthesisDay() int16 {
	return int16(capnp.Struct(s).Uint16(1210) ^ 65535)
}

func (s CropModuleState) SetAnthesisDay(v int16) {
	capnp.Struct(s).SetUint16(1210, uint16(v)^65535)
}

func (s CropModuleState) MaturityDay() int16 {
	return int16(capnp.Struct(s).Uint16(1212) ^ 65535)
}

func (s CropModuleState) SetMaturityDay(v int16) {
	capnp.Struct(s).SetUint16(1212, uint16(v)^65535)
}

func (s CropModuleState) MaturityReached() bool {
	return capnp.Struct(s).Bit(7282)
}

func (s CropModuleState) SetMaturityReached(v bool) {
	capnp.Struct(s).SetBit(7282, v)
}

func (s CropModuleState) StepSize24() uint16 {
	return capnp.Struct(s).Uint16(1214) ^ 24
}

func (s CropModuleState) SetStepSize24(v uint16) {
	capnp.Struct(s).SetUint16(1214, v^24)
}

func (s CropModuleState) StepSize240() uint16 {
	return capnp.Struct(s).Uint16(1232) ^ 240
}

func (s CropModuleState) SetStepSize240(v uint16) {
	capnp.Struct(s).SetUint16(1232, v^240)
}

func (s CropModuleState) Rad24() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(39)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRad24() bool {
	return capnp.Struct(s).HasPtr(39)
}

func (s CropModuleState) SetRad24(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(39, v.ToPtr())
}

// NewRad24 sets the rad24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(39, l.ToPtr())
	return l, err
}
func (s CropModuleState) Rad240() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(40)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRad240() bool {
	return capnp.Struct(s).HasPtr(40)
}

func (s CropModuleState) SetRad240(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(40, v.ToPtr())
}

// NewRad240 sets the rad240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(40, l.ToPtr())
	return l, err
}
func (s CropModuleState) Tfol24() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(41)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTfol24() bool {
	return capnp.Struct(s).HasPtr(41)
}

func (s CropModuleState) SetTfol24(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(41, v.ToPtr())
}

// NewTfol24 sets the tfol24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(41, l.ToPtr())
	return l, err
}
func (s CropModuleState) Tfol240() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(42)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTfol240() bool {
	return capnp.Struct(s).HasPtr(42)
}

func (s CropModuleState) SetTfol240(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(42, v.ToPtr())
}

// NewTfol240 sets the tfol240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(42, l.ToPtr())
	return l, err
}
func (s CropModuleState) Index24() uint16 {
	return capnp.Struct(s).Uint16(1234)
}

func (s CropModuleState) SetIndex24(v uint16) {
	capnp.Struct(s).SetUint16(1234, v)
}

func (s CropModuleState) Index240() uint16 {
	return capnp.Struct(s).Uint16(1236)
}

func (s CropModuleState) SetIndex240(v uint16) {
	capnp.Struct(s).SetUint16(1236, v)
}

func (s CropModuleState) Full24() bool {
	return capnp.Struct(s).Bit(7283)
}

func (s CropModuleState) SetFull24(v bool) {
	capnp.Struct(s).SetBit(7283, v)
}

func (s CropModuleState) Full240() bool {
	return capnp.Struct(s).Bit(7284)
}

func (s CropModuleState) SetFull240(v bool) {
	capnp.Struct(s).SetBit(7284, v)
}

func (s CropModuleState) GuentherEmissions() (Voc_Emissions, error) {
	p, err := capnp.Struct(s).Ptr(43)
	return Voc_Emissions(p.Struct()), err
}

func (s CropModuleState) HasGuentherEmissions() bool {
	return capnp.Struct(s).HasPtr(43)
}

func (s CropModuleState) SetGuentherEmissions(v Voc_Emissions) error {
	return capnp.Struct(s).SetPtr(43, capnp.Struct(v).ToPtr())
}

// NewGuentherEmissions sets the guentherEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewGuentherEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = capnp.Struct(s).SetPtr(43, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) JjvEmissions() (Voc_Emissions, error) {
	p, err := capnp.Struct(s).Ptr(44)
	return Voc_Emissions(p.Struct()), err
}

func (s CropModuleState) HasJjvEmissions() bool {
	return capnp.Struct(s).HasPtr(44)
}

func (s CropModuleState) SetJjvEmissions(v Voc_Emissions) error {
	return capnp.Struct(s).SetPtr(44, capnp.Struct(v).ToPtr())
}

// NewJjvEmissions sets the jjvEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewJjvEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = capnp.Struct(s).SetPtr(44, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) VocSpecies() (Voc_SpeciesData, error) {
	p, err := capnp.Struct(s).Ptr(45)
	return Voc_SpeciesData(p.Struct()), err
}

func (s CropModuleState) HasVocSpecies() bool {
	return capnp.Struct(s).HasPtr(45)
}

func (s CropModuleState) SetVocSpecies(v Voc_SpeciesData) error {
	return capnp.Struct(s).SetPtr(45, capnp.Struct(v).ToPtr())
}

// NewVocSpecies sets the vocSpecies field to a newly
// allocated Voc_SpeciesData struct, preferring placement in s's segment.
func (s CropModuleState) NewVocSpecies() (Voc_SpeciesData, error) {
	ss, err := NewVoc_SpeciesData(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_SpeciesData{}, err
	}
	err = capnp.Struct(s).SetPtr(45, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) CropPhotosynthesisResults() (Voc_CPData, error) {
	p, err := capnp.Struct(s).Ptr(46)
	return Voc_CPData(p.Struct()), err
}

func (s CropModuleState) HasCropPhotosynthesisResults() bool {
	return capnp.Struct(s).HasPtr(46)
}

func (s CropModuleState) SetCropPhotosynthesisResults(v Voc_CPData) error {
	return capnp.Struct(s).SetPtr(46, capnp.Struct(v).ToPtr())
}

// NewCropPhotosynthesisResults sets the cropPhotosynthesisResults field to a newly
// allocated Voc_CPData struct, preferring placement in s's segment.
func (s CropModuleState) NewCropPhotosynthesisResults() (Voc_CPData, error) {
	ss, err := NewVoc_CPData(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_CPData{}, err
	}
	err = capnp.Struct(s).SetPtr(46, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) O3ShortTermDamage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1144) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3ShortTermDamage(v float64) {
	capnp.Struct(s).SetUint64(1144, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3LongTermDamage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1136) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3LongTermDamage(v float64) {
	capnp.Struct(s).SetUint64(1136, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3Senescence() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1128) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3Senescence(v float64) {
	capnp.Struct(s).SetUint64(1128, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3SumUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s CropModuleState) SetO3SumUptake(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s CropModuleState) O3WStomatalClosure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3WStomatalClosure(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) AssimilatePartCoeffsReduced() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CropModuleState) SetAssimilatePartCoeffsReduced(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s CropModuleState) Ktkc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s CropModuleState) SetKtkc(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s CropModuleState) Ktko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CropModuleState) SetKtko(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s CropModuleState) StemElongationEventFired() bool {
	return capnp.Struct(s).Bit(7286)
}

func (s CropModuleState) SetStemElongationEventFired(v bool) {
	capnp.Struct(s).SetBit(7286, v)
}

// CropModuleState_List is a list of CropModuleState.
type CropModuleState_List = capnp.StructList[CropModuleState]

// NewCropModuleState creates a new list of CropModuleState.
func NewCropModuleState_List(s *capnp.Segment, sz int32) (CropModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50}, sz)
	return capnp.StructList[CropModuleState](l), err
}

// CropModuleState_Future is a wrapper for a CropModuleState promised by a client call.
type CropModuleState_Future struct{ *capnp.Future }

func (f CropModuleState_Future) Struct() (CropModuleState, error) {
	p, err := f.Future.Ptr()
	return CropModuleState(p.Struct()), err
}
func (p CropModuleState_Future) SpeciesParams() SpeciesParameters_Future {
	return SpeciesParameters_Future{Future: p.Future.Field(47, nil)}
}
func (p CropModuleState_Future) CultivarParams() CultivarParameters_Future {
	return CultivarParameters_Future{Future: p.Future.Field(48, nil)}
}
func (p CropModuleState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(49, nil)}
}
func (p CropModuleState_Future) GuentherEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(43, nil)}
}
func (p CropModuleState_Future) JjvEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(44, nil)}
}
func (p CropModuleState_Future) VocSpecies() Voc_SpeciesData_Future {
	return Voc_SpeciesData_Future{Future: p.Future.Field(45, nil)}
}
func (p CropModuleState_Future) CropPhotosynthesisResults() Voc_CPData_Future {
	return Voc_CPData_Future{Future: p.Future.Field(46, nil)}
}

type SnowModuleState capnp.Struct

// SnowModuleState_TypeID is the unique identifier for the type SnowModuleState.
const SnowModuleState_TypeID = 0xa4da01d10b3b6acd

func NewSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState(st), err
}

func NewRootSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState(st), err
}

func ReadRootSnowModuleState(msg *capnp.Message) (SnowModuleState, error) {
	root, err := msg.Root()
	return SnowModuleState(root.Struct()), err
}

func (s SnowModuleState) String() string {
	str, _ := text.Marshal(0xa4da01d10b3b6acd, capnp.Struct(s))
	return str
}

func (s SnowModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SnowModuleState) DecodeFromPtr(p capnp.Ptr) SnowModuleState {
	return SnowModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SnowModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SnowModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SnowModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SnowModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SnowModuleState) SnowDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SnowModuleState) SetSnowDensity(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SnowModuleState) SnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SnowModuleState) SetSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SnowModuleState) FrozenWaterInSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SnowModuleState) SetFrozenWaterInSnow(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SnowModuleState) LiquidWaterInSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SnowModuleState) SetLiquidWaterInSnow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SnowModuleState) WaterToInfiltrate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SnowModuleState) SetWaterToInfiltrate(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SnowModuleState) MaxSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SnowModuleState) SetMaxSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SnowModuleState) AccumulatedSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SnowModuleState) SetAccumulatedSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SnowModuleState) SnowmeltTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SnowModuleState) SetSnowmeltTemperature(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SnowModuleState) SnowAccumulationThresholdTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SnowModuleState) SetSnowAccumulationThresholdTemperature(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SnowModuleState) TemperatureLimitForLiquidWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SnowModuleState) SetTemperatureLimitForLiquidWater(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionRain() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SnowModuleState) SetCorrectionRain(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SnowModuleState) SetCorrectionSnow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SnowModuleState) SetRefreezeTemperature(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SnowModuleState) SetRefreezeP1(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SnowModuleState) SetRefreezeP2(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SnowModuleState) NewSnowDensityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SnowModuleState) SetNewSnowDensityMin(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SnowModuleState) SnowMaxAdditionalDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SnowModuleState) SetSnowMaxAdditionalDensity(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SnowModuleState) SnowPacking() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SnowModuleState) SetSnowPacking(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SnowModuleState) SetSnowRetentionCapacityMin(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SnowModuleState) SetSnowRetentionCapacityMax(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// SnowModuleState_List is a list of SnowModuleState.
type SnowModuleState_List = capnp.StructList[SnowModuleState]

// NewSnowModuleState creates a new list of SnowModuleState.
func NewSnowModuleState_List(s *capnp.Segment, sz int32) (SnowModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0}, sz)
	return capnp.StructList[SnowModuleState](l), err
}

// SnowModuleState_Future is a wrapper for a SnowModuleState promised by a client call.
type SnowModuleState_Future struct{ *capnp.Future }

func (f SnowModuleState_Future) Struct() (SnowModuleState, error) {
	p, err := f.Future.Ptr()
	return SnowModuleState(p.Struct()), err
}

type FrostModuleState capnp.Struct

// FrostModuleState_TypeID is the unique identifier for the type FrostModuleState.
const FrostModuleState_TypeID = 0xb4f16ea3144d85a6

func NewFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState(st), err
}

func NewRootFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState(st), err
}

func ReadRootFrostModuleState(msg *capnp.Message) (FrostModuleState, error) {
	root, err := msg.Root()
	return FrostModuleState(root.Struct()), err
}

func (s FrostModuleState) String() string {
	str, _ := text.Marshal(0xb4f16ea3144d85a6, capnp.Struct(s))
	return str
}

func (s FrostModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FrostModuleState) DecodeFromPtr(p capnp.Ptr) FrostModuleState {
	return FrostModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FrostModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FrostModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FrostModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FrostModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FrostModuleState) FrostDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s FrostModuleState) SetFrostDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s FrostModuleState) AccumulatedFrostDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s FrostModuleState) SetAccumulatedFrostDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s FrostModuleState) NegativeDegreeDays() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s FrostModuleState) SetNegativeDegreeDays(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s FrostModuleState) ThawDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s FrostModuleState) SetThawDepth(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s FrostModuleState) FrostDays() uint16 {
	return capnp.Struct(s).Uint16(40)
}

func (s FrostModuleState) SetFrostDays(v uint16) {
	capnp.Struct(s).SetUint16(40, v)
}

func (s FrostModuleState) LambdaRedux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s FrostModuleState) HasLambdaRedux() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FrostModuleState) SetLambdaRedux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLambdaRedux sets the lambdaRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s FrostModuleState) NewLambdaRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s FrostModuleState) TemperatureUnderSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s FrostModuleState) SetTemperatureUnderSnow(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s FrostModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s FrostModuleState) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s FrostModuleState) PtTimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s FrostModuleState) SetPtTimeStep(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s FrostModuleState) PmHydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s FrostModuleState) SetPmHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// FrostModuleState_List is a list of FrostModuleState.
type FrostModuleState_List = capnp.StructList[FrostModuleState]

// NewFrostModuleState creates a new list of FrostModuleState.
func NewFrostModuleState_List(s *capnp.Segment, sz int32) (FrostModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1}, sz)
	return capnp.StructList[FrostModuleState](l), err
}

// FrostModuleState_Future is a wrapper for a FrostModuleState promised by a client call.
type FrostModuleState_Future struct{ *capnp.Future }

func (f FrostModuleState_Future) Struct() (FrostModuleState, error) {
	p, err := f.Future.Ptr()
	return FrostModuleState(p.Struct()), err
}

type SoilMoistureModuleState capnp.Struct

// SoilMoistureModuleState_TypeID is the unique identifier for the type SoilMoistureModuleState.
const SoilMoistureModuleState_TypeID = 0xcd05962719bf7ec8

func NewSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState(st), err
}

func NewRootSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState(st), err
}

func ReadRootSoilMoistureModuleState(msg *capnp.Message) (SoilMoistureModuleState, error) {
	root, err := msg.Root()
	return SoilMoistureModuleState(root.Struct()), err
}

func (s SoilMoistureModuleState) String() string {
	str, _ := text.Marshal(0xcd05962719bf7ec8, capnp.Struct(s))
	return str
}

func (s SoilMoistureModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilMoistureModuleState) DecodeFromPtr(p capnp.Ptr) SoilMoistureModuleState {
	return SoilMoistureModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilMoistureModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilMoistureModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilMoistureModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilMoistureModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilMoistureModuleState) ModuleParams() (SoilMoistureModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilMoistureModuleParameters(p.Struct()), err
}

func (s SoilMoistureModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilMoistureModuleState) SetModuleParams(v SoilMoistureModuleParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilMoistureModuleParameters struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewModuleParams() (SoilMoistureModuleParameters, error) {
	ss, err := NewSoilMoistureModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilMoistureModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(24)
}

func (s SoilMoistureModuleState) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(24, v)
}

func (s SoilMoistureModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(26)
}

func (s SoilMoistureModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(26, v)
}

func (s SoilMoistureModuleState) ActualEvaporation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilMoistureModuleState) SetActualEvaporation(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilMoistureModuleState) SetActualEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilMoistureModuleState) SetActualTranspiration(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilMoistureModuleState) AvailableWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasAvailableWater() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilMoistureModuleState) SetAvailableWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewAvailableWater sets the availableWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewAvailableWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryRise() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilMoistureModuleState) SetCapillaryRise(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilMoistureModuleState) CapillaryRiseRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryRiseRate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilMoistureModuleState) SetCapillaryRiseRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewCapillaryRiseRate sets the capillaryRiseRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryRiseRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryWater() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilMoistureModuleState) SetCapillaryWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewCapillaryWater sets the capillaryWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryWater70() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryWater70() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilMoistureModuleState) SetCapillaryWater70(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCapillaryWater70 sets the capillaryWater70 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater70(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) Evaporation() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasEvaporation() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilMoistureModuleState) SetEvaporation(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewEvaporation sets the evaporation field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvaporation(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) Evapotranspiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasEvapotranspiration() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilMoistureModuleState) SetEvapotranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewEvapotranspiration sets the evapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) FieldCapacity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasFieldCapacity() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilMoistureModuleState) SetFieldCapacity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewFieldCapacity sets the fieldCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFieldCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) FluxAtLowerBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilMoistureModuleState) SetFluxAtLowerBoundary(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GravitationalWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasGravitationalWater() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilMoistureModuleState) SetGravitationalWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewGravitationalWater sets the gravitationalWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewGravitationalWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) GrossPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilMoistureModuleState) SetGrossPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterAdded() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilMoistureModuleState) SetGroundwaterAdded(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterDischarge() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilMoistureModuleState) SetGroundwaterDischarge(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(28)
}

func (s SoilMoistureModuleState) SetGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(28, v)
}

func (s SoilMoistureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasHeatConductivity() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilMoistureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilMoistureModuleState) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Infiltration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilMoistureModuleState) SetInfiltration(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Interception() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilMoistureModuleState) SetInterception(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x3fe3333333333333)
}

func (s SoilMoistureModuleState) SetVcKcFactor(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilMoistureModuleState) Lambda() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasLambda() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilMoistureModuleState) SetLambda(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewLambda sets the lambda field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLambda(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) LambdaReduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SoilMoistureModuleState) SetLambdaReduced(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VsLatitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SoilMoistureModuleState) SetVsLatitude(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SoilMoistureModuleState) LayerThickness() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasLayerThickness() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilMoistureModuleState) SetLayerThickness(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewLayerThickness sets the layerThickness field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLayerThickness(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) PmLayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SoilMoistureModuleState) SetPmLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SoilMoistureModuleState) SetPmLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepthLayer() uint16 {
	return capnp.Struct(s).Uint16(30)
}

func (s SoilMoistureModuleState) SetPmLeachingDepthLayer(v uint16) {
	capnp.Struct(s).SetUint16(30, v)
}

func (s SoilMoistureModuleState) VwMaxAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s SoilMoistureModuleState) SetVwMaxAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmMaxPercolationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s SoilMoistureModuleState) SetPmMaxPercolationRate(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMeanAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s SoilMoistureModuleState) SetVwMeanAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMinAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s SoilMoistureModuleState) SetVwMinAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcNetPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s SoilMoistureModuleState) SetVcNetPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwNetRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s SoilMoistureModuleState) SetVwNetRadiation(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PermanentWiltingPoint() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasPermanentWiltingPoint() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s SoilMoistureModuleState) SetPermanentWiltingPoint(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewPermanentWiltingPoint sets the permanentWiltingPoint field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPermanentWiltingPoint(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VcPercentageSoilCoverage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s SoilMoistureModuleState) SetVcPercentageSoilCoverage(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasPercolationRate() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s SoilMoistureModuleState) SetPercolationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VwPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s SoilMoistureModuleState) SetVwPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224) ^ 0x4018000000000000)
}

func (s SoilMoistureModuleState) SetReferenceEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v)^0x4018000000000000)
}

func (s SoilMoistureModuleState) RelativeHumidity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s SoilMoistureModuleState) SetRelativeHumidity(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ResidualEvapotranspiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasResidualEvapotranspiration() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s SoilMoistureModuleState) SetResidualEvapotranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewResidualEvapotranspiration sets the residualEvapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewResidualEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SaturatedHydraulicConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSaturatedHydraulicConductivity() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s SoilMoistureModuleState) SetSaturatedHydraulicConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewSaturatedHydraulicConductivity sets the saturatedHydraulicConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSaturatedHydraulicConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SoilMoisture() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSoilMoisture() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s SoilMoistureModuleState) SetSoilMoisture(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilMoisture(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SoilMoisturecrit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240))
}

func (s SoilMoistureModuleState) SetSoilMoisturecrit(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilMoistureDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s SoilMoistureModuleState) SetSoilMoistureDeficit(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilPoreVolume() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSoilPoreVolume() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s SoilMoistureModuleState) SetSoilPoreVolume(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewSoilPoreVolume sets the soilPoreVolume field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilPoreVolume(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VcStomataResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256))
}

func (s SoilMoistureModuleState) SetVcStomataResistance(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRoughness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264))
}

func (s SoilMoistureModuleState) SetSurfaceRoughness(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRunOff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(272))
}

func (s SoilMoistureModuleState) SetSurfaceRunOff(v float64) {
	capnp.Struct(s).SetUint64(272, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SumSurfaceRunOff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(280))
}

func (s SoilMoistureModuleState) SetSumSurfaceRunOff(v float64) {
	capnp.Struct(s).SetUint64(280, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceWaterStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288))
}

func (s SoilMoistureModuleState) SetSurfaceWaterStorage(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PtTimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296))
}

func (s SoilMoistureModuleState) SetPtTimeStep(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v))
}

func (s SoilMoistureModuleState) TotalWaterRemoval() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304))
}

func (s SoilMoistureModuleState) SetTotalWaterRemoval(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasTranspiration() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s SoilMoistureModuleState) SetTranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312))
}

func (s SoilMoistureModuleState) SetTranspirationDeficit(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v))
}

func (s SoilMoistureModuleState) WaterFlux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasWaterFlux() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s SoilMoistureModuleState) SetWaterFlux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewWaterFlux sets the waterFlux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewWaterFlux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VwWindSpeed() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilMoistureModuleState) SetVwWindSpeed(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwWindSpeedHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilMoistureModuleState) SetVwWindSpeedHeight(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilMoistureModuleState) XSACriticalSoilMoisture() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilMoistureModuleState) SetXSACriticalSoilMoisture(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SnowComponent() (SnowModuleState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SnowModuleState(p.Struct()), err
}

func (s SoilMoistureModuleState) HasSnowComponent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilMoistureModuleState) SetSnowComponent(v SnowModuleState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSnowComponent sets the snowComponent field to a newly
// allocated SnowModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSnowComponent() (SnowModuleState, error) {
	ss, err := NewSnowModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SnowModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) FrostComponent() (FrostModuleState, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return FrostModuleState(p.Struct()), err
}

func (s SoilMoistureModuleState) HasFrostComponent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilMoistureModuleState) SetFrostComponent(v FrostModuleState) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFrostComponent sets the frostComponent field to a newly
// allocated FrostModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFrostComponent() (FrostModuleState, error) {
	ss, err := NewFrostModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return FrostModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SoilMoistureModuleState_List is a list of SoilMoistureModuleState.
type SoilMoistureModuleState_List = capnp.StructList[SoilMoistureModuleState]

// NewSoilMoistureModuleState creates a new list of SoilMoistureModuleState.
func NewSoilMoistureModuleState_List(s *capnp.Segment, sz int32) (SoilMoistureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22}, sz)
	return capnp.StructList[SoilMoistureModuleState](l), err
}

// SoilMoistureModuleState_Future is a wrapper for a SoilMoistureModuleState promised by a client call.
type SoilMoistureModuleState_Future struct{ *capnp.Future }

func (f SoilMoistureModuleState_Future) Struct() (SoilMoistureModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilMoistureModuleState(p.Struct()), err
}
func (p SoilMoistureModuleState_Future) ModuleParams() SoilMoistureModuleParameters_Future {
	return SoilMoistureModuleParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p SoilMoistureModuleState_Future) SnowComponent() SnowModuleState_Future {
	return SnowModuleState_Future{Future: p.Future.Field(1, nil)}
}
func (p SoilMoistureModuleState_Future) FrostComponent() FrostModuleState_Future {
	return FrostModuleState_Future{Future: p.Future.Field(0, nil)}
}

type SoilOrganicModuleState capnp.Struct

// SoilOrganicModuleState_TypeID is the unique identifier for the type SoilOrganicModuleState.
const SoilOrganicModuleState_TypeID = 0xd594e64f6b5f461d

func NewSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState(st), err
}

func NewRootSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState(st), err
}

func ReadRootSoilOrganicModuleState(msg *capnp.Message) (SoilOrganicModuleState, error) {
	root, err := msg.Root()
	return SoilOrganicModuleState(root.Struct()), err
}

func (s SoilOrganicModuleState) String() string {
	str, _ := text.Marshal(0xd594e64f6b5f461d, capnp.Struct(s))
	return str
}

func (s SoilOrganicModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilOrganicModuleState) DecodeFromPtr(p capnp.Ptr) SoilOrganicModuleState {
	return SoilOrganicModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilOrganicModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilOrganicModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilOrganicModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilOrganicModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilOrganicModuleState) ModuleParams() (SoilOrganicModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilOrganicModuleParameters(p.Struct()), err
}

func (s SoilOrganicModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilOrganicModuleState) SetModuleParams(v SoilOrganicModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilOrganicModuleParameters struct, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewModuleParams() (SoilOrganicModuleParameters, error) {
	ss, err := NewSoilOrganicModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilOrganicModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilOrganicModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s SoilOrganicModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s SoilOrganicModuleState) VsNumberOfOrganicLayers() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s SoilOrganicModuleState) SetVsNumberOfOrganicLayers(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s SoilOrganicModuleState) AddedOrganicMatter() bool {
	return capnp.Struct(s).Bit(1)
}

func (s SoilOrganicModuleState) SetAddedOrganicMatter(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s SoilOrganicModuleState) IrrigationAmount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilOrganicModuleState) SetIrrigationAmount(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ActAmmoniaOxidationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActAmmoniaOxidationRate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilOrganicModuleState) SetActAmmoniaOxidationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewActAmmoniaOxidationRate sets the actAmmoniaOxidationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActAmmoniaOxidationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) ActNitrificationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActNitrificationRate() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilOrganicModuleState) SetActNitrificationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewActNitrificationRate sets the actNitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActNitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) ActDenitrificationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActDenitrificationRate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilOrganicModuleState) SetActDenitrificationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewActDenitrificationRate sets the actDenitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActDenitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastDeltaSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastDeltaSum() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilOrganicModuleState) SetAomFastDeltaSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewAomFastDeltaSum sets the aomFastDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastInput() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilOrganicModuleState) SetAomFastInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAomFastInput sets the aomFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastSum() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilOrganicModuleState) SetAomFastSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAomFastSum sets the aomFastSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowDeltaSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowDeltaSum() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilOrganicModuleState) SetAomSlowDeltaSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewAomSlowDeltaSum sets the aomSlowDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowInput() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilOrganicModuleState) SetAomSlowInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewAomSlowInput sets the aomSlowInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowSum() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilOrganicModuleState) SetAomSlowSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewAomSlowSum sets the aomSlowSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) CBalance() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasCBalance() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilOrganicModuleState) SetCBalance(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewCBalance sets the cBalance field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewCBalance(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) DecomposerRespiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilOrganicModuleState) SetDecomposerRespiration(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ErrorMessage() (string, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.Text(), err
}

func (s SoilOrganicModuleState) HasErrorMessage() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilOrganicModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.TextBytes(), err
}

func (s SoilOrganicModuleState) SetErrorMessage(v string) error {
	return capnp.Struct(s).SetText(11, v)
}

func (s SoilOrganicModuleState) InertSoilOrganicC() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasInertSoilOrganicC() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilOrganicModuleState) SetInertSoilOrganicC(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewInertSoilOrganicC sets the inertSoilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewInertSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) N2oProduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilOrganicModuleState) SetN2oProduced(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedNit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilOrganicModuleState) SetN2oProducedNit(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedDenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilOrganicModuleState) SetN2oProducedDenit(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemExchange() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilOrganicModuleState) SetNetEcosystemExchange(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilOrganicModuleState) SetNetEcosystemProduction(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilOrganicModuleState) SetNetNMineralisation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasNetNMineralisationRate() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilOrganicModuleState) SetNetNMineralisationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewNetNMineralisationRate sets the netNMineralisationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewNetNMineralisationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) TotalNH3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilOrganicModuleState) SetTotalNH3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Nh3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilOrganicModuleState) SetNh3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SmbCO2EvolutionRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbCO2EvolutionRate() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s SoilOrganicModuleState) SetSmbCO2EvolutionRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewSmbCO2EvolutionRate sets the smbCO2EvolutionRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbCO2EvolutionRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SmbFastDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbFastDelta() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s SoilOrganicModuleState) SetSmbFastDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewSmbFastDelta sets the smbFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SmbSlowDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbSlowDelta() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s SoilOrganicModuleState) SetSmbSlowDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewSmbSlowDelta sets the smbSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s SoilOrganicModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SoilOrganicC() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSoilOrganicC() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s SoilOrganicModuleState) SetSoilOrganicC(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewSoilOrganicC sets the soilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomFastDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomFastDelta() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s SoilOrganicModuleState) SetSomFastDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewSomFastDelta sets the somFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomFastInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomFastInput() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s SoilOrganicModuleState) SetSomFastInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewSomFastInput sets the somFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomSlowDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomSlowDelta() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s SoilOrganicModuleState) SetSomSlowDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewSomSlowDelta sets the somSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SumDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilOrganicModuleState) SetSumDenitrification(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNetNMineralisation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilOrganicModuleState) SetSumNetNMineralisation(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumN2OProduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilOrganicModuleState) SetSumN2OProduced(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNH3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SoilOrganicModuleState) SetSumNH3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SoilOrganicModuleState) TotalDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilOrganicModuleState) SetTotalDenitrification(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Incorporation() bool {
	return capnp.Struct(s).Bit(0)
}

func (s SoilOrganicModuleState) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// SoilOrganicModuleState_List is a list of SoilOrganicModuleState.
type SoilOrganicModuleState_List = capnp.StructList[SoilOrganicModuleState]

// NewSoilOrganicModuleState creates a new list of SoilOrganicModuleState.
func NewSoilOrganicModuleState_List(s *capnp.Segment, sz int32) (SoilOrganicModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22}, sz)
	return capnp.StructList[SoilOrganicModuleState](l), err
}

// SoilOrganicModuleState_Future is a wrapper for a SoilOrganicModuleState promised by a client call.
type SoilOrganicModuleState_Future struct{ *capnp.Future }

func (f SoilOrganicModuleState_Future) Struct() (SoilOrganicModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilOrganicModuleState(p.Struct()), err
}
func (p SoilOrganicModuleState_Future) ModuleParams() SoilOrganicModuleParameters_Future {
	return SoilOrganicModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTemperatureModuleState capnp.Struct

// SoilTemperatureModuleState_TypeID is the unique identifier for the type SoilTemperatureModuleState.
const SoilTemperatureModuleState_TypeID = 0xbd3e199eb9b03758

func NewSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState(st), err
}

func NewRootSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState(st), err
}

func ReadRootSoilTemperatureModuleState(msg *capnp.Message) (SoilTemperatureModuleState, error) {
	root, err := msg.Root()
	return SoilTemperatureModuleState(root.Struct()), err
}

func (s SoilTemperatureModuleState) String() string {
	str, _ := text.Marshal(0xbd3e199eb9b03758, capnp.Struct(s))
	return str
}

func (s SoilTemperatureModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTemperatureModuleState) DecodeFromPtr(p capnp.Ptr) SoilTemperatureModuleState {
	return SoilTemperatureModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTemperatureModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTemperatureModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTemperatureModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTemperatureModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTemperatureModuleState) SoilSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTemperatureModuleState) SetSoilSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) SoilColumnVtGroundLayer() (SoilLayerState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SoilLayerState(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtGroundLayer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtGroundLayer(v SoilLayerState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSoilColumnVtGroundLayer sets the soilColumnVtGroundLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtGroundLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) SoilColumnVtBottomLayer() (SoilLayerState, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilLayerState(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtBottomLayer() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtBottomLayer(v SoilLayerState) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewSoilColumnVtBottomLayer sets the soilColumnVtBottomLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtBottomLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) ModuleParams() (SoilTemperatureModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilTemperatureModuleParameters(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilTemperatureModuleState) SetModuleParams(v SoilTemperatureModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTemperatureModuleParameters struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewModuleParams() (SoilTemperatureModuleParameters, error) {
	ss, err := NewSoilTemperatureModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTemperatureModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s SoilTemperatureModuleState) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

func (s SoilTemperatureModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s SoilTemperatureModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s SoilTemperatureModuleState) VsSoilMoistureConst() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVsSoilMoistureConst() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilTemperatureModuleState) SetVsSoilMoistureConst(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewVsSoilMoistureConst sets the vsSoilMoistureConst field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVsSoilMoistureConst(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) SoilTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasSoilTemperature() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilTemperatureModuleState) SetSoilTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) V() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasV() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilTemperatureModuleState) SetV(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewV sets the v field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewV(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) VolumeMatrix() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVolumeMatrix() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilTemperatureModuleState) SetVolumeMatrix(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewVolumeMatrix sets the volumeMatrix field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrix(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) VolumeMatrixOld() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVolumeMatrixOld() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilTemperatureModuleState) SetVolumeMatrixOld(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewVolumeMatrixOld sets the volumeMatrixOld field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrixOld(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) B() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasB() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilTemperatureModuleState) SetB(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewB sets the b field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewB(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) MatrixPrimaryDiagonal() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasMatrixPrimaryDiagonal() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilTemperatureModuleState) SetMatrixPrimaryDiagonal(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewMatrixPrimaryDiagonal sets the matrixPrimaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixPrimaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) MatrixSecundaryDiagonal() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasMatrixSecundaryDiagonal() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilTemperatureModuleState) SetMatrixSecundaryDiagonal(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewMatrixSecundaryDiagonal sets the matrixSecundaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixSecundaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatFlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTemperatureModuleState) SetHeatFlow(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatConductivity() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilTemperatureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatConductivityMean() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatConductivityMean() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilTemperatureModuleState) SetHeatConductivityMean(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewHeatConductivityMean sets the heatConductivityMean field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivityMean(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatCapacity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatCapacity() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilTemperatureModuleState) SetHeatCapacity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewHeatCapacity sets the heatCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) DampingFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fe999999999999a)
}

func (s SoilTemperatureModuleState) SetDampingFactor(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fe999999999999a)
}

// SoilTemperatureModuleState_List is a list of SoilTemperatureModuleState.
type SoilTemperatureModuleState_List = capnp.StructList[SoilTemperatureModuleState]

// NewSoilTemperatureModuleState creates a new list of SoilTemperatureModuleState.
func NewSoilTemperatureModuleState_List(s *capnp.Segment, sz int32) (SoilTemperatureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14}, sz)
	return capnp.StructList[SoilTemperatureModuleState](l), err
}

// SoilTemperatureModuleState_Future is a wrapper for a SoilTemperatureModuleState promised by a client call.
type SoilTemperatureModuleState_Future struct{ *capnp.Future }

func (f SoilTemperatureModuleState_Future) Struct() (SoilTemperatureModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilTemperatureModuleState(p.Struct()), err
}
func (p SoilTemperatureModuleState_Future) SoilColumnVtGroundLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(1, nil)}
}
func (p SoilTemperatureModuleState_Future) SoilColumnVtBottomLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(2, nil)}
}
func (p SoilTemperatureModuleState_Future) ModuleParams() SoilTemperatureModuleParameters_Future {
	return SoilTemperatureModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTransportModuleState capnp.Struct

// SoilTransportModuleState_TypeID is the unique identifier for the type SoilTransportModuleState.
const SoilTransportModuleState_TypeID = 0xb1760f65e652e737

func NewSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState(st), err
}

func NewRootSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState(st), err
}

func ReadRootSoilTransportModuleState(msg *capnp.Message) (SoilTransportModuleState, error) {
	root, err := msg.Root()
	return SoilTransportModuleState(root.Struct()), err
}

func (s SoilTransportModuleState) String() string {
	str, _ := text.Marshal(0xb1760f65e652e737, capnp.Struct(s))
	return str
}

func (s SoilTransportModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTransportModuleState) DecodeFromPtr(p capnp.Ptr) SoilTransportModuleState {
	return SoilTransportModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTransportModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTransportModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTransportModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTransportModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTransportModuleState) ModuleParams() (SoilTransportModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilTransportModuleParameters(p.Struct()), err
}

func (s SoilTransportModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilTransportModuleState) SetModuleParams(v SoilTransportModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTransportModuleParameters struct, preferring placement in s's segment.
func (s SoilTransportModuleState) NewModuleParams() (SoilTransportModuleParameters, error) {
	ss, err := NewSoilTransportModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTransportModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTransportModuleState) Convection() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasConvection() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilTransportModuleState) SetConvection(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewConvection sets the convection field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewConvection(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) CropNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilTransportModuleState) SetCropNUptake(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilTransportModuleState) DiffusionCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDiffusionCoeff() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilTransportModuleState) SetDiffusionCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDiffusionCoeff sets the diffusionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDiffusionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) Dispersion() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDispersion() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilTransportModuleState) SetDispersion(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewDispersion sets the dispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) DispersionCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDispersionCoeff() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilTransportModuleState) SetDispersionCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewDispersionCoeff sets the dispersionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) VsLeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilTransportModuleState) SetVsLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilTransportModuleState) LeachingAtBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTransportModuleState) SetLeachingAtBoundary(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTransportModuleState) VsNDeposition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilTransportModuleState) SetVsNDeposition(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilTransportModuleState) VcNUptakeFromLayer() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasVcNUptakeFromLayer() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilTransportModuleState) SetVcNUptakeFromLayer(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewVcNUptakeFromLayer sets the vcNUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVcNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PoreWaterVelocity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasPoreWaterVelocity() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilTransportModuleState) SetPoreWaterVelocity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewPoreWaterVelocity sets the poreWaterVelocity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPoreWaterVelocity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilTransportModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) SoilNO3() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasSoilNO3() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilTransportModuleState) SetSoilNO3(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewSoilNO3 sets the soilNO3 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) SoilNO3aq() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasSoilNO3aq() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilTransportModuleState) SetSoilNO3aq(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSoilNO3aq sets the soilNO3aq field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3aq(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s SoilTransportModuleState) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SoilTransportModuleState) TotalDispersion() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasTotalDispersion() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilTransportModuleState) SetTotalDispersion(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewTotalDispersion sets the totalDispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewTotalDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasPercolationRate() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilTransportModuleState) SetPercolationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PcMinimumAvailableN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTransportModuleState) SetPcMinimumAvailableN(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// SoilTransportModuleState_List is a list of SoilTransportModuleState.
type SoilTransportModuleState_List = capnp.StructList[SoilTransportModuleState]

// NewSoilTransportModuleState creates a new list of SoilTransportModuleState.
func NewSoilTransportModuleState_List(s *capnp.Segment, sz int32) (SoilTransportModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12}, sz)
	return capnp.StructList[SoilTransportModuleState](l), err
}

// SoilTransportModuleState_Future is a wrapper for a SoilTransportModuleState promised by a client call.
type SoilTransportModuleState_Future struct{ *capnp.Future }

func (f SoilTransportModuleState_Future) Struct() (SoilTransportModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilTransportModuleState(p.Struct()), err
}
func (p SoilTransportModuleState_Future) ModuleParams() SoilTransportModuleParameters_Future {
	return SoilTransportModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type ICData capnp.Struct
type ICData_Which uint16

const (
	ICData_Which_noCrop ICData_Which = 0
	ICData_Which_height ICData_Which = 1
	ICData_Which_lait   ICData_Which = 2
)

func (w ICData_Which) String() string {
	const s = "noCropheightlait"
	switch w {
	case ICData_Which_noCrop:
		return s[0:6]
	case ICData_Which_height:
		return s[6:12]
	case ICData_Which_lait:
		return s[12:16]

	}
	return "ICData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ICData_TypeID is the unique identifier for the type ICData.
const ICData_TypeID = 0xf03d8fd1bbe75519

func NewICData(s *capnp.Segment) (ICData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ICData(st), err
}

func NewRootICData(s *capnp.Segment) (ICData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ICData(st), err
}

func ReadRootICData(msg *capnp.Message) (ICData, error) {
	root, err := msg.Root()
	return ICData(root.Struct()), err
}

func (s ICData) String() string {
	str, _ := text.Marshal(0xf03d8fd1bbe75519, capnp.Struct(s))
	return str
}

func (s ICData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ICData) DecodeFromPtr(p capnp.Ptr) ICData {
	return ICData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ICData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ICData) Which() ICData_Which {
	return ICData_Which(capnp.Struct(s).Uint16(0))
}
func (s ICData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ICData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ICData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ICData) SetNoCrop() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s ICData) Height() float64 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != height")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ICData) SetHeight(v float64) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s ICData) Lait() float64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != lait")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ICData) SetLait(v float64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// ICData_List is a list of ICData.
type ICData_List = capnp.StructList[ICData]

// NewICData creates a new list of ICData.
func NewICData_List(s *capnp.Segment, sz int32) (ICData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ICData](l), err
}

// ICData_Future is a wrapper for a ICData promised by a client call.
type ICData_Future struct{ *capnp.Future }

func (f ICData_Future) Struct() (ICData, error) {
	p, err := f.Future.Ptr()
	return ICData(p.Struct()), err
}

const schema_86ea47c297746539 = "x\xda\xac\xbd\x7f\x9c\x14\xd5\x95\xf7\x7fOU\xcf\xf4\x0c" +
	"\xbfz\x9a*\x94\x1f\x03\xc3\x8f\x81\x80\x0b\x0a\x0cF4" +
	"\xe8\xcc0\x03\x82a\x86\x99\xe9AE1\xa1\xe8\xae\x99" +
	")\xe8\xaej\xaa\xab\x87\x19\x16\x03\x1a\xd8\xa8\xc1\x88\x06" +
	"\xb3\x98\xd5]5\xb8\xab\x067\x98\xc5\x0dfq\x83>" +
	"\x1a1\xab\x1bTL\xd4`\x82\xc6\x185\x9aG\xf3\x98" +
	"g1\x8f\xd9\xfe\xbe>\xa7\xaa\xba\xab{z\xd0\xec\xeb" +
	"\xcb?\xf4\xbc\xef\xad[\xb7\xee\xcfs\xef=\xe7\xdc\xf9" +
	"\x7fhn\x0a-\x18\x1d>KH]TQ\x99\xfb\xda" +
	"\xb9\xea\xf5?\xf8\xa7\x97v\x88\xce\xf14%\xf7\x8b\xcd" +
	"\x17\xdc\xfe\xc6\xe5\x83\x87E(,D\xc3;#\xa6\x93" +
	"\xf2\xf1\x08\xfc\xfc\xe3\x88\xbf\xad\x14\x94\x9b\xf2\xc4\xef\xae" +
	"=\xd0=\xf9:\xd1\xa9\xd0\x9d\xb9\x0bu\xe7o\x9f\xb8" +
	"\xf4\xdd\xbf\x11\x15\x0b\x11\xe7\xf5\xe8DR>\x8c\xe2\xe7" +
	"\xfb\xd1\x0b\x1a\x04\xe5\xfe\xab\x7f\xf2\xc1\xdf\xe7\x0e_'" +
	":\x17\x13\xe5\xe6\x8c\x89\xaeJ\xce\xab~\\T\x10\xe2" +
	"\x8c\xee\x9a.)\xf3\xba\xc2B(s\xba\xb6\x08\xca=" +
	"\xff\xe1\xde\xf3\xe6\x9e\xbcu\xa7\x88\xaa\x94K\xfdr\xd9" +
	"w\x9e~\xed\xe3\xdf\x8b\x0a\x19\x91wuu\x91r\x07" +
	"G\xbe\xbd\xeb{\x82r\xdf\xea[\xa2n\xfdp\xcf\x0d" +
	"\xa2S%)\x10\x9b\x93^\x10\xbb\x8d\x94\x951\xc4^" +
	"\x16C\xec\xbe\xc7o\x98\xf0\xfd\x9f>uSI\xd2\x12" +
	"g;\x86ls\xe4\xf7c[\x04\xfd\xe8\xdam\x8d\xcf" +
	"\xf4\xee\xfaz\xa7BR\xe0\x13G\"Bg\xf7\xbb\xca" +
	"5\xddxjm\xf7\xaf$A\xb9\x0bh\xfd?j?" +
	"~\xeev\xd1\xb9\x88F\xe7\x0ev\xbc\xbf}\xf7Wo" +
	";\xe4\x16\xdf]Wl\x90\x94\xc7\xaf\xc0\xcf\xc7\xae\xe0" +
	"\xd8\xfa\x8b_\xb5\x9e\x96\xdf\xd8':\xebI\xca\xfd\xcb" +
	"7_\xb8m\xef\xb7.\xff\xae\x1b\x9b\xae\xdeJ\xca\xb8" +
	"\xab\xf1\x96\xe8\xd5(\x8e\xd0\xbf~\xf5\xdf\xffpr\xe4" +
	"\x1d\"z\x9e\xf4_\xb3\xff\xef\x13\x8f\xd5\xff\xd7S\x82" +
	"\x1aRW\xbfJ\xca\x8d\x1co\xd7\xd5\x17\x08\xca=\xf6" +
	"\xcb\x81\xd7g\xbd\x10\xff\x8e\xe8\xac#\xcaU|\xad\xba" +
	"G}c\xea\x7fx%q\xf3\xd5\xf7\x92r\xdf\xd5g" +
	"\x0b\xa1<\xcc\xa9>\xb7\xf1\x0b#\x9f\xa7W\xf7\xa3\x06" +
	"\xd5\xc2\xe7q\x16\xa2\xeb&\x922m\x1d~N^\xd7" +
	"\x1b\x12T\xc8b\xa7Bc\x03\x85\x11A\x9c\x95\xdat" +
	"R\xd6jg\x0b\xd1\xa0k\xdf\x0b\x0b\xca\xdd1n\xfb" +
	"\xdb7\x9ez\xe6\x9fE\xe79$\xe5N\xafn\xfa\xc6" +
	"}\x17V\xbf\xe2&~\xfb\xc6\x07Iyh#\xf2\xfd" +
	"\xc0F\xe4\xe4\x82\xdfv\xbd\xa5G\xfa\x1fF\xda\x95\x81" +
	"\xb4G!\xf6\xb8M\x1bH\x99\xb3\x09?gn\xfa/" +
	"YP\xeek?\xff\xde\x84\xdd\x8d\xbf\xfd\x17Tx}" +
	"i\x85\xafL_O\xca5i\xae\x98t]\x95\xa0\xdc" +
	"\xff\xbd\xe4\x87\x87O\\0\xed\x10\xa2\xd7\x94F\x9f\xbc" +
	"u\")\xf3\xb6\xe2\xe7\x9c\xad?B\xea\xf9\x9a\xeb\xac" +
	"#\xa9\xb4\x10\xd7~\xe5^R6\x7f\xe5sB(\xb7" +
	"~\x05\xcd\xe9\x1fw\xb5\xa9\xdf1?<\x84\xacW\x07" +
	"\xb2\xce\xb1\xe7m\x9fN\xca\xc5\xdb\xf1\xf3\xc2\xed\x17\xa0" +
	"\xda\xef\xfc\xf2\xf2\x0f_\xf8\xb7;\x1eA^F\x94\xe6" +
	"\xe5\x99\xeb&\x92\xf2\xcau\xf8\xf9\xd2u\x16\xa2\xe7;" +
	"aQcE!*\xf7\xec|By`\xe7\xdf\x0a9" +
	"\xf7\xe797_\xf7\xd3\xe8\xa8\x1f\x8a\xe8\xa2@\xee\xdd" +
	"\xce2n\xd7\x9fHY\xb0\x0b\x0f\xcc\xdb\x85\xfc^y" +
	"\xc1\xc1G\xff~\xc2%\x8f!\xbf\xa1@~\xc7 \xf6" +
	"S\xbblR^\xd9\xc5\x19\xd8u\x1ej}\xc4\xbf\xef" +
	"\xdf\xf6\xb9\xcbrG\x91\xdf\xea\xd2\xee\xb2\xec\xeb]\xa4" +
	"\xac\xfd:\xd7\xfa\xd7\xff\x09\xf9\xcd\xf7\xebN\x95\xa8\xf4" +
	"\xf36\x7f\xe3\x09Rn\xfc\x06\x1a\xe0\xed\xdf@\xb5/" +
	"\x9e\xe1\xec\xfa\x8d\xfe\x1fO!v\xa8\xf8\xf3\x1a\xa2\xb7" +
	"\xdcF\xca\x9c[\x90\xf1\x99\xb7\xfcV\x90\xdf\xec\x8b\x13" +
	"v\xa3\xee\xd9J\xca\xcc=Hw\xc1\x1e\xa4;o\xdd" +
	"\xc1w\xfe\xf0\xa5\xab\x9fFO\x94\x0b\x9d\xc2\xcd\xf4\x1d" +
	"{\xfeD\xca#{\xf0\xf3\xe1=u$\x02\xfd$:" +
	"\x9er\xe7\x9d\xb8\xfd^}[\xc37\xddB~\xea\xd6" +
	"?)\xcf\xdf\xfa\xb4\x90s\xc7\xbe\xf2\xa3\x09\x9f\xfbV" +
	"\xc5s(\xb7\xd9\x81r;\x0b\x09\xa5n\xbb\x8a\x94\xeb" +
	"n\xc3\xcfkok\x1c#(\xf7\xd3+\xdf\xad\x94'" +
	"\xe5\x9e\xc3\xa7\x8d/\xc9\xef\xb5\xfbo\"\xe5\xf6\xfd\xf8" +
	"y\xeb\xfeK+\x04\xfdj\xda\x7f|\xfb\xcf\xb7^\xfd" +
	"\x9f\x9d*M)\x89\xfb\x9b\x07\xa7\x93\xf2\xc7\x07\xf1\xf3" +
	"\xc3\x07oAk\xbe\xf7\x1f~\xf6\xf5uK#?\xc5" +
	"(=\xa2x\x94V\xb4C\x7fRR\x87\x10\xd98\xc4" +
	"\xcd\xad\xe6\x837\x06\xd5\x9b\xeb\x9e\x17\x9d\xd3I\xca]" +
	"\xd2\xd7\x96\xad\x9d\xfb\xbe\xd7\x0b\xef\xfb\xd7\xef\x93\xf2\xd8" +
	"\xbf\xe2\xb9G\xff\x95\xab\xe3\xff\xbe\xffQ\xf7O\xdf\x7f" +
	"^t\xce\xa0\xca\xdc\xb7\xd6\xfc\xfa\xc5}\xcd\x97\xfco" +
	"\xbf\x9f\xfc@\x92\x94\x0b\x7f\x80\x9f\xe7\xff\xe0\x16\x14\xdb" +
	"\xd7\xcd\xf1\xdfz\xfak/\xbd\x80O\x9c\x13\xa8k\x9e" +
	"$\xde9\xbc\x90\x94\x8f\x0f\xf3|q82JPn" +
	"\xf2\xf2/oZ\xfd\xd6\xde\x97P\x805\xa5\x05\xf8\xdc" +
	"\xd3]\xa4\xbc\xfe4~\xbe\xf6t\x0e\x9f9\xf1\x8a\x8a" +
	"'S\xc7\xefxID\x15*\xedV\xb7\xbf(\x91r" +
	"\xcf\x8b\xc8\xf9]/6\x0a\xcam>\xfaw_\xad\xb9" +
	"\xed{/#m*\x1e\xc9\x94\xc7_|Wy\x8e\xe3" +
	">\xc3q\xf3CQ\xb91\xf2\x9d\x17\xbbH\xf9\xf3\x8b" +
	"hJ\xd5'P&\xf9\"\xeb\x1cOR\xa1\xb4\xdd\xa6" +
	"\xa4\x9f\x18KJ\xf6\x04b\xef:\xf1[A\xb9\xf6\xff" +
	"\xfe\xe5\xe8\xda\xf9\xff\xfd\x0b\x14\x89\\R\x93\xf7\xbc4" +
	"\x91\x94\x87_BF\x1ez\x09=1\xba\xf4\xe4\xdem" +
	"\xa3\xa6\xbc\x86L\x8f\x0e|\"'\xdd\xf6\xb3\xb1\xa4\\" +
	"\xf33\x1er~\xb6\x1a\xc3\xd2\xf8\x87\x1ei\xfaq\x7f" +
	"\xf6\x97\xe5\xd2~\xff\x15\x9b\x14z\x15i\xff\xf9\x15\xa4" +
	"=\xbev\xcf\xaf6\x9c\xdb\xf9k\xa4\xad\x94\x0c\xedw" +
	"\xbc:\x82\x94\x07^\xe5&\xf0\xea?\xa0\x93\xbf\x1a\x1b" +
	"\xf7\xcf\xaf\x1c\xff\xd9\x9b%\x03\xa4\x9b\xf4\xaf.#\x85" +
	"N\xe1\xe7\x9f\x7f\xf5s\xc4\xfe\xcf;\xff\xbcfo\xcb" +
	"\xcdo\xb9#{~\x80\xe0\xd8\x93\xdf\xfa>)\xe7\xbf" +
	"\x85\x8c,x\x0b\xe5\x97oE\x9d\x0a\x8d\x0c|$\xc7" +
	"\xbe\xf9\xad\x89\xa4\xdc\xf5\x16\xc6\x8f\x87\xdf\xfa\x1a>r" +
	"\xc2\x9a\xdf\xfe\xdb\xf3\xb7\\\xfc\x81(\x9eq[\xc3\xb2" +
	"\x10\xcao\xde}A\xf9\xf0]\x9e\x9c\xdf\xc5G\xcey" +
	"e\xf6Xi\xf2\x93\x1f \xdb\xa3K\xb2\xbd\xebw\xf7" +
	"\x92r\xd7\xef\xf8{\x7f\xc7\x13\xee\xdfm\xff\xee\x85\xe7" +
	"~X\xf9\x07\xc4>+\xd0\\y\xfez\xfd\xf7\x17\x91" +
	"\xf2\xe1\xef\xf9\x83\x7f\xcf\xdd\xec\x9a\x8d\xe3\x9e\xbe/r" +
	" W*TTp\x93\xfe\xf82R\xaa\xff\x84\x9f\x15" +
	"\x7f\xfa/Y\xec\xca\xa5,\xd3\x88k_N\xcb\x9a\xad" +
	"\xa52\xe7\xc6\xb5\xb4\x99\xbe\xe8r+~n,\xad\xc7" +
	"\x0d=\xd3\x1a\xd6\x1c\xad\x83\xa8s@\x0e\x09\x11\"!" +
	"\x94\x0b\xe5\x89B\xc4\x16\xc92\xc5\x9ad\x89\xa2D*" +
	"\x81_,/\x15\"\xb6\x18\xbc\x15\\\x92T\x92\x84P" +
	"\x9a\xe5\x8b\x84\x88-\x01_\x01.\xcb*\xa1X\x96\xc9" +
	"\x0b\x85\x885\x81\xaf\x02\x0f\x85T\x0a\x11)+\x99\xb7" +
	"\x82w\x80WT\xa8TA\xa4\xb4\xc9\xe7\x08\x11[\x01" +
	"\xde\x0d^Y\xa9R%\x04\x1a\xe6\xab\xc0\xaf\x04\x0f\x87" +
	"U\xf4\x09e\x0d\xf3\x0e\xf0u\xe0UU*U\x09\xa1" +
	"\xace\xde\x0d\xbe\x1e\xbc\xbaZ\xa5j!\x94k\x98_" +
	"\x09\x9e\x00\x1f1B\xa5\x11\x18\x9c\x98\xaf\x03\xef\x03\x1f" +
	"9R\xa5\x91B(:\xf3\xf5\xe0I\xf0Q\xa3T\x1a" +
	"E\xa4\x18\xcc\x13\xe0i\xf0\xd1\xa3U\x1aM\xa4\xa4\x98" +
	"\xf7\x81;\xe0c\xc6\xa84\x86H\xd9,O\x17\"\x96" +
	"\x04\x1f\x00\x8fDT\x8a\x10)Y\xe6i\xf0m\xe05" +
	"5*\xd5\x10)\x83\x9c\x8e\x03\xbe\x03<\x1aUQ\x09" +
	"\xca\xb5\xcc\x07\xc0w\x82\x8f\x1d\xab\xd2X\"\xe5:\xae" +
	"\x97m\xe07\x80+\x8aJ\x0a\x91\xb2\x8b\xe3\xef\x00\xdf" +
	"\x0d\xae\xaa*jR\xb9\x91\xf9N\xf0=\xe0\xe3\xc6\xa9" +
	"4\x8eH\xb9\x99\xf9\x0d\xe0{\xc1\xcf:K\xa5\xb3\x88" +
	"\x94[\x99\xef\x06\xdf\x07~\xf6\xd9*\x9dM\xa4\xdc\xce" +
	"|\x0f\xf8\x9d\xe0\xe3\xc7\xab4\x9eH\xb9\x83\xdb\xc3^" +
	"\xf0\xbb\xc1'LPi\x02\x91r\x17\xf3}\xe0\xfb\xc1" +
	"'NTi\"\x91r\x0f\xf3;\xc1\xef\x07\x9f4I" +
	"\xa5IB(\xf7q\xfaw\x83\x1f\x00\xaf\xadU\xa9\x16" +
	"\xa2\x19\x97\xdb~\xf0\x83\xe0\x93'\xab4\x19\xa3\x17\xf3" +
	"\xfb\xc1\x0f\xc9\x12\xc9F\x82\xaa\x85D\xd5\x82\xb6\xeb=" +
	"m\x96ieh\xa4\x90h\xa4\xa0F\xf7o\xff\xcf:" +
	"\xbdge\xa6\xf0\x97\xd3\xa7;\x9a\xfbW\xee\xb9g\xf1" +
	"\xef\xbdF!D\xa4G\xeb\xd5]|\xf4\x83F!\"" +
	"qge>\xc5H\xdcis\xf2\x7f\xf4i\x81\x90>" +
	"-\x10\x92\xc8\x04B\x12\x99\xe03\x09?\xe4\x83S_" +
	"\x8a6\x0b\x11\xe9K\xf8\xc1\x1e\x09\xf7%6\xba\xe0\xd4" +
	"/F\xe0\xefL\xfe\xef\xd3\xbb\x9a\x84\x88l\x8a/<" +
	"\xdf\x03Mi\x06V\x1e\xac\xefi\x12b{\x7f\xbcM" +
	"\x1b\xf0\xd9\xd1n\xc4\xd9\xbc\xb1?\xee\xfe\xbd\x03\x7fj" +
	"\xfa&\xef\xcf\x0fv\xfc\xbf\xf7<b\xf9\xe4\xe6\xd7]" +
	"\xb21\xe5%\x1b}\xc3\x05~\x1a\xa7\xbe\x89g\x1a3" +
	"I\xad\xcd0\xbd\xd7,b\x12\xd7\x92\xfa\xca@\xf9\xb9" +
	"\xa4-X\xa2\xa9\xe5V\xd2/\x90pR3\xf2\xbf3" +
	"I\xcd\xff\xed\x8fh\x19\xd9\xd1\x1c\xdd\x1b\xd0Zl+" +
	"\xddf%\xb2I=\xe6h\xb2\xa3w\x10\xdaR~D" +
	"\xbbq\xc2\x06\xb4\xec\x09h\xd9\x13$\x8a\xbe\xed\x8dh" +
	"\xb7N\xe0\x96\x0d\xbe\x0f\xfc\xb7\xde\x88v;\xf3=\xe0" +
	"w\x82\xbfE\xee\x88v\xc7\x847\xd0\"\xc1\x0f\x80\xff" +
	"FvG\xb4\x07&|[\x88\xd8\x01\xf0\xc3\xe0o\x86" +
	"T\xaa\x10By\x84\xdf{\x08\xfc\xe8\x04o\xa4\xc3\x88" +
	"\xf6\xd8\x84\xab\x84\x88\x1d\x01?6\xc1\x1b\xe9X\xaa\xe3" +
	"t\x8e\x81\x9f\x98\xe0\x8dt\x18\xd1\x9e\x9f\xf0}!b" +
	"'\xc0OM\x90\x88\xaa\xdc\x01\xed5\x8e~\x0a\xf8\x13" +
	"D\xaf\xaer\x07\xb4\x8f'\xdc+D\xec\x13\xf0\xaa\x89" +
	"\x18\xe8\xc8\x1d\xd0*&\xfeA\x88\xd8\xa8\x892\xc5\x16" +
	"\x83\x8f\xacVi\x94\x10\xca\xf9\x13\x7f\x82\x01\x1c|\x05" +
	"\xf8\xa8\x11*\x8d\xc6\x00>\x11\xd9o\x05\xef\x00\x1f=" +
	"R\xa51B(m\x13o\xc2\xc0\x0b\xbe\x0e|\xcc(" +
	"\x95\"\x18x'\xe2\xbd\xeb\xc0\xfb\xc0#\x92J5\x18" +
	"H'^\x8f\x01\x13|\x07x\x8d\xacRT\x08\xe5\xda" +
	"\x89\xb7a\x80\x02\xbf\x13<:Z\xa5\xb1\x98\x18'J" +
	"\x84rF\xc0\x01\x04\x8c\x1d\xa3\x92\x82\x9e?\x91\xcb\x19" +
	"\xfc0\xb8\x12QIE9OD\xf9\x1c\x06\x7f\x12\\" +
	"\xadQi\x1cD\xac\x89?\x14\"\xf6$\xf8q\xf0q" +
	"Q\x95\xce\x12By\x8e_|\x1c\xfc$\xf8Y\xe4\x8e" +
	"h\xaf\xf0\x07\xbf\x0c\xfe&\xf8\xd9cU\x1a/\x84\xf2" +
	":\xa7\xf3&\xf8\x07\xe0\xe3C*M\xc0t?\xf1\x09" +
	"!b\x1f\x80\x8f\x9a\x84\x91NQi\xa2\x10\x0d\xd5\x93" +
	"\xf8\x03j&\xc9\x14\xabE\xc0D\xd5\x1d\xd2&L\xda" +
	"(Dl<x=\xf8\xa4q*\xd5\x12)\xd3&m" +
	"\x15\"6\x15|.x\xedY*M&R\xe6L\xb2" +
	"\x85\x88\xcd\x06_\x04>\xf9l\x95\xa6@\x86\x99\x84\x06" +
	"4\x1f|\x09\xf8\x94\xf1*\xd5a\xea\xe6t\x16\x83\xb7" +
	"\x82\xd7MPi*\xa6h\xe6M\xe0\xab\xc0\xa7V\xa8" +
	"4M\x08e%\xa7\xb3\x02\xbc\x1b|\xdaD\x95\xa6c" +
	"\xca\x9d\x84\x82\xe8\x00_\x07>}\x92J3\x88\x94\xb5" +
	"\x1c\xffJ\xf0\x04\xf8\x8cZ\x95\xea1\x85NB\xcb\xea" +
	"\x03w\xc0\xeb+U\x9a)\x84\xb2y\x12j>\x0d\xbe" +
	"\x1b|fX\xa5Y\xe8\x90\x93Pa\xbb\xc1\xef\x07\x9f" +
	"5Y%,]\xef\x9b\xf4**\x18\xfc0\xf8\xe7\xa6" +
	"\xa84\x1b\x15<\xe9O\xe80\xe0\xc7\xc0g\x93Js" +
	"\xd0a&q\x87\x01?\x01>\xa7N\xa5s\xd0a\xf8" +
	"\xbd\xc7\xc1O\x82\x9fS\xa5\xd2_\x09\xa1\xbc2\x09\x15" +
	"y\x12\xfc4\xf8_I*\xcd\x15B\xf9\xe3$T\xe4" +
	"i\xf0P\xadD\xd1\xb9SU\x9a'\x84B\xb5\x1b\x84" +
	"\xe8\xaaE\xfd\x02\xcf\x9b\xa6\xd2\xb9\xa8\xdfZ\xb7~\x11" +
	"P\x8b\x80se\x95\xceC\xfd\xd6\"\x9dZ\xf0\xd9\xe0" +
	"\xe7MWi\xbe\x10\x0d3k\xbb\xf0\xc0\"\x044!" +
	"`\xfen\x95\x16@\xa6\xaa\xc5\x074\x81\xaf\x02_p" +
	"\xb3J\x0bQ1\xb5\xa8\xf8\x15\xe0\xdd\xe0\x0b\xebUj" +
	" R:k\xd1U\xaf\x04O\x807\xccTi\x91\x10" +
	"\x0dZ\xed\x08\xbc \x89\x80\x01\x04,\xaaV\xe9|!" +
	"\x94,?\xb0\x0d|\x1f\xf8\xf9\x92J\x9f\xc7\xe4]\xfb" +
	".&]\xf0\xfb\xc1?/\xabt\x01\x91r\x1f\xf3\x03" +
	"\xe0\x87\xc1/\x98\xa5\xd2b\xd4@-j\xf8\x08\xf81" +
	"\xf0\xc5\x9fS\xe9B\xd4\x00\x7f\xc01\xf0\x13\xe0\x17\x86" +
	"T\xba\x88Hy\x1e%\x17;\x0e~\x12\xfc\xa2\x11*" +
	"}\x015P\x8b\x1e\xf02\xf8\x9b\xe0_\x98\xad\xd2\x12" +
	"t1.\xb97\xc1?\x00_2G\xa5\x8b\xd1\xc5j" +
	"_\x10\"\xf6Q\xadL]\x93%\x8a^|\x8eJ\x97" +
	"`5\xc1\x9f\x15\x9a,S\xac\x06\xfc\x92o\xa8\xd4(" +
	"\x842z2\x92\xa9\x01\xaf\x05o\xfc+\x95\x9aP1" +
	"\x93!c\xa8\xe0S\xc1\x9b\xe6\xaa\xd4,\x842y2" +
	"\xb2?\x15|.x\xf3<\x95\x96\x0a\xa1\xcc\x99\x8c!" +
	"n.\xf8b\xf0\xa5\xe7\xaa\xd4\x82\xa1r2\x1a\xd6\"" +
	"\xf0&\xf0\x96\xf3TjE=NF\x07[\x02\xbe\x02" +
	"\xbcu\xbeJ\xcb0\x84r:+\xc0\xbb\xc1\x97-P" +
	"i9:\xd8d\x0c\x95\xdd\xe0\xeb\xc1\x97/T\xe9R" +
	"\xc8\xa8\x93\xd1@\xd7\x83'\xc1/mPi\x05\x96\xcd" +
	"\x93\xb9\xc5\xa5\x11\xb0\x0d\x01+\x16\xa9\xb4R\x08e\x90" +
	"\x1f\xd8\x06~\x03\xf8\xca\x0a\x95.\x83\xf0\xc7/\xbe\x01" +
	"|/\xf8e\xe7\xab\xf4E\x08s\xfc\xe2\xbd\xe0w\x83" +
	"\x7f\xf1\xf3*\xad\xc2zu2\x0at?\xf8A\xf0U" +
	"\x17\xa8\xd4\x06\xa1\x8a\xd3?\x08~\x04\xbcm\xb1J\xed" +
	"X\x99O\xc6Hp\x18\xfcI\xf0\xf6\x0bUZ\x8d!" +
	"w2\x86\xd6'\xc1\x8f\x83\xaf\x1e\xa9R\x07\x86\xdc\xc9" +
	"\xe8\xf1\xc7\xc1\xdf\x03\xef\xb8H\xa5N!\x94w\x98\xbf" +
	"\x07~\x1a\xbc\xf3\x0b*u\xa1Gr>O\x83\x87\xa6" +
	"H\x14\xedZ\xa2R\x8cH\xa1)\x97\x09\xd15\x05=" +
	"\x128v\xb1J\xddX\x14OA\x7f\xa9\x02W\xc1\xbb" +
	"G\xa9\xb4F\x08%:\x05\xc9\xa8\xe0\xf3\xc1\xd7\x8cV" +
	"\xe9r!\x94y\xcc\xe7\x83\xaf\x02\xbf\xfc\x12\x95\xae@" +
	"\xbf\x9b\x82b\xe8\x00_\x07~E\xa3JWb\xad;" +
	"\x85\xcb\x7f=\x02\x92\x08\xb8\xb2I\xa5\xb5X\x0cL\xe1" +
	"\xc5\x00x\x1a\xfc\xaaf\x95\xae\x12BIMA\x83H" +
	"\x82\x0f\x80_\xbdT\xa5\xab\xd1\x1f\x99;\xe0;\xc0\xd7" +
	"\xb5\xa8\xb4\x0es!\xbfx'\xf8\x1e\xf0kZU\xba" +
	"F\x08\xe5\xe6)(\x9f=\xe0w\x82\x7fi\x99J_" +
	"\x82(2\x05\xe5|'\xf8\xfd\xe0_^\xae\xd2\x971" +
	"\x82NA\x03\xdd\x0f~\x10|\xfd\xa5*\xadG=N" +
	"A}\x1d\x00?\x0c\xae\xadPIC\xbf\xe6t\x0e\x83" +
	"?\x09\xbea\xa5J\x1bP\x8f\xcc\x9f\x04?\x0e\x1e\xbf" +
	"L\xa58\xeaq\x0a:\xd8q\xf0\x93\xe0\x89/\xaa\x94" +
	"\x10\xa2\xe1\x95)\xd3Q@o\"\xe0\x03\x04\xe8\xabT" +
	"\xd2\xb1lu\x03N# T'Q\xb4\xa7M\xa5\x1e" +
	"!\x1a\xa8\x8e\x03F\xd5\xc9\x14\x1b\x8f\x80\xdev\x95z" +
	"\x85P\xc6\xd5a\xb0\xaf\x05\x9f\x0d\xde\xb7Z\xa5>!" +
	"\x94\x99u\x18\x0a\xe6\x82/\x067:T2\xd0'\xeb" +
	"\x90\xd5\xc5\xe0\xad\xe0\x1b;U\xda\x88I\xaf\x0e]\xa0" +
	"\x15\xbc\x03|S\x97J\x9b \xbe\xd4=\x88:\x06_" +
	"\x07\x9e\x8c\xa9\x94D\x1d\xd7MD\x86\x12\x08H# " +
	"\xd5\xadRJ\x88\x86T\x1d\x0f\xae\x03\x08\xd8\x89\x00s" +
	"\x8dJ\xa6\x10\x0d\xd7\xb9\x9f\xb0\x1b\x01\xfb\x10`]\xae" +
	"\x92\x05\x01\xb2\x0e\xc3\xca>\xf0\xfd\xe0\xe9+TJ\x0b" +
	"\xa1\xdcS\x87\xda\xb9\x1b\xfc\x00\xf8\xe6+U\xda\x0c\xc1" +
	"\x86\xe3\x1f\x00?\x0cn\xafU\xc9F\xedpV\x0f\x83" +
	"?\x09\x9e\xb9J\xa5\x0cj\x87\xe3?\x09~\x1c\xdc\xb9" +
	"Z%\x07\xb5S\xc7\xbd\x0c\xfc$x\xb6R\xa5,F" +
	"]N\xe7$\xf8\xdb\xe0\xfd\xebT\xea\x17B\xf9M\x1d" +
	"F\xf5\xf7\xc0O\x83o\xb9F\xa5-\xe8}\\t\xa7" +
	"\xc1CS%\x8a\x0e\x8cQi\x00\xf3\xe1T\xf0\xd0T" +
	"\x0c\xa3\xe0\x83\x11\x95\x061\x8cNE\xfaS\xc1\x97\x80" +
	"o\xadQi+\xe4\x91\xa9\x18\xed\x17\x83w\x83\xffu" +
	"T\xa5\xbf\xc6\xf0\xc7\xe9t\x83\xa7\xc1\xb7\x8dUi\x1b" +
	"z\xcdTTe\x1a|7\xf8\xb5\x8aJ\xd7B^\xe0" +
	"\xf4w\x83\xdf\x0f\xfe\x15U\xa5\xaf\xa0\xb5OE\xaf9" +
	"\x00~\x0c|\xfb8\x95\xb6cV\x9a\x8a\xa6\xf2,\xf8" +
	"\xdb\xe0;\xceRi\x07\xbew*\x04\xf8\xf7\xc0\xab\xa6" +
	"I\x14\xbd\xeel\x95\xae\x83d<\x0d\xe9WM\x83\\" +
	"\x06~\xfdx\x95\xae\x17B\x996\x0d\xe53\x1b\xbc\x15" +
	"\xfc\xab\x13T\xfa*\x9a\xd64\xbcw\x05x\x02|\xe7" +
	"D\x95vB\x0e\x9a\x86\xf2O\x80\xef\x01\xdf\xf5%\x95" +
	"v\xa1\x17s\xfa{\xc0\xef\x04\xff\x9b/\xab\xf47\xe8" +
	"\xc5\xd30l\xed\x03\xdf\x0f\xfe\xb5\xf5*}\x0d\xedd" +
	"\x1a\xf2\x7f?\xf8!\xf0\x1b\xc2*\xdd \x84\xf2\xf04" +
	"\xcc\xaa\x07\xc1\x8f\x80\xdf\xa8\xa9t#F\xe3i\x18\xa5" +
	"\x8f\x80\x1f\x03\xbfi\x83J7\xa1\x1c\xf8\xbd\xc7\xc0O" +
	"\x80\x7f=\xae\xd2\xd7!\x1fM\xc3(t\x1c\xfc$\xf8" +
	"\xee\x84J\xbb\xd1N8\x9d\x93\xe0o\x83\xdf\xac\xabt" +
	"3\xcam\x1a\x97\x1b\xf8i\xf0o\xf4\xa8\xf4\x0d\xb4\x13" +
	".\x87O\xc0\xab\xa6K\x14\xbd\xa5W\xa5[P\x9e\xd3" +
	"\x11\x7f\xd4ttm\xf0=}*\xedA\xd7\x9e\x8e\xf2" +
	"\x19\x0f^\x0f~\xab\xa1\xd2\xad(\xe7\xe9\xe8\x17S\xc1" +
	"\xe7\x82\xdf\xb6Q\xa5\xdb0\x0dO\xc70=\x17|1" +
	"\xf877\xa9\xf4Mt\xf9\xe9(\x87E\xe0M\xe0{" +
	"\x93*\xed\xc54<\x9d\xa7a\xf0\x15\xe0\xb7OR\xe9" +
	"vL\xc3\x1c\xbf\x15|=\xf8\xb7jU\xfa\x16\xa6\xdb" +
	"\xe9h\x9f\xeb\xc0\x07\xc0\xff6\xa5\xd2\xdfb\x94\x9e\x8e" +
	"Qn\x00|'\xf8\xbe\xc9*\xed\x13B\xb9\x8e\xf3\xb9" +
	"\x03\xfcN\xf0;L\x95\xee@=NG{\xbe\x13\xfc" +
	"~\xf0o[*}\x1b\xed\x93\xe3\xef\x07?\x08\xfew" +
	"\xb7\xa8\xf4w\x18\x8d\xf9\xbd\x07\xc0\x0f\x83\xdf\x99V\xe9" +
	"N\xf4\xf7\xe9h\x0f\x87\xc0\x8fN\x97h\xc1]O\x92" +
	"Jwa\xc5\xc8\x1fp\x04\x01\xc7\xf0\xc0\xdf\xdb*\xfd" +
	"=*\x98\x0b\xf4\x18\xf8\x09\xf0\x7f\xc8\xa8\xf4\x0f\xa8`" +
	".\xb8\x13\xe0\xa7\xc0\xefvT\xba\x1bKF~\xf1I" +
	"\xf0\xb7\xc1\xef\x99\xa2\xd2=\xa8`N\xe7m\xf0\xd0\x0c" +
	"\x89\xa2\xf7fU\xba\x17\x1d~\x06*\xb2j\x06\xe6U" +
	"\xf0\xef\xf4\xab\xf4\x1d\xcc\xab3\xd01\xc6\x83\xd7\x83\xef" +
	"\xafSi?*r\x06\x06\xa6z\xf0&\xf0\xfb\xb6\xa8" +
	"t\x1f*f\x06\x1ab\x13\xf8\xaa\x19\x12-\xf8\xc7\xa7" +
	"H\xa5\x7f\xc4\x84;\x03%\xb4\x02\x01\xddx\xe0\x9f\x06" +
	"T\xfa'\x8c\x10\xfc@7\xf8z\xf0\xfb\x07U\xba\x1f" +
	"5\xc6/X\x0f\x9e\x04\x7f`\xaaJ\x0f\x08\xa1\x183" +
	" \xb7\xa6\xc1w\x83?8M\xa5\x071rp\xfa7" +
	"\x80\xef\x07\xff\xeet\x95\xbe\x8b\x1e6\x03\x1f\xbc\x1f\xfc" +
	"(\xf8\x81\xad*\x1d@A\xcf\xc0\x08t\x14\xfcY\xf0" +
	"\x87f\xa8\xf4\x90\x10\xca33\xd0\xb2\x8e\x81\xbf\x89\x0f" +
	"\xf8\xe7\x1f\x93J\xffL\xa4\xbc>\x03%z\x0a\x01\xef" +
	"\xe1\x81\xef\xfd\xb5J\xdf\x83`\xc3\x1f\xf0\x1e\xf8i\xf0" +
	"\x83\xdbT:H\xa4\xfcq\xc6e\x10hg\xc8\xd4U" +
	"/Q\xf4\xe1kUz\x18\x02-\xe7\xf3\x13D\xaf\x02" +
	"\xff\xfeWT\xfa>zR=\x92\x0f\xd5C\xd0\x05\xff" +
	"\x97\xed*\xfd\x0b\x04]\xe6\xa3\xc0\xc7\x83\x1f\xda\xa1\xd2" +
	"!\xf4\xb0z\xbcv<x=\xf8#\xd7\xa9\xf4\x08*" +
	"\xa6\x1e\x0d\xa2\x1e|>\xf8\xbf^\xaf\xd2\xbfB\x10\xaa" +
	"G\xc3\x9a\x0b\xbe\x18\xfc\x07_U\xe9\x07\xe8a\x9c\xfe" +
	"\"\xf0&\xf0\xc3;U:\x8c\x8a\xacG\x0b]\x02\xbe" +
	"\x02\xfc\xd1]*=\x8a\x1e\xc6\xe9\xb4\x82w\x80\xff\xf0" +
	"oT\xfa!&\xdbz|\xd7*\xf0+\xc1\xff\xedk" +
	"*\xfd\x9b\x10\xca\x1a\xe6\xdd\xe0\xeb\xc1\x8f\xdc\xa0\xd2\x11" +
	"\xd4/\xe7s=x\x12\xfc\xb1\x1bUz\x0c\xf5[\x8f" +
	"\x111\x0d\xbe\x0d\xfc\xdf\xebU\xfaw\xc8\xbf\x9c\x9f\x01" +
	"\xf0\xbd\xe0?\x9a\xa9\xd2\x8f\x84Pn\xadG;\xd9\x0b" +
	"~\x10\xfc\xe8M*\x1d%R\x1e\xe2\xf29\x08~\x04" +
	"\xfc\xf1\xaf\xab\xf48F\xd0z\xd4\xfb\x11\xf0c\xe0O" +
	"\xecV\xe9\x09t0\xce\xcf1\xf0\x13\xe0\xffk\x96J" +
	"\xff\x0b\x1d\xac\x1e+\xd5\x97\xc1?\xaa\x97h\xc1\x93\xe9" +
	"Z\x95\x9e\x14B\xf9\xb0\x1eC\xe2i\x04\x84fJ\x14" +
	"\xfd\xf5\xcd*=\x05\xc1u\xe6F!\xbafBp\x05" +
	"~\xe3\x1b*\xfd\x98H\xa9\x9e\x89\x91c\x14\xf8x\xf0" +
	"\xd7oQ\xe9i\"e\xdcL\xe4g<x\xfdL\x89" +
	"\x16<\xb5\xb9V\xa5c\xa8\xc8\x99h?S\x110\x17" +
	"\x0f\xfcx\x8fJ\xcf`\xa8\x9c\x89\x06:\x1b|\x11\xf8" +
	"\xd3\xb7\xaa\xf4\x13!\x94\x053\x91\x9f\xc5\xe0\xad\xe0\xc7" +
	"nS\xe9?0\x85\xcdD\xcf^\x01\xde\x0d\xfe\xcc7" +
	"Uz\x16\x1do&:F7\xf8z\xf0\x9f\xecU\xe9" +
	"9T\xccL\xeex\xe0I\xf0\xff\xb8]\xa5\xffD\xc5" +
	"\xccD\x81&\xc1\x07\xc0\x9f\xfd\x96J?\xc5\x10\xca\x1f" +
	"0\x00\xbe\x13\x1f\xf0\xdc:I\xa5\xe3\x18C\xf9\x8bw" +
	"\"`\x0f\x1e\xf8\xcf}*=\x8f9r&Jt/" +
	"\xf8\xdd\xe0?\xbdC\xa5\x17\xb02\x99\x89\xb1\xf8n\xf0" +
	"\x03H\xe8\xf85\x92J/\x12)\x0f\xccD\x93\xbb\x1f" +
	"\x01\x87\x10\xf0\xfc\x97$\x95N\x10)\x0fs\xc0A\x04" +
	"\x1cA\xc0\x0bv\xadJ/\xa1\x92g\xa2\xd1\x1dF\xc0" +
	"\x93\x08x\xf1\xcb\x92J?#R\x1e\x9f\x09\xe9\xf8(" +
	"\x02\x9eE\xc0\x89>I\xa5\x9f\x13)\xcfpR\xc7\x10" +
	"p\x02\x99z\xe9s*\xbd\x8c\xea\x9f\xb9\x10\x02\x06\xf8" +
	"\xdb\xe0?\x9b\xad\xd2+\x18Ggb\x9dy\x0a\xfc\x13" +
	"\xf0\x9f\xcfQ\xe9U!\x94\x8f\x99\x7f\x04^3K\xa2" +
	"\xe8\xcb\xe7\xa8\xf4\x0bt\xe3YK1\xbe\xceB5\xcf" +
	"\x92h\xc1+\x86\xa4\xd2IT3\x07\xd4\"`6\x02" +
	"^\xdd(\xa9\xf4\x1a\xa4\xe0Y\xa8\xffz\x04\xccG\xc0" +
	"/2\xb5*\xfd\x12=y\x16^1\x1b\x01\x8b\x10p" +
	"\xd2\xa9U\xe9Wh\x01\x9c\xd4\\\x04,\xc6\xbb_\xfb" +
	"+\x95N\xa1\x8b\xcfb\xb9\x19\xbc\x15\xfc\x97sUz" +
	"\x1d-c\x16\xba~\x13\xf8*\xf0_\xcdS\xe9\x0d\x0c" +
	"\xd5\xb3x\xb3\x08\xbc\x1b\xfc\xd4\xb9*\xfd\x1a-f\x16" +
	"\xba\xe6\x95\xe0\x09p:O\xa57!\x0c\xcdB\xd7\\" +
	"\x0f\x9e\x04\x97\xe6\xab\xf4\x1b\xb4\x98Yh\xa9}\xe0\x0e" +
	"\xb8\xbc@\xa5\xb7\x84P6s\xfc4\xf86|@(" +
	"[\xab\xd2o\xd1\xc79C\x03\x08\xd8\x89\x80w\xfak" +
	"Uz\x1bMi\x16\xda\xf6\x0d\x08\xd8\x8b\x94\xd6\xfe\x9d" +
	"J\xef`\x91;\x0b\xb5\xb3\x1b|\xdf,\x89r=\xb6" +
	"\x95q\xbeh$E8\xb9\xda$\x12\x12\x91\xa0\xc8&" +
	"gS~\xd3\x1f\x7f\xc4\xf3[\xccZ&c\xa4\x8c\xa4" +
	"&9z\x87f;-\x96\xde\xd3\x93\xe9\xd2\x13\xd9p" +
	"\\O\xf8\xcf\xe7\xac\x86+b\x8e\x95\xd2\xc8\xd1\x92-" +
	"I+\x93\x95\xed\xe0\xf9@\xcej\x88eSk\xd2\x8e" +
	"\x08k\x9b\xf4|\xda\xfd\x99U\x9ac8Y!'\x0a" +
	"P\xdb`\xf5\xeb\xbd\xb6EY3\xb1\xd4\xb0R\x9a\x9c" +
	"\xc9\x0c\x1fX\x97\xc9\xacN&\xf2\xe1\xe9x3\xc7 " +
	"\xdb\xca\x9a\x89\xd5v\xaf\xac\x994FP\x87L\x9c\xd7" +
	"1H#\xeed\xb5d\xb7M\x9a\x99I\x1b\xb6\xe6\x84" +
	"\x0d\xcb\x0c\xa6\xc0_,%5\xf7\x8b\x0d\xc7\xb0L\xc3" +
	"\xec\xad\xe3O\xf7\x13\xf3\xfe\x1b\xe9\xa5Y\xf4T\x97\xae" +
	"%\x93V\\\xc3\x83B\x0c)I\x11v\xf4\xcc\x10J" +
	"\x88\xdd\xa59z\xd1\x13\x8em\x99V\x8a\x8cx\xab6" +
	"\xb8J7\xc3\xbd}N \xa7K\xb5\x8c\xde\xaa\xd1`" +
	"R7{\x9d>14S\x88\xd0\xadS*\xad\xdb\x9a" +
	"\x93\xb5I/\x13E\xef5\xcc\x98\xac\x9b\x19\xc31\xfa" +
	"\xf5\x8e>-\xa3\xaf\xd05'\xe6\xd8z&S\xc8\xcb" +
	"\x06=im\x19\xaeZ\x86\x04\x0e\xa9\x96\x16\xcd\xde`" +
	"\x0d\xd0`\x92K\xa5\xa3Qs\xfa\xb6h\x83T!$" +
	"\xaa\x10\x94\x8b'u\xcdn\xd5\x06\xa9KK\x18\x88B" +
	"\xc1\x1ai\xb1\x16\xb6\xe9\x8e\x08\xf7Y\x09\xaa\x14RE" +
	"\xa5\x8cGl\xc31\xe2Z\x92\xda[,3\xae\x9bN" +
	"\xa3\xcdi\x07\x9f\xe3(\x92\x96\\=0\xd8\xab\x9b-" +
	"\x96\xe9\xe8\xa6S\xa6\x9c\xdc\x88\xb2\x96\xec\xd6\xfd\xb2*" +
	"[\x08q\xdbJ\xb7\x1aZJDtG\xb7\x8b\xf0r" +
	"\xdb\xca\x88F\x07=c \xd8\xf2\x11\x86\xa4D\xdd0" +
	"AF\xaf\x90\x8bj\xb5\x85\xb1h4z\xfb\x9c\x8e\x05" +
	"\xc3\x05,,\x09h\xd7\x84\x9c\xd2i\x94\x90h\x94\x97" +
	"\xa5\xf6V=%\xc2\x9a\x99(\xcah{\x97\x9e\x10r" +
	"qN\xdc$biI\x8f\x1b=F\xbcM\x1b\xe8\xb2" +
	",\x07\x8d\xbeUO;}E\xcf_\xa19:\xd9k" +
	"\xd2\x8e\xb6I\x1fR\x94\xf1\xacm\xeb\xa6\xd3M~9" +
	"\xd6\xd9z,\x9b\x1a.\x9ad9Ee\x1e\x93\xb3\xa9" +
	"\xc2\xcb\x86\x8b\xd4\x98M!{\xc1\x02\xc8:\x8eaR" +
	"o\xab\x9e\xd4\x06[5y0Ca!QXP." +
	"\xa1\xb9\xdd\x83\xfa\x96kq\xc7\xb2E\xe0\xb1V\x0e\xa3" +
	"^\xa7\xafK\xdf\x9c5\x1am=\xa5\x9bNif\x13" +
	"\xda`\xa6\xb9\xc7\xd1%\x9b\xfb\xca\xf2\xa4\xb5E\xb7\x0d" +
	"\xb3W\x14\xde\xa1\xc7\x93\x86\xa99\xa2d$i\xd5{" +
	"\xb4lRv\xfcFm\xae\xc9\xe8\xcbzz\x8c\xb8\xa1" +
	"\x9b\xf1\xc1BN\xfaS\\\xcc\x97J<jm\xd1\x1c" +
	"\xdd\xee\xd66$\xf5\xc2\x1b\x90V\xbf\x9e\xb4Bi\xe4" +
	"\xb09\x1e\xd7\x93\xba\xdb\xdc\x97\x0e\xb6\x1b\x8em\xf5\xea" +
	"&7V\xca\xf8\x07\xbd\xb9\x04?\x91N\x91n:Z" +
	"2\xe6hr\xaf\x9eO\xd0\xb4V\xf7\xa0\xceE]\xcc" +
	"\xd1\xd3\x81\xe2\xb2\xadlo\x9f\xb3RJ\xa5\xb5\xb8\xb3" +
	"\xda\\\xae\xdb\x8e\x914\x9cA\x7fX\xf2\x1bL+G" +
	"\x94\x9d\x95\xa5\x11\xbdb.*g\x8e+y\xdd\xa9\xbb" +
	"\xcf\xd63}V2!\xca\xf4\xc4e)\xdd\xee\xd5%" +
	"3\xae/OZV\xc20{\xd1k\xed\x88\x15\x98\xad" +
	"\x8a\xa2\xb5YF\x06\xad\xa2|43\x11\xd3M\xa9t" +
	"h\xab\xe3|\xe43\xa8\xf7\xf4\xe8q\xc7\xe8'\xdd\x1d" +
	"e{\xe5@\x93\xd7m\xdb\xb2c\x0eF\xedl&\x9f" +
	"4\xd36=#\"\x19\xad\xb7\xd0\xeb\xf4~-m\xd9" +
	"\x9a#\xe9\x89\xe5\xb6\x95Zi:\xba\x1d\xd7\xd3N\xa1" +
	"0\xf4\x01\xc7F\xfdJ\xb6\x9eqlCK\x96\x1d\xf0" +
	"\x96\x1bz2\xd1\"Yf\x82g\x9f6+a\xf4\x18" +
	"z\xb0P{\x0cSK\xb6\xea\xfd\x12W\xb1_\xc3\xbd" +
	"\x85&\xd3\xd8c\x0c\xe8\x89\xf6`\xa2\x98\xf9[I\xef" +
	"\xd3\xec\x84n\x1a\xb2\xd9[\x1a\xb8\x82\xdc \xb37\xf0" +
	"\xa6\xde\xa4\xb5\x01\xd9$\xaf\x0d\x07Bl]7\x9bm" +
	"]4j+\xcd\x84>\x10\x08\xb02\x99\xe6L\x86x" +
	"fs\xf4L09\x84u\xf4Y\xe4X\x99A\xd3\xe9" +
	"\xd3\xc3\x19#3|hc\xc6\xc8\xb4\x15N\xc2\xf3\x11" +
	"d?B\xc6\xc8t\xe9=\xba\xads[H\x96\xbe\xc8" +
	"6(\xa5\xd9\x83\x1d\xb6\x95h\xcc\xc6\x8b\xe6\x87^\xdb" +
	"\xda\xe2\xf4\xb5\x0cR<\xa9/3\x13:\xda\xa3_\xbf" +
	"nX\x97N\xae\x84`Xa\xb39\x16(.nF" +
	"Y)\xb5\xd2\xb6\x8d^.\x96\x98\xa3\xd9NQ\xabw" +
	"\xe3\x90\x1f\xa7\xd1\xb0\xcce\x81\xb1\xb8?\x83\xb1\xbf\xcf" +
	"\x11r{\xb0\x96V\x9a\x86ch\x94\xfcb\x9c;\x12" +
	"\xd9e\xc2V\xdb\xbd\x9a\xb9\xd4\xa8\xb3RZ&3\xb4" +
	"\x0f\xf9\xd1\xca\x8f\xe1\x86\xd7(\xc9\xcd\xb5e\x87\xf3\xba" +
	"\x1c\x82r\x9b\xe2~\xff\xf5>%\xd7\xc0\xff~\xdd(" +
	"\x84\xc8%u\xad\xa7\xd9\xd65QW\\\xe1\x99\xac\x99" +
	"4\x9cU:\xb9\xc1+\xcd0BK2\x96\xe9\xd3\x12" +
	"z\xe2S\"\xa5\xe3\xab\xac-\xddzJ\xf2G\xfbe" +
	"\x03i+\x93\xb5\xf5\xa2\xa2]e\xa4\x0c\x07-\xf8\xcc" +
	"\xf3u$\xe9\x9c?\xdf\x1b\xb6\xaa\x8e\xf2\xb0\xb5\xca9" +
	"\x7f~<+\x1a\x93\x8e\xd1\xaf\x05\xcbvUv k" +
	"\x0f\x8a\xc6vW\xcc\xcbkXh(/S\xc3P\xd3" +
	"\xa5\xfb\xad\xc1l\x8e\x15\xe5\xa7M\x1b(4w\xc3\xaa" +
	"cA\xae8\xbc\xc5\xb6\x88e\x07\x1d\xd3g\x990\xaf" +
	"5\x04\xde<\xd0\x8eYV\xc8\x9bJ\x92j_\x93&" +
	"\xcc\xbe\x1d\x9a\xadQ\xaa8\xac\xcb\xb2\x08\x95\x8e:\xa7" +
	"\xbe`\x98a\x1a\xa9\xac\x94\xf2\xa5%\xbb\xa43\xfb1" +
	"\xe4T\xa0L\x97[v\xb3'\x9f\x96J\xc9\xab\xd3\xce" +
	"_\x10\xbbM\x1b\xf8Kb{y\x0d\xc4F[n\xbc" +
	"\x94{e>\xa2\xa9;m\xa8\x1eI7\xb5\xa2\xea\x09" +
	"\x8c\xa5\xa6\xeet\xf4Y\x8eE\xfehA\x99\xa20[" +
	"\x8f\x1b\x946\x9cRa\x9d\xc3\x8c\x94F\xee\xd8\x91\x8d" +
	"GJdK\xb7\x1ce\xbf \x9b\xbd\x85I9\xe9\xd8" +
	"\xf4\x8a\\.\x1f5\x13\x1c\x1e?5n\xb8X\xaev" +
	"\xb3A~6\xe4\xa5\xf3\x8b\x92\x82\xbcK\xad:D\x0e" +
	"G\x9c\xe1\xb1\x8e\xf6\xe1\x03#E\xc2\x96\x9fAr\x03" +
	"\xbb,\xf9L\x81u\x96S\x92_\x16VH7Q[" +
	"\x96\x19\xc9\xe8E\x13v{6\xb5A\xb7\xa5\xd5=\xad" +
	"\x9e\xf0\xe2\xcelu\x98\xda2\xc1d8\x1e\xad\xee\xe1" +
	"\xa1\xb0\xa8\x00]\xc9t9\xd9Vj\x956\xc8\x93\xe6" +
	"\x901\xc6m\xbc\xe47\xb0\x08ZXi,\xcb\x1dd" +
	"-\x11)7\xcarh\xab\xaeQ\xa0\x0e\xcbE\xb9\xd4" +
	"\xd6I7\xdd8\x94\x19&\x8aE[\x9c\xbe\x95f\xdc" +
	"\xd6#\xe5\x04\xd0t\x9c\xbf\x12\xe2!OJ\xf9Q\xa8" +
	"\xec\xa7!\xeaJ)\x91Yn\xd9\xdc\x82\xed\xc1\xb5\x86" +
	"\x9e\xa4\x84\x1f\xb5\xa6\xa0\x01-\xa8\xccC1=n\x99" +
	"\x09~,\xac'?\xc3c\xc4\x8f\xb5d\x9d\x08\x06\x9e" +
	"O\x8d\xdf&yCj\xbe\xcb\xd6\xb9\xeb\xb6re\x03" +
	"\xe9M\xcf\xc41\xb9s\xf9\xa0x\x86\xfd\xea\x18\xe9\xa6" +
	"\x1b\xb9N\xe7\x01\xb8\xfcZ\xdd\xea\xd7\xed\xb8\x96q\xa8" +
	"U\x1bd\xe9\xab\xb8k[\xbcVl\xd5E\x1d\xf7\x9a" +
	"@\xa3\xeb\xd0lg\xa9!YI\xab\x17\x0b\xcf\xf6\xe5" +
	"\xc6\xc0\x10\xc9\xad\x03\x92\x88)\xc2\x86\x96,4k\x0c" +
	"@i\xdd&\xc3J\xf0J\xbe\xd1]\xb0\x17\x1e\xeb\xb3" +
	"\x9c\xe6\xb8\xd3E\xfe:!\xd2\xa6kE\xa9&5\xd3" +
	"i\x15\x8d\xbcJ\x1f,\x04X\xe8\xdf\x98\xea\xbbm\xde" +
	"\xcc(]\x02\xdb\x9ed$\xe9\xcb \x99:v\xd9-" +
	"\x0f[\xc7\xac\xd5\xafK\xddXi\x05z^\xa0[\xd9" +
	":fB\xc3\x94z\xcf\x9cRF\xb7\xfb\xf5f\xf2\x07" +
	"\xf6:\xbd\xc3\x0aHo\xe9x\x97\x9e1\x12Y\xd2\xdb" +
	"\xbb\x90SQ\x1c\x926l\xd2\x1c\xcb\x1e\x8c9v8" +
	"(\xa1\xdb\x96\xe5\xa0\x0f\x89\xb0V\x8e6j\xc5\xdb\x0d" +
	"\x08h\xd5\xcd\x8c\x08\xa3\xb4J\xaa\x9f\x03\x0bk\xf8!" +
	"M\xa9\x8b\xc3%H\xe7\x1b\xb2\xbcY\xa1\xd9ZJ\x14" +
	"%\xbe\xac\xa7G',\x19\xb00*\x9f\xc4r\x8b\xec" +
	"T\x99\xb5\x10\xc2.\xb5\x09=y\x95\xd6[\x9c,\xe6" +
	"m\x11ai\xcd_\x8f\xe5q\x1dp[i\xf4\xabD" +
	"\xd82\xf5\xc02\x11\xc9w\xe8d\xea\xee\xe0]\"\x89" +
	"\xf4\xa7b\x98M\xdd\xcd&L\x0b\xe1`\x0b\xcfXF" +
	"\xb2\xc5\xea\xd7E\xc4\x0e\x8a\x84\xfd\x99\x98e$\xdb\x0c" +
	"2u[K\xb6\xb7Xu\xee\xb4R*\xdeYF2" +
	"\x96\xd6\xe3R\xf1\x0eB\xab\x1e\x0eJ\x9fnb\x9f\xbe" +
	"\xd3\x90\x8e\xb3R~\x0f\x19\xf1U,t\xca\xba6\xb4" +
	"\xa0\xf3q\x90\xc8*=R\xdc\xab\xe2\xbc\"j\xa6\x1e" +
	"G\xc7\xf0\x14\\M{!N\x9b6\x80\xb6P\xbc\x9d" +
	"S\x14\x0c\xb1\xacx\x7f\x86\x03\xdb$7\xe7\x05q*" +
	"Rn\x10\xf3b\x7f\x91|\xb1z\x98\x08\x9f\xb6a\x92" +
	"q\xac\x94\xe6h]\x84\xf5\x8e\xa3\x99q\xd2\x8brd" +
	"\xd9Z\xafh\xd4y\x18,\xdd\xef\xccp\xa8\xbeZD" +
	"84,\xa4\x8apHP\xce\xd1\xec^\xddio\xa1" +
	"\xe2/\xf0\x93u\x8c\x94\x1es\xf4\xb4(^\xf9\x03\xaf" +
	"1\x13:\xd9\xcd\xa65`h\"\xbf\xdf\xd0\x9f\xe9\xb6" +
	"l'k\x89H\xd1 \xe5`P)\xcc\xa3\xa5\x98@" +
	"Q\x8a\x11nTE\xc1\x9e\\\xac9+S\xe9\xb0\x16" +
	"/\x09m_i\x8ap:[J\xd7\xa4E\xc4\x09\xee" +
	"23\xee\xd23\xa2.m\xd8z\"8X\xf1\x08V" +
	"\xbck\x93\xc9\xa6x\x18\xa4v\x7f\x8b\xab8\x1d\xc8\xd7" +
	"\xab\xbc\xfd\xd6\xa2\x90n=E\xbe\xb4\x1a\x8e\x05\xf6\xb1" +
	"\x1c\xafj\xa5,Wm\xb7\xe5\xef Qa\x01\xee\x8f" +
	"\xa7\xa2\xfc\\\xe8\x07\x93+V\xe9\x099;p\xe68" +
	"\xadzO\xa40}\xb9U\xd7\xaf\xdb\xa6\x9642^" +
	"\x0cm0 \x0b\x17\x87-\xd7\xe2a\xc7\x0a\xf6\x88\xcb" +
	"9\\22^\x0e6g\x0d\xcc\xc6r9i\xe5\x0a" +
	"\xcd\xd1\xedV\xc9\x95:]9\x0fb^`ym5" +
	"\xc4x\xaa\x16\x11\xcc\xec\xc5\x07\x05\xab,,\xeb\xc8N" +
	"\xb5j)\xadW/n}VC\xac\xcf\xb2\x9dn\xd2" +
	"\xbdp*z:1h\x98\xbd\xab\xb3\x8e\x08\xbcK\x8b" +
	"\xc7\xb3\xa9lR\x13\x8d\x8e\x9eX\xd6]P\x9e\xf7\x03" +
	"$GOt\xe7\xe7\xb3\x92=\xfb@\x1cO\x9aj\xb1" +
	"\xad\xb4'\x1a\x05\xda\x0c\x96\xa969z\xa2%\xeb\xe4" +
	"W\xe6\x85M\x9f\xb4e;z\x828\xb0du\x90\xc9" +
	"\xa6xR\xa4\xac\xee\x06\x17\xf7\x13\x9b'L\xbd\x85\xbc" +
	"G3\x81J\x8b\xf3\xb6go+\xb9\xdb\x9e\x83\x10B" +
	"\xfd1\xae?\xd3\xa6\x0d,\xeb\xe9\x91xkK\xcf\x8f" +
	"\xc6i\xb9h4^\x99J\xeb\xa6.9\xb6\xb6!\xa9" +
	"\xb3\xbc\xdcZ\xb4_\xa5y{,\"\x8c\xf6\"\x0bi" +
	"\xb4\x9c\xcb\xf1\xea\xd4\xc9\xda\x98\xfd\x86\xe1\xd4\xa5k\xf1" +
	">=Q\xa8\x87\x8c\xa3\xa7c\xc6V]\xc8\x0b\x17\xb9" +
	"\x83\xd0\xf8 \x0d/\\4\xdf\xc5\x1f\x08\xaa\xb3\xb5\xc4" +
	"\xc2E%-\xab\x91\xe1\xfcR\xea\xf4X\xc9!q\xb7" +
	"\xbb\xb44\xf2v\xc3L\xe8\x03\xee\xfb\xb9\x94\xbc\xbf\xe7" +
	"\x0b\x11\xd88\xcb&\x91\xa0\x97\xef\xed\xee\x9f\xf3\x0b[" +
	"CY\x1deb\xd3\xb2\x94\x91\xc9\xa0\xb3f\xa8\xa6`" +
	"\x83(\x88j\x04\xe56n\xec\xe7p\x111,\xb3\\" +
	"\x84~\xcb\x9d\xbd\x84\xac#8o\xd7\xef\x05\xc7m+" +
	"\x8d\x85\xab\x14\xdc\xe6\xcad\x93\x0e\xbf-o_\xea\xc5" +
	"\xce\xb8\x06l\x1d\xa2\x8eM\xdb\xa8\xa6`\xf8\xe9\xa7\x97" +
	"uw<Dc\x87\x1f%ol\xe7E\xf1ZZ " +
	"\x91\xbc\x85\xbf\x17\xc3\xc8\\\xc1\xbbG\"\x82N\x10\xac" +
	"\xd9\xd4\xb2\xa4eJ\xeeN\xd8\xb2~\xddt\x96c\xa8" +
	"-\xf4\xc2\xba\xa4s\xfe\xfcTp+\xc67\xc6\x0b\x07" +
	"\x8d\xf1\xdat-\x93\xb5\xf5\xc4\xa5%\x1b\xe1+\xcd\x1e" +
	"\xcbNq\xea\xe7\xb6j\x8e\xdem]\xae\x85\x93Y\xbd" +
	"\x83\xa8\xb3\xca7m\x89\xce9G\x88\xcez\x99:\xe7" +
	"K\xe4\x19\xeaE\xe7-\x14\xa2s\xb6L\x9d\x8b$\x8a" +
	"$ \x0b\xd5\xe4n\x8eN\x97\x0f\xfc\xf7[\x7f\xeb}" +
	"V]\xbf\x96\xcc\xea\xa565\xe9P0c\xf8\xde." +
	"\xaf|\xc0Y^\xc8\xe0\xf5\xa3\xf2\xaf_v\x91\x10\x9d" +
	"M2u\xae*\x18\x0aFW.\x15\xa2\xb3U\xa6\xce" +
	"\x8e\x82\x95`\xb4m\x83\x10\x9d\xabd\xea\xbcR\xa2\xc6" +
	"\xb4_\xday\xdf\x04n\xb6\xb6{\x95\x9a\xdf\\\xf6\xea" +
	"\xa7[\x84\x07\xd3\x85-g?\xbb\x15\xc1\xec6gY" +
	"^0\xe2\x85\xfd\xc9\xcf\x94m\xce5Qt\xe5E\xc1" +
	"\\\x93J\x12Q\xb4\xad\xab\\\xae\xf3>\x04\xdc\\7" +
	"j)+\xeb\xcf\xe3G\x174Ab\xf0\xf6\xfb\x05y" +
	"#f\xae\x87\xff\xfd\x8c\xb7\x14\xcb\x1ae\xa2\xb8\xfd\x0c" +
	"\xcbv\xa6\xa4\x9a\xedB\x95\xe6\xcby\xc1V!:\xe7" +
	"\xcb\xd4\xb9D\xfa\xff\xa9;\xf8\xb6UR\x89mU," +
	"\x02\x80,-\x92C4\x8a\x8d\xaa\xae!VU'\x99" +
	"bI\x92\xa8\xc6\xb3\xa92h\x83\x10\xb1>`\x87\x90" +
	"Y\xcf\xa6j3m\x14\"\x96\x06\xdf\x06.yV\xa2" +
	"\x83t\x99\x10\xb1\x01\xf0\x9d\xe0rH\xa5\x90\x10\xcau" +
	"\x9c\xce\x0e\xf0\xdd\xe0\xa1\x0a\xd7\xa6\xeaFN\xe7\x06\xf0" +
	"\xbd\xe0\x15\x9e\x95\xe8\xadt\xbd\x10\xb1=\xe0w\x82W" +
	"zV\xa2wp\xfc}\xe0\x87\xc0\xc3\x9e\x95\xe8\xc3t" +
	"\x95\x10\xb1\x83\xe0G\xc0\xab<+\xd1G\xe9^!b" +
	"G\xc0\x8f\x81W{V\xa2O\x91-D\xecI\xf0\xe3" +
	"h\x1a#T\x1aI\xa4<G\xac\x0f\x0d|\x12\xd1G" +
	"6\xb96U\xaf\xd0MB\xc4N\x82\xbfM\x12\xe54" +
	"\xafuR|\x85f\xf7\xeb\x19'_\x09\x05\xbf\x19\xc1" +
	"a\xad]\x84\xb5\xe0\xd1\xa6_w\x91\xf6 \xce\xe8z" +
	"\xa2\x95\xcf\xcf\xc5\xd0>\x9e\xebs\xdf\xd4*\xc2e\xc7" +
	"\x80\xd2\xa1\xad\xa6`\xae\x9e\x8f\xe0.\xed\xc9`\xb94" +
	"-\xca\xc4\xf1\xe7c\x11\xd1\x1c=S\xd8\x09\x09\xbel" +
	"\x8c?\xb8k\xb6&dnyyo'^2i~" +
	"\x11\x96\xf5^?\x08ke\xe3}\xfa\x80\x1d\xb7\xadL" +
	"\xa6\xc5\xb6\xa4tsBK{\x92]\xe1\x10\xd4\x15\x9a" +
	"\x86TG@x\xf2:A\xaaJ3\xb5^\xde}\xf1" +
	"z\x82[c\xe7\xf2\x82\xc3\x88{\x87\x7f[\xdd\x11\xda" +
	"\x83m\x9a\xe3\xe8\xb6\xd7\x8d\xc3\xba\xdb\x8d\x17\xe5\x0d\x11" +
	"\xaf\xe1\xc6\x95\xef3y\xd3j\x83\x1bW\xa1\xd3H\xf9" +
	"Nc\x17u\x1a9\xdfi\xbe-Dl\x1b\xf8\x0d\xe4" +
	"\x9bV\x0b\xa1\xec\xe2\xd6\x18\xe8\x1c^\xa7\xb9\x95\xf9^" +
	"\xf0\xbb)`Z}\x17\xb7\xd2\xbb\xc1\x0fP\xc0\xb4\xfa" +
	"\x01\xe6\x07\xc0\x0fS\xc0\xb4\xfa\x11\xda*D\xec\x10\xf8" +
	"Q\x0a\x98V?\xc6\xbc\xd0iF\xe4;\x0d\xeb\x1f\x83" +
	"\x9f\xa0\x80i\xf5\xf3\xccO\x80\x9f\"\xdf\xb4Z\x08\xe5" +
	"5N'\xd0k\xacT\xab=\xd8\xa6\x11J\xb5\xc52" +
	"\x9dpp\xbd\xa4Y\xa9\xf6\x15\x8bZ,\xe1-\xce\x83" +
	"|uCY\xde\xa2\xd9\x1b4J\x19\x09\xde'\x96\x8b" +
	"\x03cIkK\xab\xa4\xc7\xf94$\xe6hfB\xb3" +
	"\x13\"\x18c\xb9\x96q\xce\x10#\xad\xd9N\xf3\xea\xb6" +
	"n\xb2\x9aW\xb7!51L\x18\xd2\x09\x84\xc5M\xde" +
	"\x19j\x16\x8d\xeece\x03\xf0Lij1JZ[" +
	"\xba\xadX\xdb\xd2H\xd1sC\x83\x8b\x9e\xf6\xb7\xacE" +
	"\xe9\xde\x99?\xfe\x87\x02\xe3\x7f\x1b\xb36+\xa1'c" +
	"\x8c\x9b[Z\xbb\x1b\xad\xcb\xb5\xa1\xb2\xc8\xf4\x82,\x12" +
	"-'\x8c\x84\xb5x\xc2\x179\x87\x91@*\xcbN\xe9" +
	"^'\xcd\xcf\xe7\x99s=\xd2m\xc8)7\x17,d" +
	"D/C?\x8e\x8e^\x8aI\xd6\x97\xd6\x85\xd8\x9e5" +
	"7\x99\xd6\x163\xdf\xb5+\x86\xe9\xdam\x06\xef\xf7\x14" +
	"\xba6\x96\xc9\x9d!\x0a\xb8n\x89\xd2U9?\x1fB" +
	"\xb63\xc1\xef\xef*|j~\x8e\x86T1W\xa6\xce" +
	"\xc5\x92[-\x06o\x01\x9aTSH\xb2\x8c\x141\x8c" +
	"\x9ds\xcc\xb4\xb6\x94\xd89wv\xc8!Rxt\x99" +
	"&\xfdD\x88\xd8lI\xa6\xd8\"\xa90#/\x900" +
	"\x93\xce\x07^\"\x05f\xe4\x0b\xa5.!b\x8b\xc1[" +
	"\xa5\xc0\x8c\xdc,\xdd&D\xac\x15\xbcC\x0a\xcc\xc8m" +
	"\xcc;\xc0\xd7I\x81\x19y-\xf3u\xe0}R`F" +
	"\xd6%\xcc\xbc\x09\xf0\xb4\x14\x98\x91S\x12:\x7f\x1a|" +
	"\x9b\x14\x98\x91\x07%\x0c\x8e\xdb\xc0o\x90\x0a3r\xc3" +
	".\xe9\x1c\xc2\xd4\x8e\x80;\xa5\xc0\x94|\x87\xf4'\x8c" +
	"^\xe0\x07\xc0Gx\xa3\xcb\x03\x12F\x91\xfb\xc1\x0f\x81" +
	"\x8f\xf4F\x97\x87\x99\x1f\x04?\x02>j\xb4k\xe7\xfc" +
	"(\xbf\xf8\x08\xf81\xf0\xd1c\\;\xe7\xa7$\x88\x08" +
	"O\x82\x1f\x07\x1f\x13q\xed\x9c\x9fc\xfe,\xf8\xcb\xe0" +
	"\x91\x1a\xd7\xce\xf9%.\x88\x97\xc1\xdf\x04\xaf\x89\xbav" +
	"\xce\xafs\xbd\xbc\x0d\xfe\x11xt,\xdb9+\x1fr" +
	"\xc5|\x00\xfe\x09\xf8X\xc55s\xfe\x18\xf1\xbbd\x99" +
	"b\xa3dHv\xa6\xb5\xa5Kwt\xc9D_m\xd1" +
	"\xd2Z\xdcp\x06\xdb\xb4\x81\xc0\x08\x828\x85\xdd\xdfb" +
	"\x8a\xa5ma\xf9\xdbc[[u\xf3\x0a\x8d\x1c\xdd^" +
	"i\xc6L\x8b\x0a\xc3F\xd2\xd8\x9c5\x12\xe5\xc3\xdc\x85" +
	"\x89\xb5\x92\xcc\x1e#\xe9\xd8\x9a\x13\xd8\x8dKi\x03h" +
	"\x99\xfe>n\xe9F\x029z\x82\xc3\x8b\x83\x91\xbb\x94" +
	"\x9et\xc8?\xf2\x0cgm\xbd(\xb49\x1e\xcf\xcaH" +
	"\x01\x1f\x9eW\xa1):\xc0*\xb7\xe1\xc4'\xe5\xcb-" +
	"{\x15>\xa71\xc1[3\x85!\xd5\xb2m=\xee\x18" +
	"\xa2\xd12\xbb4\xc3,\x1b\x80\xdc\x06\x0f\x14l]\xdf" +
	"\xaa\x97\xcf\xa7\x1f*\xe4\x80\xdeZ\x00.\x0c\x1c\xafn" +
	"\xe1R \xf7D\xa3\xcd\x08\x1c\xa2\xe0k\xdb\xb4\x81f" +
	")\xe1j\xbfh\xc9V7VI\x1dwh\xf1M\"" +
	"l\x04\xd4X\x86i\x1dFpG\xa7\xdcPR4\xac" +
	"C@\xe4a.\xef\xfd\x0d\xc3\x1c\x06z\x8c\xf3B\xce" +
	"\xea\x9d\xbb\xf3B\xccS\xec\xaf\xe3(\xda\xe7\xb3\xb2D" +
	"4\xdd\x1df\x9e\x91\xb1\x1ex\x16\xf8e\xdfm\x0c\x86" +
	"\x99\x97\xd8\xdd\xcbq\xf0\x93\xbe\xdb\x18\x0c3\xafp2" +
	"'\xc0O\x81O#w\x98yMf\xaf\x06\xe0\xef\x81" +
	"O\x95\xdca\xe6\x1d\xf9]\xf4\x16\xf0O\xc0\xebdw" +
	"\x98\xf9X\xfe\x83\x10]!\xf4\x96\x90'\"a\x94\xa9" +
	"\x0e\xe1\xb5!\xf0\x9a\x90'\"a\x94\x19\x1dB6k" +
	"\xc0kC\x9e\x88\x04\x11fB\x08\x9dz<x}\xc8" +
	"\x13\x910\xc8L\x0b\xb1i\x12\xf8\xdc\x90'\"a\x90" +
	"\x99\x13\xc2\xe86\x1b|Q\xc8\x13\x910\xc8,\x08\xf1" +
	"h\x0b\xbe$\xe4\x89H\x18d.\x0cA\x94[\x0c\xde" +
	"\x0a>%\xe4\x0e2\xcd!\xb6R\x04\xef\x08y\xa2\x13" +
	"\x06\x99\xb6\x10\x8f\xb6\xe0\xeb\xc0GV\xb8\x83\xccZN" +
	"\xe7J\xf0\x04\xf8\xa8Jw\x90\xd18\x9d\x04x\x1a|" +
	"t\xd8\x1ddR!\x14g\x1a|\x1b\xf8\x98*w\x90" +
	"\x19\x0c}\x1f\xa3-\xf8\x0d\xe0\x91j\xd7\x97\xc2\xae\xd0" +
	"\x1bB\xc4v\x83\xef\x03\xaf\x19\xe1\xfaR\xb8\x9d\xcbm" +
	"\x1f\xf8~\xf0\xe8H\xd7\x97\xc2=\x9c\xce~\xf0\x83\xe0" +
	"cG\xa9t\xb6\x10\xcaC!\x88\x9c\x07\xc1\x8f\x80+" +
	"\xa3]_\x0a\x8f\x86^@\xeb\x01\x7f\x16\\\x1d\xe3\xfa" +
	"Rx\x86\xf9q\xf0\x93\xe0\xe3F\xb2/\x05\xe5\x15." +
	"\xff\x97\xc1\xdf\x04?k\x94\xebJ\xe1u.\xe7S\\" +
	"\xef\x15\x12E\xcf\x1e\xedz\x87\xa9\xae`K\xe0\x0a\xd4" +
	"#\xf8\xf81\xaew\x98i\x15l\x99\x04\xde\x04>\xa1" +
	"\xc6u\xa5pq\x05[&\x81\xaf\x02\x9f(\xb9\xae\x14" +
	"VV\xa0~W\x80w\x83O\x8a\xb8\xae\x14:+\xd8" +
	"5\x02\xf8:\xf0\xda\x1a\xd7\x95\xc2\xda\x0a\xe4\xf3J\xf0" +
	"\x04\xf8\xe4\xa8\xebJA\xab\xc0\xa4\xb3\x1e<Y!Q" +
	"c\xc6p\xf4\x0e\xac[\xf2\x1e\xf7\x8a\x97\xe7\x0e\x19\x96" +
	"\xd9\xa6;}Vc\xa2\x85\x05\x02_`\xd2\xcd~~" +
	"0\xef\xd9\xca\x93\x1bxe\x85\x80\xbc\xbb,\x7f\xbb-" +
	"\xe3\xee)\x11\x8f\xdd\xa5\xdb\xa0[\x9a\x9d\x94\x95IK" +
	"}\xbam\xc4!.\x97=\x11)\x8e\xd6\xb2z\xa1\x1f" +
	"\xaf\xaeHr\xac\xcb\x18)\xceC\xde=\x95\x97\x87^" +
	"oW\xcb\x9dRz,\xbb\xd1\xdd\xd2\xa2\x9a\x82O>" +
	"\x7f\xe5\xcbGq\xc9\xac\x90S\x08\xce{\xe8\x0a\x04c" +
	"\x04&\xef\xbc\x01\x8b\xd1\xbc\xd3\xc0@\x9c6\xcb\xc8\x08" +
	"wr\xa8)x\xc7\x0bD\xc0RM\x84M#N5" +
	"\x05\xe7o\xc1\x97\xd8\x9a)\xea2i\xcbv\xa8\xa6\xe0" +
	"\x02\xd2\x8b\x81Im\xf5\xc0`/y\xca\xa7A=\x0c" +
	"O{\xb7\x85|w4\x84<\xe4\x1d\x92\xfa\xef\xc8\xa6" +
	"X\xc0\x14uI#\x13\x98\x992\xd9\xd4j\xbbw\xb9" +
	"N,|f\x8aT\x1f\x13\x9a\x91\x1c\x8ceS\xe4\x89" +
	"\xa6\x199\xf0`>\x90\x1f\xb7\x1d\xa3$a?\\*" +
	"Y\xb9\xeaa\xbb\xb5\xad\xe4\xf5\x9aI~\x84Fc\xab" +
	"\x1e\x8c\xd0\x97Me3K\xb5$if\\o\xd1l" +
	"\xbbnpu\x7f\xb9\xd7\x146\xe0x\xea-|\x85\x95" +
	"vX'^2\x97y\xa7\x03\xde\xfeb`\x7f\xbf\x10" +
	"\xa7Kw\xb2\xb6Y.\x8eW\xce1r\xf44o\x7f" +
	"\x94\xd9\xdc\x88'\x8d\x94\xe6\xe8\xbc\xf9\xa1\x95hE\xd4" +
	"\x14\xe69\x7fw\xc2Mq\x99\xa8\xeb\xd7M'\xbf\x8d" +
	"1\xca?\xdf\xb1\xf5~\xc3\xcaf\xa8U\x1b\xcc,\xeb" +
	"\xd7Myh\x1cV\xe7\xe7\xd3\xbb5i\xcbl\xd7\x07" +
	"\"N\xab6\x98\xdfUHh\x83\x99+\x0c\xa7\xcf\xdb" +
	"l\xf17\xe3\xd1\x9c\xdac\x8e-\x8a\xce\xfeA]\x9d" +
	"\xf3Rm|\x84\xb0j}c\xacX\xa1\xf7\xd3\x966" +
	"\x85J9\xd7]\xbeD\x1c}\xc8.\xe3\x83\x85\xc5J" +
	"~\x01w>\xe0b\x99:[%\xca\x99\x06\xab\xf2\x0e" +
	"w~\x9a\xc9&{\xce\x10\\ny\x19\xf3z\x1c\xf7" +
	"7\x7fm\x13\xf6v\x1bW\xc8!\x8a\xb2\xd0\xf1\x0e\xef" +
	"\x9c\xbcG2\xc5N\x93DB\xb8B\xc7\x1fyw\xef" +
	"#\x92\xa9K\x0a\xc8\x1c\x7f\xe6\xcd\xbdO\x10{\xbc\xe4" +
	"m\xe7B\xe6\x18\xc7\x12\xb7\x0a\x89{*/m$W" +
	"\xe6\x98\xcc+\x83Z\xf0\xc5\xbc\xb4\x91]\x99\xe3|\x96" +
	"\xf4\x17\xe5\x97B\x15!W\xe6h\x93\xd8\xaa1\xbf\xe4" +
	"\xa9\x94\\\xa1Cg^X\xf2\x84eW\xe8HI\xdf" +
	".Z\xf2T\x85\\\xa1cPb\xebE\xf0\x9d\xbc\xb2" +
	"\xa9p\x85\x8e\xeb8\xfeN\xf0\xbbyeS\xe9\x0a\x1d" +
	"w\xf1\x0a\xe3\xee\xfc\x0afd\xd8\x15:\x1e\x95\xbe\xef" +
	"\xaf`xE2\xaa\xca\x15:^\x92\x96bR\x05\x7f" +
	"\x8fW6\xd5\xae\xd0\xf1\x0e/\xfdxE\x12bWu" +
	"\x15\xaeK:\x92/\x0b\xac<\xa2\x91\x11\xae\xccQ-" +
	"\xe3\xb3\xaa\xc0\xeb\xd9S\xddHW\xe6\x98\xc6|*\xf8" +
	"\x12\xacT|-FJ5\xf7kFR\xdb\x10N\xea" +
	"\xed\x81\xdaG\xe5vh\"\xe2\xed\xdc\xe5\xdd\xac\xfa]" +
	"\xd62\xfbY\x02\x97\x87\x9e\x06\xb3\x15\xc7\x10c\xaa\x84" +
	"\xd1\xd3\x93\xcd\x18\x96h4\x8b,\x95\xf2f\x0cF&" +
	"\xad\xdb\x99\xb2)\xfaad\xb9\xcf\x0eQS\xe8\xcf\xac" +
	"\xd2\xb5x\x9fA\xaefi\xe0\xec;\xc9\xdc\xec\xa5f" +
	"g)\xa67M\xb6\x07\x03\xe7\x8b\xed\xadz\xda\xca\x88" +
	":\xa3x&\x8d\xbb\xa7\xeb\xa4/w\xd5\xf4\xe42\x9a" +
	"8\x96\xad\xbb\xfd\xfer=i\xc5\x0d\x87\x06\x87\xe6\xea" +
	"\xb3h\xa6l\xc7D\xd6\xbe\xba\xa1\x9c\xc2J\xfb\xea\x06" +
	"M\xd0\xe6!g\xe9\xc3\xe8>\xb0~\x94\x91!.," +
	"\xcb\x1c\xaa\xcd\xa1\xdbq+\xe9\xca-l\xcbU\x1a\xa1" +
	"\xeciM\xcc\x9b\x88M#\xde\xe6\xb5\x0b\x7foG\xa0" +
	"\xe7\xefu\x07%\"\xe5\xcf\xf2\x13A\xf9\xde;\xaeQ" +
	"\xaaY\xbe\x1c\x05>>\xe4o\x99\x12)\xe3BXl" +
	"\xd7\x82\xcf\xf6\xd7\x032\x912\x93\xf9\\\xf0\xc5\xa1\x80" +
	"7\xca\xf3\x99/\x01_\x11\x0ax\xa3\\\xc6|\x15\xf8" +
	"\x95\xfez\xa0\x92HY\xc3|\x1dx\x9f\xbf\x1e\x08\x13" +
	")z\x08\xcb\x93$\xf8\x80\xbf\x1e\xa8\"R\xb2\xcc\x0b" +
	"r6o\x99\x12)\xbb\x98\x17\xe4l\xde2%Rn" +
	"g~'\xf8\xfd!\x7f\xcb\x94H\xb9/\xb4\xb5H\xce" +
	"\xf6\xbdQ>\x14z\xb0H\xce\xf6\xbdQ>\xca\xfc\x08" +
	"\xf8\xb1P\xc0\x1b\xe5S\xcc\x8f\x81\x9f\x08\x05\xbcQ>" +
	"\xcf\xeb\x87\x13\xe0\xa7B\x01o\x94\xaf1g9\xfb\xbd" +
	"P\xc0\x1b\xe5;\xbc^z\x1b\xfc\xa3P\xc0\x1b\xe5\x87" +
	",\xaf\x7f\x00\xfeI\xa8\xe0\x8d\xb2\xe1\xe3\xd0X\xc2\x82" +
	"\x0c\x82pME\xc1\x1de\xc3\xe8\x0a\x0e\x18\x9f\x97\xd8" +
	"}\x7f\x94\x01\x89}~E\xc0\x1f\xe5\xbc\x8aW1(" +
	"\xe7%y\xdf\x1f\xe5\xc5\xcc[\xc1;*\x02\xfe(\xdb" +
	"\x98w\x83\xaf\xaf\x08\xf8\xa3\xbc\xa6\xe2\xa2\"\x89\xdd\xf7" +
	"G\xa91_\x07\xdeW\xe1\xfb\xa3D\x0d3\xcfK\xf2" +
	"\xae?J\"\xc5\xe0\x95B\x1f\xb8S\xe1\xfb\xa3$R" +
	"6W\xa0\xe4\x1c\xf0\x1d\xe0S\xa6\xa84\x85H\xb9\x96" +
	"\xe3o\x03\xbf\x01\xbc\xaeN\xa5:\xb4\x08\xe6;\xc1\xf7" +
	"\x80O\x9d\xaa\xd2T\"\xe5\xe6\x0av\x01\x04~'\xf8" +
	"\xb4i*M#R\xee\xa8`\x17@\xe0\xf7\x83O\x9f" +
	"\xae\xd2t\xb4\x14Ng?\xf8A\xf0\x193\\\xe7m" +
	"\x0fU\xa0\xe5\x1e\x02?Z!\x11\xd5\xbb\xbe\xdb\x1e\xe3" +
	"\x05\xcd\x11\xe0c\x15\x12\x86\x883n\x84\xe7>\xbf\xe5" +
	"\xa3\x1f\xad\xfbz%\x1fdf\xce\xbc%\x9e{\xe1\xff" +
	"\xfd\xf8\xe7\x7f\xbfv\xba\x1b7\xb5\x01\xe9\xba\xaa\xb0\x18" +
	"(\xf2\x91\xfd\xd8\x9f<\xf0\xe1\x0bm\x1b:\xfc\xd8H" +
	"\xf9\x0c\xb1\xffZ\xfd\xe7K_\xdf\xba3\x98v\xab\xa4" +
	"kN\xdfgM\xfb\x0c\xb1K\xd2^\x03qYrO" +
	"z\x02\xb6l\xe5\xacE\xbc\xd2[#\x15\xce\x86\xdc'" +
	"\"x\xc4{\xe0\xdbw\xe0\xdf+\xc1\"<\xe3\x03G" +
	"O\xf1\x99\xd5_\x9a\xb4\xf6\x19\x92\xf6\x1ex4\xf8@" +
	"\x9bh\xd4\x06Z\x1c\xab\xdd\xf7%zK\x93\x10\xbcy" +
	"\x1d[\xdd\xb6\x9c\xb4\x8c\xd3m\xc5V\xb7\x05\x8e\x1c\xbc" +
	"\"x\x91S\xe1\x88mK\xfd\xc3\x87\xd5m\x81\xc3\x87" +
	"\xa2\xb2\xf2\"\x06R<SD>;A\xba\x81s\x95" +
	"\xdc\xe1)\xbb~\xd7y\xf8\x1bCc\x05OXr\xf3" +
	"Zj\x7f\xf7\xc6\xe7\xcf\xe1X\xde\x91JL\xc8mK" +
	"\x8b\x9c\xbcNlbk\x1f#e8-I\x8d\x06\x97" +
	"\xb1\x85\x9c?\x17\x1e\xe7\x1aHa.\xd3V\xcb\x03F" +
	"B\xf3m\x97\x83\x0d?\x7f\xda\x1f,U\xc8\xcc\x86\xa3" +
	"\x7f\x86\xa7\x02\xdef=\xd56\xcb&\xc7\x8b.\xfb\x16" +
	":E\x89g\xd2z\xbc\xd9\xd4t\xc9\xb66\xb4\xea\xfc" +
	"\xaa\x1e#\xae9\x86\xec\x8b\x1eE\xd1\x8dT\xca\xda\x80" +
	"\xc6\x9c)\xceI\xbb\xbc\xba!\xd8\xd6\x86\x8f\xb7bQ" +
	" ^c\x02\xaf\\P\xf4\xa2g\xf0\"7`aQ" +
	"\xc0;\x85\x80\x862\x1f\xdc7\x98\xb0\xad\xe4`FD" +
	"\x8c\xcc\x17\xbdUg\xee\xdd\xef\xef{y\xdb\xbaMn" +
	"\xeb\x8c\xf3\xfe\x08\x04\xb6e\xa6n\xf7\xe6;\xe0\xa9\x8a" +
	"7\x9bJ\x12\xf0\xf7bs/\x9e3b\xee\xf9\xffv" +
	"\xdb\xc5\xa5o\xf0\xf7es_:\xeb+[\xa3O\x0d" +
	"p\x04\x8d\xb7:\xfat\xb2\x0dV\xda\xce\xd49Z^" +
	"W\xcf\x1b\x14\x12n\x9d.\xb4\xd8D\x86\xe2^\xf1\xe4" +
	"u\xf2\xdc\xe23\xfb\x8c\x0d\x86c\x89\x88\xdd\xbe\xa2\xa1" +
	"\xc8\x884\xd3\xa6\x0d\xb4\x19\xa6\x04\xe9\xcd\xd3,t\xa5" +
	"KQnpp\x8cx\xa6C\xb3\x85{\x1a\xee\xfb\xe3" +
	"/\xd6\xd6(V#\x81`U\xa2F\xd2\x9a\x97\xa5\x9e" +
	"c%\x89g\xb1.z\x99\x02\xc2\xd4K\xcc\x0b\xe7\xb1" +
	"\xbe0\xf5\x1aa\xca{\x19\xfc\xcd\xe0\xf9\xf3\xeb|>" +
	"\xfc&\xf8\x07\x14\x10\xa6\xde\xe7\xf8o\x83\x7fD\x01a" +
	"\xeaC>\xc7\xfe\x00\xfc\x13\x0a\x08S\x1f\xf3:\xed4" +
	"xH\x0a\x08S\xc4\xeb\x99\x10\xd6'5\x92\xeb\xf0\x96" +
	"\xf7ny\xf96J\xf2\x97u\xd5U\xae,5\x8eO" +
	"\x9a\x0a\xcb\xba\x11\xd5\xae,5\x99\xe3\xf3\xb2n6/" +
	"\x97<\xa5\x8d\x99\xcc\xeb\xc1\xe7\xf3ri\xa4+K\xcd" +
	"\xe3\xd7\x16N\xcaF\x8fre\xa9\x0byyX8)" +
	"\x1b3\xda\x95\xa5\x9ay\xb9\xd7\x04\xbe\x8a\x0f\x82\xc6\xb8" +
	"\xb2\xd4J^\xa6\xf1\xf2\xf0J>\x08\x8a\xb8\xb2\xd4\x1a" +
	"\xe6W\x82'$\xc9S\x1f\xd7\xcc\x04\xe5\xad\xf4\xbd\x96" +
	"\xf2#\x9e\x18\x8cdKR\x1b,\x17\xd8\x88\xc0\xf4\x8a" +
	"\xa2\x163\xa9IxO\xc5\x1c\xcb$\xdd\x7f,\xbfl" +
	"iLj\xa9\x0d\x09-\xf8\x8e\x1e\xb6\xb9\xd5\xd2\xa2\x8e" +
	"O\x0d\x8a^\xcfJ\xf3\xdeb,\xc0\xd3\xba\x9d\xd2L" +
	"\xdd$\xe7\x0a#\xc9J\xec\x1d\x96\x91W~\xca\xe7\xbc" +
	"[\x1fp\x04\x1f\x94\xe4uU,#\xd9\x9cJY\"" +
	"b\x1a\xbe\xa6\xb07-75\xfaYo7\x1c\xdbU" +
	"W\x09\xf69'\x1f\xde\xd2\xde\xa5\x89\xb0cx\x8e;" +
	"\x8e\xd67y\x01m\x96\x91!'k\xeb\x1d\xba\x1d\xaf" +
	"\xd3Mgy\x8b\x17e\xad\x1f\xa5K\xdbRbNR" +
	"\xc8\xee\xd2lr\x13\xf9G.\xa5\x81X\xa7\x90i\xb8" +
	"\xfe\x1c\xc8\x1c.\x98u?|3G7\xf8\xd36e" +
	"\x86\xa8\x92\xf0ys\x15\x05.\xed\x89V?\x11\xb8H" +
	"e\xf4U9\x7f\xd5$\x07UMx\xd9T\xe8\xf5g" +
	"Ru\x13\xa2D\xd5\xad\xc9Su\xb3\xcb\xa9\xba\xe5_" +
	"]\xfe\x90\xda0\xe3\x96\x9d\xb6\xf2:\xdc%:4E" +
	"'Nln]\xba\xc33[\x0eQ5\xef\xf0T\x13" +
	"\x16>5\x18\x0bj\x03\xfad\x13x\x88\x18\x0f\\\x1f" +
	"\xd4'\x9bF\xe8\xab\xf5\xe0\xf3\x83\xfad\xf3X5f" +
	">\xf8\x92\xa0>\xd9\x85\xc4\xa7\xdd\xe0\xad<d\xa9\xee" +
	"\x16O3\xf3&\xf0U(\x07\xcfE\xf7JV?[" +
	"\x01\x9c\xa0\x80\x8bn\x8d5W\x12\xe0i\x0a\xb8\xe8N" +
	"\x11\x16\x19\x0e\xf8\x0e_c\xa6Z\x08\xe5Z\xce~^" +
	"S'\x97N\xad\x18L\xd8ZVJ\x1a\xf1\x16\xcbL" +
	"d=\x8b\x9a\xaeH\xc1S\x86\xf0<\xd6\xb4\xeai!" +
	"\x0fs\x9e\xca\x85Yb?b\xea\xbdl\xd3D\xadz" +
	"\xaf\xad\xeb\xaeO\x88\xfc\x01i\x9fV\xee,8\xe3\xb4" +
	"j\x83\x82\x0a\xce\x10\xdcA\xa2K\x17\xe1D\x19}{" +
	"\xef\x04\x94\xb26\x1bD\xd8\x91\xa2\x93\xd2>\xfe\xb4\xa4" +
	"!\x15\x7f\x9a\xab\xba\x9f\xd7Mq\xbay\xa7A\xc8z" +
	"z\x88\xfaG\xf1Tf8z\xc9T67?\x95\xcd" +
	"d\xbd\xc1B\xfd\xfbS\xd9<Z(Dl6\xf8\xa2" +
	"\xe0T\xb6\x80\xe3\x07\xda\x85\xb7/p!OeK\xc0" +
	"W\x04\xa7\xb2e\xdc\x00Z\xc1;\x82SY\x1bOe" +
	"\xab\xc0\xaf\x0cNek\x98w\x83\xaf\xa7\xc0Tv\x0d" +
	"\xfd\xa4\xa8\xc1\xf8\xfb\x02)V\x9f,\xa8vy\xaaT" +
	"\x0d\x83\xc4^Hw\"`\x8f\xa7h8B\x08\xe5f" +
	"V\x8d\xda\x0d|?\x1aR\x92\xbd\x08%\xf4\xfcv\xcd" +
	"\xa9\xa6\xcb\x9a\x84\xa8\xcb$\xad\xb4^f\x19\xd3\xc7\xa6" +
	"\xd6\xed\xed\x85\xed\x9d\x95\x18\x18\x83\xe73Er\xc8\xa9" +
	"\x1d\x9dMg\x1at\x13\xb6f`P\x13u\x01\xe3q" +
	"\xcf\xe6bs\x99\x1d\xb0\xa3\x974\xb1R\xce\x00\xcb\xd5" +
	"R\xb1~~\xe1\xb5;\x9aX\xfaL\xeb\xa6\xee\xd8\xe4" +
	"+\xe87\xda\x81\x96^\x18yci=.C\xde]" +
	"\xe1\x1dM\xf0\xc9\x84w\x8e/\x07\xf7\xa5=\xa1H4" +
	"\xbace\xe1  \x7f\x07\x97w\x10\xe07D\xa9\xe4" +
	"\xbe\x14\xd1YO\x81[w\xa2\xcd]\x05\xf5\xf5h\xf3" +
	"\x86\x82vz\xb4\xf9\xa2\xdc\x1fG\xfc~\xeb\xdc\xd6\xe5" +
	"\x7f\x10\xd1\x8bo\xca}r\xc9\xafk\xd4\x87\xaf\xf9\x98" +
	"\xa3-\xf9?]\x8d\xcf\x86F\xfe^D\x9b/\xcb]" +
	"\xd0\xb0\xe2\xdf\x7f\xf3\xe3\xeb\x9e\x10\xd1\xe6\xebs\xbfx" +
	"\xe8\xda\x99#\xfb\xe7\xbd-\xa2\xcdv\xae\xe9\x7f?u" +
	"\xce\xf4G\xfe\xf9\x18\xff\xe1\xeb\xdc\x0b\xca\xe4\xfc[[" +
	"\xf8T\xa3\xb1\xa5\xa3Us\xb4\\\x9b\x11\xb7\xad\x96\xa4" +
	"A|\xe0\xa19\x9a\x1096\x00\xcf\x0c\x9a\"\xec\xf4" +
	"u\xe7\x96[IC\xeb\xd5\xbb\xd1\x10\x96\x99[\x07S" +
	"z3W\x81\xe1\x0cv\x8bU\xba\xd6\x83w\xd4\xe1%" +
	"\xdd9\xffO\xc1\x7fg\xf2sX\xe5_\xa2\x0e\x890" +
	"\xaf\xac?\x8b\xc2\xf8\xc4r\x0a\xe3\xe7\x08\xd1\xb9B\xa6" +
	"\xce\xee3(\x8c\xcbF\xc2\x170\"fP3v\xd8" +
	"\xa3\x86\x82y\xbd;\x15\xd5\xc5|\xd5\xe6Uy\x0d\x87" +
	"\x0a\x09}\xb3\x0ar\x9a\x0a\xf1Sv\xa7\xa2(\x8b\x99" +
	"5\xc0\xb5\xac\xaf\xe3*\x89+\x13x\x17\x7f<x\xbd" +
	"\x7f\x0a!\xb3>\xd6\x13Eb\xa6\xe4\x9d6\xccc^" +
	"\x103CU\xeeTT*fVT\xbbsQ\xb3t" +
	"S\x91BV\xa5\xa7\xe2\xd0\xc6zK\xac\x90\x95d\xe9" +
	"\xd9Sq0X,\xed\xcb\x9f*Ty*\x0e\xd7I" +
	"c}\x05\xab},>{*\x0e\xb7\xf3w\xed\x05?" +
	"\xc8\xe2\xb3\xa7\xe2\xf0\x10\xa7s \xaf\x175\xd2Sq" +
	"x\x8a\xd39\x0a~\x92\xc5gO\xc5\xe1\x15\x16\x9fO" +
	"\x82\x9ff\xf1y\x84{\xda\xf0G\xfe\xde\xd3\\\x9c|" +
	"\xda \xbb*\x0eQ\x19Cr\x8d\x8c\xf2\xe4\xe3\x86\x91" +
	"\xeeq\xc3\x04\x19\xdf[\x0b\xbe\x98\x8f\x1bF\xb9\xc7\x0d" +
	"\xe7\xcb\x0f\xfa\x17\x10\xf1\x05A\xde}\x11J\xa7\xbc\xd1" +
	"\xbf\x08()\xfbbu\xd6\xee!-\xaes}7\xba" +
	"\x15>\xfcID\xfe\xc6&oe\x95\xd0Ri\xc3\xec" +
	"]\x0e\xb98o\x13\x16\\\xc6\xe6\x0f\xab\xa5\x94y\xb9" +
	"\xe3\x1e\xb3\xbb\x96\xf7TS\xb8@\xab\xe4`\x9b\xe3." +
	"\xb5\x1c\xc7\xb7\xd2/\x13\xd7d#\xff\xd5=\xa2\x91\xa3" +
	"d\x02\xb6My\xfb\x7f7\xa4\xc8\xee\x89\xcf\x04,\xf2" +
	"\xdd\x02\x85\xcdLY[\xd5\xe2\xf3\xf3\xe2\x08\xd4?\xe4" +
	"\xa8\xc1JfSz\x9b&\"\x8em\x0c\x0c\x17J\x08" +
	"\\\x9dL\x0cIo\xc3\x90\x83\x00\x0dQ;lb\x9b" +
	"\xb2VC\xab\xeb\xb5L-Y>ZL\x97\xe2Y\xb6" +
	"\xc9o54\x8e7\xe4`\xa1O\xd7\x9c\xe5\xbc\x1bT" +
	"8\x9a\x01\x83\xf0A\xbe\xf4!\xca>V\x14\xc5\xb5<" +
	"/\x17KKk\"\x12/cP]\xd6`f\x99\xd9" +
	"o\xd8\x96\x89!2`y\xc2zU\xf9\xbb\xc9\xa2\xb4" +
	"!\xb7V\xd7\xecn\xebrM\x84\x93Y\xbds~^" +
	"\xa4i\xe6\xd5sA\x14\x91<\x11x\x19O\xfdyQ" +
	"\x04\xc3\x11$\xe06^\xb4\xb3$\xd2\xc7\x92\x8b\xa7X" +
	"\xa5\xb3$R\x908*<\xc5\xaa\x14'\x93\xcc+\x8d" +
	"c\x18\x81D\xb3\x8b\xd3\xc9\x0b\x1c<\x8cT\xb2\xc4a" +
	"\xfb\x12\xc7>\xf2\x86\x11\xbe\xdc\x94%\xa9\x8229\x86" +
	"\x11H4w\xf1\x11mA\x99\x1c\xc3\x08V\xe7\x0f0" +
	"/(\x93\x8flrW\xe7\x8f\xb0dTP\x1a\xa7i" +
	"\xee\xb0\xf3\x14M\xc7\xf0\x02\xfe,I\xd4\xa8%7\xe8" +
	"\x09O\xf6\xc8m\xbex\xc4\xcf\xbf\x93~\xae1\xb8]" +
	"#\x1a]\xd5\x94\x82\xa0\x1c\xd8\xc7iY\xbd0#\x0a" +
	"\xf3}\xbe\"\xbc\xf9>\x9fF\x1dk\xc1\x0cI\x82\xd3" +
	"^\xdd\x90\x19>\x85-\x86\x99\x88\xa5u\x9d\x12E\xde" +
	"lX\x90\xf1\x0f\x0aE\x89\xa4>\xe4\xac\xcdU\xa2\xe4" +
	"q\x84\x12\x9e\xbaN\xc1\x86\xfc\xe8B\x96\x9d\x0cs\xd8" +
	"\x08\x8b\x82\x11$?B\xda\xe9k\xb3L\x16\xae|\x17" +
	"\x82a;\x9e\xa6H\xee\xd9\xbd\xa3\x16\x0c\x84\xff\xcf7" +
	"\xf0\x11\x91\xe1\xd4\xaf?\x83e\x9a\xe0\xd6\x9d\xbfC\x17" +
	"\xad\xdb\xb7Us[w^\xb9`\xc1\x1c\x89\x0a\xe6J" +
	"\xfe\xcc\x7f\xe1\xf5\x9erA\xb7T\xd0\x15\x92}]!" +
	"\xf7\x1d\xdeYrR/rUU\xa4U\x14\xa8\xe0|" +
	"^J\x04\xba!\xa7\x8f%J\x07%\xb6b5y\x89" +
	"E\xbbI\x88\xce\x84L\x9d\xe9\x80\xc4\x92\x82\xc4\xd2'" +
	"S\xa7\x13\x90X6\xbf+D\xe7\x80L\x9d;\x0b[" +
	"e\xd1\xeb6\x08\xd1\xb9C\xa6\xce\xddR\xd1\x99\xb3g" +
	"O\x9d\xaf\x7fYK\x0c9\xd6\x96\xdc\x93i>op" +
	"b\x8efF\x12\x9a]\x88f\xb2\x94m\x94\x18s\x97" +
	"\x1d\x9a\xcai\xd2{\xf2\x19\xd7`\xe1\"_\xda\x90\xf3" +
	"u\xebE\xd8H\xe5k\x90(:gC\xa9\x11\x1aQ" +
	"t\x01\x8ag\x91L\x9dMR\xde\xe2\xc8}\x92\"\x85" +
	"d\x05UD\x88W\x97\x8e\x9eqVh\xe4Z&\xad" +
	"^+D\xd0\x90\xf6SD\xcd!\xea\xf9eDM5" +
	"_q\xd7N\x0cT\x87_q\xd7A\xaa\xdc&S\xe7" +
	"\x0d\x12y[\x09\xd1]\x97\x09\xd1\xb9S\xa6\xce=\xa8" +
	"7Wx\x8b\xde<]\x88\xce\x1bd\xea\xdc\xeb\x0d\xad" +
	"!!\xa2\xb7\x02\xee\x96\xa9s\x9f4\xbc\xe8\x19\xd7\xec" +
	"\x0dZ\xcaH\x04:w\xd8\xec[T\xf8m5\x0c\xd1" +
	"\xda\x91J\xbf\xd83\x0f\xeb\x9cO\x94[5\xff\xaa\xcc" +
	";?]\xf8\x1d\x11]\xbb1wR}O\xa9\x1d}" +
	"\xc3\x8fEt\xedE\xb9\xd8\xdek\xb5g\x1e\xff\xd1\xf3" +
	"\"\xba\xe6\xfa\\\xdf\xfe?\xa4'\xef\xfd\xdd-\"\xba" +
	"fiN\x0a\x1f\xfe\xeey/T\x9c\x16\xd1\xce\x9br" +
	"\xaf|%\xf7\xdd\x1f\xbf\xba~'\x87\xe4\xaf\x9d\x8dv" +
	">\x98\xab]\xfe\xdc\xa9\xdb\xda\x1f\x7fZD\xd7<X" +
	"\xb8\xa27\xba\xf6\xc1\xdc\xda\xb9\x97\xb4O\xbcn\xe5\x83" +
	"\"z\xcd\xd2\xc2\xdd\xa4\xd1\xb5W\xe5V\xfcx\xeb\xb1" +
	"\xc6\x1d;_\x13\xd1\xb5]\xb9V\xcdH\x0e^\xa1C" +
	"F\xe8\xd3\xed\xc6\x98\xb5\xc50{s~s\x0b\xc5]" +
	" |+\xab\xd2v(\xc4v\xd7\x8feo\xce\xaf\\" +
	"\xf2k\x97u\x87r\xed\xadzJ3\x13\xa5\xd8_u" +
	"\x14\xe3\xed\xddF2\xa9\xf5\xea9_\xdbI\xc8\x96\x99" +
	"\x8bi\xfd:\xa4|A\xfa\xb0\xeb\x02\xdf\xa5b\xe9-" +
	"r!\x92C\xd4\xc4\xab\x82\xd1a\xcc\x9f\xa3\xc22\xc5" +
	"\xc6\x87%\x8a6z\xd3\xf3\xb80\xe6I\x15|jX" +
	"\"\xba\xc4\x9d\x9e'\x87!\xf5N\x05\x9e\x1b\x96\xa8\xc6" +
	"\x9b\x9d\xe7\x84Yo\x18x\x11R\xb9\xd8\x9b\x9d\x17\x84" +
	"o\x13\"\xb6\x08\xbc\x09|\x89\xa7\xf6|qx\x03\x84" +
	"\x02\xf0\x15\xe04\xca\x9d\x9d\x97qnZ\xc1;\xc0\xa5" +
	"\xd1\xde\xa2 \xcc\x97\xb3\x81\xaf\x0b{\xfb_|+&" +
	"\xa7\xbf\x0e\xbc/\xecYo`Q\xa0\x871\x0b'\xc1" +
	"\x07\xc2\x9e\xf5\x06\x16\x05\xd90f\xed\x01\xf0\x9daO" +
	"Z\xc0\xec|\x1d\xbfw\x07\xf8\x9dao\x9f\x03\x8b\x82" +
	";\xb8\x14\xf6\x81\xef\x0f{*NX\x14\xdc\xc3\xef\xdd" +
	"\x0f~4\xec\xa98aQ\xf0\x18\xa7s\x04\xfc\xe5\xb0" +
	"\xa7\xe2\x84E\xc1K\x9c\xff\x97\xc1?\x0a{*NX" +
	"\x14|\xc8\xe5\xf0\x01\xf8\xa8*O\xc5\x09\x8b\x82\xea\xaa" +
	"o\xa3V\xaad\x8a\xcd\xae\xf2T\x9c\xb0(\x98Y\x85" +
	"\xfc\xd4\x837U\x05\xf4\x9e/\xae\xc2w5\x81\xaf\xaa" +
	"\xf2t\x9cT!\x94\x95\x9c\xce*\xf0>\xf0\x9ajW" +
	"\xefYg\xde\x07\xee\x80GG\xb8z\xcf\x9b\xab\xf8t" +
	"\x1f|\x07\xf8\xd8\x91\xae\xde\xf3\xb5UX\xa4\xec\x00\xdf" +
	"\x0d\xae\x8cq\xf5\x9eo\xe4\xf8\xbb\xc1\xf7\x81\xab#]" +
	"\xbd\xe7\xdb\x99\xef\x03?\x04>n\x94\xab\xf7\xfcp\xd5" +
	"\xabB\xc4\x0e\x83?\x09~\xd6hW\xef\xf9\xf1*\xb4" +
	"\x9f\xa3\xe0\xcf\x82\x9f=\xc6\xd5{~\x86\xf91\xf0\x13" +
	"\xe0\xe3#\xae\x16\xc2\xf3UW\x09\x11;\x0e~\x12|" +
	"\xc2(W\xef\xf9\x95*V\xbf\x07\xff\x00|b\x8d\xab" +
	"\xf7\xfc>\x97\xdb{\xe0\xa7\xc1'E]\xbd\xe7?r" +
	":\x1fU\xc9\xd4U-Q\xb4v\xb4\xab\xf6\xfc\xe7*" +
	"T\xe3'\x88>\x1e|\xf2XW\xedy\\5>k" +
	"|5\xd6\xc4\xe0S\x14\x95f`M\\\xcd*c\xe0" +
	"s\xc1\xeb\"\xae\x16\xc2\x9cj\x14\xdb\\\xf0\xc5\xe0S" +
	"U\xf7\x06\xb9\xf3\xabQ]\x8b\xc1[\xc1\xa7\x8dso" +
	"\x90k\xe6\xf8\xad\xe0\x1d\xe0\xd3\xcfro\x90kc\xde" +
	"\x01\xbe\x0e|\xc6\xd9\xee\x0drk9\x9du\xe0}\xe0" +
	"\xf5\xe3\xdd\x1b\xe4\xf4j\xae^p\x07|\xe6\x04\xf7\x06" +
	"\xb9\xcd\xd5\xf8\xae4\xf86\xf0Yc\xdc\x1b\xe4\x06\xab" +
	"Ym\x1e|\x1f\xf8\xe7&\xba7\xc8\xdd^\x8dnt" +
	"'\xf8\xfd\xe0\xb3#\xee\x0dr\xf7\xf1\xf7\xee\x07?\x0a" +
	">g\x12_!\xa7<\xc6\xfc\x08\xf81\xf0sjU" +
	":\x8fHy\xaa\xfa\x0d!b\xcf\x82\xbf\x0c\xfeW\x93" +
	"\xf9\x069\xe5%.\xcf\x97\xc1\xdf\x04\x9f[\xe3^ " +
	"\xf7z5\x9a\xc9\xdb\xe0\xa1\x11\x12E\xe7E\xdd\x0b\xe4" +
	"h\xc4\x9f\x84\x88U\x8d@\xf9\x83\x9f;V\xa5\x06\x94" +
	"\xff\x084\x93\xa9\xe0K\xc0\xcf\x9b\xc2\x17\xc8)\x17\x8e" +
	"\xe0mP\xf0\x15\xe0\xf3\xeb\xdc\xfb\xe3\x96\x8d@\xb9\xad" +
	"\x00\xef\x06_\xa0\xa8\xf4y\xac\xb9G\xa0|:\xc0\x93" +
	"\xe0\x0b\xa7\xaat\x81\x10\x8a\xc1\xf1\x93\xe0\x03\xe0\x0d\xd3" +
	"\xdc\xfb\xe3\xb2\x9c\xfe\x00\xf8N\xf0E\xd3\xdd\xfb\xe3\xae" +
	"\x1b\x81\xe6\xb6\x03|7\xf8\xf93T\xac\x82\x94\x1b9" +
	"\xfen\xf0}\xe0\x9f\xafw\xef\x8f\xbb\x9d\xd3\xdf\x07\xbe" +
	"\x1f\xfc\x82\x99\xee\xfdq\xf7\x8c@\xf3\xbc\x1b\xfc\x00\xf8" +
	"\xe2Y\xee\xfdq\x0f\x8c\xc0\xf0s\x00\xfc0\xf8\x85\xaa" +
	"{\x81\xdc#\xfc\xdeC\xe0\xc7\xc1/\xfa\x9c{\x81\xdc" +
	"s#\xd0~\x8e\x83\x9f\x04\xff\xc28\xf7\x02\xb9WF" +
	"t\xa1\xfc\xc1?\x1a\xe1\xbb\x94o\xb1R\xa21m\x99" +
	"\xba\xe9PM\xe1\xc6}\x7f\xd9oZ[Z\xacTZ" +
	"\xd4\xf91\x9e\xdb\xf8\x85\x91\xcf\xd3\xab\xfb\xfd\x18\x03\xb1" +
	"f\xf6\xc2-\xc5\xb5dp\x12\x12\xc3\xefT\xe4\xefo" +
	"\xf7u\xfc\xb7\\\xc1\xeb\x0f\xd2uw\xfdAN@w" +
	"\xdf\x0d\x13a=\xe0\x02\xe8\x7f\xb4\xc3\xe0\xfa\x8f_\xd6" +
	"O\xae\xaf\xdf\"\x07p~\x98T\xe4#\xad\xd4\xa7\xcc" +
	"\x99\xfc\xcfk\x9e\x84/\x1au\xd7X\xabT\xf9SK" +
	"c^\xb7E\xdd`\x97\x91)\xec\xe3\xf8\x9c\x18\xbb\xa7" +
	"\xf0\xc3=\xda8x\xc6\xa4\xc9\x0d\xbe`\xfe\xd0\xfd\x02" +
	"\xdf\xc1\xb1+f\x97\x0btl\x8d\xfc\xcf.\xa3iZ" +
	"z\xcaZ\x1a\x9c\xcc\x0e4;\xab,\xda\xa2\xdb\xacN" +
	"\x1a\xd6\x02\xea\xa4\xbd\xb6\xd6o8\xaez\xa5\x96\xbcB" +
	"s\xca\xa8\x8dzn\x7fu\x8a\x1b\xae[O\xb9\xd8\xe5" +
	"o~\xad\xd4\x9cp]\xfe\x96\x0bk52\xf1\xbe\x88" +
	"f\x07\xbc\xa0\x05\x83]\xe7\xdc\x85\x16\xf1Y6Z>" +
	"\xcbq\x90\xe1\xd9\x13\x8abUq\xdfco\x09\xee\x8f" +
	"\xbb>\x82\x85\x9c\xdf\x95\x0b(\x0a\xf9'\xdc%\xf9\xc8" +
	"\x1fi\xd5%\xb2q=q\xe6\xab\x18\x92h\xfa\xdd}" +
	"\x86h\x8co2\xf52\xae\x86\xdd\xbd\xbbn\xea3\xdc" +
	"\x08A\x1b\xef\xd4p\x1a\xc3\xa5!\xab\"H\xa4\xd0\xf5" +
	"\xd8\xf8\xcf\xb0\xcb\x9b\x18\xa6Sm\xda@\x87n\x13\xeb" +
	"\xd9\xb2w\xd2\"\x07w[\xdat\xcdl6\xc8.k" +
	"\x19\xd9\xbf\xa5\xcd0\x87M\xbb?\xde\xce\x1ea\xcb6" +
	"\x9d\xfe-\xed\xba\xd3\xa5%D\xa3Qr\xcd\xc00J" +
	"\x00\xa5[\x84\xf1\x0eT\xa2)9Z\xaf\x1e\xf3<\xed" +
	"\xd9\x01\x07W\x9fE}\xb8\x7f\x0b;\xacM\x93\xef\xb0" +
	"\xf6/\xf1\xf4xt|\x93\x10yg\x8f\xb4\"\x9b2" +
	"\x12\xc5V\x95\xaeC\x09-)\x95\xa4Q\xae#{:" +
	"\x11\xba\x94X\xe15m\xafe7\xbaM\xbb\xdc\x96k" +
	"\xc0\x1ci\x98PV[\x88\xdbF\xd0#@QXY" +
	"\xa7\x85\x1d\x96\xad\x8b\xc6\xcby\x13vh\xb9\xf3\xc5$" +
	"\x0ei]\xae\xef\xbcp^\x8b\x89\x8d4\xec\x1e-\xae" +
	"w\x91\x95\xed\xed+i\xc1~\x98\xa8\xcb\x9a\xab\x03." +
	"\xa13\xd9T\x0cA\x14\xd7\xbb8d\xe83W\x10\x06" +
	"\xd0!\xce\xb5\xcb\x1e\xf7\xb2R\xf9\x15\x18\xaf\xed.=" +
	"e\xf5k\x94\xfc\x9f\xb9\x85+v\xf9\xe6\x9b)/O" +
	"f\x05\x0d|f=\xf4\xe2\xb5_@\xa3\x825\xd1\xd7" +
	"\xe7\x8f\x85n\xe5\xf3\x8d\xbdy\xab\x0c\xdf{\xc7]l" +
	"\x87\xbe?\x7f~\xe2{\xefx\x88\xcfm\x0a\xf6\xe6\xbe" +
	"\xf6\xd4\xa3l\x00_\xb07\xf7\xbdw<%\xbdZd" +
	"W\xeey\xefhxI\xe2k&O\xe5\xcd8|\xf7" +
	"\x1d\xefH\x97\x15\x19\x96\xfb\xee;>\xe4\x0c\x9d\xce\x9b" +
	"w\xf8\xee;H\xde\x1a4\xef\xf0\xbdwT\x03\xbb\xe6" +
	"\x1d|>\xe3{\xef\x88\xca\x90i\xc7\xe7\xcd>|\xef" +
	"\x1d\xd3d\xc8T\xf5\xe0\xf3\xe5\x80\xf7\x8ey\x1c\x7f\x11" +
	"x\x93\xec\xab\xa2c\xc9\xc5\x16\xbdM\xe0\xabd_\x15" +
	"\x1dK.\xe6\xab\xc0\xaf\x94}Ut!\x9452d" +
	"\xbc+\xc1\x13\xb2\xaf\x8a.\x84\xa21O\x80\xa7e_" +
	"\x15]\x08%%ci\x98\x04\x1f\x90}Ut\xc8\x9c" +
	"\x9c\x9fm\xe07\xc8\xbe*\xba\x10\xca.6[\xd9\x09" +
	"\xbeG\xf65\xd1\x85Pn\x96\xb1b\xdf\x03~\xa7\xec" +
	"+\xa2ci+\xff\x01\xb2%\xf8\x01\xd9WD\x87l" +
	"\xc9\xf9?\x00~X\xf6\x15\xd1![r\xf9\x1c\x06\x7f" +
	"R\x96\x02\xb7\xb6\xf8\x0d\xadd7\xf8S\x87\x95\xcf\xd2" +
	"s?e*\xffLs\xf1P\x9b\xfbb\x93\xfb\xe2\xa9" +
	"c\x88\xdb\xfc\xff\xa9\x19~\x91\x0e\xc9\xb0\xf6\xf9\x9f\xc5" +
	"D\xfe\xd3L\xec?\xcdP>o\xea_P;Yp" +
	"\xa6\xc0\x85\x9f\xd1I\x00\xe7\xfd\x8c\xae\x0e>\xb3a\x7f" +
	"\x91\xdb\x07_4\xc5\xe4y\x95\xeeh\x85\x90\x81\x8c\xf6" +
	"iK\x0bvO\x9fZ&\xf5\xfb2\xbd\xe9\xdekR" +
	"\xd2:S,{\xc4-Jz\xaa\xc0\xb2\x13<Iu" +
	"\x93\xa5\x95\xa6\xe1\\\xae%\xb3\xa4\x7f\x8aN\x8f\xa7\xd1" +
	"\x1a\xf4\x8ftg~\x84=?tQ\x91\xf1\xbc?\xc2" +
	"^\xc8|\x11xS(0\xc2^\x1c\xba\xac\xc8x\x87" +
	"7o\xd9x\xe7\xb2\"\xa3z\xde\xbf%R\xda\x98\x17" +
	"\x8cz*\xbc#\xb05l\xcc\xdf\x0d\xbe\x9e\x8d}B" +
	"\xaeR\xcf5l\x84\xbf\x1e<\xc9\xc6>\x15\xaeR\x8f" +
	"\xc1\xc6/}\xe0\x0e\x1b\xfbxG`\x9b\xd9H\xa7`" +
	"l_\xed\x1d\x81\x0d\x86\xee-2\x02\x1aA\xee\x11\xd8" +
	".vR\xb0\x03|7\x1b\xfbH\xae\x82\xea\x8d\xccw" +
	"\x82\xefac\x1f\xd9UP\xbd\x99\xf3_0\x1a\x1a\x1d" +
	"r\x15Tog\xbe\x17\xfc\xee\x90g\xcf7\x86H\xb9" +
	"\x8b\xcb\xad`\xb4\x1f\xa9t\x15T\xef\xe1\xf8w\x83\x1f" +
	"`c\x9f\xb0\xab\xa0\xfa\x00\xf3\xfb\xc1\x0f\xb1\xb1O\x95" +
	"k\xec\xf30\xe7\xe7\x00\xf8a6\xf6\xa9v\x8d}\x1e" +
	"\xe1\xef=\x04~\x94\x8d}F\xb0\xb1\x8f\xf2\x18\xf3\x82" +
	"\xf1\x91:\x92m}\x94\xa7B\x13\x8b\x8c\xff\xc7\x8dr" +
	"M}\x9e\xe1|>\x09~<\xe4mv\x9dE\xa4<" +
	"\x17\x9a^d\xact\xf6\x18\xd7\xd4\xe7\xf9\xd0R\xcc\x94" +
	"\xe0/\x87\xbc\xcd\xae\xf1D\xcaK\xa1s\x8a\x9c\x08L" +
	"\xa8qM}^\xe1\xf8\x05\xe3\xa6\x89Q\xd7\xd4\xe75" +
	"\xe6\x05\xe7\x02\x93\xc6\xba\xa6>\xaf3?\x09\xfe6x" +
	"\xad\xe2\x9a\xfa\xfc\x86y\xc1\x18j\xb2\xean\xb2\xbd\xc3" +
	"\xed\xa7`\x0c5e\x9ck\xea\xf3!\xf3\x821T\xdd" +
	"Y\xae\xa9\xcf\xc7\\\xce\xa7\xc1Cl\xeas\xb6k\xea" +
	"C\x15W\x09\xd1U\xe1\xfb4\x986\xde\xb5\xf4\xa9\x06" +
	"v}\x1a\xa8l\xe93\xc1\xb5\xf4\x89Vt\x09\x11\xab" +
	"\x01\xafeK\x9f\x89\xae\xa5\xcf\x04\xe6\x05\x8b\xaa\xfaI" +
	"*\xd5\xb3E\x15\xd2\x99\x0a>\x17|f\xadJ3\x89" +
	"\x949\x1c\x7f6\xf8\"\xf0Y\x93U\x9aE\xa4,`" +
	">\x1f|I\x85D\x8d\xd9\x8c\xde\xbep\xb5\x7f\x0a\xc7" +
	"\x7f\x1aN\xfeP.\x9b\xd1\xd9\x02!\xe8\x886n%" +
	"\xf4\xcb=\xc6G\x90>\xec\x0eB\xc9\x83]\x9ac\x88" +
	"\x88e\x1aN1_aemJ\x0e^\xd1\x93\xce\xb4" +
	"\x1bT\x12\xd8\x91\xd0M!\xfb\x8fP0\xa9F\x8b\xad" +
	"\x0d\x86M\xacU\x0f\x07\x83\xeb\xfaR\x86i\x0e\xb5h" +
	"\xa9\xeb\xb3\xd2\x8eY\xc6d!\xbd\x02\x0f\xb8\x1f\xe2." +
	"7j\x9a\\\xac\x0d\x04\xb1\xf7Pm\x13\xd6\xa8f\xdf" +
	"\xa26\xc3,\xb2\x09@2\xf8\x8ar\xf1\xdd\xd4\x8aB" +
	"]W\x92\xd3\x11Z\xb7\xa5'\x9d\xf1..\xcc\xfd\xfc" +
	";\xe9\x8bG\xfc\xdc5\x99q\xf8\xcb\xad\xb4ht." +
	"\xd5\xb2\xbe\x9d\xf8\xa9\x1d\x97\xb2R_\\K\xea\xdd\x09" +
	"]4r\x1c_y\xfb\xc2&!\xe4M\x09?\xea\x86" +
	"&!\x1a7\xb5\xea\x19\xcd\x8fP\xd5$D\xb8\xc7\x1c" +
	"\x18\xaa\x0f\xb3\xbd\xdf4\x9c\x946\x10\xcc\xff\xaa/ " +
	"\x87\x91MZ\xcaw\x82\xba\xb8I\x88\xed\x0eb\xe6\x0b" +
	"@\xf5Q!\x1b\x97\x14\xd0B?/\xcd\xf9'\xfdw" +
	"\x1cmc?\x9b\xee\x93\x97\x8aH\xe0#\x9b\x9a\x0a\x1f" +
	"i\x1a\"\x12H{>/\x07y\"\x0b\xd6\x8fk " +
	"t\x95k \x942\xcc|\x9b\x0a\xde\\\x87\x89\xb0\x98" +
	"\x8f\xf7N\xdd\x81\x0dAE\xd1\xbd\xd8\x01\xbc(\xff\xee" +
	"\xa2T\x82f3\xb9\xb4m\xf5\x94y\xaa?m9E" +
	"\x98\xb5\x0b\x86\xd3U<\xd7S\x0c\xf4\xf4\xab\xbd\xb9\xb5" +
	"\x9a0\xf6\x86H\xa6XM\xd0\xf7\xe0h\xe6U\xe0j" +
	"\xd0\xf7`\x94\xf9(\xb6\xa1\x0f\xda~\x8cc\x9e\xd7\xd3" +
	"\xce\xaf^&\x10\xc6^\xcc\xbf\xb1\xa9A\xdf\x83\x93Y" +
	"!\xb7\xa0\xc0\xed/^\xa6q\xfcZ\xf0\xd9A\xdf\x83" +
	"39\xfd\xa9\xe0s\x83\xbe\x07\xe7\xb0vLA\xe1\xd7" +
	"_\xbd\xcc\xe3\xf8y\x85_\xb9p\x8f\xa7\\\xb8\xdfS" +
	"\xb6\x8c\xfc\xcfx\xfeg$n\xa5\xf2\x8b\xd2\xba\xfex" +
	"\x9b\x96\x97\x85#\x1b\x03\x7f\xc8\x1b7\xe6\x8d(6n" +
	"\\0\x7f\xfe\xfcBH\xff\x10y\xa7\xa2\xb4:|\x05" +
	"\xce\xcc\xb9\x9e\xfa\xe6\xcaD\xb7\xb5,e\xd41-q" +
	"\xc1\xd0U\xce\xd1\xebeC\x1d\xbd\xae\x14\x94\xc8\xbb\xa1" +
	"\xd7}\x15\xd12N\x9f\xc2%'\x9d-V2\x9b2" +
	"]W~|w\xa0\x9eho3\xcc\xe6t:i\xc4" +
	"\x0bns]3\xec\xda|\xc6\x1e\x99(D\xe7A\x99" +
	":\x8f\x14\xb47\x1e\xb5\x85\xe8<,S\xe7\x93\xbe\xcb" +
	"\\!\xa2\x8fo\x10\xa2\xf3\xa8L\x9d\xcfz\x0e\x16d" +
	"!\xa2\xcf \xe61\x99:Ox\xde\x15BBD\x9f" +
	"\xff\x89\x10\x9d/\xcb\xd4\xf9\xa6\xe7Z\xa1B\x88\xe8\xeb" +
	"\x80o\xcb\xd4\xf9\x11\xda\x8a\xab\x8d\x1f\xfd\xf0&!:" +
	"?\x92\xa9\x0b\x15\xdc\x93\x1e\xea</\x97\xd1R\xe9d" +
	"\x19M\x1b\xf6\x1b\xd0\xad\xd9\"\xdc\xab;Ci]\xaf" +
	"\xee4\x14\xae\x0f\xea\xf1\xbc\xabH\xba]\\$\xc1[" +
	"\xe8\x02q\xb4\x81\xf2q\x1c+\xdd\xca\xde9X\xbd9" +
	"\xa9\x0d\x0e\xad\x97\x12\xb1\xd8\xf3\xde\x0bV\x97\xd7e8" +
	"\x99\xef\xbc\x7f\xe4\x99\xf8\xa3\x0a\x99\xba*\xf3\xe5\xaf\xfc" +
	"\xb9\xe2A!\xba*!.T\x16j@\xa9\xae\xc4z" +
	"\xb5\x06\xbc\xb6\xb2P\x09\xca\x84J\xacok\xc1gW" +
	"\x16\xeaA\x99Y\x89\xf5p=\xf8\xfc\xcaBU(\xf3" +
	"*!\xbd\xcc\x05_\\Y\xa8\x0d\xe5|\x8e\xbf\x08\xbc" +
	"\x09<\xec\xd9F\\\\y\x13\xd6\xf9\xe0\xab\xc0\xab<" +
	"\xdb\x88\x95\x95\xbc\xce\x07\xbf\xb2\xd27\xdb\xc2:\xbf\xf2" +
	"\xfbX\xe7\x83'*}\xb3-!\x1a\xb4J\xb6\x08O" +
	"\"`\xa0\xd2\xb7\xdb\x12\xa2!\xeb\x06\xec@\xc0\xeeJ" +
	"\xdfpK\x88\x86\x1b\xdd\x80\xbd\x08\xb8\xbb\xd2\xb7\xdc\x12" +
	"\xa2\xe1\xae\xca\x11\x08\xb8\x1f\x01\x87*}\xd3-!\x94" +
	"\x879\xaf\x87\xc0\x8fV\xfa\xa6[B(\x8f1?\x0a" +
	"\xfel\xa5o\xba%\x84\xf2\x0c\x7f\xc3\xb3\xe0/\x83G" +
	"\x89\xf7\x1e\x1a^\xaa\\\xca{3\x08x\x0f\x01ck" +
	"\\\xd1\xf8\x9d\xca\x1f\x0a\x11{\x0f\xfc4\xb8\x12u7" +
	"\x1f\xfe\xc8\xfc4x(\x0c\xd1\x98\xdc\xcd\x07\x0a_/" +
	"DW\x18u\x06<Nr\xf7\x1e&\x84\xdf\xf0\xb5\x08" +
	"\x96\x80\x9f%\xbb{\x0f\x17\x86\x7f\xe8\xab\x05\\\x09~" +
	"v\xc8\xdd{X\x13~\xd5?\xe6\xe7\xe3\xfc\xf1\x15\xee" +
	"\xf1s\xe08\x7f/\xf8\x84J\xf7\xf8\xf9\xd60\xefi" +
	"\x81\x1f\x04\x9f\x18v\x8f\x9f\x1f\xe2t\x0e\x81\x1f\x07\x9f" +
	"T\xe5\x1e??\xc7\xc7\xf3\xc7\xc1\xdf\x03\xaf\xadv\x8f" +
	"\x9f\xdfa\xb5\x86\xb7\xc1CU\xde9\xf0d|V\x95" +
	"-DW\x95\x7fj?EqO\x9f\xab\xf9\x94\x9cO" +
	"\xed\xc7\x83\xd7\xa9\xee\xe9\xf3\xb8*\xb4s\x15|*\xf8" +
	"\xd4q\xee\xe9\xf3\xe4*4\xb9\xda\xfc)\xff\xb4\xb3\xdc" +
	"\xe3\xe7\x99U\xc8\xfel\xf0E\xe0\xd3%\xf7\xf8y\x01" +
	"\x9f\x86\xcf\x07_R\xe5\x1d\x03\xcf@\xb1\xf1\xe9\xf6b" +
	"\xf0\xd6*\xef\x18\xb8^\x08\xa5\xb9\xea]!b+\xc0" +
	"\xbb\xab\xbcc\xe0\x99B(\x9d\xac-\xd0\x0d\xbe\x1e|" +
	"\xd6D\xf7\xf8\xf9\x1a\xe6\xeb\xc1\x93\xe0\x9f\x9b\xe4\x1e?" +
	"\x1b|\x1c^\xd0\x16\x98]\xeb\x1e?of-\x82\x82" +
	"\xb6\xc0\x1c\xd9=~\xbe\x96\xf3\xb3\x0d\xfc\x06\xf0s&" +
	"\xbb\xc7\xcf\xbb\xaa\xfeP\xa4-\xf0W\x03\xee\xf1s@" +
	"[`?\xf8\xdc:\xf7\xf8\xf9\x9e\xaa?\xa1\x99\xe7\xb5" +
	"\x08\xe6MUi\x1e\x16n|\xca\x7f\x00\xfc0\xf8\xb9" +
	"\xd3T:\x17\x0b\xb7*,d\x0e\x82\x1f\x01?o\xba" +
	"J\xe7\x09\xa1<Z\x85\xc9\xfa\x10\xf8Q\xf0\xf93\xdc" +
	"\xe3\xe7\xc78~A\x1baA\xbdJ\x0b\x88\x94\xc7\xab" +
	"0\x89\x1f\x01?\x06\xbep\xa6J\x0b\xb1\xd0c^\xd0" +
	"Rh\x98\xa5R\x03\x16z\xcc\x9f\x04?\x0e\xbe\xe8s" +
	"*-\xc2B\x8fyA{\xe1\xfc\xd9*\x9d\xcf\xda\x0b" +
	"\xe0\xcf\x82\xbf\x0c\xfe\xf9A\x95>\x8f\x85^\x15\x9a\xff" +
	"\xcb\xe0oV\x95L\x8aA=,k`0I\xde\xa4" +
	"\xe6D\xf8\xfa\xe5J!Q%_\x15\xdb\xa3e\x93N" +
	"\x97TzQm\x9dQ0\x8f\xf7|\xe9.5\xac\xa4" +
	"T|\x03V\xe0\x1c\xc2\xe0\xbb'\x93\x81\x0bo\xf2\x87" +
	"I|\xc1b{\x8b\x88\x94\\\xb08\xd0b[\xe9V" +
	"r\xafF\x0c<\x90\xe1Kx\x9c6r/\xe1\xe9+" +
	":\x13(\x84\xb9w*\x06}\x80\xa5\xd8\xf1N\xaa\x9d" +
	"\xca\xfbg\xf3\xc3\xbb\xe5\xf2\x97\x11\x16\x1d\xe8Z|S" +
	"\xdcg\x8b\xeb\xed\"}\xa6\xb8\xff\x93;\x01\xbd[\xf5" +
	"\x96\xce\x1f>\xac\xa3}\xf8\xb0\xe2\xab\xfa\xfc\xdb\x81C" +
	"g\xbeO8S8\xe5t\x8fn-\x93\xfcKi\x1b" +
	"\xdd[i\x8b|\x89\xe7o3\xf7nAo\x8c\x17\x97" +
	"\xfd\x06\xbe\x91|x\xcd{\xf7\xda\xb76\xcd\x90\x8a\xef" +
	"\x88\xf3\x0e\xb2\xcep\x7f\x1e\xc7\xf3\x9d8\x0f\xb9>I" +
	"\xeb\xd5\xdb\xb4\x01\xa9\xf8\xca\xa6\xb2\x07[^\x0b^M" +
	"\xde\xfd\x7f\xa9p\x99\xeb\xff\xf2\xdb\xd8\xfe\xcd\xe2\xc3\xdc" +
	"\x89\xc5\xef\xb56HFr\xb9m\xa5\xdc{\x9a|\x07" +
	"\x06%q\x83W\xdb\xb3F_\xe1\x10y\x98\x9b\x9cJ" +
	"C\x87\x11\xfb\xbc{\x9eb\xe4\x85\x97\xb8\x9e\xf5\x82\x1b" +
	"\x04\xcd\x1fr\xf7(\xb9\x97\x8c\x96\xdc~\xd6jd\x1c" +
	"\xf2oG\xab\xe3\x08\x85\x11\x82o\xaa\xd3M\xef\x12\xa8" +
	"\xe05f\x97\xda\xd6\x16Q\xc7\xd7\x9e\x0d\xe9\x8aR\xf1" +
	"M\x9f\x97\xda\x91\xa2\x9b>\xbd:\xe9\xa2\xb2w\x8a\xd9" +
	"|\xe7\x99\xa9\x93waeW8x$l\xf3el" +
	"vJ4.\x0f\x18\xb0\xf8\xb7\x0b\xf4\x18qr/\x0f" +
	"+\xbe\xf6\xd9\x1d`z\x1cQ\xc7w\x87\x15LB\xf9" +
	"\xe6Y\xb3W*\xbdy\xb6\xe4N\xe93]\xcd3\xec" +
	"\x1d\xdb%9l\xd4{\xda,\xd3\x0a8S\xd8\xee\x92" +
	"L\x00\xd5\xe9=+3\xf9\xb5\xddv^\xb8-<?" +
	"\xbft\xd3t\x7f\x0d\xf8\xc1\x8e\x9a\x0f\x9a\x84\x00\xf1\xa2" +
	"\x9f:u\xbb\x0b\xfa\xbd(\xa7\x9e\xe5\x18\x9b\xe2~\x02" +
	"\xa7\x8enc`\xe5\xc1\xddN\x93\xef\x90\xc3`\xf7\x13" +
	"|}\xd9\xaaF]\xebY6\x90\x1e\xaa\xbf<D\xb9" +
	"\xb4\xc8\xd1\x15V^\xc4\x06g\xfb\xe5\x10\xcdf\xf1>" +
	"\xc5N]\x0b\xce\xa3>\xe7\x09\xf8Yv\xd64\x00\xbe" +
	"3\xe4z\xbd\x83\x80\x7f\x1do+\x16\xb6\x8d}\x83\xb3" +
	"\x1b\xd9WSa{\xd878\xbb\x9d}e\x15\xb6\x81" +
	"er\x05\xfc{\xd87l\xc1\xa7THr\x05\xfc\x87" +
	"8\x9d\x82O\xa9\x0ar\x05\xfcG9\x9d#\xf9m\xd7" +
	"J\xc9\x15\xf0_\xe2l\xbe\x9c\xdf\xfe\x0c\xcb\xae\x80\xff" +
	"!\xfb\x8c\xfd(\xe4\xbb|\xaa\x0a\xb9\x07\x8b\xa3\xd9W" +
	"\xea\xa8\x0aHs\x15\x9eN\xe8HHs\xec\xb9\xa8\xe0" +
	"\xa3uD\xa5{\xb0x1\xef[.\x01\xbf\xb2\xc2\xd3" +
	"\x09\x1d\x0da\x97\xd3a\xcfN\xe9\x0aO'\x14\xc2}" +
	"\x8a\xd3I\xe6=,\x8d\xaev\x85\xfb]\x9c\x0e{X" +
	"\xba\x1b|\x8c\xe7\xdf\xee\xae\x8a\xcb|OJ\x87\xc1#" +
	"\xb2{\xb0\xf8\x08{^:\x0c\xfed\x85\xe7\xf7n\xac" +
	"\x10\xca\xe3\x9c\xfeQ\xf0g\xc1\xa3\xa3\\\xd9\xfe\x19\xf6" +
	"\xc8\xf4,\xf8\xdb\xe0cC\xael\xff\x1bv\xb1\xf4&" +
	"\xf8\x07\xe0J\x85+\xdc\xbf\xcf\xbea\xdf\x03?\xcd." +
	"\xb1*]\xe1\xfe\x8f\xec9\xea4x\x08k\x87qa" +
	"W\xb8\xa7J\x94s\x08k\x87\x1a\xf0\xb3\xaa\\\xe1~" +
	"4\xaf)\x0a\x0b\xbe\xb3\xab]\xe1~\x02/Z\x0a\x0b" +
	"\xbe\xf1\xa3]\xe1~&\xc7\x9f\x0d\xde\x0a>a\x84+" +
	"\xdc7WB\xaam\x05\xef\x00\x9f8\xd2\x15\xee\xdb*" +
	"\xb7\x16-\xe0&y>u\xd7p|^\xc09\xe0\xb5" +
	"\x11W\xba\xdf\xcc\x0b\xc7t~\x996\xd9\xd3-\xbd\x91" +
	"\xf9\x0d\xe0\xfb\xc1\xa7x\xba\xa5\xf7\xf0Bp\x7f~1" +
	"V7\xd6\x95\xee\x1f\xe3\xf8G\xf2\x8b\xae\xa9\x8a+\xdd" +
	"\xbf\xc4\xfc\x04\xf8\x07\xe0\xd3TW\xba\x7f\x9f9\xaf\xb9" +
	"\xaa\xb08\x99>\xce\x95\xee+xq\x12\xf25\xb4\xa3" +
	"3F\xb9\xd2\xfd\xe4\xf0\xb7\x83*\xda\xd1\xfa\xd1\xaet" +
	"?\x87\x17Es\xc1\x17\x83\xcf\x1c\xe3J\xf7\xe7\xb3\xce" +
	"rAG{V\xc4\x95\xee/f\x1d\xe7&\xf0Ua" +
	"ix\xaf\x08\xae/=\xdd$\xdfMO\xa9{\xcc\x12" +
	"e\xbf\xaf\xfd\xfc{\x13v7\xfe\xf6_\x0a\x0e}\xcf" +
	"d\x03\x98\xbfG\xd8\x1bn\xbc(\x05\x1d\xbeDB\xc7" +
	",K\xfeE%\x90\x1f\xfd\xac\x19\x9e\xc2<Yf3" +
	"\xbbx(V\xdekN\xa5,S2\xb4\xd5A\x1fF" +
	"C\xe4\x18-\xee@\x902\xa8\xc7\xdb\x12\x89\x04\xaf\xa4" +
	"\x0d\xc4\xe2s\x02\xf2]\x155\xba\xc9\x0d\x89\xe79\x17" +
	"#=\xe9h\xb1lJ\x0c\x13a\xa5\x88\x98\xe9\xac3" +
	"LhL\xc8C\xaf\x96\xf4/\xfb8S\xd2\x880|" +
	"\xd2\x08-\x9bt\xdc3C\x17C\xf5\xe1\x12z\xdcJ" +
	"\xa5\xad\x0ck\xbd\x04.\x01\xce\x9f\xe6\xda\xb6e\xb7\xe9" +
	"\x19\x11\xc9h\xbd\x05{\x12\xc3\xd4m'f\x19\xe4\xcf" +
	"#\xd4R\x9a\xb2\xef\x8eH\x84\x83\xfamy\xda\x18\xd7" +
	"\x13\xed\x01%\x99\x82\xf7\"=\xe1\x1d\xd9\x04/\x01_" +
	"\x16\xb72\x83\xc47\x9c\x0d\xc4\xfb\"\x9a\x19\xd0#(" +
	"\x0aF\"\x8d\xd9x\xd1G\x98\xba\xd3\xdef\x98:\xf9" +
	"\xfe\x8d\xe43\x05\x0eS\xf5\xee\xad\x96+\x1a\xe8r\xd6" +
	"xK\x1a\xe1L\xf0\xbb\xfa\x1a\x98\x8bF\xf6\x93\x1c\xb8" +
	"\x930\xb5\xa1e\xf5\xc2e\xfdd%\xb3\x05\xa1\xa8T" +
	">\xf5\xbc\xbf\x89\x08*\xbfL(\xb7\x8c\xf2\xa1\x7f\xc1" +
	"\xb5\xb0\xece:b\x1a\xf1\x96\xa1\xa1\xa93e\xe0\x8c" +
	"\x8d\xdaw\xce7\xcc\xb3\xd9Tq\xcf\x92\x8b/\xf9l" +
	"G\xf1\x93kgcdJZ\x1f\xc2\x17\xae\xee\xb0E" +
	"\xa3U\xac&\x89\x80\x15\x0d\x97\xbb\x0a\x00(pJ\x9c" +
	"\xf1f\x81\xae\xac\xe9\xda7b\x88\x80\x9c\x13\xcao\"" +
	"\x8f\xbeJ\x88\xceQ2u\x8e\x97x\xb8\xe3+e\x84" +
	"\xcc\xb7S\xfd\xcb7_\xb8m\xef\xb7.\xff\xee\x99\xee" +
	"\"k\xd3\x067\xe8\x91\xa5\x96\x95,Iw\xa1\x10\x9d" +
	"U2u\xaa\x92\x7f\xb1L\xe9mN\xa1O\xf3\x8bL" +
	"\xeeE/\xf9\xbb\xdd\xcet\xd1\xcbEe.\xdd\xbb\xa8" +
	"\xb0q_\xe2%g\xd8\x8b\xe3\xca\xef\x05\x07\x8f\x0c<" +
	"\xf3\xe1\x9a\x0f\xde\x18To\xae{^D\xe9^\xdf\x07" +
	"\xc4JrO\x112\x19v\x1a\x140X|\xc3\xb3M" +
	",\xb2{\xfb\x93g\xce\xb6\xbf`\xf7v\xcfMBt" +
	"\xee\x97\xa9\xf3`\xc0\xee\xed\xa1{\x0b\xfb\xfc\xf9m\x15" +
	")\xd1m\xad\xccXi[7\xf5\xfc+\x0b6\x97\xf9" +
	"\xecy6\x97\xc1\xc7 \xbb;\xba\x9d\xe6'\x1b\xbd\xaf" +
	"\x1a\xf6I\xc3{I\xfe\xa2\xc9\xe2\x8dsN\x89\x8a2" +
	"q\xc6m\xf5\xb5\xee\xf2=\x95\xb6L]6\x9d\x80+" +
	"\x0a\xa2\xe8\xb2\xa5\xe5\\Q\\_\xf0:\x917\xec\xec" +
	"\xdc*Dg\x87L\x9d\xeb$\xda\xce\xeb\xef\x95\x09\xaa" +
	"\x10\x12U\xe4\xfc\x7fB\x88\xdc \xde\xc6z\xba\xba\x89" +
	"\x15B!\xeb\x1c\xd2j\x0f\x8aF\xf7\x82\xb03_\xf2" +
	"c\x19I\x9e\xbb\x0b+\x85%y\x1b\xf1\xdb\xd9\x88\xbb" +
	"`|\x9d\xd7Adc\xed;}\xf70\xbe\x97\xa4\xfb" +
	"\xd8\xbb\xd1\xfe\xfc\x85]\xfeQ\xc0c\xc4\xfby\xe0O" +
	"R\xe0(\xe0q\xe6\x05\x9bl\xff(\xe0)\xe6y\x9b" +
	"\xec\xfcQ\xc03\xcc\xf3\xb7\xe2\xe5\x8f\x02\x9ec\xbf\xdc" +
	"\x05Gs|\x14\xc0\x8e\xe6\x96\x16]\x97\xe7{p{" +
	"\x85y\xc1\x01\x9d\xef\xc1\xed5\xe6y\x07t\x0bF\xee" +
	"\xf04d^g\xbfJ\xa7\x10\xf0\x1e\xdf F\xeeR" +
	"\xe1\x1d6\x1e/x\xa6\x1b=\xd2\xd5\x90y\x9f\xcb-" +
	"\xef?<:f\x94\xe7\x9b\x82\x8d\xdf}\x07\xe2C\xb5" +
	"\xbf\xcbx\\\xb4\x8c\xe4\x15\x18\xda\xea\xec\xe5\xc9\x80\xf2" +
	"\\\xbf\xd5\xbc\xba\xad\xc3\xb2\x04%\x0b\xed{|\xed\x9e" +
	"_m8\xb7\xf3\xd7^\xfb\xde\xee\x8d\xdf\xf9\xa5\xab7" +
	"\xda\x17\xfev\xa7\x9f\xe0\xdfE7w\xb1+\x09\xcd\xde" +
	" \"Z\xcaH\x04\x921\x92\xed\xbegF\xef4{" +
	"\"\x9f\xcb\xbb\x0e\x9f\x17\x0e\xf5\x82\x9a\xf7\x10=\xe4\x19" +
	"~\xc9r\xdb\xda*d=/\xbb\x863\xe9L\x89\xbb" +
	"\x9c\xa2\x0b\x17\x1aY\x81\xb6!\xe8-s\xa8\xc3\x893" +
	"\x9a(\x97;\x84\xac+\xe7Afz\xb9n;=\xe8" +
	"A\xa6j\xe8\x95\xa3\xe1TA\x950\x9c*\x1c\xed\xe6" +
	"\x12zR\x1b\\i\xb6\x8a\xb06X\xb0\x85)\xd7/" +
	"Q\xbd\xb6\x95\xd6m\xc7\xd0=\xdd\xe0\xee\xfc\x01\xdd\xc5" +
	"\xeci\xbd\xe0\xbb\xc5\xef\x97\xcd\xcc\x97\x80\xaf\x08\xea\x06" +
	"/c\x9f(+\xc0\xbb\x83\xba\xc1\x9d\xcc\xbb\xc1\xd7\x07" +
	"u\x83\xafa\xbe>\xef\xeb\xc5?]7\x98'\xc1\x07" +
	"\x82\xaa\xc1Y\xf6\xdd\xe2\x80\xef\x08\xaa\x06_\xcb<p" +
	"\xc9\x96\xe7\x8ej\x17\xa7s\x03\xf8^)\xe0\xa6\xfaV" +
	"\xe6\x05\x9dg_7\xf8.\xd6a.\xdc\xbd52\x7f" +
	"\xf7\xd6\x83\xbe\xcf\x98\xc3R\xc0M\xf5#\xec\xdb\xe6\x10" +
	"\xf8Q)\xe0\xa6\xfa1\xe6\x05]\xe81\x8b=7\xd5" +
	"\x9c\xce1\xf0\x13R@7\xf8y\xf6ys\x02\xfc\x94" +
	"\x14\xd0\x0d~\x8d}\xf0\xb0\xef\x99\xb7\xa5\x80n\xf0o" +
	"\xd8\xb7\xcd\x9b\xe0\x1fH\x01\xdd\xe0\xf7\xff?\xce\xae-" +
	"4\x8e\xeb\x0c\xcf\x99\xb1V\xf2EZ\xcbV i\xa3" +
	".n\x9b\x12B[\"+\x81Rj\xd6\x8a.H\x8d" +
	"\xa5*\xbbj\x9c\xea\xedx\xf7hw\xcc\xee\xccz." +
	"\xb2\xd6/\xa1\x05\x83\x09\x04\xe2\xd2\x96\xe6!\x90\x94\xbe" +
	"\x18\x12p\x1e\x02Mq\xa0N\xdd\x10\x95B\x89i " +
	"\xa54\xe0\xd0>\xc4\xc4P\x07\xa7\xd0\x87X\xe5|\xe7" +
	"\x9c9g.Z\xb7y\xfd\xe7\xcc\xd1\xecj\xe7?\xff" +
	"\xe5\xfb\xbf\x0f\xf6O\x14W\xcd\xd4\xe1\x17\x1c\x01]\xfb" +
	"\x0c\x1b\xdd\xb1\x1dRsl25q\xd1\x11\xd0\xb5\xcf" +
	"\xed\xe7\x0c\xec\xf4\xb34\xf3\"\xd3\xf4\x8bl\xca\x09\xf2" +
	"\x007J\x98k\x07\xae\x00km\x91\xe0\xe0\xee{\xe4" +
	"V\xe4\xf6\x90\x99NC\xb2\xdcg\xef-\xbc2\x88\x01" +
	"ZV\xbd\x07S?Kd\x93\xa1C\x18\x0d\x96)\x8c" +
	"\xf22\x85\xc5\xb2\x88\x12\x8dS\xa8\x8c(\x15\xd1i?" +
	"\x9c\xd9\x88\x18\x09\xa4?\x11iv\x92\x07\x7fQQI" +
	"3\xf2\xce~\x8b\x19\xf3n\x15\x00\xcf\x17\x19\x0dQ\xf4" +
	"\x05\x02+7d\x86\xaay\x15\xe6\xe2\xc1\x84g\x12\xe7" +
	"\xf3#\xfb\xa3\x94sHdE\xed\x9b)\xd9\x09\xe5|" +
	"\xfa\xe0\xb7\xd2N@:\x9f\xe9\xf3\xf6\xbe\xb4\xd2\x9e\xf4" +
	">\xd3/\x8a\x0bz\xc4A\xb9\x9f\xd7\xec\xeb\xa9\xd7Z" +
	"\xb9\x9f\xb7\xc0t\x0a\x8a\xa8?\x99\xeeg\x1b\xeeG\xbf" +
	"\xd6\x0a\xdc\xf3\x1e\xdc\x8c~\xad\x15\xb8\xe7\xefp\x0f\xfa" +
	"\xb5V\xee\xe7\x9f\xf8\x04z\xf2A\xb9\x9f\xdbX\xaf%" +
	"\xf5\xd4h\xc2\x7f\xf87\xa4'\x1f\xd4d\xc2^\xe7\xa3" +
	"\x14\x03\x95\x9aLx\xc0Y7'\x1f\xa6\xca\xbf\x93\x94" +
	"UGp\xc3\xc3\xfc\xc2c\xfc\xc2\xc1\xab\x0e\xfc\xcf\xf4" +
	"\x94\xf36\xff\x86\xe6\xf8\x95U~e\xfcmQD\x9c" +
	"^vn\x12sla\xea\xd0\xef\x1d\xf8\xa0\xe9\xae\xb3" +
	"N\xcc\x01\x85\xa9\xc3\xd7\x1c\x14\x12\xa7\xcf;\xdf\x07\x9e" +
	"\x81_y\x19n\xe8\x0f\x0eJ\x89\xd3/95b\x0e" +
	"\x1dL\xdd\xf7\x8e#\x8a\x89o@\x1f\xed\x0a\xbf\xf0." +
	"\xa6\x0e\xa8\xe7\xf7\xfa5fot\x18Rt\xc5%\x92" +
	"\xfa\xb9\xeb\x19\xaae\xbae\xb4\xed23fj\x19a" +
	"'\x18\xdd\x98\x09X\x95.yM\xb6etO\\4" +
	"\xaf\x1c\xa3{e*pO\xa5\x98n\x06\xaf=j\xae" +
	"\x95}M\xdbh`\xf9^\xcd\xf7\x8d9W\xb9f\x86" +
	"(\xa2\x18\xb2R\xf0\xe03\xa0\x112\xdb\xa9~\x97F" +
	"t\xd6\x16\xf3\x10\xd4k\xb0\x99N\xafm`\xe8\x13\x0a" +
	"\xdc\xaa\xef=\xc1\x8c\xb7\xbb\x15\xf8h\xbe\x11\xf5\xecU" +
	"\xaf\x96\xa2\xef\x94\x0d\xde\x15\xab*\xd8+rw\xda\xd9" +
	"O=\xcc\x8cI\x83A\xab\x8e\x1a \xa3 \x8a\xfd\xd0" +
	"\xb5\x1ccD\x846O\xc7aT\xf3m?BGl" +
	"\xc1\x0f\xc0\x08\x1d\x0c\xfb\xbd0qCl\xab\xc7\x02\xb7" +
	"\xcbJ^D;\xf3\x1e\xff\xceV\xdb\xcc\xf3;~\xab" +
	"\x7f\x92z\xady\xaf\xc5L\xaa<\xfe_\xf2\xbd\xd0`" +
	"\xe0)\xdcAP\x0e\x0a\xe5\xfe\xdd\xb6)\xf3}r\xdb" +
	"\xec\xd1\xdb,\xfaq\xd0\xe9/l\xce>an\xe8\xb8" +
	"\xe1\xa0\x9b\xd6\xd4\x13\x9e\x10M\x19\xea\x85\x89s\xcd\xdf" +
	"3\xe7\x86\xfc&p\x97\xd4|?\x92\xed\xe75\x1fU" +
	"6}\x0f\xb6~\x9a\xd9\x81\x97pu\xa3[U\x0e\x16" +
	"\xdc\xadl\x85!\x8d\xfb+\xe2\x02\x0b\xbf-\x98\xbf*" +
	"E\xda\xb9\x8f\xdcC;\xb7\xdcg4\x18,\x9e\x9b\xcb" +
	"\"\x13\xa8\x9f#\xe5\x1d\xbf\xf3\xef[w\xd6\xfe|\xeb" +
	"=k\x9c\xdc\xdcQ\xe0?;\x1bx\xa3\xfc\xfc\xd4\xf1" +
	"\xe4xy\x1dT\xbbZ\xf5Y\x1d/o\xc1\xae\x93B" +
	"\x19w\x1f\xde\x06\x05\xafN\xfeTl\xfb>\xd6k6" +
	"q\x15\xdb\xde@\xee\xaas9u\xb8|\x0c\x82\xb0\x0c" +
	"k8w\xe6\xa0f-b\x0d\xff\xa3I\xdb\x98\x1c." +
	"\xe38\\4=\xb8:\\&\x11\xea%\xf4\xe0\x8ai" +
	"\xf5!\x9c-\x89\x8c\xee\xf8\xfe\xbd\xe2l\x99\x82(\x13" +
	"\xc4\xa0\x8e\xdbF\xcay\x0c\"Q:\xc4\x1f\xb5\xc5\xe1" +
	"b\x84\xf8M[v\x9b\xf8\xe1Ba\xd7\"Qey" +
	"\xb6t\xed\xef\x9a\xb4\x8d;\x9b!F.\x1bD\x0c\xc5" +
	"\xd7\xa3\x0a:\xe1\xc6\xf8\xf2\x12\x86\xa4\x09\x83\xcay\xfe" +
	"z\xd7\x94\xff[\xa3\xa7\x9c\x0e3\xda\x05\x0b\x18;'" +
	"'|1v^\x01\xd7\x9e\xbe\xf9\x0c\x1c\xd8\x0f\xadJ" +
	"/2\x15\x976\xa3:\xd8\x15mL\xa2\x19\xef\xb6\xe1" +
	"\xb37\xbb\x18\xc2bV\xaac\xfd\xff1\xdf\xef\xde\xce" +
	"H\xfe\xca\xc6\x1aP\x96V%\x0c\xcd\xb9)e'0" +
	"\xaf\xd2\xa0\x1a\xb9Rq0\x0b\x1aM/\x9dc\x1d\x87" +
	"\xea\xf6}C\x06^\x16\xff\xda\xf2*~\xcd\xe2\xb7\xc7" +
	"\xe4\x9aK\xde6Y\xdc\xeau1\x92\xd5\xb0i2\x8e" +
	"\x95\x1e\x13\xafv\x04#C\xb2\x83\xc9\x0e9\xb6KM" +
	"tiv\x8eF\x84\xca$\xf9\xc0\xceN\x8egu\x92" +
	"\xdc\xdd)`\xfe\x9e\xb4?\xdf!\x05\\\xab\x9e\x0f\xad" +
	"\xffRUP\x06'm\xf5\x0eu\xa3\xc1`\xe7B\x82" +
	"\xd5\x01b\xf8\x8fXV\xfd\x99\x84b[\xb9\x15J\xae" +
	"\xef\"\x86\xff\x93]\xc4\xf0\x9f\xdbE\x0c\x7f=\xc5k" +
	"\xa8\xdc\xca\xf3\xa8Mi^C\xe5V~\x0e\xbb.\xad" +
	"\xa9\x98\xf5%\x88\xe7k^C\xe5V.\x81\xf2\xfb2" +
	"\xb7_1\x01\xe9o\xe2\xf9\xb5[T1\xeb6\xec\xba" +
	"\xf6\xa5b\xd6\xbf\xe29\xb5[T)\xf3\x0d<O\xe2" +
	"\x16\xcb\xde\x1a\x8d\xb3\xe8\x90\xba\x1dg^Dc\x00/" +
	"\x8f;RW\xce\xc44\x88\xce\xd5(9\x9b\x9f\xa1l" +
	"\x0a\xcb\x8c\xe5\xb8A\xd6x\xd2*\xa7\xa68\xa5y\xd1" +
	"*\xc7\xdd8\xcc\xa1L\xecEI\xa2\xd9\xe0\x1b\xba&" +
	"\xce\xadh\xc5S1\x0d\x9c\xe8\xdc\xe0EB\x1em\xf0" +
	"\x9a\xc5\xb8\x1b\x1br\x91P\x1e\xe8\x9cb\x96\xd3\xf4s" +
	"\x13\xf6\x96\xc1\x96 \xeaV\x85\x95\xe4Y\xa1\xce\x1ad" +
	"\xd8\xe6\xcc\xd1\xc5\xf5\xd4\x88\xa2\xfa5\x1f\x83Nm2" +
	"\xa2\xa8\x0a\xb3\xf3{j\xa9\x09EY~?\xbc\x8cI" +
	"A-\xfb+\x99\xe7r\xb2\xbfCR\xa1\x90\xc2\xae'" +
	"\x14K\x92\xbc\xd3\x05DDO(\x0eK\xf2\xce3\xb0" +
	"\xeb\x09EL.B\x0e\xf8\xb4\x894\x11\x93\x8b\x80\x9a" +
	"\xf0\x84\xe7\x02\xb7\xff\x0c\x93\x8b\xb6\xf81_\x84\x1d\x90" +
	"\x92k\x98\\\x94\xf4`W\xf1\xfc\x98\xe4\xfb\x17&\x17" +
	"\xf7\x88C\xf2\x16\x9e\xf3\x13n\x1f\x01$cH\x1c\x92" +
	"C\x10\xf9\xd2r\xbdc%qH\x1e\x81,\xaf\x86\x82" +
	"\x94\x87\xc5!yl\xe8\xb7J\xae\x17\xf2\xbb\x07G\xa4" +
	",2 \x13\x10\xed\xda\x02$c\xaf\xa8\xff\xc4\x90\x03" +
	"\x8e\x12Q\xadC\xfbD\xfd\xe7\xf9\xa1_)Q\xadW" +
	"\x01\xc9\xd8/ \x1c\x97 \x92u9\x81vL\x8c\x08" +
	"\x08\xc76\xfe.\xa0\x1d\x1f@\xa4L\xd2\x83\xbd\x8f\xe7" +
	"\xfc\x80\xdb\xff\x01\x912I\x0fvc\xe8S\x9e\xa0r" +
	"\xfb\x1d\x88\x94Iz\xb0\xdb\xb0kh\xc7\xfd\x07\x04\x84" +
	"\x83\x94\xf8\xf79R\xe2\xb1\x0b \x19\xa3\x02\xc21\x0e" +
	"\xe8\x85\x86v|iL@8\x1e\x00N]C;\xbe" +
	"\\\x16\x10\x0e\x03\xda\xf1XI\xca\x13?\xc8\x83\x97\xd2" +
	"OS\x98\xfdI\"&\x17\xb3\x98\xfd\xafHz\xb0%" +
	"\xcc\x0a\x00\xf2\xd1\x06$cT@8X\xe9\xba\x82\xe6" +
	"_\x00$cL@8\xce\x03j\xa2\xa1\x1dG\xc6\xc5" +
	"\xe8\xe2+\x98\x15x\x99\xdb_\xe5\xf6\xaf\x1e\x12\xa3\x8b" +
	"\x97J\xeb)\\\xfe\xd7$?\xd8\xeb\x80p\\\xe6\xf6" +
	"+\xdc\xfe\xf5\x09\x01\xe1x\x13\xf6\xdfp\xfb5n\x7f" +
	"\xe8>\x01\xe1\xb8\x0a\xbb\xc6\xeb\x7f\x83\x08\x08\xc76\xf6" +
	"\x7f\x97\xdb\xffR\xb2\x13u\xe5\xc0r\x964B\xb8\xc9" +
	"\xc2F\xe0\xf6$\xb3\x8f\xb2\xf6x\xc2\xe8\xb9\xd42R" +
	"\x81\xaeL\x8e\x89\xcc\x8e\xd3p;\x99\xee-Z\x95\xd4" +
	"\x89)\xb9E\xd8\x8aUA\xb1J\xc3\x82\xa3\xc7\x1f\xe5" +
	"\x0fd\x95\xf9#\xa5\xa6R\x16\x99\xdb\xb2\xca\xed\xc8\x10" +
	"\x93O\x99\x8f\xa6\xcc\xf5\x1ek\xd8\xdc\xfd-\xd3\xadZ" +
	"!NP\x81SmH)\x88H\xc8\xf5Z\xb3\xfe\xb0" +
	"!\x97Y\x840\xad3\x8f\xb0\xb0\xc1x\x8en\xb6\xd1" +
	"3k\xf9\x193G\xfb\x1d\xab\x02>\xd3\xdcV\x12J" +
	"L\xd4\xf9\xe4\xe4yP\x9a\xb4\xdf\xe17\x93v\x8d\x9d" +
	"\x89\xdd\x80\x95\xbb\x05=u\x09 \xac\x13`\x0e\xd7\xda" +
	"AUP\x13\xe4z\xe0\x0a\xe1(\x0b\x154\x8f\xc3\x00" +
	"\xce\xf1\xc9F\xc2\xee]ty\x8du\x89\x8ac\x86\xeb" +
	"y\x98\xc7&\x13I\xa1-~\x0e\xe2\xc1\xbbBo\xa7" +
	"\x80I\xba\x1ew\x97\x88\xea4WyJ\x16D)\xce" +
	"\xea\xd4\x82\xb27o\xd4\x0c\x14\xee\xf6^\xf0\xcbS\xac" +
	"\xe5\xf2\x7f\x9b\x1d\xba\x91\xbb\xc9V\xdb4,\\\xc7\xbc" +
	"f\x9d\x9f\xdbvzU\x14\xa4$\x88Ap\xb6H\x03" +
	"\xa1\xd8e\xc4\xd7R\x9a\xa4Mh \xae\x18\xb1C\xc7" +
	"?\x8b\x87$\xe2)\xe7\xb7\xaa=?4\xa9\x0e\x02Y" +
	"\xee!~\xd0\x07\xd6\xda8\xa63\xdc\xb0~?\xc5\x0d" +
	"+\xdb\xae\xa1\xbd\xe0\x07\xab\x01\x18\xc4\xd1\xdd5\xe2\xed" +
	"\x95\xbb\x1f\x8e>\xf8\xe8\xdd\xbf\xa9h\xd9\xbc\xa5\xce\x1a" +
	">2\x1c~\x13i\xde\xfb&\xb2\xe0\x07\xa0&u\xbc" +
	"\xd6\xee\xab\x19\x0d:\xfd\x1a\xdb \xb2\xee\xa0\xaa\xdf\x0f" +
	"\x0b\xda\xa1\x0d\x98-g\xab\x97\xe1i\xe6\xdf\xd2\x9cU" +
	"f\x9b'\xe7M\xd8}\x91\xb9K\xb7\x8a\xccg\xc1\x90" +
	"5\x1bX\x8e\xdf\xcb\x95\"\xf6\xa4eT\x14\x9dG\xb6" +
	"\x82\xbc\x98D/\x1f\xa3O\xac\x85\xbbT\xf4r\x1b\xfd" +
	"\xd7\xa4mJ\xa4\x98\xcag\xc8\xf0u\x06\xaex\x17\x08" +
	"R\xe7D\xb7+\xe1]\x18\x05\xb3\x8d\xce\xc0\x15\xef\xc2" +
	"$\xecZ!A\xf1.|\x0b\x02]\xdfL\xf4\x98U" +
	"\xf4\xf28\xf6\xd7]\xb6\x11\x09@\x9dA\xb7H+$" +
	"\xec-\x091\x95e\xdb&\xa9v\xda>G\x84/\xd9" +
	"v\xda\xfe=\"|qA\xf1\xa3\xdbi\x07\x86E," +
	"\x1e#\xf7\xd7B\xcd\xa3R`\xf9\xc7\xf8\x00\xbam6" +
	"FD\xfb\xea\"\xea\xd0\xba\x90^&\x82x\xe1E\xd8" +
	"\x7f\xc9\xed\xbfF\xfb\xca\x16\xe1\xcb+hG\xe9v\xda" +
	"\xb8D\xa0^\xb2?5)\x84\xb8o\x0a\xa29P\xd9" +
	"\xe65\xcf\x9fe^s\x8eF\x05W\xa0A\xe8\xb7\x98" +
	"GT\x9d\xcc\xf9\x81\xa7\x1b\x0f\x92.|\x83\xb8\x0d7" +
	"\xe2+\xaa|\x89\xb9\x82uY\xd0B\x99x\xa1\xe3\xfb" +
	"M\x9c ^\x14\xf8\x1d\xa7x\x95\xcao\x8bV\xc1\x81" +
	"<\xe9v\xac\xe1\x8ei\x8eC\x06v`B#\xb7\xb1" +
	"\x14\x04n\xb5\x95\xee\x9d\xd08\xf2\xb9\x9d\xb4\xcc:\x15" +
	"9\xb8\xf3\x8b\xf6\xf7&\xce\xdd~\xe1\x82\xfa\xb0q\xc8" +
	"V\x96]o\xd9I\xd1E\xf3\x14\x7f\x99Em\xbf\xa9" +
	"\xab\x82\xde\xb2\x0b$\xba-\x04\xf7\x93\x13\xd2*(\x16" +
	"x2\xd1'\xaaNVQ\xa8\x9e\xfb_{\xe3\xf8;" +
	"\x9b\xf1\x87\xc6\xdf\x87\xbb!\xca\xdf8\xcd0\xff9m" +
	"\x83\x06y-p[-\x13\x8eYD\xd284<a" +
	"\xfdo\x08\x05\xfe#Y}z\xc9*\xa3D\xaf\x0a\x1a" +
	"\xa7\xe3\x8eK\xbd9j\xf7\x13\x16f\xf1\xd5T\xf0\xdd" +
	"\xa8u\xff\x0d\x00\x00\xff\xffK6\xe7\xef"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_86ea47c297746539,
		Nodes: []uint64{
			0x80d5a7b782142e87,
			0x811d54ac7debc21e,
			0x81b8ffeeb01d76f7,
			0x8491dc2c2f94f1d1,
			0x8890f17a143c6896,
			0x8ac5cfb21988c168,
			0x8b008567c93f7c7d,
			0x95cdc661a6600137,
			0x98e203c76f83d365,
			0x990bdcf2be83b604,
			0xa363d226e178debd,
			0xa4da01d10b3b6acd,
			0xab56969492d293b3,
			0xaec9e089e87f1599,
			0xb1760f65e652e737,
			0xb3e73f8c19afd787,
			0xb42137d4b8ba3ef6,
			0xb492838c7fed50b0,
			0xb4f16ea3144d85a6,
			0xb599bbd2f1465f9c,
			0xb87956e2953771db,
			0xba0c11cf818d29fd,
			0xbd3e199eb9b03758,
			0xc0ff4a277ca4be0a,
			0xc1092d6c4c110e29,
			0xc5cb65e585742338,
			0xc5f724bd00c2f628,
			0xc75b5ef2e9b05c2d,
			0xcb20e21466098705,
			0xcd05962719bf7ec8,
			0xcdff1b0306ea58cf,
			0xce5b0091fd9acb21,
			0xcf0f425c8bd69fa2,
			0xd11f8d1479e2f010,
			0xd1edcf54f4edf638,
			0xd2d587c796186e8b,
			0xd594e64f6b5f461d,
			0xd599d06dc405571a,
			0xd8af9210839bc071,
			0xd90939a58e404ff8,
			0xd9ed2c1c754d683e,
			0xdbfe301c0ddefe4e,
			0xdd1e0c7c94dc4211,
			0xde7576c640b5ad18,
			0xe3512e62df901c18,
			0xe4d6d0d9ae1553da,
			0xe68d439455fd9cce,
			0xef3e4198d3e35596,
			0xf03d8fd1bbe75519,
			0xf0c41d021228d929,
			0xf206f12e39ab7f9b,
			0xffac0fa5c7156a5d,
		},
		Compressed: true,
	})
}
