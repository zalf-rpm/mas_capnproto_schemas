// Code generated by capnpc-go. DO NOT EDIT.

package yieldstat

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type ResultId uint16

// ResultId_TypeID is the unique identifier for the type ResultId.
const ResultId_TypeID = 0xcfe218c48d227e0d

// Values of ResultId.
const (
	ResultId_primaryYield               ResultId = 0
	ResultId_dryMatter                  ResultId = 1
	ResultId_carbonInAboveGroundBiomass ResultId = 2
	ResultId_sumFertilizer              ResultId = 3
	ResultId_sumIrrigation              ResultId = 4
	ResultId_primaryYieldCU             ResultId = 5
)

// String returns the enum's constant name.
func (c ResultId) String() string {
	switch c {
	case ResultId_primaryYield:
		return "primaryYield"
	case ResultId_dryMatter:
		return "dryMatter"
	case ResultId_carbonInAboveGroundBiomass:
		return "carbonInAboveGroundBiomass"
	case ResultId_sumFertilizer:
		return "sumFertilizer"
	case ResultId_sumIrrigation:
		return "sumIrrigation"
	case ResultId_primaryYieldCU:
		return "primaryYieldCU"

	default:
		return ""
	}
}

// ResultIdFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultIdFromString(c string) ResultId {
	switch c {
	case "primaryYield":
		return ResultId_primaryYield
	case "dryMatter":
		return ResultId_dryMatter
	case "carbonInAboveGroundBiomass":
		return ResultId_carbonInAboveGroundBiomass
	case "sumFertilizer":
		return ResultId_sumFertilizer
	case "sumIrrigation":
		return ResultId_sumIrrigation
	case "primaryYieldCU":
		return ResultId_primaryYieldCU

	default:
		return 0
	}
}

type ResultId_List = capnp.EnumList[ResultId]

func NewResultId_List(s *capnp.Segment, sz int32) (ResultId_List, error) {
	return capnp.NewEnumList[ResultId](s, sz)
}

type RestInput capnp.Struct

// RestInput_TypeID is the unique identifier for the type RestInput.
const RestInput_TypeID = 0xa47f8d65869200af

func NewRestInput(s *capnp.Segment) (RestInput, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RestInput(st), err
}

func NewRootRestInput(s *capnp.Segment) (RestInput, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RestInput(st), err
}

func ReadRootRestInput(msg *capnp.Message) (RestInput, error) {
	root, err := msg.Root()
	return RestInput(root.Struct()), err
}

func (s RestInput) String() string {
	str, _ := text.Marshal(0xa47f8d65869200af, capnp.Struct(s))
	return str
}

func (s RestInput) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RestInput) DecodeFromPtr(p capnp.Ptr) RestInput {
	return RestInput(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RestInput) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RestInput) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RestInput) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RestInput) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RestInput) UseDevTrend() bool {
	return capnp.Struct(s).Bit(0)
}

func (s RestInput) SetUseDevTrend(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s RestInput) UseCO2Increase() bool {
	return !capnp.Struct(s).Bit(1)
}

func (s RestInput) SetUseCO2Increase(v bool) {
	capnp.Struct(s).SetBit(1, !v)
}

func (s RestInput) Dgm() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s RestInput) SetDgm(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s RestInput) Hft() uint8 {
	return capnp.Struct(s).Uint8(1)
}

func (s RestInput) SetHft(v uint8) {
	capnp.Struct(s).SetUint8(1, v)
}

func (s RestInput) Nft() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s RestInput) SetNft(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s RestInput) Sft() uint8 {
	return capnp.Struct(s).Uint8(3)
}

func (s RestInput) SetSft(v uint8) {
	capnp.Struct(s).SetUint8(3, v)
}

func (s RestInput) Slope() uint8 {
	return capnp.Struct(s).Uint8(4)
}

func (s RestInput) SetSlope(v uint8) {
	capnp.Struct(s).SetUint8(4, v)
}

func (s RestInput) Steino() uint8 {
	return capnp.Struct(s).Uint8(5)
}

func (s RestInput) SetSteino(v uint8) {
	capnp.Struct(s).SetUint8(5, v)
}

func (s RestInput) Az() uint8 {
	return capnp.Struct(s).Uint8(6)
}

func (s RestInput) SetAz(v uint8) {
	capnp.Struct(s).SetUint8(6, v)
}

func (s RestInput) Klz() uint8 {
	return capnp.Struct(s).Uint8(7)
}

func (s RestInput) SetKlz(v uint8) {
	capnp.Struct(s).SetUint8(7, v)
}

func (s RestInput) Stt() uint8 {
	return capnp.Struct(s).Uint8(16)
}

func (s RestInput) SetStt(v uint8) {
	capnp.Struct(s).SetUint8(16, v)
}

func (s RestInput) GermanFederalStates() int8 {
	return int8(capnp.Struct(s).Uint8(17) ^ 255)
}

func (s RestInput) SetGermanFederalStates(v int8) {
	capnp.Struct(s).SetUint8(17, uint8(v)^255)
}

func (s RestInput) GetDryYearWaterNeed() bool {
	return capnp.Struct(s).Bit(2)
}

func (s RestInput) SetGetDryYearWaterNeed(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

// RestInput_List is a list of RestInput.
type RestInput_List = capnp.StructList[RestInput]

// NewRestInput creates a new list of RestInput.
func NewRestInput_List(s *capnp.Segment, sz int32) (RestInput_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[RestInput](l), err
}

// RestInput_Future is a wrapper for a RestInput promised by a client call.
type RestInput_Future struct{ *capnp.Future }

func (f RestInput_Future) Struct() (RestInput, error) {
	p, err := f.Future.Ptr()
	return RestInput(p.Struct()), err
}

type Result capnp.Struct

// Result_TypeID is the unique identifier for the type Result.
const Result_TypeID = 0x8db55634a0e7d054

func NewResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result(st), err
}

func NewRootResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result(st), err
}

func ReadRootResult(msg *capnp.Message) (Result, error) {
	root, err := msg.Root()
	return Result(root.Struct()), err
}

func (s Result) String() string {
	str, _ := text.Marshal(0x8db55634a0e7d054, capnp.Struct(s))
	return str
}

func (s Result) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Result) DecodeFromPtr(p capnp.Ptr) Result {
	return Result(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Result) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Result) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Result) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Result) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Result) Cultivar() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Result) HasCultivar() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Result) CultivarBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Result) SetCultivar(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Result) IsNoData() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Result) SetIsNoData(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Result) Values() (Result_ResultToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Result_ResultToValue_List(p.List()), err
}

func (s Result) HasValues() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Result) SetValues(v Result_ResultToValue_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Result_ResultToValue_List, preferring placement in s's segment.
func (s Result) NewValues(n int32) (Result_ResultToValue_List, error) {
	l, err := NewResult_ResultToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Result_ResultToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Result_List is a list of Result.
type Result_List = capnp.StructList[Result]

// NewResult creates a new list of Result.
func NewResult_List(s *capnp.Segment, sz int32) (Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Result](l), err
}

// Result_Future is a wrapper for a Result promised by a client call.
type Result_Future struct{ *capnp.Future }

func (f Result_Future) Struct() (Result, error) {
	p, err := f.Future.Ptr()
	return Result(p.Struct()), err
}

type Result_ResultToValue capnp.Struct

// Result_ResultToValue_TypeID is the unique identifier for the type Result_ResultToValue.
const Result_ResultToValue_TypeID = 0x8d365bd4f0136fc0

func NewResult_ResultToValue(s *capnp.Segment) (Result_ResultToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Result_ResultToValue(st), err
}

func NewRootResult_ResultToValue(s *capnp.Segment) (Result_ResultToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Result_ResultToValue(st), err
}

func ReadRootResult_ResultToValue(msg *capnp.Message) (Result_ResultToValue, error) {
	root, err := msg.Root()
	return Result_ResultToValue(root.Struct()), err
}

func (s Result_ResultToValue) String() string {
	str, _ := text.Marshal(0x8d365bd4f0136fc0, capnp.Struct(s))
	return str
}

func (s Result_ResultToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Result_ResultToValue) DecodeFromPtr(p capnp.Ptr) Result_ResultToValue {
	return Result_ResultToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Result_ResultToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Result_ResultToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Result_ResultToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Result_ResultToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Result_ResultToValue) Id() ResultId {
	return ResultId(capnp.Struct(s).Uint16(0))
}

func (s Result_ResultToValue) SetId(v ResultId) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Result_ResultToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Result_ResultToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Result_ResultToValue_List is a list of Result_ResultToValue.
type Result_ResultToValue_List = capnp.StructList[Result_ResultToValue]

// NewResult_ResultToValue creates a new list of Result_ResultToValue.
func NewResult_ResultToValue_List(s *capnp.Segment, sz int32) (Result_ResultToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Result_ResultToValue](l), err
}

// Result_ResultToValue_Future is a wrapper for a Result_ResultToValue promised by a client call.
type Result_ResultToValue_Future struct{ *capnp.Future }

func (f Result_ResultToValue_Future) Struct() (Result_ResultToValue, error) {
	p, err := f.Future.Ptr()
	return Result_ResultToValue(p.Struct()), err
}

type Output capnp.Struct

// Output_TypeID is the unique identifier for the type Output.
const Output_TypeID = 0x932a681f81b4be19

func NewOutput(s *capnp.Segment) (Output, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Output(st), err
}

func NewRootOutput(s *capnp.Segment) (Output, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Output(st), err
}

func ReadRootOutput(msg *capnp.Message) (Output, error) {
	root, err := msg.Root()
	return Output(root.Struct()), err
}

func (s Output) String() string {
	str, _ := text.Marshal(0x932a681f81b4be19, capnp.Struct(s))
	return str
}

func (s Output) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Output) DecodeFromPtr(p capnp.Ptr) Output {
	return Output(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Output) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Output) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Output) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Output) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Output) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Output) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Output) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Output) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Output) RunFailed() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Output) SetRunFailed(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Output) Reason() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Output) HasReason() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Output) ReasonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Output) SetReason(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Output) Results() (Output_YearToResult_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Output_YearToResult_List(p.List()), err
}

func (s Output) HasResults() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Output) SetResults(v Output_YearToResult_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewResults sets the results field to a newly
// allocated Output_YearToResult_List, preferring placement in s's segment.
func (s Output) NewResults(n int32) (Output_YearToResult_List, error) {
	l, err := NewOutput_YearToResult_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Output_YearToResult_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Output_List is a list of Output.
type Output_List = capnp.StructList[Output]

// NewOutput creates a new list of Output.
func NewOutput_List(s *capnp.Segment, sz int32) (Output_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Output](l), err
}

// Output_Future is a wrapper for a Output promised by a client call.
type Output_Future struct{ *capnp.Future }

func (f Output_Future) Struct() (Output, error) {
	p, err := f.Future.Ptr()
	return Output(p.Struct()), err
}

type Output_YearToResult capnp.Struct

// Output_YearToResult_TypeID is the unique identifier for the type Output_YearToResult.
const Output_YearToResult_TypeID = 0xa008c533888c3a5e

func NewOutput_YearToResult(s *capnp.Segment) (Output_YearToResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Output_YearToResult(st), err
}

func NewRootOutput_YearToResult(s *capnp.Segment) (Output_YearToResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Output_YearToResult(st), err
}

func ReadRootOutput_YearToResult(msg *capnp.Message) (Output_YearToResult, error) {
	root, err := msg.Root()
	return Output_YearToResult(root.Struct()), err
}

func (s Output_YearToResult) String() string {
	str, _ := text.Marshal(0xa008c533888c3a5e, capnp.Struct(s))
	return str
}

func (s Output_YearToResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Output_YearToResult) DecodeFromPtr(p capnp.Ptr) Output_YearToResult {
	return Output_YearToResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Output_YearToResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Output_YearToResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Output_YearToResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Output_YearToResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Output_YearToResult) Year() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Output_YearToResult) SetYear(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Output_YearToResult) Result() (Result, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Result(p.Struct()), err
}

func (s Output_YearToResult) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Output_YearToResult) SetResult(v Result) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated Result struct, preferring placement in s's segment.
func (s Output_YearToResult) NewResult() (Result, error) {
	ss, err := NewResult(capnp.Struct(s).Segment())
	if err != nil {
		return Result{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Output_YearToResult_List is a list of Output_YearToResult.
type Output_YearToResult_List = capnp.StructList[Output_YearToResult]

// NewOutput_YearToResult creates a new list of Output_YearToResult.
func NewOutput_YearToResult_List(s *capnp.Segment, sz int32) (Output_YearToResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Output_YearToResult](l), err
}

// Output_YearToResult_Future is a wrapper for a Output_YearToResult promised by a client call.
type Output_YearToResult_Future struct{ *capnp.Future }

func (f Output_YearToResult_Future) Struct() (Output_YearToResult, error) {
	p, err := f.Future.Ptr()
	return Output_YearToResult(p.Struct()), err
}
func (p Output_YearToResult_Future) Result() Result_Future {
	return Result_Future{Future: p.Future.Field(0, nil)}
}

const schema_b80c8fd14e523f9b = "x\xdal\x93Oh\x1cU\x1c\xc7\x7f\xdf\xf7fw\x92" +
	"f\xeb\xee\xf0\x06Z{Y\x0c\x8a\x1aHH\xd3($" +
	"P\xd661\x12\xb1I&\x9bF\x83U\x98d\x9f\xd9" +
	"\xa9\xb33\xdb73i7T\xdbB\x95\x14\x1a\xb4Z" +
	"\x11\x11!\x8a\xde\x84^\x14\xa4\x07\xf1\xa0\x17/\xfe\xc1" +
	"\x93\x17\xc1K\xaf^=\xc8\xc8\x9bew\x96\xd0\xd3\xcc" +
	"|\xde\xef\xfd~\xdf\xef\x9b\xef\x9b\\f\xcf\x19'\x8f" +
	">i\x10s&\x0b\xc5\xf4\x87P\xfc\xf3\xc7\xab\xcf\xee" +
	"\x93s\x0c,]\xfb\xf5\xc1\xc1\xf4\xfa\xb7\xfbd\x98D" +
	"\xa7\xfe\xc5\x18\xc403\x89D\x81]&\xe4\xcbN\x05" +
	"H?\xad\xad.\xfd\xf6^\xe9;*d%.\xbb/" +
	"<v\x8cH$\xec\x1e!}\xf4\xfbonT\x9bc" +
	"\x1f\x1e.\xe6\xba\xf8\x09~_\x8cs]<\xc3\x1f\x10" +
	"\xd2\xd7go\xef\x9d\xfai\xe8@\xcb\x18\xd8Z\x80\xd6" +
	"\xf1\x981\x0aqRK\x12\xe3\xc6e\xc2\x7f\xf7>x" +
	"W\xee_\xfb\xd2\xa9\x80\xe7\x8d\xb3\xf5[\xc6\xef\xe2\xa3" +
	"L\xfc\x1d\xe3/FH\x8f\xbe=\xba\xff\xe3\xf1\xbf\x7f" +
	"!\xab\xc2\xf2Z\x82\xf8\xc4\xfcY|e\xea=\x9f\x9b" +
	"\x1f\xd3\\\xda\xf1\xa4\xdf\x88b\x97\xc7\x13[n;h" +
	"\xcf\xae\xca(\xf1\xe3\x89\xeec-\\/\xbb~\"W" +
	"\x00g\x88\x1bD\x06\x88\xac\xa7O\x109\x8fs8\x93" +
	"\x0c\x16`C\xc3\xf1)\"\xe7)\x0eg\x9a\x81{\x0d" +
	"\x94s\x0d\x04\x94\x09\xd5\x1d\xdd\x09#\xc40B\xe8\x0f" +
	"Fop\xad;\xd21\x80\xfc\xf7XPiO\x0aU" +
	"\xd7u\x07\xa7\xd4\x17\xf2\xfc\x8bD\xce<\x87\xb3\xc2\x90" +
	"\xe9\x00\xacs\x9a\xbd\xc4\xe1\xbc\xc2`1\xd8`D\xd6" +
	"\xf9Y\"g\x85\xc3\xf1\x19\xd2\xad\xc4\x8f\xbd\x1dW\x11" +
	"\x11J\xc4P\"\xa4^\xb4\x14\xce\xbb\xb1\xab\x19\x88\x01" +
	"\x84Z\xa67\xc2#\x84\x15\x0eTrQ\x04\x0d\x1f\xe2" +
	"`9\x89\xdbI\xd7A\xff\xcfZ\xb8\x98nHW\xad" +
	"\x85\xab\x92\xca\x99\xc3J\xdf\x80\xabO\xf2\x02\x87\xd3\xcc" +
	"\x0d\xc8U\"\xa7\xc1\xe1\xb4\x07\x0c\xb4\xb4\x81&\x87\x13" +
	"3X\x9c\xd9\xe0D\xd6\xa5\xb3D\x8e\xcf\xe1\xecu\x8f" +
	"\xbcgF%\xc1\x82\xeb\xf9\x92\xd0\xe8\x9bQ\xd2\x8d\xc2" +
	"\xa0WrMeg:`\xae\xaf\xf7\x90\xb9~.\xba" +
	"\xde&zV\"3\xf1\xe3C\xb1\x18\xcbc\xd1O\xc5" +
	"l\x9e\x8arG\xba\x0a\x9c\x18x&H+@%\xbf" +
	"]\x04T\x06&\xb3\x81D\xc6\x8bA;A6o\xba" +
	";\x0f\x10\xafa\x93\xa8~\x01\x1c\xf5&zI\x04\x84" +
	"\xc4.Q\xbd\xa1y\x1b\xbd3\x04D\x0b\xa3D\xf5\xa6" +
	"\xe6\xb1\xe6\x1c68 .e\xdc\xd7\xfc\x8a\xe6\x06\xb3" +
	"a\x00\"\xc9x[\xf3\xab\x9a\x17\xb8\x8d\x02 :\x19" +
	"\x8f5\xbf\xaey\xd1\xb0Q\x04\xc4[\x98\"\xaa_\xd1" +
	"\xfc\xa6\xe6f\xc1\x86\x09\x88\x1b\x98%\xaa_\xd5|O" +
	"\xf3\xa1\xa2\x8d!@\xbc\x83\x13D\xf5\xeb\x9a\xdf\xd6|" +
	"\xd8\xb41\x0c\x88[Y\xff\x9b\x9a\xbf\xaf\xf9\x91\x8a\x8d" +
	"#\x80\xd8\xcf\xf8\x9e\xe6w5\x1f\xb1l\x8c\x00\xe2\x0e" +
	"\xbe \xaa\xdf\xd5\xfc@\xf3\x12\xb3Q\x02\xc4g\x19?" +
	"\xd0\xfck0\xa4I$\xe7\xe5\xce\x9a\"S\x06\xfd`" +
	"h:\xb7<\xb5\x18PmKgD\xea\x85\x82^1" +
	"\x1b\xdb\xad\xdem5\x9bo\xc4(\x12C\x91`\x06\x03" +
	"\xefQ\xfe^\x8d\xfc\xb0-{_\xb5(\x96^\x10\xf6" +
	">\xb9\xbb\xdb\xdf\xf3\xa6\x9f\xbfGq\x7f\x7f\xba-U" +
	"\xcb\x0d\x16$\x1aR\xb9~=v\xcdXF`\xc4\x0a" +
	",\xcd\x96\xe3y\xd5\xd9\x90p\xd5\xcbn,\xd5\x92)" +
	"en\xe3a\xa9I\xfcx\xb1A\xa4Ss<\xbbE" +
	"g.\xea\x90Y\xa7W\x89\xc0\xac\x99?\x89\xc0\xad\xd3" +
	"\x8a\x08\x865\xa3\x1f\x05\xeb\x99]\xa2\xb4\xad\xbc\x96\xab" +
	":\x1bT\xd6]\xd3\x86\xea\x9cs\xe3X\x12T\xba\xe5" +
	"\xaa\xcd0X\x0c\xd8\x99\xcdpG\xbe\xa0\xc2$h\x9c" +
	"\xf5\xc2\x96\xcb\xa3(\x8d\x92\xd6\x82T\xb1GU\xdf\xdb" +
	"\x95J\x7f/*\xe5mS\xd5\x8d\xbd0\xc8\xfb\xd6t" +
	"\xdf\xb9\xf3\xff\x07\x00\x00\xff\xff\xbe\x8cy\x8d"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b80c8fd14e523f9b,
		Nodes: []uint64{
			0x8d365bd4f0136fc0,
			0x8db55634a0e7d054,
			0x932a681f81b4be19,
			0xa008c533888c3a5e,
			0xa47f8d65869200af,
			0xcfe218c48d227e0d,
		},
		Compressed: true,
	})
}
